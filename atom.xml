<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kovacs</title>
  
  <subtitle>The secret integer between three and four</subtitle>
  <link href="https://mritd.com/atom.xml" rel="self"/>
  
  <link href="https://mritd.com/"/>
  <updated>2024-01-16T08:15:00.000Z</updated>
  <id>https://mritd.com/</id>
  
  <author>
    <name>Kovacs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网易 UU + OpenWrt 单臂路由(旁路由)配置</title>
    <link href="https://mritd.com/2024/01/16/openwrt-netease-uu-setup/"/>
    <id>https://mritd.com/2024/01/16/openwrt-netease-uu-setup/</id>
    <published>2024-01-16T08:15:00.000Z</published>
    <updated>2024-01-16T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、系统选择"><a href="#一、系统选择" class="headerlink" title="一、系统选择"></a>一、系统选择</h2><p>目前网易 UU 对于路由器系统只支持合作伙伴路由器、梅林固件以及开源的 OpenWrt 系统, “合作伙伴” 已经被我放弃了, 梅林固件的路由器也没有… 所以只能选择 OpenWrt 了; 不过需要注意的是官方标注只支持 <code>OpenWrt 19.X</code> 和 <code>OpenWrt 21.X</code> 系统, 所以本文将采用 21.X 系统作为安装演示.</p><h2 id="二、OpenWrt-安装"><a href="#二、OpenWrt-安装" class="headerlink" title="二、OpenWrt 安装"></a>二、OpenWrt 安装</h2><blockquote><p>目前我家里只有一台 T350 服务器, 所以上层系统选择的是 ESXi, 接下来本文仅使用 ESXi 作为演示, PVE 理论上原理相同所以不做过多演示.</p></blockquote><p>首先从<a href="https://downloads.openwrt.org/releases/21.02.7/targets/x86/64/">官网下载</a> X86 版本的 OpenWrt 镜像, 这里不选择各路大神的第三方版本原因是: <strong>我仅需要一个 UU 加速器, 不需要过多的其他应用集成</strong>, 且 OpenWrt 资源占用非常小, 有其他需求我会考虑再开一个虚拟机.</p><p><img src="https://cdn.oss.link/markdown/2iG9V9.png"></p><p>接下来需要创建一个虚拟机, 虚拟机我的规划如下:</p><ul><li>1、内存 256MB 足以, 毕竟只有一个 UU 加速器运行</li><li>2、需要两个网卡, 一个进一个出, 尽量模拟真实路由器环境, 防止出现意外的兼容性问题</li><li>3、暂时不需要添加硬盘, 稍后会将 OpenWrt 镜像转换成启动硬盘</li><li>3、使用 EFI 引导, 但需要关闭安全引导选项, 否则无法开机</li></ul><p><img src="https://cdn.oss.link/markdown/iU9XF4.png"></p><p><img src="https://cdn.oss.link/markdown/2ozT4C.png"></p><p><img src="https://cdn.oss.link/markdown/BvZRek.png"></p><p>虚拟机创建好以后, 需要将 OpenWrt 的 img 格式镜像转换成 vmdk, 这里借助 <a href="https://www.starwindsoftware.com/starwind-v2v-converter">StarWind V2V Converter</a> 工具(免费)进行转换, <a href="https://www.starwindsoftware.com/starwind-v2v-converter">StarWind V2V Converter</a> 可以直接将转换好的镜像设置到 ESXi 虚拟机中:</p><p><img src="https://cdn.oss.link/markdown/olByz0.png"></p><p><img src="https://cdn.oss.link/markdown/3161VI.png"></p><p><img src="https://cdn.oss.link/markdown/6KcgcB.png"></p><p><img src="https://cdn.oss.link/markdown/RZHQC2.png"></p><p><img src="https://cdn.oss.link/markdown/PcAqqk.png"></p><p><img src="https://cdn.oss.link/markdown/idnPio.png"></p><p>到此虚拟机安装部分已经完成, 打开 ESXi 管理界面应该能看到虚拟机中已经存在转换好的磁盘了.</p><h2 id="三、OpenWrt-配置"><a href="#三、OpenWrt-配置" class="headerlink" title="三、OpenWrt 配置"></a>三、OpenWrt 配置</h2><blockquote><p>在安装 UU 加速器之前, 我们需要先对 OpenWrt 做一些基础配置, 否则可能会导致安装失败.</p></blockquote><p>虚拟机开机后, 系统启动成功日志会停在特定位置, 此时按下回车即可进入终端; 此时第一件事需要做的就是关闭防火墙, 因为仅在内网作为加速器使用完全不需要考虑安全问题:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/init.d/firewall stop<br>/etc/init.d/firewall <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p>接下来需要编辑网卡配置, <strong>需要将 br-lan 的 IP 调整到与上级路由一个 IP 段内, 最简单的做法就是直接让 LAN 网卡使用 DHCP:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/config/network<br><br><span class="hljs-comment"># 以下为修改后的内容</span><br>config interface <span class="hljs-string">&#x27;loopback&#x27;</span><br>        option device <span class="hljs-string">&#x27;lo&#x27;</span><br>        option proto <span class="hljs-string">&#x27;static&#x27;</span><br>        option ipaddr <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>        option netmask <span class="hljs-string">&#x27;255.0.0.0&#x27;</span><br><br>config device<br>        option name <span class="hljs-string">&#x27;br-lan&#x27;</span><br>        option <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;bridge&#x27;</span><br>        list ports <span class="hljs-string">&#x27;eth0&#x27;</span><br><br>config interface <span class="hljs-string">&#x27;lan&#x27;</span><br>        option device <span class="hljs-string">&#x27;br-lan&#x27;</span><br>        option proto <span class="hljs-string">&#x27;dhcp&#x27;</span><br>        option defaultroute <span class="hljs-string">&#x27;0&#x27;</span><br><br>config interface <span class="hljs-string">&#x27;wan&#x27;</span><br>        option device <span class="hljs-string">&#x27;eth1&#x27;</span><br>        option proto <span class="hljs-string">&#x27;dhcp&#x27;</span><br></code></pre></td></tr></table></figure><p>修改完网络以后, 还需要关闭 <code>br-lan</code> 网桥上的 DHCP 广播; 因为 OpenWrt 毕竟是一个路由器系统, 默认 dnsmasq 会在局域网开启 DHCP Server, <strong>如果不关闭很可能它会抢答你内网的 DHCP 请求导致其他设备无法获取到正确的 IP 地址:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/config/dhcp<br><br><span class="hljs-comment"># 以下为修改后的内容</span><br>config dnsmasq<br>        option domainneeded <span class="hljs-string">&#x27;1&#x27;</span><br>        option boguspriv <span class="hljs-string">&#x27;1&#x27;</span><br>        option filterwin2k <span class="hljs-string">&#x27;0&#x27;</span><br>        option localise_queries <span class="hljs-string">&#x27;1&#x27;</span><br>        option rebind_protection <span class="hljs-string">&#x27;1&#x27;</span><br>        option rebind_localhost <span class="hljs-string">&#x27;1&#x27;</span><br>        option <span class="hljs-built_in">local</span> <span class="hljs-string">&#x27;/lan/&#x27;</span><br>        option domain <span class="hljs-string">&#x27;lan&#x27;</span><br>        option expandhosts <span class="hljs-string">&#x27;1&#x27;</span><br>        option nonegcache <span class="hljs-string">&#x27;0&#x27;</span><br>        option authoritative <span class="hljs-string">&#x27;1&#x27;</span><br>        option readethers <span class="hljs-string">&#x27;1&#x27;</span><br>        option leasefile <span class="hljs-string">&#x27;/tmp/dhcp.leases&#x27;</span><br>        option resolvfile <span class="hljs-string">&#x27;/tmp/resolv.conf.d/resolv.conf.auto&#x27;</span><br>        option nonwildcard <span class="hljs-string">&#x27;1&#x27;</span><br>        option localservice <span class="hljs-string">&#x27;1&#x27;</span><br>        option ednspacket_max <span class="hljs-string">&#x27;1232&#x27;</span><br><br>config dhcp <span class="hljs-string">&#x27;lan&#x27;</span><br>        option interface <span class="hljs-string">&#x27;lan&#x27;</span><br>        option ignore <span class="hljs-string">&#x27;1&#x27;</span><br><br>config dhcp <span class="hljs-string">&#x27;wan&#x27;</span><br>        option interface <span class="hljs-string">&#x27;wan&#x27;</span><br>        option ignore <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>网络修改完成后, 调整 OpenWrt 镜像源, 安装 <code>kmod-tun</code> 和 <code>open-vm-tools</code>(PVE 用户替换成 <code>qemu-ga</code>):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换到清华大源</span><br>sed -i <span class="hljs-string">&#x27;s@downloads.openwrt.org@mirrors.tuna.tsinghua.edu.cn/openwrt@g&#x27;</span> /etc/opkg/distfeeds.conf<br><br><span class="hljs-comment"># 安装软件包</span><br>opkg update &amp;&amp; opkg install kmod-tun open-vm-tools<br></code></pre></td></tr></table></figure><p>全部修改完后, 重启即可.</p><h2 id="四、安装-UU-加速器"><a href="#四、安装-UU-加速器" class="headerlink" title="四、安装 UU 加速器"></a>四、安装 UU 加速器</h2><p>其实 OpenWrt 配置好以后安装 UU 加速器就简单了, 直接执行一下<a href="https://router.uu.163.com/app/html/online/baike_share.html?baike_id=5f963c9304c215e129ca40e8">官方文档</a>的脚本即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://uu.gdl.netease.com/uuplugin-script/20231117102400/install.sh<br><br>/bin/sh install.sh openwrt $(<span class="hljs-built_in">uname</span> -m)<br></code></pre></td></tr></table></figure><p>安装完成后可看到 SN 码, 如果 SN 为空则证明安装步骤有问题, 请仔细阅读文章重新安装.</p><h2 id="五、激活和配置"><a href="#五、激活和配置" class="headerlink" title="五、激活和配置"></a>五、激活和配置</h2><p>插件安装完成后, 手机上需要<strong>将网关设置为路由器 <code>br-lan</code> 的 IP</strong>, 然后打开 APP 添加路由器即可; 大多数人失败都是因为 OpenWrt 配置错误导致提示 “路由器型号不支持”, 如果出现了上述情况请重新仔细阅读文章, 尤其是有关 <code>br-lan</code> 的配置部分(其他文章中的添加防火墙规则之类的按本文教程不需要):</p><p><img src="https://cdn.oss.link/markdown/CeqzU1.png"></p><p><img src="https://cdn.oss.link/markdown/mwxvfv.png"></p><p><img src="https://cdn.oss.link/markdown/ebtVFG.png"></p><h2 id="六、更懒一点"><a href="#六、更懒一点" class="headerlink" title="六、更懒一点"></a>六、更懒一点</h2><p>为了发挥 “懒惰使人进步” 的思想, 我在 <a href="https://github.com/mritd/NetEaseUU">GitHub</a> 上专门通过 CI Build 好了一个专用版本, 只需要下载镜像启动即可完成全自动配置, 做到激活一下就直接用.</p>]]></content>
    
    
    <summary type="html">马上要过年了, 决定把我已经吃灰许久的 PS5 拿出来玩玩, 不过迫于苦逼的网络环境, 有些游戏必须上加速器才能玩; 以前家里用的华硕主路由可以直接设置一下网易 UU 就行, 今年换了 RouertOS 没办法只能研究一下单臂路由方案了.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    <category term="OpenWrt" scheme="https://mritd.com/categories/linux/openwrt/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="OpenWrt" scheme="https://mritd.com/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Binlog 数据恢复</title>
    <link href="https://mritd.com/2024/01/11/mysql-binlog-restore/"/>
    <id>https://mritd.com/2024/01/11/mysql-binlog-restore/</id>
    <published>2024-01-11T07:20:00.000Z</published>
    <updated>2024-01-11T07:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、恢复原理"><a href="#一、恢复原理" class="headerlink" title="一、恢复原理"></a>一、恢复原理</h2><blockquote><p>发现很多网上的教程都是不完整的, 整个流程中完全不符合实际生产环境, 所以这里做一下简要说明.</p></blockquote><h3 id="1-1、Binlog-是什么"><a href="#1-1、Binlog-是什么" class="headerlink" title="1.1、Binlog 是什么"></a>1.1、Binlog 是什么</h3><blockquote><p>MySQL Binary Log (BinLog) is a record of all changes made to a MySQL database. It serves as an audit trail of changes and can be used for various purposes, such as data recovery, replication, and database monitoring. BinLogs are created by the MySQL server and contain a record of all SQL statements that modify data.</p></blockquote><p>简而言之, Binlog 是 MySQL 内部记录数据修改的 “日志”, <strong>通过 Binlog 我们可以重放以前的执行流程.</strong></p><h3 id="1-2、Binlog-恢复前提"><a href="#1-2、Binlog-恢复前提" class="headerlink" title="1.2、Binlog 恢复前提"></a>1.2、Binlog 恢复前提</h3><p>想要使用 MySQL Binlog 进行恢复数据, 大致需要两个前提:</p><ul><li>1、你要有 Binlog, 也就是说 MySQL 服务器必须已经开启了 Binlog</li><li>2、你需要有一个被删除时间点之前的完整备份</li></ul><p>网上很多 Binlog 恢复都不谈核心问题, 核心问题就是你想<strong>做恢复之前必须有一份删除时间点之前的完整数据库备份, 因为本质上恢复流程就是重放所有 SQL 执行, 只不过只重放到被删之前而已.</strong></p><h2 id="二、数据库配置"><a href="#二、数据库配置" class="headerlink" title="二、数据库配置"></a>二、数据库配置</h2><p>对于 MySQL 8.0.x 可以使用以下配置让 MySQL 开启 Binlog 记录, 样例中有些配置不是必须的, 请自行参考引用文章:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 开启 binlog</span><br><span class="hljs-attr">log_bin</span>=/data/mysql/binlogs/mysql-bin<br><span class="hljs-comment"># 作为从库时，同步信息依然写入 binlog，方便链式同步</span><br><span class="hljs-attr">log_slave_updates</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 每 n 次事务 binlog 刷新到磁盘</span><br><span class="hljs-comment"># refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/</span><br><span class="hljs-attr">sync_binlog</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">innodb_flush_log_at_trx_commit</span>=<span class="hljs-number">2</span><br><span class="hljs-comment"># binlog 格式(refs https://zhuanlan.zhihu.com/p/33504555)</span><br><span class="hljs-attr">binlog_format</span>=row<br><span class="hljs-comment"># binlog 自动清理时间(20d)</span><br><span class="hljs-attr">binlog_expire_logs_seconds</span>=<span class="hljs-number">1728000</span><br><span class="hljs-comment"># 开启 relay-log，一般作为 slave 时开启</span><br><span class="hljs-attr">relay_log</span>=mysql-replay<br><span class="hljs-comment"># 每个 session binlog 缓存</span><br><span class="hljs-attr">binlog_cache_size</span>=<span class="hljs-number">4</span>M<br><span class="hljs-comment"># binlog 滚动大小</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">1024</span>M<br></code></pre></td></tr></table></figure><h2 id="三、测试环境准备"><a href="#三、测试环境准备" class="headerlink" title="三、测试环境准备"></a>三、测试环境准备</h2><blockquote><p>本测试中所有数据库版本为 8.0.35, 理论上 5.x 版本和更高版本思路应该一致.</p></blockquote><h3 id="3-1、测试环境"><a href="#3-1、测试环境" class="headerlink" title="3.1、测试环境"></a>3.1、测试环境</h3><p>为了测试数据恢复搭建了一套测试环境, 测试环境中所有节点统一采用 Percona MySQL 8.0.35, 备份工具采用 Percona XtraBackup 执行完整全量备份. 其中数据库安装系统为 Ubuntu 22.04, 一个主库一个从库, 另外恢复操作在单独的测试库进行; 全部节点如下:</p><ul><li>172.16.11.251(bintest1): 主库, 假设在此进行数据删除</li><li>172.16.11.252(bintest2): 从库, 实时同步主库数据, 生产环境负责定时备份</li><li>172.16.11.253(bintest3): 测试库, Binlog 数据恢复在此进行</li></ul><h3 id="3-2、测试数据"><a href="#3-2、测试数据" class="headerlink" title="3.2、测试数据"></a>3.2、测试数据</h3><p>测试时采用独立的数据库(<code>bintest</code>), 测试删除数据的表为 <code>userinfo</code>, 建表语句以及测试数据如下所示:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建数据库<br><span class="hljs-keyword">CREATE</span> DATABASE bintest <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci;<br><br># 创建测试表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> userinfo<br>(<br>    id          <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br>    name        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    idno        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    address     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    create_time DATETIME <span class="hljs-keyword">DEFAULT</span> NOW() <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> userinfo_pk<br>        <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><br># 插入测试数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;李瑞芳&#x27;</span>,<span class="hljs-string">&#x27;636920199802136451&#x27;</span>,<span class="hljs-string">&#x27;山西省临汾市顺靯路5032号疞嶥小区14单元2141室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;方方竣&#x27;</span>,<span class="hljs-string">&#x27;146324198806075248&#x27;</span>,<span class="hljs-string">&#x27;甘肃省天水市婄煄路3816号没卾小区17单元229室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;常明珠&#x27;</span>,<span class="hljs-string">&#x27;441439198304217281&#x27;</span>,<span class="hljs-string">&#x27;湖南省湘西土家族苗族自治州僄籓路3511号贪堕小区7单元2074室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;陆奕然&#x27;</span>,<span class="hljs-string">&#x27;629162201311010724&#x27;</span>,<span class="hljs-string">&#x27;广西壮族自治区玉林市秈瑨路704号鮗捤小区11单元2409室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;郝博雅&#x27;</span>,<span class="hljs-string">&#x27;138088201811117959&#x27;</span>,<span class="hljs-string">&#x27;河南省驻马店市紎筦路1380号攃摍小区13单元2363室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;夏婉君&#x27;</span>,<span class="hljs-string">&#x27;122839198907076789&#x27;</span>,<span class="hljs-string">&#x27;山西省忻州市聜鳁路24号詿臜小区12单元1961室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;邱新宜&#x27;</span>,<span class="hljs-string">&#x27;129192199311154795&#x27;</span>,<span class="hljs-string">&#x27;辽宁省葫芦岛市攣盗路7356号嚓檧小区14单元1326室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;吴东&#x27;</span>,<span class="hljs-string">&#x27;642398199908131195&#x27;</span>,<span class="hljs-string">&#x27;陕西省渭南市污岕路1288号鯭蕄小区10单元1252室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;尉迟妙己&#x27;</span>,<span class="hljs-string">&#x27;719031198308109317&#x27;</span>,<span class="hljs-string">&#x27;陕西省宝鸡市逳彄路1441号骘鼽小区11单元1128室&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userinfo(name,idno,address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;公孙昱晔&#x27;</span>,<span class="hljs-string">&#x27;372078200010227375&#x27;</span>,<span class="hljs-string">&#x27;福建省莆田市顪夹路4222号蝣宣小区2单元2046室&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-3、备份方式"><a href="#3-3、备份方式" class="headerlink" title="3.3、备份方式"></a>3.3、备份方式</h3><p>前面已经说过, Binlog 恢复先决条件是有一份完整的备份, 本文中备份和恢复会使用 xtrabackup, 假定定时任务会每小时执行一次完整备份; xtrabackup 工具请自行安装(需要与 MySQL 大版本匹配), 同时 xtrabackup 工具会使用 <code>qpress</code> 进行压缩和解压备份, 需要单独安装. 备份和恢复脚本如下:</p><p><strong>backup.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br>MYSQL_BACKUP_USER=<span class="hljs-string">&#x27;root&#x27;</span><br>BACKUP_DIR=<span class="hljs-string">&quot;/data/mysql_backup&quot;</span><br>BACKUP_NAME=full_$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y%m%d%H%M%S&quot;</span>)<br>MYSQL_CONFIG=<span class="hljs-string">&quot;/etc/mysql/mysql.conf.d/mysqld.cnf&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">cleanup</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Clean Backup Dir ---&gt; <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>&quot;</span><br>    <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span><br>&#125;<br><br><span class="hljs-built_in">trap</span> cleanup EXIT<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Running xtrabackup command to create backup files...&quot;</span><br>xtrabackup --backup \<br>    --dump-innodb-buffer-pool \<br>    --parallel=4 \<br>    --compress \<br>    --compress-threads=4 \<br>    --user=<span class="hljs-variable">$&#123;MYSQL_BACKUP_USER&#125;</span> \<br>    --target-dir=<span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Copy MySQL config [<span class="hljs-variable">$&#123;MYSQL_CONFIG&#125;</span>] to backup dir...&quot;</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;MYSQL_CONFIG&#125;</span> <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>/mysqld.cnf.xtra<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Generate backup information...&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(mysql -V)</span>&quot;</span> &gt; <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>/mysql_backup.info<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>/mysql_backup.info<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(xtrabackup -v)</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>/mysql_backup.info<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Pack backup files...&quot;</span><br>tar -C <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span> -cvf <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>.tar <span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;New Backup File ---&gt; <span class="hljs-variable">$&#123;BACKUP_DIR&#125;</span>/<span class="hljs-variable">$&#123;BACKUP_NAME&#125;</span>.tar&quot;</span><br></code></pre></td></tr></table></figure><p><strong>restore.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -ex<br><br>BACKUP_FILE=<span class="hljs-variable">$&#123;1:-&quot;&quot;&#125;</span><br><br><span class="hljs-keyword">if</span> [ ! <span class="hljs-variable">$&#123;BACKUP_FILE&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;BACKUP_FILE is empty.&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>tar -xvf <span class="hljs-variable">$&#123;BACKUP_FILE&#125;</span><br><br>BACKUP_FILE_DIR=<span class="hljs-variable">$&#123;BACKUP_FILE%\.tar&#125;</span><br><br>systemctl stop mysql<br><br><span class="hljs-comment"># clean old config and data file</span><br><span class="hljs-built_in">rm</span> -rf /etc/mysql/mysql.conf.d/mysqld.cnf /var/lib/mysql/ /var/lib/mysql-keyring/ /var/lib/mysql-files/ /var/log/mysql/ /data/mysql/<br><br><span class="hljs-comment"># create dir</span><br><span class="hljs-built_in">mkdir</span> -p /data/mysql/&#123;binlogs,mysql_data,mysql_tmp&#125; /var/lib/mysql/ /var/lib/mysql-keyring/ /var/lib/mysql-files/ /var/log/mysql/<br><br><span class="hljs-comment"># modify permissions</span><br><span class="hljs-built_in">chown</span> -R mysql:mysql /data/mysql /var/lib/mysql/ /var/lib/mysql-keyring/ /var/lib/mysql-files/ /var/log/mysql/<br><br><span class="hljs-comment"># copy config file</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;BACKUP_FILE_DIR&#125;</span>/mysqld.cnf.xtra /etc/mysql/mysql.conf.d/mysqld.cnf<br><br><span class="hljs-comment"># xtrabackup process</span><br>xtrabackup --decompress --parallel=4 --target-dir=<span class="hljs-variable">$&#123;BACKUP_FILE_DIR&#125;</span><br>xtrabackup --prepare --target-dir=<span class="hljs-variable">$&#123;BACKUP_FILE_DIR&#125;</span><br>xtrabackup --defaults-file=/etc/mysql/mysql.conf.d/mysqld.cnf --copy-back --target-dir=<span class="hljs-variable">$&#123;BACKUP_FILE_DIR&#125;</span><br><br><span class="hljs-comment"># modify permissions</span><br><span class="hljs-built_in">chown</span> -R mysql:mysql /data/mysql<br></code></pre></td></tr></table></figure><h3 id="3-4、SLAVE-创建"><a href="#3-4、SLAVE-创建" class="headerlink" title="3.4、SLAVE 创建"></a>3.4、SLAVE 创建</h3><p>由于真实环境会涉及到 SLAVE 备份, 故本文测试时会加入 SLAVE 节点; SLAVE 创建过程这里不再过多赘述, 具体可以参考 <a href="https://docs.percona.com/percona-xtrabackup/8.0/set-up-replication.html">How to set up a replica for replication in 6 simple steps with Percona XtraBackup</a>.</p><h2 id="四、测试数据恢复"><a href="#四、测试数据恢复" class="headerlink" title="四、测试数据恢复"></a>四、测试数据恢复</h2><h3 id="4-1、基础恢复"><a href="#4-1、基础恢复" class="headerlink" title="4.1、基础恢复"></a>4.1、基础恢复</h3><p>基础数据恢复流程中将会模拟最理想化的环境: <strong>由于误操作在主库发生了删除, 同时主库临近时间点有完整备份, 且主库的 Binlog 未滚动(与备份时使用相同的 Binlog 文件).</strong> 整个场景的事件发生顺序如图所示:</p><p><img src="https://cdn.oss.link/markdown/vvFe6f.png"></p><ul><li>1、在 T1 时刻定时任务执行了 <code>backup.sh</code> 对主库进行了备份</li><li>2、在 T2 时刻执行 <code>UPDATE userinfo SET idno=1111111 WHERE id = 8</code> 数据发生了更改</li><li>3、在 T3 时刻误操作删除了数据(<code>DELETE FROM userinfo WHERE id = 8</code>), 我们需要找回误删除的数据</li></ul><p>数据变化过程如下图所示:</p><p><img src="https://cdn.oss.link/markdown/6r8fH7.png" alt="T1 时刻"></p><p><img src="https://cdn.oss.link/markdown/fs346k.png" alt="T2 时刻"></p><p><img src="https://cdn.oss.link/markdown/TQFc8x.png" alt="T3 时刻"></p><h4 id="4-1-1、恢复备份"><a href="#4-1-1、恢复备份" class="headerlink" title="4.1.1、恢复备份"></a>4.1.1、恢复备份</h4><p>在这种情况下首先要做的就是立即使用主库在 T1 时刻的完整备份在测试库进行还原, <strong>保证测试库与备份时刻的数据一致</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制备份文件</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ scp /data/mysql_backup/full_20240110182316.tar 172.16.11.253:~</span><br><br><span class="hljs-comment"># 恢复 MySQL 备份</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ ./restore.sh full_20240110182316.tar</span><br></code></pre></td></tr></table></figure><p>由于备份是在 T1 时刻创建的, 所以备份不包含 T2 时刻的修改; 也就是说备份数据还原后应该与初始化数据一致:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> userinfo;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name         <span class="hljs-operator">|</span> idno               <span class="hljs-operator">|</span> address                                                                           <span class="hljs-operator">|</span> create_time         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 李瑞芳       <span class="hljs-operator">|</span> <span class="hljs-number">636920199802136451</span> <span class="hljs-operator">|</span> 山西省临汾市顺靯路<span class="hljs-number">5032</span>号疞嶥小区<span class="hljs-number">14</span>单元<span class="hljs-number">2141</span>室                                      <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 方方竣       <span class="hljs-operator">|</span> <span class="hljs-number">146324198806075248</span> <span class="hljs-operator">|</span> 甘肃省天水市婄煄路<span class="hljs-number">3816</span>号没卾小区<span class="hljs-number">17</span>单元<span class="hljs-number">229</span>室                                       <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 常明珠       <span class="hljs-operator">|</span> <span class="hljs-number">441439198304217281</span> <span class="hljs-operator">|</span> 湖南省湘西土家族苗族自治州僄籓路<span class="hljs-number">3511</span>号贪堕小区<span class="hljs-number">7</span>单元<span class="hljs-number">2074</span>室                         <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 陆奕然       <span class="hljs-operator">|</span> <span class="hljs-number">629162201311010724</span> <span class="hljs-operator">|</span> 广西壮族自治区玉林市秈瑨路<span class="hljs-number">704</span>号鮗捤小区<span class="hljs-number">11</span>单元<span class="hljs-number">2409</span>室                               <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 郝博雅       <span class="hljs-operator">|</span> <span class="hljs-number">138088201811117959</span> <span class="hljs-operator">|</span> 河南省驻马店市紎筦路<span class="hljs-number">1380</span>号攃摍小区<span class="hljs-number">13</span>单元<span class="hljs-number">2363</span>室                                    <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> 夏婉君       <span class="hljs-operator">|</span> <span class="hljs-number">122839198907076789</span> <span class="hljs-operator">|</span> 山西省忻州市聜鳁路<span class="hljs-number">24</span>号詿臜小区<span class="hljs-number">12</span>单元<span class="hljs-number">1961</span>室                                        <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> 邱新宜       <span class="hljs-operator">|</span> <span class="hljs-number">129192199311154795</span> <span class="hljs-operator">|</span> 辽宁省葫芦岛市攣盗路<span class="hljs-number">7356</span>号嚓檧小区<span class="hljs-number">14</span>单元<span class="hljs-number">1326</span>室                                    <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> 吴东         <span class="hljs-operator">|</span> <span class="hljs-number">642398199908131195</span> <span class="hljs-operator">|</span> 陕西省渭南市污岕路<span class="hljs-number">1288</span>号鯭蕄小区<span class="hljs-number">10</span>单元<span class="hljs-number">1252</span>室                                      <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span> 尉迟妙己     <span class="hljs-operator">|</span> <span class="hljs-number">719031198308109317</span> <span class="hljs-operator">|</span> 陕西省宝鸡市逳彄路<span class="hljs-number">1441</span>号骘鼽小区<span class="hljs-number">11</span>单元<span class="hljs-number">1128</span>室                                      <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span> 公孙昱晔     <span class="hljs-operator">|</span> <span class="hljs-number">372078200010227375</span> <span class="hljs-operator">|</span> 福建省莆田市顪夹路<span class="hljs-number">4222</span>号蝣宣小区<span class="hljs-number">2</span>单元<span class="hljs-number">2046</span>室                                       <span class="hljs-operator">|</span> <span class="hljs-number">2024</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">13</span>:<span class="hljs-number">53</span>:<span class="hljs-number">07</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+</span><br><span class="hljs-number">10</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="4-1-2、找到起始-Pos-点"><a href="#4-1-2、找到起始-Pos-点" class="headerlink" title="4.1.2、找到起始 Pos 点"></a>4.1.2、找到起始 Pos 点</h4><p>由于 Binlog 恢复逻辑就是重复执行, 所以对于起始 Pos 点来说就是备份时间的 Pos 点; 这里可以直接从 xtrabackup 备份文件中找到:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ cat full_20240110182316/xtrabackup_binlog_info</span><br>mysql-bin.000007        157<br></code></pre></td></tr></table></figure><h4 id="4-1-3、找到结束-Pos-点"><a href="#4-1-3、找到结束-Pos-点" class="headerlink" title="4.1.3、找到结束 Pos 点"></a>4.1.3、找到结束 Pos 点</h4><p>对于结束 Pos 点来说, 它应当是执行数据误删除(<code>DELETE FROM userinfo WHERE id = 8</code>)之前的最后一个点, 这里就需要借助 mysqlbinlog 命令来进行查找和解析:</p><p><strong>首先在主库查看当前使用的 Binlog</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000007 |     1048 |              |                  |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>接下来通过 mysqlbinlog 工具转换成 SQL 并进行搜索</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql">root<span class="hljs-variable">@bintest1</span> <span class="hljs-operator">~</span> # ❯❯❯ mysqlbinlog <span class="hljs-comment">--no-defaults /data/mysql/binlogs/mysql-bin.000007 -vv | grep -A 20 -B 20 &#x27;DELETE&#x27;</span><br><span class="hljs-comment">/*!80014 SET @@session.immediate_server_version=80035*/</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@SESSION</span>.GTID_NEXT<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">739</span><br>#<span class="hljs-number">240110</span> <span class="hljs-number">18</span>:<span class="hljs-number">38</span>:<span class="hljs-number">14</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">817</span> CRC32 <span class="hljs-number">0x747d3221</span>      Query   thread_id<span class="hljs-operator">=</span><span class="hljs-number">12</span>    exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>     error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1704883094</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">817</span><br>#<span class="hljs-number">240110</span> <span class="hljs-number">18</span>:<span class="hljs-number">38</span>:<span class="hljs-number">14</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">888</span> CRC32 <span class="hljs-number">0xd733973c</span>      Table_map: `bintest`.`userinfo` mapped <span class="hljs-keyword">to</span> number <span class="hljs-number">89</span><br># has_generated_invisible_primary_key<span class="hljs-operator">=</span><span class="hljs-number">0</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">888</span>  <span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;</span> 删除前 Pos 点<br>#<span class="hljs-number">240110</span> <span class="hljs-number">18</span>:<span class="hljs-number">38</span>:<span class="hljs-number">14</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1017</span> CRC32 <span class="hljs-number">0x9ea5d5b0</span>     Delete_rows: <span class="hljs-keyword">table</span> id <span class="hljs-number">89</span> flags: STMT_END_F<br><br>BINLOG <span class="hljs-string">&#x27;</span><br><span class="hljs-string">lnOeZRPzKwAARwAAAHgDAAAAAFkAAAAAAAEAB2JpbnRlc3QACHVzZXJpbmZvAAUIDw8PEgf8A/wD</span><br><span class="hljs-string">/AMAAAEBAAIB4DyXM9c=</span><br><span class="hljs-string">lnOeZSDzKwAAgQAAAPkDAAAAAFkAAAAAAAEAAgAF/wAIAAAAAAAAAAYA5ZC05LicBwAxMTExMTEx</span><br><span class="hljs-string">PQDpmZXopb/nnIHmuK3ljZfluILmsaHlspXot68xMjg45Y+36a+t6JWE5bCP5Yy6MTDljZXlhYMx</span><br><span class="hljs-string">MjUy5a6kmbJK3Uew1aWe</span><br><span class="hljs-string">&#x27;</span><span class="hljs-comment">/*!*/</span>;<br>### <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `bintest`.`userinfo`<br>### <span class="hljs-keyword">WHERE</span><br>###   <span class="hljs-variable">@1</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-comment">/* LONGINT meta=0 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@2</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;吴东&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@3</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1111111&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@4</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;陕西省渭南市污岕路1288号鯭蕄小区10单元1252室&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@5</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2024-01-05 13:53:07&#x27;</span> <span class="hljs-comment">/* DATETIME(0) meta=0 nullable=0 is_null=0 */</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">1017</span><br>#<span class="hljs-number">240110</span> <span class="hljs-number">18</span>:<span class="hljs-number">38</span>:<span class="hljs-number">14</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1048</span> CRC32 <span class="hljs-number">0x60cc5630</span>     Xid <span class="hljs-operator">=</span> <span class="hljs-number">55</span><br><span class="hljs-keyword">COMMIT</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@SESSION</span>.GTID_NEXT<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AUTOMATIC&#x27;</span> <span class="hljs-comment">/* added by mysqlbinlog */</span> <span class="hljs-comment">/*!*/</span>;<br>DELIMITER ;<br># <span class="hljs-keyword">End</span> <span class="hljs-keyword">of</span> log file<br><span class="hljs-comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;<br><span class="hljs-comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;<br></code></pre></td></tr></table></figure><p>通过查看生成的 SQL 可以看到, 在删除之前的最后一个 Pos 点为 <code>888</code>.</p><h4 id="4-1-4、生成重做-SQL"><a href="#4-1-4、生成重做-SQL" class="headerlink" title="4.1.4、生成重做 SQL"></a>4.1.4、生成重做 SQL</h4><p>有了起始 Pos 点和结束 Pos 点, 我们就可以在主库上通过 Binlog 来生成 <strong>从备份到删除之前所有的执行 SQL</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000007 -vv --start-position=157 --stop-position=888 &gt; ~/redo.sql</span><br></code></pre></td></tr></table></figure><h4 id="4-1-5、恢复数据到删除前"><a href="#4-1-5、恢复数据到删除前" class="headerlink" title="4.1.5、恢复数据到删除前"></a>4.1.5、恢复数据到删除前</h4><p>有了重做 SQL 以后, 我们就可以直接在测试库上重新应用它, 让测试库 “回到” 被删除之前的状态:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制重做 SQL 到测试库</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ scp redo.sql 172.16.11.253:~</span><br><br><span class="hljs-comment"># 执行应用</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ mysql &lt; redo.sql</span><br></code></pre></td></tr></table></figure><p>接下来可以在测试库查看恢复结果, 测试库应该回到了 T2 时刻即删除前的最后一刻:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ mysql</span><br>mysql&gt; <span class="hljs-keyword">select</span> * from userinfo;<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>| <span class="hljs-built_in">id</span> | name         | idno               | address                                                                           | create_time         |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>|  1 | 李瑞芳       | 636920199802136451 | 山西省临汾市顺靯路5032号疞嶥小区14单元2141室                                      | 2024-01-05 13:53:07 |<br>|  2 | 方方竣       | 146324198806075248 | 甘肃省天水市婄煄路3816号没卾小区17单元229室                                       | 2024-01-05 13:53:07 |<br>|  3 | 常明珠       | 441439198304217281 | 湖南省湘西土家族苗族自治州僄籓路3511号贪堕小区7单元2074室                         | 2024-01-05 13:53:07 |<br>|  4 | 陆奕然       | 629162201311010724 | 广西壮族自治区玉林市秈瑨路704号鮗捤小区11单元2409室                               | 2024-01-05 13:53:07 |<br>|  5 | 郝博雅       | 138088201811117959 | 河南省驻马店市紎筦路1380号攃摍小区13单元2363室                                    | 2024-01-05 13:53:07 |<br>|  6 | 夏婉君       | 122839198907076789 | 山西省忻州市聜鳁路24号詿臜小区12单元1961室                                        | 2024-01-05 13:53:07 |<br>|  7 | 邱新宜       | 129192199311154795 | 辽宁省葫芦岛市攣盗路7356号嚓檧小区14单元1326室                                    | 2024-01-05 13:53:07 |<br>|  8 | 吴东         | 1111111            | 陕西省渭南市污岕路1288号鯭蕄小区10单元1252室                                      | 2024-01-05 13:53:07 |<br>|  9 | 尉迟妙己     | 719031198308109317 | 陕西省宝鸡市逳彄路1441号骘鼽小区11单元1128室                                      | 2024-01-05 13:53:07 |<br>| 10 | 公孙昱晔     | 372078200010227375 | 福建省莆田市顪夹路4222号蝣宣小区2单元2046室                                       | 2024-01-05 13:53:07 |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>10 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>最后提取数据重新还原到主库即可.</strong></p><h4 id="4-1-6、时间点恢复"><a href="#4-1-6、时间点恢复" class="headerlink" title="4.1.6、时间点恢复"></a>4.1.6、时间点恢复</h4><p>起始除了使用 Pos 点恢复以外, 还可以根据时间来进行恢复, 前提你能精准的把控删除发生的时间以及备份的时间:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 按时间点生成重做 SQL</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000007 -vv --start-datetime=&quot;2024-01-10 18:23:16&quot; --stop-datetime=&quot;2024-01-10 18:38:00&quot; &gt; ~/redo.sql</span><br></code></pre></td></tr></table></figure><p>总体来说按照时间点恢复可能会有一些误差, 比如同一时刻发生很多修改; 但是如果你能完全确定<strong>删除发生时间</strong>也不失为一个简单方法.</p><h3 id="4-2、多-Binlog-恢复"><a href="#4-2、多-Binlog-恢复" class="headerlink" title="4.2、多 Binlog 恢复"></a>4.2、多 Binlog 恢复</h3><p>多 Binlog 恢复流程中假设在非理想情况下, T1 时刻进行备份, T2 时刻更改数据后主库 Binlog 发生了滚动, 然后在 T3 时刻数据被删除; 整个流程中复杂的点为 <strong>在备份时间(T1)到数据删除时间(T3)之间可能发生多次 Binlog 滚动, 这时我们必须联合多个 Binlog 文件来生成重做 SQL.</strong></p><p><img src="https://cdn.oss.link/markdown/nwep51.png"></p><h4 id="4-2-1、找到起始-Pos-点"><a href="#4-2-1、找到起始-Pos-点" class="headerlink" title="4.2.1、找到起始 Pos 点"></a>4.2.1、找到起始 Pos 点</h4><p>备份恢复步骤与 4.1 部分相同, 这里暂且省略; 查找起始 Pos 点采用同样的方法, 直接查看备份文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ cat full_20240111152100/xtrabackup_binlog_info</span><br>mysql-bin.000007        157<br></code></pre></td></tr></table></figure><h4 id="4-2-2、找到结束-Pos-点"><a href="#4-2-2、找到结束-Pos-点" class="headerlink" title="4.2.2、找到结束 Pos 点"></a>4.2.2、找到结束 Pos 点</h4><p>查找结束 Pos 点大致方法相同, 但是需要注意的是 Binlog 已经发生过滚动, 所以我们在过滤时需要联合多个 Binlog 进行查找:</p><p><strong>首先查看当前主库的 Binlog 与备份 Binlog, 通过对比确定中间还有哪些 Binlog</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> mysql<span class="hljs-operator">-</span>bin<span class="hljs-number">.000010</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1263</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>可以看到, 主库 Binlog 已经滚动到 <code>mysql-bin.000010</code>, 而备份时的 Binlog 为 <code>mysql-bin.000007</code>, 这意味着我们需要搜索 7、8、9、10 四个 Binlog 来确定删除到底发生在哪里, 从而得到结束 Pos 点:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql">root<span class="hljs-variable">@bintest1</span> <span class="hljs-operator">~</span> # ❯❯❯ mysqlbinlog <span class="hljs-comment">--no-defaults /data/mysql/binlogs/mysql-bin.0000&#123;07,08,09,10&#125; -vv | grep -A 20 -B 20 &#x27;DELETE FROM `bintest`.`userinfo`&#x27;</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">954</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">15</span>:<span class="hljs-number">25</span>:<span class="hljs-number">54</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1032</span> CRC32 <span class="hljs-number">0x85eabcc8</span>     Query   thread_id<span class="hljs-operator">=</span><span class="hljs-number">12</span>    exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>     error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1704957954</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-comment">/*!\C utf8mb4 */</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@session</span>.character_set_client<span class="hljs-operator">=</span><span class="hljs-number">45</span>,@<span class="hljs-variable">@session</span>.collation_connection<span class="hljs-operator">=</span><span class="hljs-number">45</span>,@<span class="hljs-variable">@session</span>.collation_server<span class="hljs-operator">=</span><span class="hljs-number">45</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">1032</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">15</span>:<span class="hljs-number">25</span>:<span class="hljs-number">54</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1103</span> CRC32 <span class="hljs-number">0x08a5a623</span>     Table_map: `bintest`.`userinfo` mapped <span class="hljs-keyword">to</span> number <span class="hljs-number">89</span><br># has_generated_invisible_primary_key<span class="hljs-operator">=</span><span class="hljs-number">0</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">1103</span>  <span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;</span> 删除前 Pos 点<br>#<span class="hljs-number">240111</span> <span class="hljs-number">15</span>:<span class="hljs-number">25</span>:<span class="hljs-number">54</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1232</span> CRC32 <span class="hljs-number">0x95e1f664</span>     Delete_rows: <span class="hljs-keyword">table</span> id <span class="hljs-number">89</span> flags: STMT_END_F<br><br>BINLOG <span class="hljs-string">&#x27;</span><br><span class="hljs-string">ApifZRPzKwAARwAAAE8EAAAAAFkAAAAAAAEAB2JpbnRlc3QACHVzZXJpbmZvAAUIDw8PEgf8A/wD</span><br><span class="hljs-string">/AMAAAEBAAIB4COmpQg=</span><br><span class="hljs-string">ApifZSDzKwAAgQAAANAEAAAAAFkAAAAAAAEAAgAF/wAIAAAAAAAAAAYA5ZC05LicBwAxMTExMTEx</span><br><span class="hljs-string">PQDpmZXopb/nnIHmuK3ljZfluILmsaHlspXot68xMjg45Y+36a+t6JWE5bCP5Yy6MTDljZXlhYMx</span><br><span class="hljs-string">MjUy5a6kmbJK3Udk9uGV</span><br><span class="hljs-string">&#x27;</span><span class="hljs-comment">/*!*/</span>;<br>### <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `bintest`.`userinfo`<br>### <span class="hljs-keyword">WHERE</span><br>###   <span class="hljs-variable">@1</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-comment">/* LONGINT meta=0 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@2</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;吴东&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@3</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1111111&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@4</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;陕西省渭南市污岕路1288号鯭蕄小区10单元1252室&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@5</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2024-01-05 13:53:07&#x27;</span> <span class="hljs-comment">/* DATETIME(0) meta=0 nullable=0 is_null=0 */</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">1232</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">15</span>:<span class="hljs-number">25</span>:<span class="hljs-number">54</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1263</span> CRC32 <span class="hljs-number">0x25708781</span>     Xid <span class="hljs-operator">=</span> <span class="hljs-number">359</span><br><span class="hljs-keyword">COMMIT</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@SESSION</span>.GTID_NEXT<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AUTOMATIC&#x27;</span> <span class="hljs-comment">/* added by mysqlbinlog */</span> <span class="hljs-comment">/*!*/</span>;<br>DELIMITER ;<br># <span class="hljs-keyword">End</span> <span class="hljs-keyword">of</span> log file<br><span class="hljs-comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;<br><span class="hljs-comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;<br></code></pre></td></tr></table></figure><p>从生成的 SQL 中可以看到, 结束的 Pos 点为 <code>1103</code>.</p><h4 id="4-2-3、生成重做-SQL"><a href="#4-2-3、生成重做-SQL" class="headerlink" title="4.2.3、生成重做 SQL"></a>4.2.3、生成重做 SQL</h4><p>在涉及到多个 Binlog 文件, 通过起始 Pos 点生成重做 SQL 时需要注意一点: <strong>Pos 点不是一直自增的, 它是在每个 Binlog 中自增, 所以如果直接联合所有 Binlog 使用起始 Pos 点(157~1103) 来生成重做 SQL 是有问题的:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 错误示例</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.0000&#123;07,08,09,10&#125; -vv --start-position=157 --stop-position=1103 &gt; ~/redo.sql</span><br></code></pre></td></tr></table></figure><p><strong>因为在 <code>mysql-bin.000009</code> 中 Pos 点可能增长到 1500, 然后在 <code>mysql-bin.000010</code> 中重新从 <code>157</code> 开始;</strong> 直接这样生成的重做 SQL 会丢失一部分数据, 正确做法是<strong>为每个中间 Binlog 生成完整重做 SQL, 然后再以起始 Pos 点为边界为两端 Binlog 生成重做 SQL:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 起始 Binlog + 起始 Pos 点</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000007 -vv --start-position=157 &gt; ~/redo.sql</span><br><br><span class="hljs-comment"># 中间 Binlog 全量</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000008 -vv &gt;&gt; ~/redo.sql</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000009 -vv &gt;&gt; ~/redo.sql</span><br><br><span class="hljs-comment"># 结束 Binlog + 结束 Pos 点</span><br>root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000010 -vv --stop-position=1103 &gt;&gt; ~/redo.sql</span><br></code></pre></td></tr></table></figure><h4 id="4-2-4、恢复数据到删除前"><a href="#4-2-4、恢复数据到删除前" class="headerlink" title="4.2.4、恢复数据到删除前"></a>4.2.4、恢复数据到删除前</h4><p>恢复数据这一步跟上面的操作相同, 直接导入备份数据库然后查看被删除数据, 最后导出恢复到主库即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest1 ~ <span class="hljs-comment"># ❯❯❯ scp redo.sql 172.16.11.253:~</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ mysql &lt; redo.sql</span><br><br>mysql&gt; <span class="hljs-keyword">select</span> * from userinfo;<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>| <span class="hljs-built_in">id</span> | name         | idno               | address                                                                           | create_time         |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>|  1 | 李瑞芳       | 636920199802136451 | 山西省临汾市顺靯路5032号疞嶥小区14单元2141室                                      | 2024-01-05 13:53:07 |<br>|  2 | 方方竣       | 146324198806075248 | 甘肃省天水市婄煄路3816号没卾小区17单元229室                                       | 2024-01-05 13:53:07 |<br>|  3 | 常明珠       | 441439198304217281 | 湖南省湘西土家族苗族自治州僄籓路3511号贪堕小区7单元2074室                         | 2024-01-05 13:53:07 |<br>|  4 | 陆奕然       | 629162201311010724 | 广西壮族自治区玉林市秈瑨路704号鮗捤小区11单元2409室                               | 2024-01-05 13:53:07 |<br>|  5 | 郝博雅       | 138088201811117959 | 河南省驻马店市紎筦路1380号攃摍小区13单元2363室                                    | 2024-01-05 13:53:07 |<br>|  6 | 夏婉君       | 122839198907076789 | 山西省忻州市聜鳁路24号詿臜小区12单元1961室                                        | 2024-01-05 13:53:07 |<br>|  7 | 邱新宜       | 129192199311154795 | 辽宁省葫芦岛市攣盗路7356号嚓檧小区14单元1326室                                    | 2024-01-05 13:53:07 |<br>|  8 | 吴东         | 1111111            | 陕西省渭南市污岕路1288号鯭蕄小区10单元1252室                                      | 2024-01-05 13:53:07 |<br>|  9 | 尉迟妙己     | 719031198308109317 | 陕西省宝鸡市逳彄路1441号骘鼽小区11单元1128室                                      | 2024-01-05 13:53:07 |<br>| 10 | 公孙昱晔     | 372078200010227375 | 福建省莆田市顪夹路4222号蝣宣小区2单元2046室                                       | 2024-01-05 13:53:07 |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>10 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="4-3、从库恢复"><a href="#4-3、从库恢复" class="headerlink" title="4.3、从库恢复"></a>4.3、从库恢复</h3><p>在大多数生产环境, 我们都不会选择直接从主库生成备份, 因为直接从主库生成备份时会产生较大磁盘 IO, 备份文件传输时又会造成网络占用; 大多数情况下我们都会在从库备份, 所以在本流程中假设:</p><ul><li>1、T1 时刻在从库产生了备份</li><li>2、T2 时刻主库产生了数据修改, 且同步到了从库</li><li>3、T3 时刻主库发生了误删除, 我们只有从库的备份</li></ul><p><img src="https://cdn.oss.link/markdown/yMDFHq.png"></p><p><strong>在这种复杂环境中, 需要明确一点: 备份只有从库的, 所以一切要以从库为基准, 包括 Binlog Pos 点查找还原等.</strong></p><h4 id="4-3-1、找到起始-Pos-点"><a href="#4-3-1、找到起始-Pos-点" class="headerlink" title="4.3.1、找到起始 Pos 点"></a>4.3.1、找到起始 Pos 点</h4><p>在这种带有从库的环境中, 如果备份是从从库备份的, 那么 Binlog 恢复时仍然应该选择以从库为主进行操作; 对于起始 Pos 点, 仍然<strong>需要查看从库的备份文件</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里略从库备份复制到测试库, 以及测试库恢复过程</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ cat full_20240111162313/xtrabackup_binlog_info</span><br>mysql-bin.000009        157<br></code></pre></td></tr></table></figure><h4 id="4-3-2、找到结束-Pos-点"><a href="#4-3-2、找到结束-Pos-点" class="headerlink" title="4.3.2、找到结束 Pos 点"></a>4.3.2、找到结束 Pos 点</h4><p>对于结束 Pos 点来说, <strong>首先要确认数据删除时主库的删除动作成功同步到从库, 然后在从库上根据 Binlog 查询删除动作, 获取结束 Pos 点:</strong></p><p><strong>查询删除后从库的 Pos 点</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 从库 <span class="hljs-number">252</span> 执行<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> mysql<span class="hljs-operator">-</span>bin<span class="hljs-number">.000009</span> <span class="hljs-operator">|</span>     <span class="hljs-number">1043</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><strong>对比从库备份可得知 Binlog 未发生滚动(如果发生滚动参考 4.2 部分), 接下来查询结束 Pos 点:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql">root<span class="hljs-variable">@bintest2</span> <span class="hljs-operator">~</span> # ❯❯❯ mysqlbinlog <span class="hljs-comment">--no-defaults /data/mysql/binlogs/mysql-bin.000009 -vv | grep -A 20 -B 20 &#x27;DELETE FROM `bintest`.`userinfo`&#x27;</span><br><span class="hljs-comment">/*!80014 SET @@session.immediate_server_version=80035*/</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@SESSION</span>.GTID_NEXT<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">739</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">16</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">812</span> CRC32 <span class="hljs-number">0x35941d40</span>      Query   thread_id<span class="hljs-operator">=</span><span class="hljs-number">11</span>    exec_time<span class="hljs-operator">=</span><span class="hljs-number">0</span>     error_code<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">TIMESTAMP</span><span class="hljs-operator">=</span><span class="hljs-number">1704962020</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">/*!*/</span>;<br># <span class="hljs-keyword">at</span> <span class="hljs-number">812</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">16</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">883</span> CRC32 <span class="hljs-number">0xcfe618de</span>      Table_map: `bintest`.`userinfo` mapped <span class="hljs-keyword">to</span> number <span class="hljs-number">99</span><br># has_generated_invisible_primary_key<span class="hljs-operator">=</span><span class="hljs-number">0</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">883</span>  <span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&lt;</span> 删除前 Pos 点<br>#<span class="hljs-number">240111</span> <span class="hljs-number">16</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1012</span> CRC32 <span class="hljs-number">0xd03d3ff0</span>     Delete_rows: <span class="hljs-keyword">table</span> id <span class="hljs-number">99</span> flags: STMT_END_F<br><br>BINLOG <span class="hljs-string">&#x27;</span><br><span class="hljs-string">5KefZRPzKwAARwAAAHMDAAAAAGMAAAAAAAEAB2JpbnRlc3QACHVzZXJpbmZvAAUIDw8PEgf8A/wD</span><br><span class="hljs-string">/AMAAAEBAAIB4N4Y5s8=</span><br><span class="hljs-string">5KefZSDzKwAAgQAAAPQDAAAAAGMAAAAAAAEAAgAF/wAIAAAAAAAAAAYA5ZC05LicBwAxMTExMTEx</span><br><span class="hljs-string">PQDpmZXopb/nnIHmuK3ljZfluILmsaHlspXot68xMjg45Y+36a+t6JWE5bCP5Yy6MTDljZXlhYMx</span><br><span class="hljs-string">MjUy5a6kmbJK3UfwPz3Q</span><br><span class="hljs-string">&#x27;</span><span class="hljs-comment">/*!*/</span>;<br>### <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `bintest`.`userinfo`<br>### <span class="hljs-keyword">WHERE</span><br>###   <span class="hljs-variable">@1</span><span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-comment">/* LONGINT meta=0 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@2</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;吴东&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@3</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1111111&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@4</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;陕西省渭南市污岕路1288号鯭蕄小区10单元1252室&#x27;</span> <span class="hljs-comment">/* VARSTRING(1020) meta=1020 nullable=0 is_null=0 */</span><br>###   <span class="hljs-variable">@5</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2024-01-05 13:53:07&#x27;</span> <span class="hljs-comment">/* DATETIME(0) meta=0 nullable=0 is_null=0 */</span><br># <span class="hljs-keyword">at</span> <span class="hljs-number">1012</span><br>#<span class="hljs-number">240111</span> <span class="hljs-number">16</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span> server id <span class="hljs-number">11251</span>  end_log_pos <span class="hljs-number">1043</span> CRC32 <span class="hljs-number">0x084b4d2e</span>     Xid <span class="hljs-operator">=</span> <span class="hljs-number">88</span><br><span class="hljs-keyword">COMMIT</span><span class="hljs-comment">/*!*/</span>;<br><span class="hljs-keyword">SET</span> @<span class="hljs-variable">@SESSION</span>.GTID_NEXT<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AUTOMATIC&#x27;</span> <span class="hljs-comment">/* added by mysqlbinlog */</span> <span class="hljs-comment">/*!*/</span>;<br>DELIMITER ;<br># <span class="hljs-keyword">End</span> <span class="hljs-keyword">of</span> log file<br><span class="hljs-comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;<br><span class="hljs-comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;<br></code></pre></td></tr></table></figure><p>从查询结果中可以看到, 删除发生前的结束 Pos 点为 <code>883</code>.</p><h4 id="4-3-3、生成重做-SQL"><a href="#4-3-3、生成重做-SQL" class="headerlink" title="4.3.3、生成重做 SQL"></a>4.3.3、生成重做 SQL</h4><p>有了两个 Pos 点以后, 同样老办法<strong>在从库生成重做 SQL:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@bintest2 ~ <span class="hljs-comment"># ❯❯❯ mysqlbinlog --no-defaults /data/mysql/binlogs/mysql-bin.000009 -vv --start-position=157 --stop-position=883 &gt; ~/redo.sql</span><br></code></pre></td></tr></table></figure><h4 id="4-3-4、恢复数据到删除前"><a href="#4-3-4、恢复数据到删除前" class="headerlink" title="4.3.4、恢复数据到删除前"></a>4.3.4、恢复数据到删除前</h4><p>同样有了重做 SQL, 只需要<strong>在测试库还原从库备份, 然后在从库备份上应用重做 SQL</strong>, 将数据还原到被删除前, 最后导出恢复到主库即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制重做 SQL 文件</span><br>root@bintest2 ~ <span class="hljs-comment"># ❯❯❯ scp ~/redo.sql 172.16.11.253:~</span><br><br><span class="hljs-comment"># 应用重做 SQL</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ mysql &lt; redo.sql</span><br><br><span class="hljs-comment"># 确认数据状态</span><br>root@bintest3 ~ <span class="hljs-comment"># ❯❯❯ mysql</span><br>mysql&gt; <span class="hljs-keyword">select</span> * from userinfo;<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>| <span class="hljs-built_in">id</span> | name         | idno               | address                                                                           | create_time         |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>|  1 | 李瑞芳       | 636920199802136451 | 山西省临汾市顺靯路5032号疞嶥小区14单元2141室                                      | 2024-01-05 13:53:07 |<br>|  2 | 方方竣       | 146324198806075248 | 甘肃省天水市婄煄路3816号没卾小区17单元229室                                       | 2024-01-05 13:53:07 |<br>|  3 | 常明珠       | 441439198304217281 | 湖南省湘西土家族苗族自治州僄籓路3511号贪堕小区7单元2074室                         | 2024-01-05 13:53:07 |<br>|  4 | 陆奕然       | 629162201311010724 | 广西壮族自治区玉林市秈瑨路704号鮗捤小区11单元2409室                               | 2024-01-05 13:53:07 |<br>|  5 | 郝博雅       | 138088201811117959 | 河南省驻马店市紎筦路1380号攃摍小区13单元2363室                                    | 2024-01-05 13:53:07 |<br>|  6 | 夏婉君       | 122839198907076789 | 山西省忻州市聜鳁路24号詿臜小区12单元1961室                                        | 2024-01-05 13:53:07 |<br>|  7 | 邱新宜       | 129192199311154795 | 辽宁省葫芦岛市攣盗路7356号嚓檧小区14单元1326室                                    | 2024-01-05 13:53:07 |<br>|  8 | 吴东         | 1111111            | 陕西省渭南市污岕路1288号鯭蕄小区10单元1252室                                      | 2024-01-05 13:53:07 |<br>|  9 | 尉迟妙己     | 719031198308109317 | 陕西省宝鸡市逳彄路1441号骘鼽小区11单元1128室                                      | 2024-01-05 13:53:07 |<br>| 10 | 公孙昱晔     | 372078200010227375 | 福建省莆田市顪夹路4222号蝣宣小区2单元2046室                                       | 2024-01-05 13:53:07 |<br>+----+--------------+--------------------+-----------------------------------------------------------------------------------+---------------------+<br>10 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="五、其他工具"><a href="#五、其他工具" class="headerlink" title="五、其他工具"></a>五、其他工具</h2><h3 id="5-1、bytebase"><a href="#5-1、bytebase" class="headerlink" title="5.1、bytebase"></a>5.1、bytebase</h3><p>强烈推荐有能力的在内网部署 <a href="https://www.bytebase.com/">Bytebase</a> 工具, 这个工具应该是腾讯出的, 基础特性开源同时也有商用版本; 简单的说<strong>可以把你的数据库修改变为标准的代码协作模式</strong>; 比如提交 PR、Review 合并等, <strong>同时可以针对修改的 SQL 直接生成回滚 SQL,</strong> 出问题可以立即回滚:</p><p><img src="https://cdn.oss.link/markdown/Lp5EhS.png"></p><p><img src="https://cdn.oss.link/markdown/raYrS8.png"></p><h3 id="5-2、canal2sql"><a href="#5-2、canal2sql" class="headerlink" title="5.2、canal2sql"></a>5.2、canal2sql</h3><p>这是一个 Java 编写的工具, 支持在线解析 Binlog, 同时直接生成回滚 SQL, 我这里没有实际尝试, 具体请参考项目 <a href="https://github.com/zhuchao941/canal2sql">GitHub</a> 页面.</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p><strong>备份永远说数据恢复的首选! 不管是 Slave 还是 Binlog, 多留点备份.</strong></p>]]></content>
    
    
    <summary type="html">公司很多开发每天在 MySQL 上手动执行 SQL, 虽然有备份机制但是扛不住执行次数多, 最近决定模拟一下误删数据进行数据恢复, 这里记录下 BinLog 方式的恢复流程.</summary>
    
    
    
    <category term="Database" scheme="https://mritd.com/categories/database/"/>
    
    <category term="MySQL" scheme="https://mritd.com/categories/database/mysql/"/>
    
    
    <category term="MySQL" scheme="https://mritd.com/tags/mysql/"/>
    
    <category term="Database" scheme="https://mritd.com/tags/database/"/>
    
    <category term="Binlog" scheme="https://mritd.com/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>容器化系统折腾</title>
    <link href="https://mritd.com/2023/07/20/containerized-system-test/"/>
    <id>https://mritd.com/2023/07/20/containerized-system-test/</id>
    <published>2023-07-20T10:06:00.000Z</published>
    <updated>2023-07-20T10:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>相较于传统的 Linux 发行版来说, 纯容器化系统一般有以下优点:</p><ul><li>系统直接内置容器化工具, 例如 Docker、Podman 等</li><li>自定义服务大部分可直接通过容器化运行, 简化部署和依赖</li><li>系统特定区域具有不可变性, 即无法自行修改和写入, 保证系统完整性</li><li>系统会自动滚动更新以保持最新状态</li><li>系统一般为精简系统, 资源占用低, 攻击面较小</li></ul><p>从上面这些优点来看, 纯容器化系统一般适合运行一些固定服务, 且可以容忍一定的服务中断(系统需要滚动更新). 当然纯容器化系统也有一些缺点:</p><ul><li>系统内可能没有内置任何包管理器, 不方便自行扩展系统级组件</li><li>某些分区无法写入, 跟现有的一些配置规范等冲突, 需要大量调整</li><li>系统默认集成的一些组件可能比较固定且无法替换</li><li>需要重新学习配置文件等, 有一定时间成本(yaml 工程师)</li></ul><h2 id="二、容器化系统简史"><a href="#二、容器化系统简史" class="headerlink" title="二、容器化系统简史"></a>二、容器化系统简史</h2><p>最开始做容器化系统的应该是大名鼎鼎的 CoreOS, 当时 CoreOS 开源了很多工具, 比如大名鼎鼎的 etcd 等; 后来 CoreOS 被红帽收购, 原来的版本也停止更新, 新版本 CoreOS 由红帽重构, 此后便出现了两个版本:</p><ul><li>Fedora CoreOS(fcos): 红帽收购后重新基于 Fedora 系统创建的 CoreOS</li><li>FlatCar: CoreOS 的直接替代品, 现在由 “巨硬” 收购了</li></ul><p>从 “名义” 上来说 Fedora CoreOS 算是 CoreOS 的继承者, 但实际上内部已经重构; 所以从 “血统” 上来讲还是 FlatCar 更加像以前的 CoreOS.</p><h2 id="三、Fedora-CoreOS-VS-FlatCar"><a href="#三、Fedora-CoreOS-VS-FlatCar" class="headerlink" title="三、Fedora CoreOS VS FlatCar"></a>三、Fedora CoreOS VS FlatCar</h2><p>Fedora CoreOS 是红帽基于 Fedora 重新创建的 CoreOS, 该系统的特点是使用 <a href="https://coreos.github.io/rpm-ostree/">rpm-ostree</a> 工具来跟踪系统变化; <strong>rps-ostree 工具有点类似于 Git 一样跟踪系统变化, 同时也允许安装第三方 rpm 包; 相较于 FlatCar 来说其扩展性更强, 且并不是按照分区来保证系统的不可变性, 这样灵活度更高.</strong></p><p>与 Fedora CoreOS 不同的是 FlatCar 采用与现在很多安卓手机的类似机制, <strong>采用 A&#x2F;B 分区的模式进行系统更新, 即系统启动时运行在 A 分区, 更新时只更新 B 分区, 下次重启自动切换到 B 分区启动; 这种方法的好处是简单直接可靠, 坏处就是没有 Fedora CoreOS 那样灵活.</strong></p><p>还有一些区别就是 <strong>Fedora CoreOS 同时内置了 Podman 和 Docker 工具</strong>, 而 FlatCar 只内置了 Docker; 同时 Fedora CoreOS 网络工具采用的 NetworkManager, 而 FlatCar 采用的是 systemd-networkd.</p><p>综合来说两者各有优缺点, 我个人比较不喜欢 NetworkManager, 但 Podman 与 systemd 深度集成这点我还是挺喜欢的; 最后测试完纠结好久还是选择了 FlatCar, 因为 Podman 与 Docker 还是有些差异, 既然用不上又不喜欢 NetworkManager 同时 rpm-ostree 有一定学习成本, 那就干脆 FlatCar 好了; <strong>不过值得说明的是两个系统配置文件大部分通用, 所以只是个人喜好问题.</strong></p><h2 id="四、FlatCar-安装"><a href="#四、FlatCar-安装" class="headerlink" title="四、FlatCar 安装"></a>四、FlatCar 安装</h2><p>FlatCar 官方默认提供了各种软硬件环境的集成安装, 对于纯物理机提供 iso、iPEX 等安装方式, 针对于 VM 部署也提供了预构建的磁盘镜像; 由于安装方式过多, 这里只以 VMWare 平台 VCSA&#x2F;ESXi 为例, 其他平台请参考 <a href="https://www.flatcar.org/docs/latest/installing/">官方文档</a>.</p><p>针对于 VMWare 平台, 需要先下载官方提供的 ova 虚拟机模版文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -LO https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_vmware_ova.ova<br></code></pre></td></tr></table></figure><h3 id="4-1、ESXi-部署"><a href="#4-1、ESXi-部署" class="headerlink" title="4.1、ESXi 部署"></a>4.1、ESXi 部署</h3><p>对于 ESXi 平台可以直接部署, 但每次部署都需要上传 ova 虚拟机模版:</p><ul><li><p>首先新建虚拟机, 并选择 “从 OVA 文件部署”<br><img src="https://cdn.oss.link/markdown/QsmH5u.png" alt="QsmH5u"></p></li><li><p>然后输入虚拟机名称, 并上传 ova 文件<br><img src="https://cdn.oss.link/markdown/Fi4FTS.png" alt="Fi4FTS"></p></li><li><p>其中启动打开电源选项请根据实际需求调整, <strong>如果稍后要调整磁盘、网卡等则可以先取消勾选, 防止直接启动</strong><br><img src="https://cdn.oss.link/markdown/d7PNQO.png" alt="d7PNQO"></p></li><li><p><strong>其他设置中的 Options 配置暂时可以不写, 下一章节将会详细介绍配置</strong><br><img src="https://cdn.oss.link/markdown/cMAZaL.png" alt="cMAZaL"></p></li><li><p>完成后可调整虚拟机硬件配置(比如磁盘大小、CPU等), 然后启动即可<br><img src="https://cdn.oss.link/markdown/Yh5ZA3.png" alt="Yh5ZA3"></p></li></ul><h3 id="4-2、VCenter-部署"><a href="#4-2、VCenter-部署" class="headerlink" title="4.2、VCenter 部署"></a>4.2、VCenter 部署</h3><p>对于 VCenter 来说与 ESXi 大体相同, 不同的是 VCenter 需要新创建一个 “内容库”, 然后上传 ova 虚拟机模版, 安装时需要从内容库来选择 ova, 免去了每次都要上传 ova 的问题.</p><ul><li><p>首先创建存储 ova 的内容库<br><img src="https://cdn.oss.link/markdown/qhfHbC.png" alt="qhfHbC"></p></li><li><p>名称可随意填写<br><img src="https://cdn.oss.link/markdown/oNZLBN.png" alt="oNZLBN"></p></li><li><p>选择本地内容库<br><img src="https://cdn.oss.link/markdown/XhA4mV.png" alt="XhA4mV"></p></li><li><p>然后不启用安全策略, 选择存储即可创建完成<br><img src="https://cdn.oss.link/markdown/ALIuPv.png" alt="ALIuPv"></p></li><li><p>接下来点击 “操作” - “导入项目”<br><img src="https://cdn.oss.link/markdown/BAXQ3m.png" alt="BAXQ3m"></p></li><li><p>然后选择本地文件导入即可<br><img src="https://cdn.oss.link/markdown/dCzUiM.png" alt="dCzUiM"></p></li></ul><p>后续步骤与 ESXi 基本一致, 都是新建虚拟机然后选择 ova 部署, 最后启动就可.</p><h2 id="五、FlatCar-配置"><a href="#五、FlatCar-配置" class="headerlink" title="五、FlatCar 配置"></a>五、FlatCar 配置</h2><p>上面水了一堆, 其实并没有体现出容器化核心配置以及优势; 本部分将着重介绍容器化系统的配置方式和相关的配置样例.</p><h3 id="5-1、配置格式"><a href="#5-1、配置格式" class="headerlink" title="5.1、配置格式"></a>5.1、配置格式</h3><p>由于历史原因容器化系统从最初的 CoreOS 发展到现在 Fedora CoreOS 和 FlatCar 经历了一系列变更, 其中配置文件最初以 Ignition File 变为现在的好几种格式; 下面说一下这几种格式的区别和应该用哪个:</p><ul><li>Ignition File: 采用 JSON 格式描述, 是 Fedora CoreOS 和 FlatCar 最终使用的配置文件; 但是大量配置造成了 Ignition File 基本可读性很差, 所以一般都是通过其他配置转换成 Ignition File.</li><li>Butane Config: 采用 YAML 格式描述, 比较贴近系统原理, 配置清晰且可读性强; Fedora CoreOS 和 FlatCar 都支持此配置, 一般通过工具将其转换成 Ignition File 再使用.</li><li>Container Linux Config: 采用 YAML 格式描述, 该配置格式最初为 CoreOS 创建, 有一定上层抽象且目前似乎只支持 FlatCar, 同样通过工具转换为 Ignition File 使用, 所以不太推荐.</li></ul><p>所以综上所述, 对于配置文件只需要看 Butane Config 就行了; 而 Butane Config 我个人认为 Fedora CoreOS 的文档样例描述的相对清晰, 两者都支持 Butane Config 所以区别不大, 所以即使最终选择使用 FlatCar 系统, 在学习配置时也可以参考 <a href="https://docs.fedoraproject.org/en-US/fedora-coreos/storage/">Fedora CoreOS 的文档</a>.</p><h3 id="5-2、Butane-安装"><a href="#5-2、Butane-安装" class="headerlink" title="5.2、Butane 安装"></a>5.2、Butane 安装</h3><p>由于 Butane Config 需要转换成 Ignition File 才能被系统使用, 所以这里会用到一个转换工具,  即 <code>butane</code> 命令; 该命令可执行文件可以直接从 <a href="https://github.com/coreos/butane/releases">GitHub</a> 下载, 也可以采用 Docker 镜像 <code>quay.io/coreos/butane:release</code>; 具体的安装方式和细节请参考 <a href="https://coreos.github.io/butane/getting-started/">官方文档</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --<span class="hljs-built_in">rm</span> -i \<br>    quay.io/coreos/butane:latest \<br>    --pretty --strict &lt; butane_config.yaml \<br>    | <span class="hljs-built_in">base64</span> -w0<br></code></pre></td></tr></table></figure><h3 id="5-3、配置使用"><a href="#5-3、配置使用" class="headerlink" title="5.3、配置使用"></a>5.3、配置使用</h3><blockquote><p>详细配置说明放在下面, 这里讲一下怎么简单使用这个配置.</p></blockquote><p>假设有以下 Butane Config, 且文件名为 <code>test.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">flatcar</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">kernel_arguments:</span><br>  <span class="hljs-attr">should_not_exist:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">flatcar.autologin</span><br><span class="hljs-attr">passwd:</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-ed25519</span> <span class="hljs-string">AAAAC3NzaC1lZDI1NTE5AAAAIMskC9phaoO1WJkQOvXcUxH+DlG8u/2u1ReMXOO9vkbW</span> <span class="hljs-string">mritd@linux.com</span><br></code></pre></td></tr></table></figure><p>我们需要先使用以下命令将其转换为 Ignition 配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">butane --pretty --strict test.yaml | <span class="hljs-built_in">base64</span> -w0<br></code></pre></td></tr></table></figure><p>转换完成后将会输出一长串 <code>base64</code> 编码的文本, <strong>在创建虚拟机时将此内容添加到 <code>Ignition/coreos-cloudinit data</code> 字段中, 同时在 <code>Ignition/coreos-cloudinit data encoding</code> 中指定编码为 <code>base64</code>, 虚拟机启动后将会自动应用配置.</strong></p><p><img src="https://cdn.oss.link/markdown/UHHlUX.png" alt="UHHlUX"></p><h3 id="5-4、用户配置"><a href="#5-4、用户配置" class="headerlink" title="5.4、用户配置"></a>5.4、用户配置</h3><p>Butane Config 中可以通过 <code>passwd</code> 属性配置容器化系统的内置用户和用户组, <strong>需要注意的是默认情况下 root 用户是禁止 SSH 登陆的.</strong> 简单的配置样例如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">passwd:</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-ed25519</span> <span class="hljs-string">AAAAC3NzaC1lZDI1NTE5AAAAIMskC9phaoO1WJkQOvXcUxH+DlG8u/2u1ReMXOO9vkbW</span> <span class="hljs-string">mritd@linux.com</span><br></code></pre></td></tr></table></figure><p>以上配置在系统首次启动时会对 root 用户设置 ssh 登陆密钥, 后续就可以通过 ssh 使用 root 用户登陆; 除了 <code>ssh_authorized_keys</code> 字段以外还有一些常用的配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">passwd:</span><br>  <span class="hljs-comment"># 用户配置</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-comment"># 设置特定用户的密码, 密码可通过以下命令生成</span><br>      <span class="hljs-comment">#   openssl passwd -6 -salt SLAT PASSWD</span><br>      <span class="hljs-attr">password_hash:</span> <span class="hljs-string">$6$slat$OKqcnY96krXmy7rRCdpIgN90jMQ5kqJkgJxIc1sEE21SBIyW7kd4hYa91pfCy.lo1qiN4NM7B9R8NTrdGLWq81</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-ed25519</span> <span class="hljs-string">AAAAC3NzaC1lZDI1NTE5AAAAIMskC9phaoO1WJkQOvXcUxH+DlG8u/2u1ReMXOO9vkbW</span> <span class="hljs-string">mritd@linux.com</span><br>      <span class="hljs-comment"># 定义用户的 UID(一般用于新增用户使用)</span><br>      <span class="hljs-attr">uid:</span> <span class="hljs-number">1023</span><br>      <span class="hljs-comment"># 定义用户的家目录</span><br>      <span class="hljs-attr">home_dir:</span> <span class="hljs-string">/home/test</span><br>      <span class="hljs-comment"># 是否自动创建家目录</span><br>      <span class="hljs-attr">no_create_home:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 用户的主用户组</span><br>      <span class="hljs-attr">primary_group:</span> <span class="hljs-string">test</span><br>      <span class="hljs-comment"># 用户的其他用户组</span><br>      <span class="hljs-attr">groups:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">admin</span><br>      <span class="hljs-comment"># 用户登陆的 shell</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">/bin/bash</span><br>      <span class="hljs-comment"># 如果对一个已有用户设置为 false, 则启动后会删除此用户</span><br>      <span class="hljs-attr">should_exist:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 设置用户是否为系统级用户</span><br>      <span class="hljs-attr">system:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 组配置    </span><br>  <span class="hljs-attr">groups:</span><br>    <span class="hljs-comment"># 用户组名称</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test1</span><br>      <span class="hljs-comment"># 组 ID</span><br>      <span class="hljs-attr">gid:</span> <span class="hljs-number">9977</span><br>      <span class="hljs-comment"># 组密码</span><br>      <span class="hljs-attr">password_hash:</span> <span class="hljs-string">...</span><br>      <span class="hljs-comment"># 是否应该存在(false 则删除已存在的组)</span><br>      <span class="hljs-attr">should_exist:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 是否为系统组</span><br>      <span class="hljs-attr">system:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="5-5、磁盘配置"><a href="#5-5、磁盘配置" class="headerlink" title="5.5、磁盘配置"></a>5.5、磁盘配置</h3><p>在某些情况下我们可能需要采用独立磁盘作为数据存储, 例如挂载独立的 SSD 磁盘等; 磁盘相关的处理可以通过 <code>storage.disks</code> 字段进行配置, 配置完成后系统首次启动将会按照配置中的定义自动进行磁盘分区. 下面是磁盘配置的详细样例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-comment"># 磁盘配置</span><br>  <span class="hljs-attr">disks:</span><br>    <span class="hljs-comment"># 设备文件位置, 推荐直接使用 PCI 位置进行匹配, 因为 /dev/sda 这种配置多磁盘可能会</span><br>    <span class="hljs-comment"># 出现磁盘盘符漂移问题</span><br>    <span class="hljs-attr">device:</span> <span class="hljs-string">/dev/disk/by-path/pci-0000:02:00.0-scsi-0:0:0:0</span><br>    <span class="hljs-comment"># 是否强制清除分区表</span><br>    <span class="hljs-attr">wipe_table:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 定义分区结构</span><br>    <span class="hljs-attr">partitions:</span><br>      <span class="hljs-comment"># 定义分区 Label</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">data</span><br>      <span class="hljs-comment"># 分区编号, 如果为 0 则自动选择下一个可用的分区编号</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 分区大小, 如果为 0 则默认占据最大空间</span><br>      <span class="hljs-attr">size_mib:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># 分区开头位置, 同样如果为 0 则采用最大可用的开头位置</span><br>      <span class="hljs-attr">start_mib:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># 如果分区表已存在是否重置, 为 true 时如果分区表已存在且与配置不符则会自动重建</span><br>      <span class="hljs-comment"># 为 false 时如果分区表已存在且不匹配则启动失败</span><br>      <span class="hljs-attr">wipe_partition_entry:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 如果为 true, 当分区表存在且除大小以外都与当前配置相同时, 会自动扩容分区</span><br>      <span class="hljs-attr">resize:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="5-6、文件系统配置"><a href="#5-6、文件系统配置" class="headerlink" title="5.6、文件系统配置"></a>5.6、文件系统配置</h3><p>上面使用完 <code>storage.disks</code> 对磁盘进行分区后, 还需要通过 <code>storage.filesystems</code> 对磁盘分区进行格式化创建文件系统和挂载; 文件系统创建及挂载的配置样例如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-comment"># 文件系统配置</span><br>  <span class="hljs-attr">filesystems:</span><br>    <span class="hljs-comment"># 通过 Label 选中目标分区</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">data</span><br>    <span class="hljs-comment"># 配置格式化的格式</span><br>    <span class="hljs-attr">format:</span> <span class="hljs-string">xfs</span><br>    <span class="hljs-comment"># mkfs 的额外参数</span><br>    <span class="hljs-attr">options:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-f&quot;</span><br>    <span class="hljs-comment"># 是否在创建之前清除数据</span><br>    <span class="hljs-attr">wipe_filesystem:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 文件系统挂载点</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data</span><br>    <span class="hljs-comment"># 挂载的额外参数</span><br>    <span class="hljs-attr">mount_options:</span><br></code></pre></td></tr></table></figure><p><strong>值得一提的是 FlatCar 默认采用 ext4 作为根文件系统格式, 你可以通过以下配置改变根文件系统格式为 xfs:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filesystems:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">device:</span> <span class="hljs-string">/dev/disk/by-partlabel/ROOT</span><br>    <span class="hljs-attr">wipe_filesystem:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">format:</span> <span class="hljs-string">xfs</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">ROOT</span><br></code></pre></td></tr></table></figure><h3 id="5-7、文件配置"><a href="#5-7、文件配置" class="headerlink" title="5.7、文件配置"></a>5.7、文件配置</h3><p>在 FlatCar 和 Fedora CoreOS 这类系统中, 其实大部分配置都是基于文件配置, 通过在 yaml 中定义配置文件内容和属性来达到自动配置的目的. 大部分常用的文件配置参数如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-comment"># 文件配置</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-comment"># 文件的存储路径</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/data/testfile</span><br>      <span class="hljs-comment"># 是否覆盖文件</span><br>      <span class="hljs-attr">overwrite:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 文件权限</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>      <span class="hljs-comment"># 文件属主</span><br>      <span class="hljs-attr">user:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># 文件属组</span><br>      <span class="hljs-attr">group:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># 文件内容</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-comment"># 直接在 yaml 中定义文件内容</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          asdsngjsdngda</span><br><span class="hljs-string"></span>        <span class="hljs-comment"># 与 inline 互斥, 可以通过此字段定义远程文件, 系统启动后会自动下载</span><br>        <span class="hljs-comment"># 支持协议 http, https, tftp, s3, gs</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">http://exmaple.com/testfile</span><br>        <span class="hljs-comment"># http 请求头, 当使用远程文件时可设置</span><br>        <span class="hljs-attr">http_headers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">X-AUTH</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">xxxxxxxxx</span><br>      <span class="hljs-comment"># 与 contents 结构类似, 但是此部分定义的文件内容将会附加到目标文件之后</span><br>      <span class="hljs-attr">append:</span><br>        <span class="hljs-attr">contents:</span><br>          <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            asnfbshdgbds</span><br><span class="hljs-string"></span>  <span class="hljs-comment"># 目录配置</span><br>  <span class="hljs-comment"># 一般用于创建特定目录使用, 比如 Fedora CoreOS 在使用 Podman 挂载时不会自动</span><br>  <span class="hljs-comment"># 创建宿主机目录, 此时可以通过此配置预先创建目录          </span><br>  <span class="hljs-attr">directories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/data/mysql</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0755</span><br>      <span class="hljs-attr">user:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">3306</span><br>      <span class="hljs-attr">group:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">3306</span><br>  <br>  <span class="hljs-comment"># 链接文件配置</span><br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-comment"># 目标文件位置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/localtime</span><br>      <span class="hljs-comment"># 原始文件位置</span><br>      <span class="hljs-attr">target:</span> <span class="hljs-string">../usr/share/zoneinfo/Asia/Shanghai</span><br>      <span class="hljs-comment"># 是否创建硬链接</span><br>      <span class="hljs-attr">hard:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">user:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">group:</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="5-7-1、配置-Hostname"><a href="#5-7-1、配置-Hostname" class="headerlink" title="5.7.1、配置 Hostname"></a>5.7.1、配置 Hostname</h4><p>以下配置样例用于配置当前主机的 Hostname:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/hostname</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><h4 id="5-7-2、配置-sysctl"><a href="#5-7-2、配置-sysctl" class="headerlink" title="5.7.2、配置 sysctl"></a>5.7.2、配置 sysctl</h4><p>以下配置样例用于配置特定的 sysctl 参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sysctl.d/55-custom.conf</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">net.core.rmem_max=2500000</span><br></code></pre></td></tr></table></figure><h4 id="5-7-3、配置静态-IP"><a href="#5-7-3、配置静态-IP" class="headerlink" title="5.7.3、配置静态 IP"></a>5.7.3、配置静态 IP</h4><blockquote><p>注意: 静态 IP 配置和 DNS 配置仅适用于 FlatCar, Fedora CoreOS 采用的是 NetworkManager, 所以配置有所不同, 请参考 <a href="https://docs.fedoraproject.org/en-US/fedora-coreos/sysconfig-network-configuration/">Host Network Configuration</a> 文档.</p></blockquote><p>以下配置样例用于为第一个有线网卡配置静态 IP(默认情况下为 DHCP):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/network/25-xnet.network</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          [Match]</span><br><span class="hljs-string">          Name=en*</span><br><span class="hljs-string"></span><br>          [<span class="hljs-string">Network</span>]<br>          <span class="hljs-string">DHCP=no</span><br>          <span class="hljs-string">NTP=time.windows.com</span> <span class="hljs-string">time.apple.com</span><br><br>          [<span class="hljs-string">Address</span>]<br>          <span class="hljs-string">Address=172.16.4.24/24</span><br><br>          [<span class="hljs-string">Route</span>]<br>          <span class="hljs-string">Destination=0.0.0.0/0</span><br>          <span class="hljs-string">Gateway=172.16.4.253</span><br></code></pre></td></tr></table></figure><h4 id="5-7-4、配置-DNS"><a href="#5-7-4、配置-DNS" class="headerlink" title="5.7.4、配置 DNS"></a>5.7.4、配置 DNS</h4><p>以下配置样例用于配置系统 DNS:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/resolved.conf.d/25-xnet.conf</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          [Resolve]</span><br><span class="hljs-string">          DNS=223.5.5.5</span><br><span class="hljs-string">          DNS=119.29.29.29</span><br><span class="hljs-string">          #Domains=~.</span><br><span class="hljs-string">          #DNSStubListener=no</span><br></code></pre></td></tr></table></figure><h4 id="5-7-5、配置系统更新策略"><a href="#5-7-5、配置系统更新策略" class="headerlink" title="5.7.5、配置系统更新策略"></a>5.7.5、配置系统更新策略</h4><p>由于 FlatCar 是自动滚动更新的, 滚动更新时需要进行重启保证 A&#x2F;B 分区切换, 所以为了可控性一般我们需要配置一下可以重启的时间(更新策略):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/flatcar/update.conf</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0420</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-comment"># 如果有更新的话, 默认在每天 10:30 进行重启更新, 最长的更新窗口期为 1 小时</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          REBOOT_STRATEGY=reboot</span><br><span class="hljs-string">          LOCKSMITHD_REBOOT_WINDOW_START=10:30</span><br><span class="hljs-string">          LOCKSMITHD_REBOOT_WINDOW_LENGTH=1h</span><br></code></pre></td></tr></table></figure><h4 id="5-7-6、其他配置"><a href="#5-7-6、其他配置" class="headerlink" title="5.7.6、其他配置"></a>5.7.6、其他配置</h4><p>文件配置是一个灵活的配置选项, 除了做一些系统配置外我们还可以利用它放入一些我们自己的东西, 比如自定义脚本之类的:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/scripts/pre-update.sh</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0755</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          #!/usr/bin/env bash</span><br><span class="hljs-string"></span><br>          <span class="hljs-string">curl</span> <span class="hljs-string">-fsSL</span> <span class="hljs-string">-XPOST</span> <span class="hljs-string">-H</span> <span class="hljs-string">&#x27;Authorization: Bearer xxxxxxxxxxxxxxxxxxxxx&#x27;</span> <span class="hljs-string">https://noti.example.com/message</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;markdown=false&#x27;</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;message=应用正在更新...&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-8、Systemd-配置"><a href="#5-8、Systemd-配置" class="headerlink" title="5.8、Systemd 配置"></a>5.8、Systemd 配置</h3><p>当需要运行特定服务时, 一般我们需要创建一个 Systemd Service 配置文件, 这时就需要使用 Systemd 配置; Systemd 配置与文件配置类似, 不同之处在于 Systemd 配置虽然也只是定义 Systemd 文件, 但是提供了自启动等针对于 Systemd 的高级配置. 以下为运行 watchtower 容器的样例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">systemd:</span><br>  <span class="hljs-attr">units:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">watchtower.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=A container-based solution for automating Docker container base image updates.</span><br><span class="hljs-string">        After=network-online.target</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">ExecStartPre=-/usr/bin/docker</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">watchtower</span><br>        <span class="hljs-string">ExecStartPre=/usr/bin/docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">containrrr/watchtower</span><br>        <span class="hljs-string">ExecStart=/usr/bin/docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--tty</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--name</span> <span class="hljs-string">watchtower</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="hljs-string">\</span><br>                                    <span class="hljs-string">containrrr/watchtower</span> <span class="hljs-string">--cleanup</span> <span class="hljs-string">--interval</span> <span class="hljs-number">3600</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br></code></pre></td></tr></table></figure><p><strong>需要注意的是, <code>name</code> 属性需要以完整的 systemd units 名称结尾, 即可以通过文件名指定 units 类型, 例如 <code>test.timer</code> 代表创建一个定时器.</strong></p><h3 id="5-9、内核参数配置"><a href="#5-9、内核参数配置" class="headerlink" title="5.9、内核参数配置"></a>5.9、内核参数配置</h3><p>除了一些常规配置以外, 特殊情况下可能需要配置一些内核参数来控制系统行为; 比如默认情况下 FlatCar 会自动登录, 想关闭此行为可以通过一下配置调整内核参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kernel_arguments:</span><br>  <span class="hljs-comment"># 确保将特定参数从内核参数中移除</span><br>  <span class="hljs-attr">should_not_exist:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">flatcar.autologin</span><br></code></pre></td></tr></table></figure><p>同样也可以使用 <code>should_exist</code> 添加一些内核参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kernel_arguments:</span><br>  <span class="hljs-comment"># 确保特定参数被添加到内核参数列表</span><br>  <span class="hljs-attr">should_exist:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">systemd.unified_cgroup_hierarchy=0</span><br></code></pre></td></tr></table></figure><h2 id="六、完整样例"><a href="#六、完整样例" class="headerlink" title="六、完整样例"></a>六、完整样例</h2><p>以下是一个 FlatCar 部署 GitLab 的完整样例, 仅供参考:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">variant:</span> <span class="hljs-string">flatcar</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">kernel_arguments:</span><br>  <span class="hljs-attr">should_not_exist:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">flatcar.autologin</span><br><span class="hljs-attr">passwd:</span><br>  <span class="hljs-attr">users:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment"># openssl passwd -6 -salt SALT PASSWORD</span><br>      <span class="hljs-attr">password_hash:</span> <span class="hljs-string">$6$kovacs$7svc/7vosETJvIXF3G1SIV9NGdu.j6FRPHPR9DAp0nAQ1CnLuc766hHJQWZlJjlCRj9Nlx4KJjSMGcdtvH4dJ/</span><br>      <span class="hljs-attr">ssh_authorized_keys:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ssh-ed25519</span> <span class="hljs-string">AAAAC3NzaC1lZDI1NTE5AAAAIMskC9phaoO1WJkQOvXcUxH+DlG8u/2u1ReMXOO9vkbW</span> <span class="hljs-string">mritd@linux.com</span><br><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">filesystems:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">device:</span> <span class="hljs-string">/dev/disk/by-partlabel/ROOT</span><br>      <span class="hljs-attr">wipe_filesystem:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">xfs</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">ROOT</span><br>  <span class="hljs-comment"># TimeZone</span><br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/localtime</span><br>      <span class="hljs-attr">target:</span> <span class="hljs-string">../usr/share/zoneinfo/Asia/Shanghai</span><br><br>  <span class="hljs-attr">files:</span><br>    <span class="hljs-comment"># Update policy</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/flatcar/update.conf</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0420</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          REBOOT_STRATEGY=reboot</span><br><span class="hljs-string">          LOCKSMITHD_REBOOT_WINDOW_START=10:30</span><br><span class="hljs-string">          LOCKSMITHD_REBOOT_WINDOW_LENGTH=1h</span><br><span class="hljs-string"></span>    <span class="hljs-comment"># Sysctl Config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sysctl.d/55-custom.conf</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          net.core.rmem_max=2500000</span><br><span class="hljs-string"></span>    <span class="hljs-comment"># Set hostname</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/hostname</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0644</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">gitlab</span><br>    <span class="hljs-comment"># Set static ip</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/network/25-xnet.network</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          [Match]</span><br><span class="hljs-string">          Name=en*</span><br><span class="hljs-string"></span><br>          [<span class="hljs-string">Network</span>]<br>          <span class="hljs-string">DHCP=no</span><br>          <span class="hljs-string">NTP=time.windows.com</span> <span class="hljs-string">time.apple.com</span><br><br>          [<span class="hljs-string">Address</span>]<br>          <span class="hljs-string">Address=172.16.1.6/24</span><br><br>          [<span class="hljs-string">Route</span>]<br>          <span class="hljs-string">Destination=0.0.0.0/0</span><br>          <span class="hljs-string">Gateway=172.16.1.1</span><br>    <span class="hljs-comment"># DNS Config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/systemd/resolved.conf.d/25-xnet.conf</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          [Resolve]</span><br><span class="hljs-string">          DNS=223.5.5.5</span><br><span class="hljs-string">          DNS=119.29.29.29</span><br><span class="hljs-string">          #Domains=~.</span><br><span class="hljs-string">          #DNSStubListener=no</span><br><span class="hljs-string"></span><br>    <span class="hljs-comment"># GitLab Config</span><br>    <span class="hljs-comment"># ref: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/gitlab/gitlab.rb</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          external_url &#x27;https://git.example.com&#x27;</span><br><span class="hljs-string"></span><br>          <span class="hljs-string">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br>          <span class="hljs-comment">### GitLab email server settings</span><br>          <span class="hljs-comment">###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html</span><br>          <span class="hljs-comment">###! **Use smtp instead of sendmail/postfix.**</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_enable&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_address&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;smtp.example.com&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_port&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-number">465</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;gitlab@example.com&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_password&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;asdassgdfgd&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_domain&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;example.com&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;login&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br>          <span class="hljs-string">gitlab_rails[&#x27;smtp_tls&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br>          <span class="hljs-string">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;gitlab@example.com&#x27;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;gitlab@example.com&#x27;</span><br><br>          <span class="hljs-comment">### Default Theme</span><br>          <span class="hljs-comment">### Available values:</span><br>          <span class="hljs-comment">##! `1`  for Indigo</span><br>          <span class="hljs-comment">##! `2`  for Dark</span><br>          <span class="hljs-comment">##! `3`  for Light</span><br>          <span class="hljs-comment">##! `4`  for Blue</span><br>          <span class="hljs-comment">##! `5`  for Green</span><br>          <span class="hljs-comment">##! `6`  for Light Indigo</span><br>          <span class="hljs-comment">##! `7`  for Light Blue</span><br>          <span class="hljs-comment">##! `8`  for Light Green</span><br>          <span class="hljs-comment">##! `9`  for Red</span><br>          <span class="hljs-comment">##! `10` for Light Red</span><br>          <span class="hljs-string">gitlab_rails[&#x27;gitlab_default_theme&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><br><br>          <span class="hljs-comment">### Reply by email</span><br>          <span class="hljs-comment">###! Allow users to comment on issues and merge requests by replying to</span><br>          <span class="hljs-comment">###! notification emails.</span><br>          <span class="hljs-comment">###! Docs: https://docs.gitlab.com/ee/administration/reply_by_email.html</span><br>          <span class="hljs-string">gitlab_rails[&#x27;incoming_email_enabled&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br><br>          <span class="hljs-comment">### GitLab Shell settings for GitLab</span><br>          <span class="hljs-string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-number">2222</span><br><br>          <span class="hljs-comment">#### Change the initial default admin password and shared runner registration tokens.</span><br>          <span class="hljs-comment">####! **Only applicable on initial setup, changing these settings after database</span><br>          <span class="hljs-comment">####!   is created and seeded won&#x27;t yield any change.**</span><br>          <span class="hljs-string">gitlab_rails[&#x27;initial_root_password&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;hgfghwerwefwfw&quot;</span><br>          <span class="hljs-string">gitlab_rails[&#x27;initial_shared_runners_registration_token&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;asfdfhfghfgsfsdfs&quot;</span><br><br>          <span class="hljs-comment">### Settings used by GitLab application</span><br>          <span class="hljs-string">gitlab_rails[&#x27;registry_enabled&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br><br>          <span class="hljs-comment">### Settings used by Registry application</span><br>          <span class="hljs-string">registry[&#x27;enable&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br><br>          <span class="hljs-comment">## GitLab NGINX</span><br>          <span class="hljs-string">nginx[&#x27;listen_port&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;2080&#x27;</span><br>          <span class="hljs-string">nginx[&#x27;listen_https&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br>          <span class="hljs-string">nginx[&#x27;redirect_http_to_https&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-literal">false</span><br>          <span class="hljs-string">nginx[&#x27;real_ip_trusted_addresses&#x27;]</span> <span class="hljs-string">=</span> [<span class="hljs-string">&#x27;127.0.0.0/8&#x27;</span>, <span class="hljs-string">&#x27;10.0.0.0/8&#x27;</span>, <span class="hljs-string">&#x27;172.16.0.0/12&#x27;</span>, <span class="hljs-string">&#x27;192.168.0.0/16&#x27;</span>]<br>          <span class="hljs-string">nginx[&#x27;real_ip_header&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span><br>          <span class="hljs-string">nginx[&#x27;real_ip_recursive&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;on&#x27;</span><br><br>          <span class="hljs-comment">## GitLab Logging</span><br>          <span class="hljs-string">logging[&#x27;logrotate_frequency&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;daily&quot;</span> <span class="hljs-comment"># rotate logs daily</span><br>          <span class="hljs-string">logging[&#x27;logrotate_size&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">nil</span> <span class="hljs-comment"># do not rotate by size by default</span><br>          <span class="hljs-string">logging[&#x27;logrotate_rotate&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-number">30</span> <span class="hljs-comment"># keep 30 rotated logs</span><br>          <span class="hljs-string">logging[&#x27;logrotate_compress&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;compress&quot;</span> <span class="hljs-comment"># see &#x27;man logrotate&#x27;</span><br>          <span class="hljs-string">logging[&#x27;logrotate_method&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;copytruncate&quot;</span> <span class="hljs-comment"># see &#x27;man logrotate&#x27;</span><br>          <span class="hljs-string">logging[&#x27;logrotate_postrotate&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">nil</span> <span class="hljs-comment"># no postrotate command by default</span><br>          <span class="hljs-string">logging[&#x27;logrotate_dateformat&#x27;]</span> <span class="hljs-string">=</span> <span class="hljs-string">nil</span> <span class="hljs-comment"># use date extensions for rotated files rather than numbers e.g. a value of &quot;-%Y-%m-%d&quot; would give rotated files like p</span><br><br>    <span class="hljs-comment"># Caddy config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/caddy/Caddyfile</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          (LOG_FILE) &#123;</span><br><span class="hljs-string">              log &#123;</span><br><span class="hljs-string">                  format transform &quot;[&#123;ts&#125;] &#123;request&gt;remote_ip&#125; [&#123;status&#125;] &#123;request&gt;proto&#125; &#123;request&gt;method&#125; &#123;request&gt;host&#125; &#123;request&gt;uri&#125; &#123;request&gt;headers&gt;User-Agent&gt;[0]&#125;&quot; &#123;</span><br><span class="hljs-string">                      time_format &quot;iso8601&quot;</span><br><span class="hljs-string">                  &#125;</span><br><span class="hljs-string">                  output file &quot;&#123;args.0&#125;&quot; &#123;</span><br><span class="hljs-string">                      roll_size 100mb</span><br><span class="hljs-string">                      roll_keep 3</span><br><span class="hljs-string">                      roll_keep_for 7d</span><br><span class="hljs-string">                  &#125;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string"></span>          <br>          <span class="hljs-string">(TLS_MODERN)</span> &#123;<br>              <span class="hljs-string">protocols</span> <span class="hljs-string">tls1.3</span><br>          &#125;<br>          <br>          <span class="hljs-string">(TLS_INTERMEDIATE)</span> &#123;<br>              <span class="hljs-string">protocols</span> <span class="hljs-string">tls1.2</span> <span class="hljs-string">tls1.3</span><br>              <span class="hljs-string">ciphers</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</span><br>          &#125;<br>          <br>          <span class="hljs-string">(TLS_OLD)</span> &#123;<br>              <span class="hljs-string">protocols</span> <span class="hljs-string">tls1.0</span> <span class="hljs-string">tls1.3</span><br>              <span class="hljs-string">ciphers</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</span> <span class="hljs-string">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</span> <span class="hljs-string">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</span> <span class="hljs-string">TLS_RSA_WITH_AES_128_GCM_SHA256</span> <span class="hljs-string">TLS_RSA_WITH_AES_256_GCM_SHA384</span> <span class="hljs-string">TLS_RSA_WITH_AES_128_CBC_SHA</span> <span class="hljs-string">TLS_RSA_WITH_AES_256_CBC_SHA</span> <span class="hljs-string">TLS_RSA_WITH_3DES_EDE_CBC_SHA</span><br>          &#125;<br>          <br>          <span class="hljs-string">(HSTS)</span> &#123;<br>              <span class="hljs-comment"># HSTS (63072000 seconds)</span><br>              <span class="hljs-string">header</span> <span class="hljs-string">/</span> <span class="hljs-string">Strict-Transport-Security</span> <span class="hljs-string">&quot;max-age=63072000&quot;</span><br>          &#125;<br>          <br>          <span class="hljs-string">(SECURITY)</span> &#123;<br>              <span class="hljs-comment"># hidden server name</span><br>              <span class="hljs-string">header</span> <span class="hljs-string">-Server</span><br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_PROVIDER_CLOUDFLARE)</span> &#123;<br>              <span class="hljs-string">dns</span> <span class="hljs-string">cloudflare</span> &#123;<span class="hljs-string">$CLOUDFLARE_API_TOKEN</span>&#125;<br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_PROVIDER_DNSPOD)</span> &#123;<br>              <span class="hljs-string">dns</span> <span class="hljs-string">dnspod</span> &#123;<span class="hljs-string">$DNSPOD_TOKEN</span>&#125;<br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_PROVIDER_DUCKDNS)</span> &#123;<br>              <span class="hljs-string">dns</span> <span class="hljs-string">duckdns</span> &#123;<span class="hljs-string">$DUCKDNS_API_TOKEN</span>&#125;<br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_PROVIDER_GANDI)</span> &#123;<br>              <span class="hljs-string">dns</span> <span class="hljs-string">gandi</span> &#123;<span class="hljs-string">$GANDI_API_TOKEN</span>&#125;<br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_PROVIDER_ALIYUN)</span> &#123;<br>              <span class="hljs-string">dns</span> <span class="hljs-string">alidns</span> &#123;<br>                  <span class="hljs-string">access_key_id</span> &#123;<span class="hljs-string">$ALIYUN_ACCESS_KEY_ID</span>&#125;<br>                  <span class="hljs-string">access_key_secret</span> &#123;<span class="hljs-string">$ALIYUN_ACCESS_KEY_SECRET</span>&#125;<br>              &#125;<br>          &#125;<br>          <br>          <span class="hljs-string">(ACME_DNS)</span> &#123;<br>              <span class="hljs-comment"># 压缩支持</span><br>              <span class="hljs-string">encode</span> <span class="hljs-string">zstd</span> <span class="hljs-string">gzip</span><br>          <br>              <span class="hljs-comment"># TLS 配置</span><br>              <span class="hljs-string">tls</span> &#123;<br>                  <span class="hljs-string">import</span> <span class="hljs-string">TLS_</span>&#123;<span class="hljs-string">args.0</span>&#125;<br>                  <span class="hljs-string">import</span> <span class="hljs-string">ACME_PROVIDER_</span>&#123;<span class="hljs-string">args.1</span>&#125;<br>                  <span class="hljs-string">resolvers</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>              &#125;<br>          <br>              <span class="hljs-comment"># HSTS</span><br>              <span class="hljs-string">import</span> <span class="hljs-string">HSTS</span><br>          <br>              <span class="hljs-comment"># security config</span><br>              <span class="hljs-string">import</span> <span class="hljs-string">SECURITY</span><br>          &#125;<br>          <br>          <br>          <span class="hljs-comment"># sysctl -w net.core.rmem_max=2500000</span><br>          <span class="hljs-comment"># ref https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size</span><br>          &#123;<br>              <span class="hljs-comment"># ZeroSSL</span><br>              <span class="hljs-string">acme_ca</span> <span class="hljs-string">https://acme.zerossl.com/v2/DV90</span><br>              <span class="hljs-comment">#email &#123;$ACME_EMAIL:&#125;</span><br>              <span class="hljs-comment">#cert_issuer &#123;$ACME_ISSUER:&#125; &#123;$ACME_ISSUER_PARAMS:&#125;</span><br>          <br>              <span class="hljs-comment"># ECC cert</span><br>              <span class="hljs-string">key_type</span> <span class="hljs-string">p384</span><br>          <br>              <span class="hljs-string">servers</span> <span class="hljs-string">:443</span> &#123;<br>                  <span class="hljs-string">protocols</span> <span class="hljs-string">h1</span> <span class="hljs-string">h2</span> <span class="hljs-string">h3</span><br>              &#125;<br>          <br>          &#125;<br><br>          <span class="hljs-string">git.example.com</span> &#123;<br>              <span class="hljs-string">reverse_proxy</span> <span class="hljs-string">gitlab:2080</span><br>          <br>              <span class="hljs-string">import</span> <span class="hljs-string">ACME_DNS</span> <span class="hljs-string">MODERN</span> <span class="hljs-string">ALIYUN</span><br>              <span class="hljs-string">import</span> <span class="hljs-string">LOG_FILE</span> <span class="hljs-string">/data/git.example.com.log</span><br>          &#125;<br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/caddy/env</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ALIYUN_ACCESS_KEY_ID=xxxxxxxxxxxxxxxxxxxx</span><br><span class="hljs-string">          ALIYUN_ACCESS_KEY_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/mc/config.json</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          &#123;</span><br><span class="hljs-string">            &quot;version&quot;: &quot;10&quot;,</span><br><span class="hljs-string">            &quot;aliases&quot;: &#123;</span><br><span class="hljs-string">              &quot;nas&quot;: &#123;</span><br><span class="hljs-string">                &quot;url&quot;: &quot;https://s3.example.com&quot;,</span><br><span class="hljs-string">                &quot;accessKey&quot;: &quot;admin&quot;,</span><br><span class="hljs-string">                &quot;secretKey&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxx&quot;,</span><br><span class="hljs-string">                &quot;api&quot;: &quot;s3v4&quot;,</span><br><span class="hljs-string">                &quot;path&quot;: &quot;auto&quot;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/scripts/gitlab-backup.sh</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0755</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          #!/usr/bin/env bash</span><br><span class="hljs-string"></span>          <br>          <span class="hljs-string">set</span> <span class="hljs-string">-e</span><br>          <br>          <span class="hljs-string">TMPDIR=$(mktemp</span> <span class="hljs-string">-d)</span><br>          <span class="hljs-string">BACKUP_DIR=$&#123;TMPDIR&#125;/gitlab</span><br>          <span class="hljs-string">BACKUP_DATE=$(date</span> <span class="hljs-string">&#x27;+%Y-%m-%d-%H-%M-%S&#x27;</span><span class="hljs-string">)</span><br>          <span class="hljs-string">BACKUP_FILE=$&#123;BACKUP_DATE&#125;_gitlab_backup.tar</span><br>          <span class="hljs-string">GITLAB_VERSION=$(docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-rails</span> <span class="hljs-string">runner</span> <span class="hljs-string">&#x27;puts Gitlab::VERSION&#x27;</span><span class="hljs-string">)</span><br>          <span class="hljs-string">PACKAGE_NAME=gitlab_$&#123;GITLAB_VERSION&#125;_$&#123;BACKUP_DATE&#125;.tar</span><br>          <br>          <span class="hljs-string">function</span> <span class="hljs-string">cleanup()&#123;</span><br>              <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">$&#123;TMPDIR&#125;</span><br>          <span class="hljs-string">&#125;</span><br>          <br>          <span class="hljs-string">trap</span> <span class="hljs-string">cleanup</span> <span class="hljs-string">EXIT</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;GitLab Backup Running...&quot;</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Backup Filename =&gt; $&#123;PACKAGE_NAME&#125;&quot;</span><br>          <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">$&#123;BACKUP_DIR&#125;</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Creating GitLab Backup Tarball...&quot;</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-i</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-backup</span> <span class="hljs-string">create</span> <span class="hljs-string">BACKUP=$&#123;BACKUP_DATE&#125;</span> <span class="hljs-string">STRATEGY=copy</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Moving GitLab Tarball...&quot;</span><br>          <span class="hljs-string">mv</span> <span class="hljs-string">/data/gitlab/data/backups/$&#123;BACKUP_FILE&#125;</span> <span class="hljs-string">$&#123;BACKUP_DIR&#125;</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Copying GitLab Config...&quot;</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">cp</span> <span class="hljs-string">gitlab:/etc/gitlab/gitlab.rb</span> <span class="hljs-string">$&#123;BACKUP_DIR&#125;</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">cp</span> <span class="hljs-string">gitlab:/etc/gitlab/gitlab-secrets.json</span> <span class="hljs-string">$&#123;BACKUP_DIR&#125;</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Packaging All Backup Files...&quot;</span><br>          <span class="hljs-string">(cd</span> <span class="hljs-string">$&#123;TMPDIR&#125;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">tar</span> <span class="hljs-string">-cvf</span> <span class="hljs-string">$&#123;PACKAGE_NAME&#125;</span> <span class="hljs-string">gitlab)</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Sync Backup File To Remote Storage...&quot;</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--rm</span> <span class="hljs-string">-v</span> <span class="hljs-string">/etc/mc:/root/.mc</span> <span class="hljs-string">-v</span> <span class="hljs-string">/tmp:/host/tmp</span> <span class="hljs-string">hub.mi.os.sb/minio/mc</span> <span class="hljs-string">cp</span> <span class="hljs-string">/host/$&#123;TMPDIR&#125;/$&#123;PACKAGE_NAME&#125;</span> <span class="hljs-string">nas/gitlab/$&#123;PACKAGE_NAME&#125;</span><br>          <br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Backup Success!&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/scripts/gitlab-restore.sh</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-number">0755</span><br>      <span class="hljs-attr">contents:</span><br>        <span class="hljs-attr">inline:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          #!/usr/bin/env bash</span><br><span class="hljs-string"></span>          <br>          <span class="hljs-string">set</span> <span class="hljs-string">-e</span><br>          <br>          <span class="hljs-string">tar</span> <span class="hljs-string">-xvf</span> <span class="hljs-string">$1</span><br>          <br>          <span class="hljs-string">TARBALL=$(basename</span> <span class="hljs-string">$(find</span> <span class="hljs-string">gitlab/</span> <span class="hljs-string">-type</span> <span class="hljs-string">f</span> <span class="hljs-string">-name</span> <span class="hljs-string">&#x27;*.tar&#x27;</span> <span class="hljs-string">|</span> <span class="hljs-string">head</span> <span class="hljs-string">-n</span> <span class="hljs-number">1</span><span class="hljs-string">))</span><br>          <span class="hljs-string">BACKUP_NAME=$(echo</span> <span class="hljs-string">$&#123;TARBALL&#125;</span> <span class="hljs-string">|</span> <span class="hljs-string">sed</span> <span class="hljs-string">&#x27;s@_gitlab_backup.tar$@@&#x27;</span><span class="hljs-string">)</span><br>          <br>          <span class="hljs-string">mv</span> <span class="hljs-string">gitlab/$&#123;TARBALL&#125;</span> <span class="hljs-string">/data/gitlab/data/backups</span><br>          <span class="hljs-string">chmod</span> <span class="hljs-number">777</span> <span class="hljs-string">/data/gitlab/data/backups/$&#123;TARBALL&#125;</span><br>          <br>          <span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">stop</span> <span class="hljs-string">puma</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-ctl</span> <span class="hljs-string">stop</span> <span class="hljs-string">sidekiq</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-backup</span> <span class="hljs-string">restore</span> <span class="hljs-string">BACKUP=$&#123;BACKUP_NAME&#125;</span> <span class="hljs-string">force=yes</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">gitlab-rake</span> <span class="hljs-string">gitlab:check</span> <span class="hljs-string">SANITIZE=true</span><br>          <br>          <span class="hljs-string">docker</span> <span class="hljs-string">cp</span> <span class="hljs-string">gitlab/gitlab.rb</span> <span class="hljs-string">gitlab:/etc/gitlab</span><br>          <span class="hljs-string">docker</span> <span class="hljs-string">cp</span> <span class="hljs-string">gitlab/gitlab-secrets.json</span> <span class="hljs-string">gitlab:/etc/gitlab</span><br>          <br>          <span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">gitlab</span><br>          <span class="hljs-string">journalctl</span> <span class="hljs-string">-fu</span> <span class="hljs-string">gitlab</span><br><br><span class="hljs-attr">systemd:</span><br>  <span class="hljs-attr">units:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=The DevSecOps Platform</span><br><span class="hljs-string">        After=network-online.target</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">TimeoutStartSec=0</span><br>        <span class="hljs-string">ExecStartPre=-/usr/bin/docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">gitlab/gitlab-ce</span> <br>        <span class="hljs-string">ExecStart=/usr/bin/docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--rm</span> <span class="hljs-string">--tty</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--name</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--hostname</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-p</span> <span class="hljs-number">2222</span><span class="hljs-string">:22</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-p</span> <span class="hljs-number">2080</span><span class="hljs-string">:2080</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-e</span> <span class="hljs-string">GITLAB_OMNIBUS_CONFIG=&quot;from_file(&#x27;/host/etc/gitlab/gitlab.rb&#x27;)&quot;</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/etc/gitlab:/host/etc/gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/opt/scripts:/host/opt/scripts</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/data/gitlab/data:/var/opt/gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/data/gitlab/logs:/var/log/gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/data/gitlab/config:/etc/gitlab</span> <span class="hljs-string">\</span><br>                                    <span class="hljs-string">gitlab/gitlab-ce</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-backup.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=GitLab Backup Service</span><br><span class="hljs-string">        After=network-online.target gitlab.service</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span>        <br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">Type=simple</span><br>        <span class="hljs-string">Restart=on-failure</span><br>        <span class="hljs-string">ExecStart=/opt/scripts/gitlab-backup.sh</span><br>        <br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">gitlab-backup.timer</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=GitLab Auto Backup Timer</span><br><span class="hljs-string">        After=network-online.target gitlab.service</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span>        <br>        [<span class="hljs-string">Timer</span>]<br>        <span class="hljs-comment"># Run at 3am, 11am, 5pm and 8pm every day in UTC+8</span><br>        <span class="hljs-string">OnCalendar=*-*-*</span> <span class="hljs-number">3</span><span class="hljs-string">,11,17,20:00:00</span> <span class="hljs-string">Asia/Shanghai</span><br>        <br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=timers.target</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">caddy.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=The Ultimate Server</span><br><span class="hljs-string">        After=network-online.target gitlab.service</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">TimeoutStartSec=0</span><br>        <span class="hljs-string">ExecStartPre=-/usr/bin/docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">mritd/caddy</span><br>        <span class="hljs-string">ExecStart=/usr/bin/docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--rm</span> <span class="hljs-string">--tty</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--name</span> <span class="hljs-string">caddy</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--env-file</span> <span class="hljs-string">/etc/caddy/env</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--link</span> <span class="hljs-string">gitlab</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-p</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-p</span> <span class="hljs-number">443</span><span class="hljs-string">:443/tcp</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-p</span> <span class="hljs-number">443</span><span class="hljs-string">:443/udp</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/etc/caddy:/etc/caddy</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/data/caddy/data:/data</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/data/caddy/config:/config</span> <span class="hljs-string">\</span><br>                                    <span class="hljs-string">mritd/caddy</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">watchtower.service</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        [Unit]</span><br><span class="hljs-string">        Description=A container-based solution for automating Docker container base image updates.</span><br><span class="hljs-string">        After=network-online.target</span><br><span class="hljs-string">        Wants=network-online.target</span><br><span class="hljs-string"></span><br>        [<span class="hljs-string">Service</span>]<br>        <span class="hljs-string">ExecStartPre=/usr/bin/docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">containrrr/watchtower</span><br>        <span class="hljs-string">ExecStart=/usr/bin/docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--rm</span> <span class="hljs-string">--tty</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">--name</span> <span class="hljs-string">watchtower</span> <span class="hljs-string">\</span><br>                                  <span class="hljs-string">-v</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="hljs-string">\</span><br>                                    <span class="hljs-string">containrrr/watchtower</span> <span class="hljs-string">--cleanup</span> <span class="hljs-string">--schedule</span> <span class="hljs-string">&quot;0 30 17 * * *&quot;</span><br><br>        [<span class="hljs-string">Install</span>]<br>        <span class="hljs-string">WantedBy=multi-user.target</span><br><br></code></pre></td></tr></table></figure><h2 id="七、其他说明"><a href="#七、其他说明" class="headerlink" title="七、其他说明"></a>七、其他说明</h2><p>默认情况下 FlatCar 的 <code>/usr</code> 分区是不可写入的, 所以不要尝试向此目录中写入文件这会导致启动失败; 除此之外类似 <code>/opt</code> 之类的目录都可以持久化存放数据; 不过 Fedora CoreOS 似乎并不相同, 具体需要查阅官方文档.</p><p>FlatCar 如果想要扩展一些系统级的目录需要使用 Systemd-sysext, 具体请查看 <a href="https://www.flatcar.org/docs/latest/provisioning/sysext/">官方文档</a>; Fedora CoreOS 可以通过 rpm-ostree 直接安装软件包, 但有些服务可能需要重启才能生效(例如 open-vm-tools).</p><p>本篇文章仅描述了基本使用, 复杂情况例如批量更新控制等限于篇幅还请阅读官方文档.</p>]]></content>
    
    
    <summary type="html">最近折腾透明代理, 以前一直 Ubuntu 打天下, 闲来无事试试容器化系统.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/categories/linux/docker/"/>
    
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="CoreOS" scheme="https://mritd.com/tags/coreos/"/>
    
    <category term="FlatCar" scheme="https://mritd.com/tags/flatcar/"/>
    
  </entry>
  
  <entry>
    <title>Golang 编写 MySQL UDF</title>
    <link href="https://mritd.com/2023/05/23/write-mysql-udf-in-golang/"/>
    <id>https://mritd.com/2023/05/23/write-mysql-udf-in-golang/</id>
    <published>2023-05-23T05:20:00.000Z</published>
    <updated>2023-05-23T05:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、MySQL-UDF"><a href="#一、MySQL-UDF" class="headerlink" title="一、MySQL UDF"></a>一、MySQL UDF</h2><p>这玩意全称 “MySQL user-definable function”, 从名字就可以看出来叫 “用户定义的方法”; 那么 UDF 到底是干啥的呢?</p><p>简单一句话说就是说: <strong>你可以自己写点代码处理数据, 然后把这段代码编译成动态链接库(so), 最后在 MySQL 中动态加载后用户就可以用了.</strong></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>由于要检查数据库, 但是实际上审查并不会关注每个表甚至数据库细节; 所以想到最简单的方案就是在读取和写入时通过 UDF 定义一个 SM4 的加密算法把数据动态加密和解密, 关于其他细节这里不做详细说明, 本文主要阐述如何用 Go 搓一个简单的 UDF 并使用.</p><h2 id="三、UDF-方法"><a href="#三、UDF-方法" class="headerlink" title="三、UDF 方法"></a>三、UDF 方法</h2><p>由于 UDF 官方支持是 C&#x2F;C++, 所以在 Go 中需要使用 CGO; 一个 UDF 实现通常包含两个 func:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">xxx_init</span><span class="hljs-params">(initid *C.UDF_INIT, args *C.UDF_ARGS, message *C.char)</span></span> C.<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">// ... 逻辑实现</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">xxx</span><span class="hljs-params">(initid *C.UDF_INIT, args *C.UDF_ARGS, result *C.char, length *C.ulong, is_null *C.char, <span class="hljs-type">error</span> *C.char)</span></span> *C.char &#123;<br>    <span class="hljs-comment">// ...逻辑实现</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>xxx_init</code> 用于预检查, <code>xxx</code> 作为真正的逻辑实现; 当 <code>xxx</code> 方法被调用之前会先通过 <code>xxx_init</code> 方法做一次参数、内存分配等预处理.</p><p><strong>注意: 从 MySQL 8.0.1 开始 <code>xxx_init</code> 的返回值从 <code>my_bool</code> 变更为 <code>int</code>, 网上很多代码写 <code>my_bool</code> 的会导致无法通过编译; 具体参考 <a href="https://bugs.mysql.com/bug.php?id=85131">https://bugs.mysql.com/bug.php?id=85131</a></strong></p><h3 id="四、Go-实现-UDF"><a href="#四、Go-实现-UDF" class="headerlink" title="四、Go 实现 UDF"></a>四、Go 实现 UDF</h3><p>知道了方法签名以后, 就不多废话直接上代码实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// #include &lt;stdio.h&gt;</span><br><span class="hljs-comment">// #include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">// #include &lt;sys/stat.h&gt;</span><br><span class="hljs-comment">// #include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;mysql.h&gt;</span><br><span class="hljs-comment">// #cgo CFLAGS: -D ENVIRONMENT=0 -I/usr/include/mysql -fno-omit-frame-pointer</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/tjfoc/gmsm/sm4&quot;</span><br>)<br><br><span class="hljs-comment">//export xsm4_enc_init</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">xsm4_enc_init</span><span class="hljs-params">(initid *C.UDF_INIT, args *C.UDF_ARGS, message *C.char)</span></span> C.<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> args.arg_count != <span class="hljs-number">1</span> &#123;<br>msg := <span class="hljs-string">&quot;xsm4_enc() 仅支持单个字符串参数\n&quot;</span><br>C.strcpy(message, C.CString(msg))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">//export xsm4_enc</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">xsm4_enc</span><span class="hljs-params">(initid *C.UDF_INIT, args *C.UDF_ARGS, result *C.char, length *C.ulong, is_null *C.char, <span class="hljs-type">error</span> *C.char)</span></span> *C.char &#123;<br><span class="hljs-comment">// 将 C 的指针转换为 Go 的类型</span><br><span class="hljs-keyword">var</span> str = C.GoString(*args.args)<br><br><span class="hljs-keyword">var</span> resp <span class="hljs-type">string</span><br>enc, err := sm4.Sm4Ecb([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;1234567890abcdef&quot;</span>), []<span class="hljs-type">byte</span>(str), <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>resp = err.Error()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resp = <span class="hljs-type">string</span>(enc)<br>&#125;<br><br><span class="hljs-comment">// 将结果转换为 C 的类型</span><br><span class="hljs-keyword">var</span> res = C.CString(resp)<br><br><span class="hljs-comment">// 设置输出参数</span><br>*length = C.ulong(<span class="hljs-built_in">len</span>(resp))<br>*is_null = <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 返回结果</span><br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><code>xsm4_enc_init</code> 方法做一下检查, 当前只支持单个字段参数, <code>xsm4_enc</code> 通过开源的 <code>gmsm</code> 库对传入的字段进行简单的 SM4 加密并返回; <strong>在真实环境中需要调用加密机来实现相关加密, 这里只演示直接使用开源库+固定密码.</strong></p><h2 id="五、编译并加载"><a href="#五、编译并加载" class="headerlink" title="五、编译并加载"></a>五、编译并加载</h2><p>将上面的代码保存为 <code>xsm4_enc.go</code>, 然后在安装有 MySQL 头文件的的服务器上使用以下命令编译:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go build -o xsm4_enc.so -buildmode=c-shared xsm4_enc.go<br></code></pre></td></tr></table></figure><p>如果没问题将会生成一个 <code>xsm4_enc.so</code> 文件, 如果提示 <code>C.xxx</code> 类型没找到等问题说明头文件没有加载, 自行检查或修改 <code>-I/usr/include/mysql</code> 位置.</p><p>生成好 so 文件以后将其复制到 MySQL 的插件目录(插件目录可通过 <code>SHOW VARIABLES LIKE &#39;plugin_dir&#39;;</code> 查询到):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> xsm4_enc.so /usr/lib/mysql/plugin/<br></code></pre></td></tr></table></figure><p>最后在 MySQL 中创建 UDF:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> xsm4_enc <span class="hljs-keyword">RETURNS</span> STRING SONAME <span class="hljs-string">&#x27;xsm4_enc.so&#x27;</span>;<br><br># 删除<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> xsm4_enc;<br></code></pre></td></tr></table></figure><h2 id="六、UDF-使用"><a href="#六、UDF-使用" class="headerlink" title="六、UDF 使用"></a>六、UDF 使用</h2><p>使用就简单了, 在查询的时候直接把你的 func 名称写上就行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, xsm4_enc(username), username <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><p>同理也可以创建一个解密 UDF, 当然这些 UDF 最终配合视图啥的做啥、怎么用就不做过多赘述了.</p>]]></content>
    
    
    <summary type="html">目前由于一些硬性的审查要求, 需要对 mysql 内的数据进行加密存储, 且算法需要使用国密算法; 由于时间紧迫又是某种层面的形式主义为主的审查, 就想着整点活来弄一下.</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    <category term="Database" scheme="https://mritd.com/categories/golang/database/"/>
    
    <category term="MySQL" scheme="https://mritd.com/categories/golang/database/mysql/"/>
    
    
    <category term="MySQL" scheme="https://mritd.com/tags/mysql/"/>
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
    <category term="Database" scheme="https://mritd.com/tags/database/"/>
    
    <category term="UDF" scheme="https://mritd.com/tags/udf/"/>
    
  </entry>
  
  <entry>
    <title>ESXi ARPL 安装黑群晖</title>
    <link href="https://mritd.com/2023/03/21/install-xpenology-on-esxi-using-arpl/"/>
    <id>https://mritd.com/2023/03/21/install-xpenology-on-esxi-using-arpl/</id>
    <published>2023-03-21T06:20:00.000Z</published>
    <updated>2023-03-21T06:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ARPL-介绍"><a href="#一、ARPL-介绍" class="headerlink" title="一、ARPL 介绍"></a>一、ARPL 介绍</h2><p>ARPL 全称 <code>Automated Redpill Loader</code>, 从名字可以看出其基于 Redpill 项目; 使用 ARPL 的优势在于:</p><ul><li>直接提供 ESXi 引导盘</li><li>基本全自动完成修复</li><li>提供友好地交互 UI</li><li>支持常用插件集成</li><li>基本一致保持在最新版本</li></ul><h2 id="二、初始化虚拟机"><a href="#二、初始化虚拟机" class="headerlink" title="二、初始化虚拟机"></a>二、初始化虚拟机</h2><h3 id="2-1、下载-ARPL"><a href="#2-1、下载-ARPL" class="headerlink" title="2.1、下载 ARPL"></a>2.1、下载 ARPL</h3><p>由于 ARPL 直接提供 ESXi 的磁盘镜像, 所以我们直接从 <a href="https://github.com/fbelavenuto/arpl/releases">Release</a> 页面下载最新的磁盘镜像即可:</p><p><img src="https://cdn.oss.link/markdown/UOxxvV.png"></p><h3 id="2-2、创建虚拟机"><a href="#2-2、创建虚拟机" class="headerlink" title="2.2、创建虚拟机"></a>2.2、创建虚拟机</h3><p>因为黑群晖需要安装在虚拟机中, 所以我们就需要先创建一下用于运行黑群晖的虚拟机, 不过在创建时有些选项需要调整:</p><ul><li>1、虚拟机名称随意, 客户机操作系统选择 Linux, <strong>内核选择 “其他 4.x Linux(64 位)”</strong></li><li>2、内存需要至少 4G, 且最好选择锁定内存(勾选预留所有客户机内存), 如后续采用 PCIE 直通则此步骤是必须的</li><li>3、不要额外创建其他硬盘, 默认创建的 <strong>“硬盘1” 磁盘控制器切换到 SATA 0:0</strong></li><li>4、删除默认的 SCSI 控制器还有 CD&#x2F;DVD 驱动器</li><li>5、<strong>引导选项必须设置为 BIOS 引导</strong></li><li>6、如果有购买的洗白码的话, 最好再添加一个网卡(新增网络适配器)</li></ul><p>具体请看下面的截图:</p><p><img src="https://cdn.oss.link/markdown/eRYhqP.png"></p><p><img src="https://cdn.oss.link/markdown/PPVDj3.png"></p><p><img src="https://cdn.oss.link/markdown/Uv81vJ.png"></p><p><img src="https://cdn.oss.link/markdown/uj7rVp.png"></p><h3 id="2-3、上传磁盘"><a href="#2-3、上传磁盘" class="headerlink" title="2.3、上传磁盘"></a>2.3、上传磁盘</h3><p>创建好虚拟机后, 需要使用下载的 ARPL 磁盘替换默认的启动磁盘, 在替换之前需要将我们下载的磁盘上传到 ESXi 虚拟机目录(先自行解压 ARPL zip 文件):</p><ul><li>1、首先在存储选项中找到虚拟机目录</li><li>2、在虚拟机目录中点击上载</li><li>3、上传两个 arpl 磁盘文件, <strong>上传成功后将只显示一个</strong></li></ul><p><img src="https://cdn.oss.link/markdown/Ewb5Me.png"></p><p><img src="https://cdn.oss.link/markdown/zSWqxd.png"></p><p><img src="https://cdn.oss.link/markdown/UiLiNG.png"></p><h3 id="2-4、调整启动盘"><a href="#2-4、调整启动盘" class="headerlink" title="2.4、调整启动盘"></a>2.4、调整启动盘</h3><p>我们需要使用 ARPL 的磁盘作为引导盘, 所以需要将默认的 “硬盘1” 替换为上传的 ARPL 磁盘; 这个替换操作一般两种方式:</p><ul><li>UI 添加: 直接在 UI 界面编辑虚拟机, 删除掉 “硬盘1”, 然后使用 “添加现有硬盘功能” 选择上传的 ARPL 硬盘</li><li>命令该配置: 先取消注册虚拟机, 然后 SSH 到 ESXi 宿主机通过直接编辑 <code>vmx</code> 文件更改 “硬盘1” 配置</li></ul><p>说下两者优缺点, 无疑第一种方式是最简单且好用的, 但是测试在 ESXi7+ 版本似乎没法识别 ARPL 的硬盘, 保存时会报错(测试是 UI BUG, 自己创建的硬盘重新导入也不行); 而第二种方式经过测试直接修改是完全没问题, 且在 ESXi8 上也没问题(第一种 ESXi8 一样不能用).</p><p><img src="https://cdn.oss.link/markdown/a5a7cF.png"></p><p>所以这里采用更通用的第二种方式, 直接修改 vmx 文件:</p><ul><li>1、首选在虚拟机列表中找到虚拟机, 右键 “取消注册”</li><li>2、ESXi 主机管理中启动 SSH 服务</li><li>3、通过 SSH 连接到 ESXi 主机, 进入到虚拟机目录</li><li>4、使用 <code>vi</code> 命令编辑 <code>[虚拟机名称].vmx</code> 文件</li><li>5、替换 <code>sata0:0.fileName = &quot;XPEnology.vmdk&quot;</code> 为 <code>sata0:0.fileName = &quot;arpl.vmdk&quot;</code> 并保存</li><li>6、重新注册虚拟机, 选择刚刚修改过的 <code>vmx</code> 文件</li></ul><p><img src="https://cdn.oss.link/markdown/ZzpGlE.png"></p><p><img src="https://cdn.oss.link/markdown/RjIku8.png"></p><p><img src="https://cdn.oss.link/markdown/g943Y1.png"></p><p><img src="https://cdn.oss.link/markdown/eBUToc.png"></p><p><img src="https://cdn.oss.link/markdown/nocDXT.png"></p><p><img src="https://cdn.oss.link/markdown/RXUpUa.png"></p><h3 id="2-5、调整必要参数"><a href="#2-5、调整必要参数" class="headerlink" title="2.5、调整必要参数"></a>2.5、调整必要参数</h3><p>经过上面的调整以后, 就可以直接启动黑群晖虚拟机并进行调整了; 虚拟机启动后会直接进入控制台, 并打印 VNC 访问地址, 我们需要使用 VNC 调整参数来安装黑群晖:</p><p><img src="https://cdn.oss.link/markdown/XmZdFG.png"></p><p>访问该地之后会看到一个菜单列表, 根据需要一步一步填写信息即可:</p><ul><li>1、Choose a model: 选择一个型号, 请根据需要自行填写</li><li>2、Choose a Build Number: 选择 build 版本, 一般直接最新的即可(选择型号后才会出现)</li><li>3、Choose a serial number: 选择序列号, 默认自动生成的, 无法登陆群晖账号等; 可以选择填写自己淘宝买的</li><li>4、Addons: 添加插件驱动等, <strong>如果没有必要请不要添加, 除非你知道你在干什么</strong></li><li>5、Cmdline menu: 启动参数, 核心配置, 可以在此调整网卡数量和添加自己的 mac 地址</li><li>6、Build the loader: 编译引导, 这一步会自动化下载文件并编译引导</li></ul><p>下面是一系列的操作截图和说明, <strong>推荐完全看完后再操作, 关于特殊的网卡和磁盘参数下一部分会有详细说明</strong>:</p><p><img src="https://cdn.oss.link/markdown/8xIb9W.png"></p><p><img src="https://cdn.oss.link/markdown/CA9ehO.png"></p><p><img src="https://cdn.oss.link/markdown/wvZJnX.png"></p><p><img src="https://cdn.oss.link/markdown/PB9BCB.png"></p><p><img src="https://cdn.oss.link/markdown/VhVOQL.png"></p><p><img src="https://cdn.oss.link/markdown/AmWZOi.png"></p><p><img src="https://cdn.oss.link/markdown/PlCcnx.png"></p><p><img src="https://cdn.oss.link/markdown/hO6uCt.png"></p><p><img src="https://cdn.oss.link/markdown/URWiXY.png"></p><p><img src="https://cdn.oss.link/markdown/fn9V82.png"></p><h3 id="2-6、必要参数说明"><a href="#2-6、必要参数说明" class="headerlink" title="2.6、必要参数说明"></a>2.6、必要参数说明</h3><p>在调整参数时首次使用的用户可能比较懵逼, 下面详细说一下一些要点:</p><ul><li>1、菜单列表中只要选择了 “Yes” 或者 “Ok” 只要不重启就已经保存了, 保存完成后的 “Exit” 和 “Cancel” 都可以回退到上一层菜单, 不用担心没保存上.</li><li>2、像 “Cmdline menu” 之类的参数菜单一般都提供一个预览选项, 可以完整的看到自己设置的参数</li></ul><p><img src="https://cdn.oss.link/markdown/HyqKww.png"></p><h4 id="2-6-1、网卡参数配置"><a href="#2-6-1、网卡参数配置" class="headerlink" title="2.6.1、网卡参数配置"></a>2.6.1、网卡参数配置</h4><p><code>netif_num</code> 这个参数用于告诉群晖系统现在系统有几个网卡, 一般自己生成或者购买的洗白码都会给你两个 mac 地址; 所以通常 <code>netif_num</code> 会设置成 <code>2</code>, 当然如果你直接使用 arpl 随机生成的大概率不能登录群晖账号, 所以默认一个能联网就行.</p><p><code>mac[N]</code> 这个参数用于定义具体网卡的 mac 地址, 众所周知群晖账户登录校验是要判断网卡 mac 的; 所以一般买来的洗白码出了序列号意外也会给两个 mac 地址, 依次填写 <code>mac1</code>、<code>mac2</code> 就行; 同时推荐也在 ESXi 里把这两个 “网络适配器” 手动设置成跟群晖里一样的 mac 地址, 避免 ESXi 某些安全机制导致你没法联网:</p><p><img src="https://cdn.oss.link/markdown/tGGEy8.png"></p><h4 id="2-6-2、SataPortMap-和-DiskIdxMap"><a href="#2-6-2、SataPortMap-和-DiskIdxMap" class="headerlink" title="2.6.2、SataPortMap 和 DiskIdxMap"></a>2.6.2、SataPortMap 和 DiskIdxMap</h4><p><code>SataPortMap</code> 用于定义我们有几个 Sata 驱动器, 如果按照我的教程来走基本上是两个驱动器:</p><ul><li><code>Sata0</code>: 专门挂载 arpl 启动盘</li><li><code>Sata1</code>: 专门挂载用自己的磁盘, 主要用于 RDM 模式</li></ul><p>如果不使用 RDM 而是直通 Sata Controller, 那么理论上这个 Sata 控制器等同于 <code>Sata1</code>(都是第二个). 明白了这一点就好理解为什么 <code>SataPortMap</code> 教程里被设置为 <code>14</code> 了: 因为第一个 <code>Sata0</code> 肯定只有 arpl 启动盘, 所以是 <code>1</code>, 第二个需要根据用户实际情况自己写自己有几个盘; 我这里是 4 个 RDM, 所以自然写 <code>4</code>.</p><p><code>DiskIdxMap</code> 用于定义群晖里硬盘识别的计数, 有个小技巧就是如果你把某个 SATA 控制器上的磁盘计数设置成 <code>0F</code> 就会隐藏这个驱动器上的所有磁盘; 文章里 <code>0F00</code> 的意思就是告诉群晖: 挂 arpl 启动盘的这个 “Stata0” 控制器上所有磁盘给我隐藏掉, 所有硬盘序号从第二个控制器开始数”.</p><h3 id="2-7、添加物理硬盘"><a href="#2-7、添加物理硬盘" class="headerlink" title="2.7、添加物理硬盘"></a>2.7、添加物理硬盘</h3><blockquote><p>我在这一步翻车遇到了点问题, 当时以为是 ESXi 版本问题, 所以从 7.0 切换到 8.0; 后续截图会看到是 8.0 的截图, 所以不用怀疑, 我不是在胡编滥造… 当然升级 ESXi 8.0 以后得到了一个好消息和一个坏消息, 好消息是确实是版本问题, 坏消息是 8.0 也特么没修复(郭德纲经典相声了属于是)…</p></blockquote><p><del>这部分本来不太想写, 网上随便一搜就有</del>(翻车了…); 简单的说 ESXi 把物理硬盘直通到虚拟机里就两种方式, 一种是编辑 <code>/etc/vmware/passthru.map</code> 直接把 SATA 控制器直通进去, 另一种就是采用 RDM 方式创建 RDM 磁盘链接来直通; 两种方式孰优孰劣这里不做讨论; 唯一要说明的是如果采用 RDM 记得把 RDM 盘挂载到 <code>Sata1</code> 上, 因为上面的 <code>SataPortMap</code> 和 <code>DiskIdxMap</code> 都是按照两个 SATA 控制器设计的.</p><p>下面是我添加 RDM 的一些步骤和截图, 仅供参考:</p><hr><p><strong>首先命令行创建 RDM 磁盘, 核心命令就是 <code>vmkfstools -z &quot;物理磁盘路径&quot; &quot;RDM 磁盘路径&quot;</code>:</strong></p><p><img src="https://cdn.oss.link/markdown/iOtGOE.png"></p><hr><p>接下来就是把 RDM 磁盘添加到虚拟机里; 说起来我写文章的时候觉得我以前操作很简单… 没想到这里翻车了; 简单说下问题, 估计大部分人跟我都一样, <strong>RDM 创建好以后发现添加现有硬盘添加不上, 表现跟上面说 UI 添加 ARPL 磁盘一样, 都是容量不显示也没法保存</strong>; 经过查论坛文章发现这是从 “ESXi 7.0 Update 3i” 版本开始导致的 UI BUG, 目前解决方案只有通过 PowerCLI 命令行方式解决:</p><ul><li>1、准备一台 Windows 11 的虚拟机, 以管理员权限运行 PowerCLI(Terminal)</li><li>2、执行 <code>Install-Module VMware.PowerCLI</code> 安装 VMWare 的命令行工具, 过程中出现的提示全部选 “(Y) 是”</li><li>3、执行 <code>Set-ExecutionPolicy Unrestricted</code> 设置执行策略不受限制</li><li>4、执行 <code>Set-PowerCLIConfiguration -Scope User -InvalidCertificateAction warn</code> 设置忽略 TLS 证书不信任问题(一般 ESXi 默认自签名证书)</li><li>5、退出终端重新打开, 同样要以管理员身份运行</li><li>6、执行 <code>Connect-VIServer -Server 服务器IP地址 -SaveCredentials -Protocol https -User root -Password 密码</code> 完成登陆</li><li>7、执行 <code>$vm = Get-VM -Name &quot;你的虚拟机名称&quot;</code> 设置 <code>$vm</code> 这个变量</li><li>6、执行 <code>New-HardDisk -VM $vm -diskPath 磁盘位置 -Confirm:$false</code> 来添加 RDM 磁盘</li></ul><p>其中第 6 步的 “磁盘存储位置” 可以从 “数据存储浏览器” 中复制, <strong>注意要连前面的存储名称一起复制, 比如我的第一块盘就是 “[ssd] XPEnology&#x2F;RDM-S4Y0TMG0.vmdk”; 实操请看截图:</strong></p><p><img src="https://cdn.oss.link/markdown/6xiZKi.png"></p><p><strong>最后一步, 去 UI 界面编辑虚拟机, 把后添加的这几个 RDM 磁盘的控制器全部切换到 <code>Sata1</code> 上, 然后把命令行添加 RDM 时自动创建的 <code>SCSI</code> 控制器删了.</strong></p><hr><p>本部分参考:</p><ul><li><a href="https://communities.vmware.com/t5/ESXi-Discussions/ESXi-8-RDM-not-working/td-p/2942004">ESXi 8 RDM not working</a></li><li><a href="https://www.techrepublic.com/article/how-to-manage-esxi-hosts-remotely-with-powercli/">How to manage ESXi hosts remotely with PowerCLI</a></li><li><a href="https://williamlam.com/2022/12/heads-up-esxi-8-0-host-client-unable-to-attach-existing-virtual-disk-to-vm.html">Heads Up - ESXi 8.0 Host Client unable to attach existing virtual disk to VM</a></li><li><a href="https://developer.vmware.com/docs/powercli/latest/vmware.vimautomation.core/commands/new-harddisk/#CreateNew">VMware Developer Documentation</a></li></ul><h2 id="三、安装黑群晖"><a href="#三、安装黑群晖" class="headerlink" title="三、安装黑群晖"></a>三、安装黑群晖</h2><p>总结一下上面 ARPL 虚拟机初始化的核心步骤:</p><ul><li>1、创建一个 BIOS 引导的虚拟机</li><li>2、设置两个 SATA 控制器</li><li>3、ARPL 挂载到第一个 SATA</li><li>4、其他磁盘挂载到第二个 SATA</li><li>5、配置 ARPL 参数</li></ul><p>在完整这些步骤后只需要简单的重启虚拟机, 等待启动完成就可以着手安装群晖系统了; <strong>安装群晖系统不需要借助群晖的 Find 查找工具, 虚拟机启动后会在控制台打印 IP, 直接访问 <code>http://IP:5000</code> 端口即可.</strong></p><p><img src="https://cdn.oss.link/markdown/KFd4yO.png"></p><p><strong>安装时可以直接从提示处在线下载系统, 不过需要注意的是如果 ARPL 的编译版本号与最新的不匹配可能会有问题, 所以还是推荐点一下 “All Downloads” 然后自行查找.</strong></p><p><img src="https://cdn.oss.link/markdown/9CHpZg.png"></p><p><img src="https://cdn.oss.link/markdown/C3GHlF.png"></p><p><img src="https://cdn.oss.link/markdown/V98A6j.png"></p><p>剩下的安装步骤这里就不截图了, 基本上有手就行.</p><h2 id="四、关机修复"><a href="#四、关机修复" class="headerlink" title="四、关机修复"></a>四、关机修复</h2><p>ESXi 默认情况下想要安全关闭一个虚拟机, 需要虚拟机内安装 VMWare 的 <code>open-vm-tools</code> 工具; 该工具作为一个 Agent 运行, 并上报系统的 IP、网速、磁盘、内存使用情况等信息给 ESXi; 当 ESXi 发出关机等指令时该工具根据系统类型自动调用系统命令来完成该操作. <strong>当我们在 ESXi 上安装黑群晖后, ESXi 无法识别系统类型, 所以在管理界面只会显示一个 “关闭电源” 的按钮, 这个关机等同于物理机直接拔电源, 非常容易造成数据损坏.</strong></p><p><img src="https://cdn.oss.link/markdown/Lktuit.png"></p><p>解决办法只有一个就是安装 <code>open-vm-tools</code>, 问题在于黑群晖系统不在 VMWare 官方的支持列表中, 所以并未提供安装包; 不过目前也有两种解决方案, 一种是采用 docker 运行 <code>open-vm-tool</code>, 另一种是自己编译 <code>open-vm-tools</code>; 两种方案各有优缺点:</p><ul><li>docker 安装: 缺点是 ESXi 界面显示操作系统选择错误, 因为 <code>open-vm-tools</code> 上报的操作系统是 docker 容器的系统; 好处就是 “永久兼容” 没有群晖版本依赖问题.</li><li>自编译 <code>open-vm-tools</code>: 缺点是绑定群晖系统版本, 需要等待社区大神改代码才能跟上群晖的发版; 好处就是原生运行不需要群晖内有额外的系统资源占用.</li></ul><h3 id="4-1、Docker-安装-open-vm-tools"><a href="#4-1、Docker-安装-open-vm-tools" class="headerlink" title="4.1、Docker 安装 open-vm-tools"></a>4.1、Docker 安装 open-vm-tools</h3><p>这个是最简单的, 需要先在系统内安装 Docker 套件, 然后 SSH 到群晖系统, 执行以下命令运行容器(需要使用 root 用户):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成 ssh key, 一顿回车就行, 其实目的是创建 .ssh 目录</span><br>ssh-keygen<br><br><span class="hljs-comment"># 直接运行这个容器即可</span><br>docker run -dt --name open-vm-tools -v /root/.ssh:/root/.ssh --privileged --pid host --ipc host --uts host --network host --restart always mritd/open-vm-tools<br></code></pre></td></tr></table></figure><p><strong>关于 <code>mritd/open-vm-tools</code> 这个镜像是我自己编译的, 担心安全问题的可以自行查看源码 <a href="https://github.com/mritd/autobuild/tree/main/open-vm-tools">AutoBuild</a>; 原理其实就是点关机时帮你自动从 Docker 容器 ssh 到群晖系统然后执行关机命令.</strong></p><h3 id="4-2、自编译安装-open-vm-tools"><a href="#4-2、自编译安装-open-vm-tools" class="headerlink" title="4.2、自编译安装 open-vm-tools"></a>4.2、自编译安装 open-vm-tools</h3><p>期望自行编译 <code>open-vm-tools</code> 可以参考 <a href="https://github.com/tbc0309/synology-dsm-open-vm-tools">synology-dsm-open-vm-tools</a> 仓库文档, <strong>编译时请保证网络环境畅通, 有条件的最好用国外 VPS 8C 16G 配置进行编译.</strong> 编译完成后会生成 SPK 安装包, 直接在套件中心选择手动安装即可:</p><p><img src="https://cdn.oss.link/markdown/yum3pE.png"></p><p>安装成功后, 回到 ESXi 中就可以看到虚拟机电源控制中出现了 “关机” 选项:</p><p><img src="https://cdn.oss.link/markdown/bwAfs3.png"></p><p>目前我已经编译好了适用于 <code>7.1.1</code> 系统的 <code>open-vm-tools</code>, 截止文章编写时间还没想上传到公网, 有需要的可以留言.</p><h2 id="五、开机自启动"><a href="#五、开机自启动" class="headerlink" title="五、开机自启动"></a>五、开机自启动</h2><p>目前我使用的是 HPE Gen8 作为主机, 宿主机的来电自启动 ESXi 都已经配置完成; 如果想要让特殊情况断电以后 ESXi 能够自动启动黑群晖, 只需要在 ESXi 中配置一下即可:</p><p><img src="https://cdn.oss.link/markdown/xjvo5Q.png"></p><p>到此 ESXi 上基本的黑群晖已经安装完成, 剩下的系统内折腾就各凭本事了.</p>]]></content>
    
    
    <summary type="html">以前一直使用 HPE Gen8 在宿主机上插淘宝买的 U 盘做黑群晖, 最近有入手了 HPE Gen10, 也想搞一个黑群晖; 不过迫于对虚拟化有一定要求, 所以最终选定使用 ESXi 做底层, 然后虚拟机安装黑群晖; 安装过程参考了很多方案最终选定 ARPL, 这里记录一下安装过程.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Synology" scheme="https://mritd.com/tags/synology/"/>
    
    <category term="ESXi" scheme="https://mritd.com/tags/esxi/"/>
    
    <category term="ARPL" scheme="https://mritd.com/tags/arpl/"/>
    
  </entry>
  
  <entry>
    <title>UPS Nut 配置教程</title>
    <link href="https://mritd.com/2023/03/18/ups-nut-configuration-tutorial/"/>
    <id>https://mritd.com/2023/03/18/ups-nut-configuration-tutorial/</id>
    <published>2023-03-18T11:16:00.000Z</published>
    <updated>2023-03-18T11:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Nut-安装"><a href="#一、Nut-安装" class="headerlink" title="一、Nut 安装"></a>一、Nut 安装</h2><p>这里我采用的是 Ubuntu Server 22.04 系统, 安装直接一条 apt 命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt install -y nut<br></code></pre></td></tr></table></figure><h2 id="二、Nut-服务组成"><a href="#二、Nut-服务组成" class="headerlink" title="二、Nut 服务组成"></a>二、Nut 服务组成</h2><p>在配置 Nut 之前需要先了解下一 Nut 的各个组件及其作用, Nut 主要包含三个核心服务:</p><ul><li>nut-driver: 这个服务负责通过特定放驱动来与 UPS 进行通信</li><li>nut-server: 该服务利用 nut-dirver 沟通 UPS, 并将 UPS 状态通过网络服务发布</li><li>nut-monitor(nut-client): 该服务连接 nut-server, 根据 UPS 状态做出特定响应</li></ul><p>注意: nut-client 实际上是一个 systemd 软连接文件, 本质上还是 nut-monitor.</p><p>为了更容易理解这里画了一个简单的图:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">             ┌─────────────┐                  ┌────────────┐<br>       ┌──── │ nut-monitor │ ───────────────► │ nut-server │<br>       │     └─────────────┘                  └────────────┘<br>       │<br>       │                                            │<br>       │                                            │<br>       ▼                                            ▼<br> ┌─────────────┐                              ┌────────────┐<br> │  upssched   │                              │ nut-driver │<br> └─────────────┘                              └────────────┘<br><br>        │                                           │<br>        │                                           │<br>        │                                           │<br>        ▼                                           ▼<br>┌────────────────┐                            ┌─────────────┐<br>│  user scripts  │                            │     UPS     │<br>└────────────────┘                            └─────────────┘<br></code></pre></td></tr></table></figure><h2 id="三、Nut-基本配置"><a href="#三、Nut-基本配置" class="headerlink" title="三、Nut 基本配置"></a>三、Nut 基本配置</h2><p>在 Nut 安装完成后会自动在 <code>/etc/nut</code> 目录生成配置文件, 接下来的配置工作主要是调整该目录下的各种配置文件.</p><h3 id="3-1、nut-conf"><a href="#3-1、nut-conf" class="headerlink" title="3.1、nut.conf"></a>3.1、nut.conf</h3><p>该配置主要定义 nut 的运行模式, 只有一个配置字段 <code>MODE=xxxx</code>, 该配置可选值及含义如下:</p><ul><li><code>none</code>: Nut 未配置或使用外部系统启动 Nut 服务, 可以理解为 “啥也不干”.</li><li><code>standalone</code>: 独立模式, 一般在只有一个 UPS 且只负责本地系统(不提供网络服务)的情况下使用.</li><li><code>netserver</code>: 跟独立模式类似, 会启动 driver、upsd 和 upsmon 服务, 不同之处是可以提供网络服务, 其他机器上的 nut-monitor 可以通过网络来连接 Nut Server.</li><li><code>netclient</code>: 仅客户端模式, 只启动 nut-monitor, 用于连接远程的 Nut 服务.</li></ul><p>我这是为了方便后续扩展, 所以使用了最全的 <code>netserver</code> 模式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">MODE=netserver<br></code></pre></td></tr></table></figure><h3 id="3-2、ups-conf"><a href="#3-2、ups-conf" class="headerlink" title="3.2、ups.conf"></a>3.2、ups.conf</h3><p>该配置用于定义 nut-driver 如何连接到物理 UPS, 该配置文件的饿配置格式如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nutdev1]</span><br>    <span class="hljs-attr">driver</span> = <span class="hljs-string">&quot;usbhid-ups&quot;</span><br>    <span class="hljs-attr">port</span> = <span class="hljs-string">&quot;auto&quot;</span><br></code></pre></td></tr></table></figure><p>其中 <code>nutdev1</code> 表示该 UPS 名称, 可以随意定义; <strong><code>driver</code> 用于定义连接到该 UPS 需要使用的驱动, 一般情况下如果使用 USB 连接像我这样写都是可以识别到的.</strong> 如果同样都是用 USB 连接但识别不到, 可以使用 <code>nut-scanner</code> 命令进行扫描, 扫描成功后会在控制台打印出 UPS 相关配置样例.</p><p><strong>需要注意的是, 如果想要群晖或者 QNAP 能通过网络连接 UPS, 那么 UPS 的名称是有特殊要求的(群晖必须起名叫 <code>ups</code>, QNAP 没有测试过可能叫 <code>qnapups</code>);</strong> 因为这两个系统都写死了, 包括后面的用户名和密码也是, 具体在下文会有说明.</p><p>除了 USB 连接 UPS 之外 Nut 还支持多种驱动连接 UPS, 例如 APC 专用的驱动程序, 有关于 Nut 具体连接方式请查看官方文档:</p><ul><li><a href="https://networkupstools.org/docs/man/genericups.html">genericups</a></li><li><a href="https://networkupstools.org/docs/man/usbhid-ups.html">usbhid-ups</a></li><li><a href="https://networkupstools.org/docs/man/blazer.html">blazer_ser&#x2F;blazer_usb</a></li><li><a href="https://networkupstools.org/docs/man/snmp-ups.html">snmp-ups</a></li><li><a href="https://networkupstools.org/docs/man/powerman-pdu.html">powerman-pdu</a></li><li><a href="https://networkupstools.org/docs/man/apcupsd-ups.html">apcupsd-ups</a></li></ul><h3 id="3-3、upsd-conf"><a href="#3-3、upsd-conf" class="headerlink" title="3.3、upsd.conf"></a>3.3、upsd.conf</h3><p>该配置文件用于控制 nut-server 的网络服务, 例如监听端口、最大连接数、证书配置等; 由于我是在内网使用, 所以只需要配置网络监听, 其他参数保持默认即可:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">LISTEN 0.0.0.0 3493<br></code></pre></td></tr></table></figure><p>如果想要完整查看支持哪些配置, 请参考官方文档: <a href="https://networkupstools.org/docs/man/upsd.conf.html">UPSD.CONF(5)</a></p><h3 id="3-4、upsd-users"><a href="#3-4、upsd-users" class="headerlink" title="3.4、upsd.users"></a>3.4、upsd.users</h3><p>upsd.users 配置文件用于定义通过网络连接到 <code>nut-server</code> 的用户名和密码, 该配置样例如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[monuser]</span><br>    <span class="hljs-attr">password</span> = secret<br>    <span class="hljs-attr">upsmon</span> = master<br><span class="hljs-section">[admin]</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-number">123456</span><br>    <span class="hljs-attr">upsmon</span> = master<br></code></pre></td></tr></table></figure><p>上面的 <code>[xxxx]</code> 代表用户名, 密码由 <code>password</code> 字段指定; 除此之外还有一些特殊参数:</p><ul><li><code>actions</code>: 指定该用户具有哪些操作权限, 可选值 <code>SET</code>(更改 UPS 变量)、<code>FSD</code>(设置 UPS 强制关机标志); 如果需要两个都指定, 则需要写两次 <code>actions</code>.</li><li><code>instcmds</code>: 让用户启动的即时命令, 值 <code>ALL</code> 代表所有, 其他的可通过 <code>upscmd -l</code> 查看; 同样如果要指定多个需要写多次 <code>instcmds</code>.</li><li><code>upsmon</code>: 为 upsmon 进程添加必要的操作, 可选值 <code>primary</code>、<code>secondary</code>(一般用不到)</li></ul><p><strong>注意: Ubuntu Server 22.04 上的版本可能没有那么新, upsmon 实际上支持的是 <code>master</code>、<code>slave</code> 两个参数(怀疑与某场运动有关).</strong></p><hr><p><strong>关于 群晖 和 QNAP 用户: 如果期望这两个 NAS 可以直接连接到 Nut Server, 可以确认的是群晖需要保证存在用户名为 <code>monuser</code> 密码为 <code>secret</code> 的用户; QNAP 我没有验证过, 网上查询到的结果是需要保证存在用户名为 <code>admin</code> 密码为 <code>123456</code> 的用户.</strong></p><h2 id="四、Nut-监控配置"><a href="#四、Nut-监控配置" class="headerlink" title="四、Nut 监控配置"></a>四、Nut 监控配置</h2><p>相较于基本配置来说, Nut 核心处理在于如何做好监控配置; Nut 对于监控策略支持大致有两种:</p><ul><li>1、直接由 <code>upsmon.conf</code> 配置, 任何事件直接由用户指定的脚本负责处理, 没有定时器等高级特性</li><li>2、在 <code>upsmon.conf</code> 中配置执行脚本为 <code>upssched</code>, 任何事件先由 <code>upssched</code> 处理, 借助于 upssched 可以实现一些高级功能, 比如选择性触发关机等</li></ul><h3 id="4-1、upsmon-conf"><a href="#4-1、upsmon-conf" class="headerlink" title="4.1、upsmon.conf"></a>4.1、upsmon.conf</h3><p>该配置主要用于配置 nut-monitor 如何监控 UPS, 同时定义 UPS 出现哪些事件要进行怎样的处理动作, 下面详细解释一下核心配置.</p><h4 id="4-1-1、MONITOR-指令"><a href="#4-1-1、MONITOR-指令" class="headerlink" title="4.1.1、MONITOR 指令"></a>4.1.1、MONITOR 指令</h4><p><strong><code>MONITOR</code> 指令用于定义要监控 UPS 的连接地址,</strong> 其格式如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">MONITOR &lt;system&gt; &lt;powervalue&gt; &lt;username&gt; &lt;password&gt; (&quot;master&quot;|&quot;slave&quot;)<br></code></pre></td></tr></table></figure><ul><li><code>&lt;system&gt;</code>: nut-server 链接地址, 格式为 “UPS 名称” + “@” + “nut-server 地址”, 例如 <code>myups@192.168.1.2</code></li><li><code>&lt;powervalue&gt;</code>: UPS 数量, 大多数情况你只有一个 UPS 电源, 所以写 1 就行</li><li><code>&lt;username&gt;/&lt;password&gt;</code>: 在 <code>upsd.users</code> 中定义的用户名和密码</li><li><code>master/slave</code>: <code>master</code> 表示该系统将最后关闭, 让从属系统先关闭; <code>slave</code> 表示该系统立即关闭</li></ul><p>以下为我的配置样例:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">MONITOR ups@localhost 1 monuser secret master<br></code></pre></td></tr></table></figure><h4 id="4-1-2、SHUTDOWNCMD"><a href="#4-1-2、SHUTDOWNCMD" class="headerlink" title="4.1.2、SHUTDOWNCMD"></a>4.1.2、SHUTDOWNCMD</h4><p><code>SHUTDOWNCMD</code> 指令用于定义在 UPS 电量不足或者需要主动关机时的关机命令, 建议填写完整路径</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">SHUTDOWNCMD &quot;/usr/sbin/poweroff&quot;<br></code></pre></td></tr></table></figure><h4 id="4-1-3、NOTIFYCMD"><a href="#4-1-3、NOTIFYCMD" class="headerlink" title="4.1.3、NOTIFYCMD"></a>4.1.3、NOTIFYCMD</h4><p><code>NOTIFYCMD</code> 指令是一个非常重要的指令, <strong>该指令用于配置在发生特定事件(如市电中断、UPS 处于低电量等)时, <code>nut-monitor</code> 所执行的命令.</strong> 简单的说就是 <code>NOTIFYCMD</code> 定义了具体执行命令, 可以直接在此处配置一个自己编写的脚本, 当 UPS 有事件发生时此脚本都会被调用.</p><p><code>NOTIFYCMD</code> 指令大致有两种配置方式, 一种是配置成自己的脚本, <strong>脚本需要有可执行权限, 脚本内可以通过 <code>NOTIFY</code> 环境变量获取事件类型, 然后自己进行处理.</strong> 这种方式有点 “简单粗暴” 的意思, 可定制化程度完全依赖于你的脚本怎么写. 具体可以使用哪些变量请自行测试, 因为版本不同可能环境变量名称也不同.</p><p>还有一种方式是将 <code>NOTIFYCMD</code> 配置为执行内置的 <code>upssched</code> 命令; <code>upssched</code> 是 Nut 提供的一个带有特定策略的调度程序; 简而言之就是基于常用的功能进行了抽象, <code>upssched</code> 有自己单独配置, 可以实现 “如果市电在 180s 内恢复则不进行关机” 的这种高级调度策略.</p><p>这里我选择使用第二种方式, 因为自己搓脚本能力实在不怎么样:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">NOTIFYCMD /usr/sbin/upssched<br></code></pre></td></tr></table></figure><h4 id="4-1-4、NOTIFYFLAG"><a href="#4-1-4、NOTIFYFLAG" class="headerlink" title="4.1.4、NOTIFYFLAG"></a>4.1.4、NOTIFYFLAG</h4><p><code>NOTIFYFLAG</code> 同样是关键配置, 需要与 <code>NOTIFYCMD</code> 配合使用; <code>NOTIFYFLAG</code> 指令负责指定一系列的 UPS 事件应该触发何种操作, 该指令格式如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">NOTIFYFLAG &lt;notify type&gt; &lt;flag&gt;<span class="hljs-section">[+&lt;flag&gt;]</span><span class="hljs-section">[+&lt;flag&gt;]</span> ...<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;notify type&gt;</code> 表示事件类型, 可选类型如下:</p><ul><li><code>ONLINE</code>: UPS 在线, 即市电恢复时会触发</li><li><code>ONBATT</code>: UPS 使用电池供电, 即市电中断时会触发</li><li><code>LOWBATT</code>: UPS 低电量时会触发</li><li><code>FSD</code>: UPS 正在被关闭(Forced Shutdown)</li><li><code>COMMOK</code>: 与 nut-server 成功建立连接时触发</li><li><code>COMMBAD</code>: 与 nut-server 建立连接失败(连接丢失)时触发</li><li><code>SHUTDOWN</code>: UPS 发出关机指令触发</li><li><code>REPLBATT</code>: UPS 需要更换电池时触发</li><li><code>NOCOMM</code>: 无法与 UPS 建立连接(UPS未就绪)时触发</li></ul><p>对于 <code>flag</code> 标志通常有四种, 多种组合时用加号(+)连接:</p><ul><li><code>SYSLOG</code>: 只打印 syslog</li><li><code>WALL</code>: 在终端上弹出消息(&#x2F;bin&#x2F;wall)</li><li><code>EXEC</code>: <strong>调用 <code>NOTIFYCMD</code> 指定的命令, 并传递相关事件</strong></li><li><code>IGNORE</code>: 啥也不干, 忽略该事件</li></ul><p><strong>如果 <code>NOTIFYCMD</code> 使用了自定义脚本, 则此处请根据实际需要来配置需要脚本处理的事件; 如果 <code>NOTIFYCMD</code> 配置为使用 <code>upssched</code>, 可以将所有事件配置为 <code>EXEC</code>, 然后具体过滤在 <code>upssched</code> 处理.</strong></p><p>例如如果只想让 <code>NOTIFYCMD</code> 配置的脚本只处理市电中断和恢复事件, 同时打印 syslog, 可以这样配置:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">NOTIFYFLAG ONLINE SYSLOG+EXEC<br>NOTIFYFLAG ONBATT SYSLOG+EXEC<br></code></pre></td></tr></table></figure><p>由于我 <code>NOTIFYCMD</code> 配置的是 <code>upssched</code>, 所以我这里将所有事件全部传递给 <code>upssched</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs init">NOTIFYFLAG ONLINE SYSLOG+EXEC<br>NOTIFYFLAG ONBATT SYSLOG+EXEC<br>NOTIFYFLAG LOWBATT SYSLOG+EXEC<br>NOTIFYFLAG FSD SYSLOG+EXEC<br>NOTIFYFLAG COMMOK SYSLOG+EXEC<br>NOTIFYFLAG COMMBAD SYSLOG+EXEC<br>NOTIFYFLAG SHUTDOWN SYSLOG+EXEC<br>NOTIFYFLAG REPLBATT SYSLOG+EXEC<br>NOTIFYFLAG NOPARENT SYSLOG+EXEC<br></code></pre></td></tr></table></figure><h4 id="4-1-5、其他配置"><a href="#4-1-5、其他配置" class="headerlink" title="4.1.5、其他配置"></a>4.1.5、其他配置</h4><p>除了以上的核心配置, 其他配置如果没特殊情况一般保持默认即可; 具体的配置可以参考官方文档: <a href="https://networkupstools.org/docs/man/upsmon.conf.html">UPSMON.CONF(5)</a>.</p><h3 id="4-2、upssched-conf"><a href="#4-2、upssched-conf" class="headerlink" title="4.2、upssched.conf"></a>4.2、upssched.conf</h3><p><strong>使用该配置的前提是 <code>upsmon.conf</code> 配置中的 <code>NOTIFYCMD</code> 指向了 <code>upssched</code>, 并且 <code>NOTIFYFLAG</code> 为相关事件配置了 <code>EXEC</code>;</strong> 该配置主要的作用是使用一些 <code>upssched</code> 内置的高级语法来控制特定事件的处理方式. <code>upssched.conf</code> 配置主要包含两部分: 头部的选项配置和尾部的规则配置.</p><h4 id="4-2-1、选项配置"><a href="#4-2-1、选项配置" class="headerlink" title="4.2.1、选项配置"></a>4.2.1、选项配置</h4><p>头部选项配置只包含三个配置:</p><ul><li><code>CMDSCRIPT</code>: <strong>该配置应该位于首行(推荐这样, 实际上是 AT 指令之前就行), 该指令用于定义事件的处理脚本; 脚本一般由用户自行编写, <code>upssched</code> 会根据规则将指定参数传递到此脚本并执行.</strong></li><li><code>PIPEFN</code>: 用于进程间通信的管道文件, 需要位于 AT 指令之前</li><li><code>LOCKFN</code>: 互斥锁文件, 用于防止 upsmon 同时调度多个文件, 需要位于 AT 指令之前</li></ul><p>关于 <code>CMDSCRIPT</code> 配置的脚本, 下面是一个样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -ex<br><br><span class="hljs-built_in">exec</span> &gt;&gt; /var/log/upssched-cmd.log 2&gt;&amp;1<br><br><span class="hljs-comment"># 主要负责关闭系统的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">xpoweroff</span></span>()&#123;<br>    logger -t upssched-cmd <span class="hljs-string">&#x27;准备关闭 XPEnology...&#x27;</span><br>    logger -t upssched-cmd <span class="hljs-string">&#x27;准备关闭 TProxy Gateway...&#x27;</span><br>    logger -t upssched-cmd <span class="hljs-string">&#x27;所有必要系统已成功关闭...&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 判断 upssched 触发的事件</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>    onbattwarn)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;UPS 已经切换到电池供电, 准备安全关闭系统...&#x27;</span><br>        xpoweroff<br>        ;;<br>    ups-back-on-line)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;市电已恢复...&#x27;</span><br>        ;;<br>    lowbatt)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;UPS 电量不足, 立即关闭系统...&#x27;</span><br>        xpoweroff<br>        ;;<br>    *)<br>        logger -t upssched-cmd <span class="hljs-string">&quot;Unrecognized command: <span class="hljs-variable">$1</span>&quot;</span><br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p><strong>有一点需要注意, <code>CMDSCRIPT</code> 配置的脚本默认是以 <code>nut</code> 用户运行的, 所以要处理好 <code>nut</code> 用户权限问题.</strong></p><p>对于 <code>PIPEFN</code> 和 <code>LOCKFN</code> 官方推荐单独创建叫 <code>upssched</code> 目录, 然后文件放在这个目录里; <strong>但是有些系统例如 Ubuntu Server 22.04, <code>/run/nut/</code> 是 tmpfs, 重启会丢失目录导致出现权限问题; 所以推荐直接不创建独立目录直接配置:</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini">CMDSCRIPT /opt/scripts/upssched-cmd.sh<br>PIPEFN /run/nut/upssched.pipe<br>LOCKFN /run/nut/upssched.lock<br></code></pre></td></tr></table></figure><h4 id="4-2-2、规则配置"><a href="#4-2-2、规则配置" class="headerlink" title="4.2.2、规则配置"></a>4.2.2、规则配置</h4><p>使用 <code>upssched</code> 的好处就是内置了一个规则引擎, 我们可以通过一些简单的语法来配置复杂规则; <code>upssched</code> 的规则语法如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">AT notifytype upsname command <br></code></pre></td></tr></table></figure><p>规则以 <code>AT</code> 开头, <code>notifytype</code> 用于指定需要关注的事件类型; <code>upsname</code> 指定 UPS 名称, 只有一个的情况下或者不想区分时可以无脑写 <code>*</code>; <code>command</code> 部分用于指定需要执行的动作, <code>command</code> 大致有三种类型:</p><ul><li><code>START-TIMER</code>: 启动一个定时器</li><li><code>CANCEL-TIMER</code>: 取消一个定时器</li><li><code>EXECUTE</code>: 立即执行</li></ul><p>这部分看起来复杂实际很简单, 例如以下规则实现了: <strong>当市电断开(UPS 使用电池供电时)启动一个名字叫 <code>onbattwarn</code> 的定时器, 这个定时器在 180s 后会执行 <code>CMDSCRIPT</code> 定义的脚本并将 <code>onbattwarn</code> 作为第一个参数传递给脚本; 同时如果市电在计时器的 180s 之内恢复(临时闪断), 则取消执行脚本.</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">AT ONBATT * START-TIMER onbattwarn 180<br>AT ONLINE * CANCEL-TIMER onbattwarn<br></code></pre></td></tr></table></figure><p>当然也有些事件是需要立即执行的, 例如: <strong>市电中断立即发送通知</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 立即执行 `CMDSCRIPT` 指定的脚本, 并将 `onbattnoti` 作为参数传递给脚本</span><br>AT ONBATT * EXECUTE onbattnoti<br></code></pre></td></tr></table></figure><h2 id="五、配置参考"><a href="#五、配置参考" class="headerlink" title="五、配置参考"></a>五、配置参考</h2><p>上面说了那么多, 下面给一个完整的我个人的配置参考:</p><p><strong>nut.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">MODE</span>=netserver<br></code></pre></td></tr></table></figure><hr><p><strong>ups.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 名称是为了一开始兼容群晖, 所以就叫 UPS</span><br><span class="hljs-section">[ups]</span><br>    <span class="hljs-attr">driver</span> = <span class="hljs-string">&quot;usbhid-ups&quot;</span><br>    <span class="hljs-attr">port</span> = <span class="hljs-string">&quot;auto&quot;</span><br></code></pre></td></tr></table></figure><hr><p><strong>upsd.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">LISTEN 0.0.0.0 3493<br></code></pre></td></tr></table></figure><hr><p><strong>upsd.users</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[monuser]</span><br>    <span class="hljs-attr">password</span> = secret<br>    <span class="hljs-attr">upsmon</span> = master<br><span class="hljs-section">[qnapups]</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-number">123456</span><br>    <span class="hljs-attr">upsmon</span> = primary<br></code></pre></td></tr></table></figure><hr><p><strong>upsmon.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">MONITOR ups@localhost 1 monuser secret master<br>MINSUPPLIES 1<br>SHUTDOWNCMD &quot;/usr/sbin/poweroff&quot;<br>NOTIFYCMD /usr/sbin/upssched<br>POLLFREQ 5<br>POLLFREQALERT 5<br>HOSTSYNC 30<br>DEADTIME 15<br>POWERDOWNFLAG /etc/killpower<br>NOTIFYFLAG ONLINE SYSLOG+EXEC<br>NOTIFYFLAG ONBATT SYSLOG+EXEC<br>NOTIFYFLAG LOWBATT SYSLOG+EXEC<br>NOTIFYFLAG FSD SYSLOG+EXEC<br>NOTIFYFLAG COMMOK SYSLOG+EXEC<br>NOTIFYFLAG COMMBAD SYSLOG+EXEC<br>NOTIFYFLAG SHUTDOWN SYSLOG+EXEC<br>NOTIFYFLAG REPLBATT SYSLOG+EXEC<br>NOTIFYFLAG NOPARENT SYSLOG+EXEC<br>RBWARNTIME 43200<br>NOCOMMWARNTIME 300<br>FINALDELAY 5<br></code></pre></td></tr></table></figure><hr><p><strong>upssched.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini">CMDSCRIPT /opt/scripts/upssched-cmd.sh<br>PIPEFN /run/nut/upssched.pipe<br>LOCKFN /run/nut/upssched.lock<br>AT ONBATT * START-TIMER onbattwarn 180<br>AT ONLINE * CANCEL-TIMER onbattwarn<br>AT ONLINE * EXECUTE ups-back-on-line<br>AT LOWBATT * EXECUTE lowbatt<br></code></pre></td></tr></table></figure><hr><p><strong>upssched-cmd.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -ex<br><br><span class="hljs-built_in">exec</span> &gt;&gt; /var/log/upssched-cmd.log 2&gt;&amp;1<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行 ID: <span class="hljs-subst">$(id)</span>&quot;</span><br><br>SSH_CMD=<span class="hljs-string">&#x27;ssh -o StrictHostKeyChecking=no&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">xpoweroff</span></span>()&#123;<br>    logger -t upssched-cmd <span class="hljs-string">&#x27;准备关闭 XPEnology...&#x27;</span><br>    <span class="hljs-variable">$&#123;SSH_CMD&#125;</span> root@192.168.1.2 poweroff || <span class="hljs-literal">true</span><br>    logger -t upssched-cmd <span class="hljs-string">&#x27;准备关闭 TProxy Gateway...&#x27;</span><br>    <span class="hljs-variable">$&#123;SSH_CMD&#125;</span> root@192.168.1.3 poweroff || <span class="hljs-literal">true</span><br>    logger -t upssched-cmd <span class="hljs-string">&#x27;所有必要系统已成功关闭...&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>    onbattwarn)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;UPS 已经切换到电池供电, 准备安全关闭系统...&#x27;</span><br>        xpoweroff<br>        ;;<br>    ups-back-on-line)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;市电已恢复...&#x27;</span><br>        ;;<br>    lowbatt)<br>        logger -t upssched-cmd <span class="hljs-string">&#x27;UPS 电量不足, 立即关闭系统...&#x27;</span><br>        xpoweroff<br>        ;;<br>    *)<br>        logger -t upssched-cmd <span class="hljs-string">&quot;Unrecognized command: <span class="hljs-variable">$1</span>&quot;</span><br>        ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">头年租的房子楼里一直在装修, 然后老是停电, 没办法搞了一个 UPS; 以前一直把 UPS 直接接到黑群晖 NAS 里, 最近重装决定单独在 Ubuntu 里装 Nut 来统一处理供电出现问题时各种服务优雅关闭问题.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="UPS" scheme="https://mritd.com/tags/ups/"/>
    
    <category term="Nut" scheme="https://mritd.com/tags/nut/"/>
    
  </entry>
  
  <entry>
    <title>vCenter Server 使用 ACME 证书</title>
    <link href="https://mritd.com/2022/12/30/vcenter-server-uses-acme-cert/"/>
    <id>https://mritd.com/2022/12/30/vcenter-server-uses-acme-cert/</id>
    <published>2022-12-30T04:07:00.000Z</published>
    <updated>2022-12-30T04:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前置条件"><a href="#一、前置条件" class="headerlink" title="一、前置条件"></a>一、前置条件</h2><p>首先需要有个装好的 vCenter Server(等于没说), 其次就是如果在安装时没有正确的设置 FQDN(PNID), 那么是没法直接使用 ACME 证书的, 只能通过反向代理套一下解决.</p><h2 id="二、安装-acme-sh"><a href="#二、安装-acme-sh" class="headerlink" title="二、安装 acme.sh"></a>二、安装 acme.sh</h2><p>这里采用 acme.sh 作为证书申请工具, 安装方式正常 ssh 到 vCenter Server 主机然后按照官方教程安装即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://get.acme.sh | sh -s email=my@example.com<br></code></pre></td></tr></table></figure><h2 id="三、申请证书"><a href="#三、申请证书" class="headerlink" title="三、申请证书"></a>三、申请证书</h2><p>由于是在内网使用, 所以只能使用 DNS API 的方式申请证书:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 请自行更换为自己的 DNS 提供商</span><br><span class="hljs-built_in">export</span> GANDI_LIVEDNS_KEY=<span class="hljs-string">&quot;###########################&quot;</span><br>./acme.sh --issue -d xxxxx.com --dns dns_gandi_livedns<br></code></pre></td></tr></table></figure><h2 id="四、替换原有证书"><a href="#四、替换原有证书" class="headerlink" title="四、替换原有证书"></a>四、替换原有证书</h2><p>vCenter Server 内置了一个 <code>certificate-manager</code> 工具用于在命令行更新证书, 先使用此命令更新证书:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@vc [ ~/.acme.sh ]<span class="hljs-comment"># /usr/lib/vmware-vmca/bin/certificate-manager                                                                                                               [520/982]</span><br>                 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _<br>                |                                                                     |<br>                |      *** Welcome to the vSphere 7.0 Certificate Manager  ***        |<br>                |                                                                     |                                                                                                                     |                   -- Select Operation --                            |                                                                                                                     |                                                                     |                                                                                                                     |      1. Replace Machine SSL certificate with Custom Certificate     |<br>                |                                                                     |<br>                |      2. Replace VMCA Root certificate with Custom Signing           |<br>                |         Certificate and replace all Certificates                    |<br>                |                                                                     |<br>                |      3. Replace Machine SSL certificate with VMCA Certificate       |<br>                |                                                                     |<br>                |      4. Regenerate a new VMCA Root Certificate and                  |<br>                |         replace all certificates                                    |<br>                |                                                                     |<br>                |      5. Replace Solution user certificates with                     |<br>                |         Custom Certificate                                          |<br>                |         NOTE: Solution user certs will be deprecated <span class="hljs-keyword">in</span> a future    |<br>                |         release of vCenter. Refer to release notes <span class="hljs-keyword">for</span> more details.|                                                                                                                     |                                                                     |                                                                                                                     |      6. Replace Solution user certificates with VMCA certificates   |                                                                                                                     |                                                                     |<br>                |      7. Revert last performed operation by re-publishing old        |<br>                |         certificates                                                |<br>                |                                                                     |<br>                |      8. Reset all Certificates                                      |<br>                |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|<br>Note : Use Ctrl-D to <span class="hljs-built_in">exit</span>.<br>Option[1 to 8]: 1<br><br>Please provide valid SSO and VC privileged user credential to perform certificate operations.<br>Enter username [Administrator@vsphere.local]:<br>Enter password:<br>         1. Generate Certificate Signing Request(s) and Key(s) <span class="hljs-keyword">for</span> Machine SSL certificate<br><br>         2. Import custom certificate(s) and key(s) to replace existing Machine SSL certificate<br><br>Option [1 or 2]: 2<br><br>Please provide valid custom certificate <span class="hljs-keyword">for</span> Machine SSL.<br>File : /root/.acme.sh/xxxxx.com/xxxxx.com.cer<br><br>Please provide valid custom key <span class="hljs-keyword">for</span> Machine SSL.<br>File : /root/.acme.sh/xxxxx.com/xxxxx.com.key<br><br>Please provide the signing certificate of the Machine SSL certificate<br>File : /root/.acme.sh/xxxxx.com/fullchain.cer<br><br>You are going to replace Machine SSL cert using custom cert<br>Continue operation : Option[Y/N] ? : Y<br>Command Output: /root/.acme.sh/xxxxx.com/xxxxx.com.cer: OK<br><br>Status : 100% Completed [All tasks completed successfully]<br></code></pre></td></tr></table></figure><h2 id="五、自动化脚本"><a href="#五、自动化脚本" class="headerlink" title="五、自动化脚本"></a>五、自动化脚本</h2><p>确认证书替换成功后, 我们就可以弄个自动化脚本然后自动更新了; 不过需要注意的是: <strong>如果 vCenter Server 的 FQDN(PNID) 在安装时配置错误(域名没有做解析), 那么此时 vCenter Server PNID 将会变为 IP, 更新证书必然会失败.</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -sSL https://raw.githubusercontent.com/emryl/vcenter-letsencrypt-auto-updater/main/auto-updater.sh &gt; ~/.acme.sh/auto-updater.sh<br>curl -sSL https://raw.githubusercontent.com/emryl/vcenter-letsencrypt-auto-updater/main/update.conf &gt; ~/.acme.sh/update.conf<br><br><span class="hljs-built_in">chmod</span> +x ~/.acme.sh/auto-updater.sh<br></code></pre></td></tr></table></figure><p>然后编辑 <code>~/.acme.sh/update.conf</code> 内的账户信息, 尝试使用 <code>~/.acme.sh/auto-updater.sh</code> 更新证书; 如果更新成功接下来添加定时任务即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@vc [ ~/.acme.sh ]<span class="hljs-comment"># crontab -l</span><br>@reboot /usr/bin/python /usr/lib/applmgmt/security/scripts/hash_mode_update.py<br>13 0 * * * <span class="hljs-string">&quot;/root/.acme.sh&quot;</span>/acme.sh --cron --home <span class="hljs-string">&quot;/root/.acme.sh&quot;</span> &gt; /dev/null<br>30 5 * * sun <span class="hljs-string">&quot;/root/.acme.sh/auto_updater.sh&quot;</span><br></code></pre></td></tr></table></figure><p>不过根据原作者文章下的评论, 可能仍需要在脚本后添加一刚重启命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/init.d/vami-lighttp restart<br></code></pre></td></tr></table></figure><h2 id="六、本文参考"><a href="#六、本文参考" class="headerlink" title="六、本文参考"></a>六、本文参考</h2><ul><li><a href="https://blog.rylander.io/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/">Automatically Update vCenter 7 Certificates Using LetsEncrypt and Acme.sh</a></li></ul>]]></content>
    
    
    <summary type="html">最近弄了两台老古董服务器来跑点东西玩, 为了最大化利用决定装个 vCenter Server 玩玩, 也顺便折腾一下这玩应; 不管安装好后证书看着一直不爽, 这里记录一下如何给它弄一个 ACME 证书.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="vCenter" scheme="https://mritd.com/tags/vcenter/"/>
    
    <category term="ACME" scheme="https://mritd.com/tags/acme/"/>
    
  </entry>
  
  <entry>
    <title>Java 容器化指北</title>
    <link href="https://mritd.com/2022/11/08/java-containerization-guide/"/>
    <id>https://mritd.com/2022/11/08/java-containerization-guide/</id>
    <published>2022-11-08T07:59:00.000Z</published>
    <updated>2022-11-08T07:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、系统选择"><a href="#一、系统选择" class="headerlink" title="一、系统选择"></a>一、系统选择</h2><p>关于最基础的底层镜像, 通常大多数我们只有三种选择: Alpine、Debian、CentOS; 这三者中对于运维最熟悉的一般为 CentOS, 但是很不幸的是 CentOS 后续已经不存在稳定版, 关于它的稳定性问题一直是个谜一样的问题; 这是一个仁者见仁智者见智的问题, 我个人习惯是能不用我绝对不用 😆.</p><p>排除掉 CentOS 我们只讨论是 Alpine 还是 Debian; 从镜像体积角度考虑无疑 Alpine 完胜, 但是 Alpine 采用的是 musl 的 C 库, 在某些深度依赖 glibc 的情况下可能会有一定兼容问题. 当然关于<strong>深度依赖 glibc</strong> 究竟有多深度取决于具体应用, 就目前来说我个人也只是遇到过 Alpine 官方源中的 OpneJDK 一些字体相关的 BUG.</p><p>综合来说, 我个人的建议是<strong>如果应用深度依赖 glibc, 比如包含一些 JNI 相关的代码, 那么选择 Debian 或者说基于 Debian 的基础镜像是一个比较稳的选择; 如果没有这些重度依赖问题, 那么在考虑镜像体积问题上可以选择使用 Alpine.</strong> 事实上 OpneJDK 本身体积也不小, 即使使用 Alpine 版本, 再安装一些常用软件后也不会小太多, 所以我个人习惯是使用基于 Debian 的基础镜像.</p><h2 id="二、JDK-OR-JRE"><a href="#二、JDK-OR-JRE" class="headerlink" title="二、JDK OR JRE"></a>二、JDK OR JRE</h2><p>大多数人似乎从不区分 JDK 与 JRE, 所以要确定这事情需要先弄明白 JDK 和 JRE 到底是什么:</p><ul><li>JDK: Java Development Kit</li><li>JRE: Java Runtime Environment</li></ul><p>JDK 是一个开发套件, 它会包含一些调试相关的工具链, 比如 <code>javac</code>、<code>jps</code>、<code>jstack</code>、<code>jmap</code> 等命令, 这些都是为了调试和编译 Java 程序所必须的工具, 同时 JDK 作为开发套件是包含 JRE 的; 而 JRE 仅为 Java 运行时环境, 它只包含 Java 程序运行时所必须的一些命令以及依赖类库, 所以 JRE 会比 JDK 体积更小、更轻量.</p><p>如果只需要运行 Java 程序比如一个 jar 包, 那么 JRE 足以; 但是如果期望在运行时捕获一些信息进行调试, 那么应该选择 JDK. <strong>我个人的习惯是为了解决一些生产问题, 通常选择直接使用 JDK 作为基础镜像, 避免一些特殊情况还需要挂载 JDK 的工具链进行调试. 当然如果没有这方面需求, 且对镜像体积比较敏感, 那么可以考虑使用 JRE 作为基础镜像.</strong></p><h2 id="三、JDK-选择"><a href="#三、JDK-选择" class="headerlink" title="三、JDK 选择"></a>三、JDK 选择</h2><h3 id="3-1、OracleJDK-还是-OpenJDK"><a href="#3-1、OracleJDK-还是-OpenJDK" class="headerlink" title="3.1、OracleJDK 还是 OpenJDK"></a>3.1、OracleJDK 还是 OpenJDK</h3><p>针对于这两者的选择, 取决于一个最直接的问题: 应用代码中是否有使用 Oracle JDK 私有 API. </p><p><strong>通常 “使用这些私有 API” 指的是引入了一些 <code>com.sun.*</code> 包下的相关类、接口等,</strong> 这些 API 很多是 Oracle JDK 私有的, 在 OpneJDK 中可能完全不包含或已经变更. 所以如果代码中包含相关调用则只能使用 Oracle JDK.</p><p><strong>值得说明的是很多时候使用这些 API 并不是真正的业务需求, 很可能是开发在导入包时 “手滑” 并且凑巧被导入的 Class 等也能实现对应功能; 对于这种导入是可以被平滑替换的, 比如换成 Apache Commons 相关的实现.</strong> 还有一种情况是开发误导入后及时发现了, 但是没有进行代码格式化和包清理, 这是会在代码头部遗留相关的 <code>import</code> 引用, 而 Java 是允许存在这种无用的 <code>import</code> 的; 针对这种只需要重新格式化和优化导入即可.</p><p><strong>Tips: IDEA 按 <code>Option + Command + L</code>(格式化) 还有 <code>Control + Option + O</code>(自动优化包导入).</strong></p><h3 id="3-2、OracleJDK-重建问题"><a href="#3-2、OracleJDK-重建问题" class="headerlink" title="3.2、OracleJDK 重建问题"></a>3.2、OracleJDK 重建问题</h3><p>当没有办法必须使用 Oracle JDK 时, 推荐自行下载 Oracle JDK 压缩包并编写 Dockerfile 创建基础镜像. 但是这会涉及到一个核心问题: <strong>Oracle JDK 一般不提供历史版本,</strong> 所以如果要考虑未来的重新构建问题, 建议保留好下载的 Oralce JDK 压缩包.</p><h3 id="3-3、OpenJDK-发行版"><a href="#3-3、OpenJDK-发行版" class="headerlink" title="3.3、OpenJDK 发行版"></a>3.3、OpenJDK 发行版</h3><p>众所周知 OpenJDK 是一个开源发行版, 基于开源协议各大厂商都提供一些增值服务, 同时也预编译了一些 Docker 镜像供我们使用; 目前主流的一些发行版本如下:</p><ul><li>AdoptOpenJDK</li><li>Amazon Corretto</li><li>IBM Semeru Runtime</li><li>Azul Zulu</li><li>Liberica JDK</li></ul><p>这些发行版很多是大同小异的, 一些发行版可能提供的基础镜像选择更多, 比如 AdoptOpenJDK 提供基于 Alpine、Ubuntu、CentOS 的三种基础镜像发行版; 还有一些发行版提供其他的 JVM 实现, 比如 IBM Semeru Runtime 提供 OpenJ9 JVM 的预编译版本.</p><p>目前我个人比较喜欢 AdoptOpenJDK, 因为它是社区驱动的, 由 JUG 成员还有一些厂商等社区成员组成; 而 Amazon Corretto 和 IBM Semeru Runtime 看名字就可以知道是云高端玩家做的, 可用性也比较棒. 其他的类似 Azul Zulu、Liberica JDK 则是一些 JVM 提供厂商, 有些还有点算得上是黑料的东西, 不算特别推荐.</p><p>目前 AdoptOpenJDK 已经合并到 Eclipse Foundation, 现在叫做 Eclipse Adoptium; 所以如果想要使用 AdoptOpenJDK 镜像, Docker Hub 中应该使用 <a href="https://hub.docker.com/_/eclipse-temurin">eclipse-temurin</a> 用户下的相关镜像.</p><h2 id="四、JVM-选择"><a href="#四、JVM-选择" class="headerlink" title="四、JVM 选择"></a>四、JVM 选择</h2><p>对于 JVM 实现来说, Oracle 有一个 JVM 实现规范, 这个实现规范定义了兼容 Java 代码运行时的这个 VM 应当具备哪些功能; 所以<strong>只要满足这个 JVM 实现规范且经过了认证, 那么这个 JVM 实现理论上就可以应用于生产.</strong> 目前市面上也有很多 JVM 实现:</p><ul><li>Hotspot</li><li>OpenJ9</li><li>TaobaoVM</li><li>LiquidVM</li><li>Azul Zing</li></ul><p>这些 JVM 实现可能具有不同的特性和性能, 比如 Hotspot 是最常用的 JVM 实现, 综合性能、兼容性等最佳; 由 IBM 创建目前属于 Eclipse 基金会的 OpneJ9 对容器化更友好, 提供更快启动和内存占用等特性. </p><p><strong>通常建议如果对 JVM 不是很熟悉的情况下, 请使用 “标准的” Hotspot; 如果有更高要求且期望自行调试一些 JVM 优化参数, 请考虑 Eclipse OpenJ9.</strong> 我个人比较喜欢 OpenJ9, 原因是它的文档写的很不错, 只要细心看可以读到很多不错的细节等; 如果要使用 OpenJ9 镜像, 推荐直接使用  <a href="https://hub.docker.com/_/ibm-semeru-runtimes">ibm-semeru-runtimes</a> 预编译的镜像.</p><h2 id="五、信号量传递"><a href="#五、信号量传递" class="headerlink" title="五、信号量传递"></a>五、信号量传递</h2><p>当我们需要关闭一个程序时, 通常系统会像该进程发送一个终止信号, 同样在容器停止时 Kubernetes 或者其他容器工具也会像容器内 PID 1 的进程发送终止信号; 如果容器内运行一个 Java 程序, 那么信号传递给 JVM 后 Java 相关的框架比如 Spring Boot 等就会检测到此信号, 然后开始执行一些关闭前的清理工作, <strong>这被称之为 “优雅关闭(Graceful shutdown)”</strong>.</p><p>如果在我们容器化 Java 应用时没有正确的让信号传递给 JVM, 那么调度程序比如 Kubernetes 在等待容器关闭超时以后就会进行强制关闭, <strong>这很可能导致一些 Java 程序无法正常释放资源, 比如数据库连接没有关闭、注册中心没有反注册等.</strong> 为了验证这个问题, 我创建了一个 Spring Boot 样例项目来进行测试, 其中项目中包含的核心文件如下(完整代码请看 <a href="https://github.com/mritd/SpringBootGracefulShutdownExample">GitHub</a>):</p><ul><li><strong>BeanTest.java:</strong> 使用 <code>@PreDestroy</code> 注册 Hook 来监听关闭事件模拟优雅关闭</li><li><strong>Dockerfie.bad:</strong> 错误示范的 Dockerfile</li><li><strong>Dockerfile.direct:</strong> 直接运行命令来实现优雅关闭</li><li><strong>Dockerfile.exec:</strong> 利用 exec 来实现优雅关闭</li><li><strong>Dockerfile.bash-c:</strong> 利用 <code>bash -c</code> 来实现优雅关闭</li><li><strong>Dockerfile.tini:</strong> 验证 tini 在某些情况下无法实现优雅关闭</li><li><strong>Dockerfile.dumb-init:</strong> 验证 dumb-init 在某些情况下无法实现优雅关闭</li></ul><p>由于 <code>BeanTest</code> 只做打印测试都是通用的, 所以这里直接贴代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springbootgracefulshutdownexample;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PreDestroy;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanTest</span> &#123;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;接收到终止信号, 正在执行优雅关闭...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1、错误的信号传递"><a href="#5-1、错误的信号传递" class="headerlink" title="5.1、错误的信号传递"></a>5.1、错误的信号传递</h3><p>在很多原始的 Java 项目中通常会存在一个启动运行脚本, 这些脚本可能是自行编写的, 也可能是一些比较老的 Tomcat 启动脚本等; 当我们使用脚本启动并且没有合理的调整 Dockerfile 时就会出现信号无法正确传递的问题; 例如下面的错误示范:</p><p><strong>entrypoint.bad.sh: 负责启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br>java -jar /SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p><strong>Dockerfie.bad: 使用 bash 启动脚本, 这会导致终止信号无法传递</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM eclipse-temurin:11-jdk<br><br>COPY entrypoint.bad.sh /<br>COPY target/SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar /<br><br><span class="hljs-comment"># 下面几种种方式都无法转发信号</span><br><span class="hljs-comment">#CMD /entrypoint.bad.sh</span><br><span class="hljs-comment">#CMD [&quot;/entrypoint.bad.sh&quot;]</span><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;/entrypoint.bad.sh&quot;</span>]<br></code></pre></td></tr></table></figure><p>通过这个 Dockerfile 打包运行后, <strong>在使用 <code>docker stop</code> 命令时明显卡顿一段时间(实际上是 docker 在等待容器内进程自己退出), 当到达预定的超时时间后容器内进程被强行终止, 故没有打印优雅关闭的日志:</strong></p><p><img src="https://cdn.oss.link/markdown/LKOTWO.png"></p><h3 id="5-2、正确的信号传递"><a href="#5-2、正确的信号传递" class="headerlink" title="5.2、正确的信号传递"></a>5.2、正确的信号传递</h3><h4 id="5-2-1、直接运行方式"><a href="#5-2-1、直接运行方式" class="headerlink" title="5.2.1、直接运行方式"></a>5.2.1、直接运行方式</h4><p>要解决信号传递这个问题其实很简单, 也有很多方法; 比如常见的直接使用 <code>CMD</code> 或 <code>ENTRYPOINT</code> 指令运行 java 程序:</p><p><strong>Dockerfile.direct: 直接运行 java 程序, 能够正常接受到终止信号</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM eclipse-temurin:11-jdk<br><br>COPY target/SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar /<br><br>CMD [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar&quot;</span>]<br></code></pre></td></tr></table></figure><p>可以看到, 在 Dockerfile 中直接运行 java 命令这种方式可以让 jvm 正确的通知应用完成优雅关闭:</p><p><img src="https://cdn.oss.link/markdown/zYFRSx.png"></p><h4 id="5-2-2、间接-Exec-方式"><a href="#5-2-2、间接-Exec-方式" class="headerlink" title="5.2.2、间接 Exec 方式"></a>5.2.2、间接 Exec 方式</h4><p>熟悉 Docker 的同学都应该清楚, 在 Dockerfile 里直接运行命令无法解析环境变量; 但是有些时候我们又依赖脚本进行变量解析, 这时候我们可以先在脚本内解析完成, 并采用 <code>exec</code> 的方式进行最终执行; 这种方式也可以保证信号传递(不上图了):</p><p><strong>entrypoint.exec.sh: exec 执行最终命令, 可以转发信号</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-comment"># 假装进行一些变量处理等操作...</span><br><span class="hljs-built_in">export</span> VERSION=<span class="hljs-string">&quot;0.0.1&quot;</span><br><br><span class="hljs-built_in">exec</span> java -jar /SpringBootGracefulShutdownExample-<span class="hljs-variable">$&#123;VERSION&#125;</span>-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><h4 id="5-2-3、Bash-c-方式"><a href="#5-2-3、Bash-c-方式" class="headerlink" title="5.2.3、Bash-c 方式"></a>5.2.3、Bash-c 方式</h4><p>除了直接执行和 exec 方式其实还有一个我称之为 “不稳定” 的解决方案, 就是使用 <code>bash -c</code> 来执行命令; 在使用 <code>bash -c</code> 执行一些简单命令时, 其行为会跟 exec 很相似, 也会把子进程命令替换到父进程从而让 <code>-c</code> 后的命令直接接受到系统信号; <strong>但需要注意的是, 这种方式不一定百分百成功, 比如当 <code>-c</code> 后面的命令中含有管道、重定向等可能仍会触发 <code>fork</code>, 这时子命令仍然无法完成优雅关闭.</strong></p><p><strong>Dockerfile.bash-c: 采用 <code>bash -c</code> 执行, 在命令简单情况下可以做到优雅关闭</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM eclipse-temurin:11-jdk<br><br>COPY entrypoint.bad.sh /<br>COPY target/SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar /<br><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar /SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar&quot;</span>]<br></code></pre></td></tr></table></figure><p>关于 <code>bash -c</code> 的相关讨论, 可以参考 <a href="https://unix.stackexchange.com/questions/466496/why-is-there-no-apparent-clone-or-fork-in-simple-bash-command-and-how-its-done">StackExchange</a>.</p><h4 id="5-2-4、tini-或-dump-init"><a href="#5-2-4、tini-或-dump-init" class="headerlink" title="5.2.4、tini 或 dump-init"></a>5.2.4、tini 或 dump-init</h4><blockquote><p>守护工具并不是万能的, tini 和 dump-init 都有一定问题.</p></blockquote><p>这两个工具是大部分人都熟知的利器, 甚至连 Docker 本身都集成了; 不过似乎很多人都有一个误区(我以前也是这么觉得的), 那就是<strong>认为加了 tini 或者 dump-init 信号就可以转发, 就可以优雅关闭了; 而事实上并不是这样, 很多时候你加了这两个东西也只能保证僵尸进程的回收, 但是子进程仍然可能无法优雅关闭.</strong> 比如下面的例子:</p><p><strong>Dockerfile.tini: 加了 tini 也无法优雅关闭的情况</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM eclipse-temurin:11-jdk<br><br>RUN <span class="hljs-built_in">set</span> -e \<br>    &amp;&amp; apt update \<br>    &amp;&amp; apt install tini psmisc -y<br><br>COPY entrypoint.bad.sh /<br>COPY target/SpringBootGracefulShutdownExample-0.0.1-SNAPSHOT.jar /<br><br>ENTRYPOINT [<span class="hljs-string">&quot;tini&quot;</span>, <span class="hljs-string">&quot;-vvv&quot;</span>, <span class="hljs-string">&quot;--&quot;</span>]<br><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;/entrypoint.bad.sh&quot;</span>]<br></code></pre></td></tr></table></figure><p>对于 dump-init 也有同样的问题, 归根结底这个问题的根本还是在 bash 上: <strong>当使用 bash 启动脚本后, bash 会 fork 一个新的子进程; 而不管是 tini 还是 dump-init 的转发逻辑都是将信号传递到进程组; 只要进程组中的父进程响应了信号, 那么就认为转发完成, 但此时进程组中的子进程可能还没有完成优雅关闭父进程就已经死了, 这会导致变为子进程最终还会被强制 kill 掉.</strong></p><h3 id="5-3、最佳实践"><a href="#5-3、最佳实践" class="headerlink" title="5.3、最佳实践"></a>5.3、最佳实践</h3><p>根据上面的测试和验证结果, 这里总结一下最佳实践:</p><ul><li>1、容器内内置 tini 或者 dump-init 是比较好的做法可以防止僵尸进程</li><li>2、tini 或者 dump-init 并不能百分百实现优雅关闭</li><li>3、简单命令直接 CMD 执行可以接受信号转发实现优雅关闭</li><li>4、复杂命令在脚本内进行 exec 执行也可以接受信号转发实现优雅关闭</li><li>5、直接使用 <code>bash -c</code> 运行在简单命令执行时也可以优雅关闭, 但需要实际测试来确定准确性</li></ul><h2 id="六、内存限制"><a href="#六、内存限制" class="headerlink" title="六、内存限制"></a>六、内存限制</h2><blockquote><p>Java 应用的容器化内存限制是一个老生常谈的问题, 国内也有很多资料, 不过这些文章很多都过于老旧或者直接翻译自国外的文章; 我发现很少有人去深究和测试这个问题, 随着这两年容器化的发展其实很多东西早已不适用, 为此在这里决定专门仔细的测试一下这个内存问题(<strong>只想看结论的可直接观看 6.3 章节.</strong>).</p></blockquote><p>众所周知, Java 是有虚拟机的, Java 代码被编译成 Class 文件然后在 JVM 中运行; JVM 默认会根据操作系统环境来自动设置堆内存(HeapSize), 而<strong>容器化 Java 应用面临的挑战其一就是如何让 JVM 获取到正确的可用内存避免被 kill.</strong></p><h3 id="6-1、无配置下的自适应"><a href="#6-1、无配置下的自适应" class="headerlink" title="6.1、无配置下的自适应"></a>6.1、无配置下的自适应</h3><p>在默认不配置时, 理想状态的 JVM 应当能识别到我们对容器施加的内存 limit, 从而自动调整堆内存大小; 为了验证这种理想状态下哪些版本的 OpenJDK 能做到, 我抽取一些特定版本进行了以下测试:</p><ul><li>使用 <code>docker run -m 512m ...</code> 将容器内存限制为 512m, 实际宿主机为 16G</li><li>使用 <code>java -XX:+PrintFlagsFinal -version | grep MaxHeapSize</code> 命令查看 JVM 默认的最大堆内存(后来发现 <code>-XshowSettings:vm</code> 看起来更清晰)</li></ul><h4 id="6-1-1、OpenJDK-8u111"><a href="#6-1-1、OpenJDK-8u111" class="headerlink" title="6.1.1、OpenJDK 8u111"></a>6.1.1、OpenJDK 8u111</h4><p>这个版本的 OpenJDK 尚未对容器化做任何支持, 所以理论上它是不可能能获取到 limit 的内存限制:</p><p><img src="https://cdn.oss.link/markdown/3mReMw.png"></p><p>可以看到 JVM 并没有识别到 limit, 仍然按照大约宿主机 1&#x2F;4 的体量去分配的堆内存, 所以如果里面的 java 应用内存占用高了可能会被直接 kill.</p><h4 id="6-1-2、OpenJDK-8u131"><a href="#6-1-2、OpenJDK-8u131" class="headerlink" title="6.1.2、OpenJDK 8u131"></a>6.1.2、OpenJDK 8u131</h4><p>选择 8u131 这个版本是因为在此版本添加了 <code>-XX:+UseCGroupMemoryLimitForHeap</code> 参数来支持内存自适应, 这里我们先不开启, 先直接进行测试:</p><p><img src="https://cdn.oss.link/markdown/9Vhiv0.png"></p><p>同样在默认情况下是无法识别内存限制的.</p><h4 id="6-1-3、OpenJDK-8u222"><a href="#6-1-3、OpenJDK-8u222" class="headerlink" title="6.1.3、OpenJDK 8u222"></a>6.1.3、OpenJDK 8u222</h4><p>8u191 版本从 OpneJDK 10 backport 回了 <code>XX:+UseContainerSupport</code> 参数来支持 JVM 容器化, 不过该版本暂时无法下载, 这里使用更高的 <code>8u222</code> 测试, 测试时同样暂不开启特定参数进行测试:</p><p><img src="https://cdn.oss.link/markdown/883BW2.png"></p><p>同样的内存无法正确识别.</p><h4 id="6-1-4、OpenJDK-11-0-15"><a href="#6-1-4、OpenJDK-11-0-15" class="headerlink" title="6.1.4、OpenJDK 11.0.15"></a>6.1.4、OpenJDK 11.0.15</h4><p>OpenJDK 11 版本已经开始对容器化的全面支持, 例如 <code>XX:+UseContainerSupport</code> 已被默认开启, 所以这里我们仍然选择不去修改任何设置去测试:</p><p><img src="https://cdn.oss.link/markdown/kx2saM.png"></p><p>可以看到, 即使默认打开了 <code>UseContainerSupport</code> 开关, 仍然无法正常的自适应内存.</p><h4 id="6-1-5、OpenJDK-11-0-16"><a href="#6-1-5、OpenJDK-11-0-16" class="headerlink" title="6.1.5、OpenJDK 11.0.16"></a>6.1.5、OpenJDK 11.0.16</h4><p>可能很多人会好奇, 都测试了 11.0.15 为什么还要测试 11.0.16? 因为这两个版本在不设置的情况下有个奇怪的差异:</p><p><img src="https://cdn.oss.link/markdown/5rA9ch.png"></p><p><strong>可以看到, <code>11.0.16</code> 版本在不做任何设置时自动适应了容器内存限制, 堆内存从接近 4G 变为了 120M.</strong></p><h4 id="6-1-6、OpenJDK-17"><a href="#6-1-6、OpenJDK-17" class="headerlink" title="6.1.6、OpenJDK 17"></a>6.1.6、OpenJDK 17</h4><p>OPneJDK 17 是目前最新的 LTS 版本, 这里再专门测试一下 OpneJDK 17 不调整任何参数时的内存自适应情况:</p><p><img src="https://cdn.oss.link/markdown/yY49dp.png"></p><p>可以看到 OpneJDK 17 与 OpenJDK 11.0.16 版本一样, 都可以实现内存的自适应.</p><h3 id="6-2、有配置下的自适应"><a href="#6-2、有配置下的自适应" class="headerlink" title="6.2、有配置下的自适应"></a>6.2、有配置下的自适应</h3><p>在上面的无配置情况下我们进行了一些测试, 测试结果从 11.0.15 版本开始出现了一些 “令人费解” 的情况; 理论上 11+ 已经自动打开了容器支持参数, 但是某些版本内存自适应仍然无效, 这促使我对其他参数的实际效果产生了怀疑; 为此我开始按照各个参数的添加版本手动启用这些参数进行了一些测试.</p><h4 id="6-2-1、OpenJDK-8u131"><a href="#6-2-1、OpenJDK-8u131" class="headerlink" title="6.2.1、OpenJDK 8u131"></a>6.2.1、OpenJDK 8u131</h4><p>8u131 正式开始进行容器化支持, 在这个版本增加了一个 JVM 选项来告诉 JVM 使用 cgroup 设置的内存限制; 我增加了 <code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</code> 参数进行测试, 测试结果是这个选项在我当前的环境中似乎完全不生效:</p><p><img src="https://cdn.oss.link/markdown/7vX0yq.png"></p><h4 id="6-2-2、OpenJDK-8u222"><a href="#6-2-2、OpenJDK-8u222" class="headerlink" title="6.2.2、OpenJDK 8u222"></a>6.2.2、OpenJDK 8u222</h4><p>从 8u191 版本开始, 又增加了另一个开启容器化支持的参数 <code>-XX:+UseContainerSupport</code>, 该参数从 OpenJDK 10 反向合并而来; 我尝试使用这个参数来进行测试, 结果仍然是没什么卵用:</p><p><img src="https://cdn.oss.link/markdown/LuRkwx.png"></p><h4 id="6-2-3、OpenJDK-11"><a href="#6-2-3、OpenJDK-11" class="headerlink" title="6.2.3、OpenJDK 11+"></a>6.2.3、OpenJDK 11+</h4><p>从 11+ 版本开始 <code>-XX:+UseContainerSupport</code> 已经自动开启, 我们不需要再做什么特殊设置, 所以结果是跟无配置测试结果一致的: <strong>从 <code>11.0.15</code> 以后的版本开始能够自适应, 之前的版本(包括 <code>11.0.15</code>)都不支持自适应.</strong></p><h3 id="6-3、分析与总结"><a href="#6-3、分析与总结" class="headerlink" title="6.3、分析与总结"></a>6.3、分析与总结</h3><p>经过上面的一些测试后会发现, 在很多文章或文档中描述的参数出现了莫名其妙不好使的情况; 这主要是因为容器化这两年一个很重要的更新: <strong>Cgroups v2</strong>; 限于篇幅问题这里不在一一罗列测试截图, 下面仅说一下结论.</p><h4 id="6-3-1、Cgroups-V1"><a href="#6-3-1、Cgroups-V1" class="headerlink" title="6.3.1、Cgroups V1"></a>6.3.1、Cgroups V1</h4><p>对于使用 <code>Cgroups V1</code> 的容器化环境来说, “旧的” 一些规则仍然适用(新内核增加内核参数 <code>systemd.unified_cgroup_hierarchy=0</code> 回退到 Cgroups V1):</p><ul><li>1、OpenJDK 8u131 以及之后版本增加 <code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</code> 参数支持内存自适应.</li><li>2、OpenJDK 8u191 以及之后版本增加 <code>-XX:+UseContainerSupport</code> 参数支持内存自适应.</li><li>3、OpenJDK 11 以及之后版本默认开启了 <code>-XX:+UseContainerSupport</code> 参数, 自动支持内存自适应</li></ul><h4 id="6-3-2、Cgroups-V2"><a href="#6-3-2、Cgroups-V2" class="headerlink" title="6.3.2、Cgroups V2"></a>6.3.2、Cgroups V2</h4><p>在新版本系统(具体自行查询)配合较新的 containerd 等容器化工具时, 已经默认转换为 <code>Cgroups V2</code>, <strong>需要注意的是针对于 <code>Cgroups V2</code> 的内存自适应只有在 OpneJDK 11.0.16 以及之后的版本才支持, 在这之前开启任何参数都没用.</strong></p><p>关于 Cgroups V2 的一些支持细节具体请查看 <a href="https://bugs.openjdk.org/browse/JDK-8230305">JDK-8230305</a>:</p><p><img src="https://cdn.oss.link/markdown/v5mjuB.png"></p><h2 id="七、DNS-缓存"><a href="#七、DNS-缓存" class="headerlink" title="七、DNS 缓存"></a>七、DNS 缓存</h2><p>在大部分 Java 程序中我们都会使用域名去访问一些服务, 可能是访问某些 API 端点或者是访问一些数据库, 而不论哪样只要使用了域名就会涉及到 DNS 缓存问题; <strong>Java 的 DNS 缓存是由 JVM 控制的, 不要理所当然的以为 JVM DNS 缓存非常友好, 某些时候 DNS 缓存可能超出预期.</strong> 为了测试 DNS 缓存情况我从<a href="https://gist.github.com/andystanton/958a9a87f5b5a4eae537f96f896a19bc">某大佬</a>这里抄来一个测试脚本, 该脚本会测试三个版本的 OpenJDK DNS 缓存情况:</p><p><strong>jvm-dns-ttl-policy.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br><span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> 8-jdk 11-jdk 17-jdk; <span class="hljs-keyword">do</span><br><br>    tag_name=<span class="hljs-string">&quot;jvm-dns-ttl-policy&quot;</span><br>    output_file=<span class="hljs-string">&quot;<span class="hljs-subst">$(mktemp)</span>&quot;</span><br><br>    jvm_args=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> ! [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tag&#125;</span>&quot;</span> == <span class="hljs-string">&quot;8-jdk&quot;</span> ]; <span class="hljs-keyword">then</span><br>        jvm_args=<span class="hljs-string">&quot;--add-exports java.base/sun.net=ALL-UNNAMED&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    ttl=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> ! [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>        ttl=<span class="hljs-string">&quot;-Dsun.net.inetaddr.ttl=<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    dockerfile=<span class="hljs-string">&quot;</span><br><span class="hljs-string">FROM        eclipse-temurin:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="hljs-string">WORKDIR     /var/tmp</span><br><span class="hljs-string">RUN         printf &#x27; \\</span><br><span class="hljs-string">              public class DNSTTLPolicy &#123; \\</span><br><span class="hljs-string">                public static void main(String args[]) &#123; \\</span><br><span class="hljs-string">                  System.out.printf(\&quot;Implementation DNS TTL for JVM in Docker image based on &#x27;eclipse-temurin:<span class="hljs-variable">$&#123;tag&#125;</span>&#x27; is %%d seconds\\\\n\&quot;, sun.net.InetAddressCachePolicy.get()); \\</span><br><span class="hljs-string">                &#125; \\</span><br><span class="hljs-string">              &#125;&#x27; &gt;DNSTTLPolicy.java</span><br><span class="hljs-string">RUN         javac <span class="hljs-variable">$&#123;jvm_args&#125;</span> DNSTTLPolicy.java -XDignore.symbol.file</span><br><span class="hljs-string">CMD         java <span class="hljs-variable">$&#123;jvm_args&#125;</span> <span class="hljs-variable">$&#123;ttl&#125;</span> DNSTTLPolicy</span><br><span class="hljs-string">ENTRYPOINT  java <span class="hljs-variable">$&#123;jvm_args&#125;</span> <span class="hljs-variable">$&#123;ttl&#125;</span> DNSTTLPolicy</span><br><span class="hljs-string">&quot;</span><br><br>    dockerfile_security_manager=<span class="hljs-string">&quot;</span><br><span class="hljs-string">FROM        eclipse-temurin:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="hljs-string">WORKDIR     /var/tmp</span><br><span class="hljs-string">RUN         printf &#x27; \\</span><br><span class="hljs-string">              public class DNSTTLPolicy &#123; \\</span><br><span class="hljs-string">                public static void main(String args[]) &#123; \\</span><br><span class="hljs-string">                  System.out.printf(\&quot;Implementation DNS TTL for JVM in Docker image based on &#x27;eclipse-temurin:<span class="hljs-variable">$&#123;tag&#125;</span>&#x27; (with security manager enabled) is %%d seconds\\\\n\&quot;, sun.net.InetAddressCachePolicy.get()); \\</span><br><span class="hljs-string">                &#125; \\</span><br><span class="hljs-string">              &#125;&#x27; &gt;DNSTTLPolicy.java</span><br><span class="hljs-string">RUN         printf &#x27; \\</span><br><span class="hljs-string">              grant &#123; \\</span><br><span class="hljs-string">                permission java.security.AllPermission; \\</span><br><span class="hljs-string">              &#125;;&#x27; &gt;all-permissions.policy</span><br><span class="hljs-string">RUN         javac <span class="hljs-variable">$&#123;jvm_args&#125;</span> DNSTTLPolicy.java -XDignore.symbol.file</span><br><span class="hljs-string">CMD         java <span class="hljs-variable">$&#123;jvm_args&#125;</span> <span class="hljs-variable">$&#123;ttl&#125;</span> -Djava.security.manager -Djava.security.policy==all-permissions.policy DNSTTLPolicy</span><br><span class="hljs-string">ENTRYPOINT  java <span class="hljs-variable">$&#123;jvm_args&#125;</span> <span class="hljs-variable">$&#123;ttl&#125;</span> -Djava.security.manager -Djava.security.policy==all-permissions.policy DNSTTLPolicy</span><br><span class="hljs-string">&quot;</span><br><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Building Docker image based on eclipse-temurin:<span class="hljs-variable">$&#123;tag&#125;</span> ...&quot;</span> &gt;&amp;2<br>    docker build -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tag_name&#125;</span>&quot;</span> - &lt;&lt;&lt;<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dockerfile&#125;</span>&quot;</span> 2&gt;&amp;1 &gt; /dev/null<br>    docker run --<span class="hljs-built_in">rm</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tag_name&#125;</span>&quot;</span> &amp;&gt;<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;output_file&#125;</span>&quot;</span><br>    <span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;output_file&#125;</span>&quot;</span><br>    docker build -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tag_name&#125;</span>&quot;</span> - &lt;&lt;&lt;<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dockerfile_security_manager&#125;</span>&quot;</span> 2&gt;&amp;1 &gt; /dev/null<br>    docker run --<span class="hljs-built_in">rm</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tag_name&#125;</span>&quot;</span> &amp;&gt;<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;output_file&#125;</span>&quot;</span><br>    <span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;output_file&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="7-1、默认-DNS-缓存"><a href="#7-1、默认-DNS-缓存" class="headerlink" title="7.1、默认 DNS 缓存"></a>7.1、默认 DNS 缓存</h3><p>默认不做任何设置的 DNS 缓存结果如下(直接运行脚本即可):</p><p><img src="https://cdn.oss.link/markdown/4tB7jk.png"></p><p><strong>可以看到, 默认情况下 DNS TTL 被设置为 30s, 如果开启了 <code>Security Manager</code> 则变为 -1s, 那么 -1s 什么意思呢(截取自 OpenJDK 11 源码):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* The Java-level namelookup cache policy for successful lookups:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * -1: caching forever</span><br><span class="hljs-comment"> * any positive value: the number of seconds to cache an address for</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * default value is forever (FOREVER), as we let the platform do the</span><br><span class="hljs-comment"> * caching. For security reasons, this caching is made forever when</span><br><span class="hljs-comment"> * a security manager is set.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">cachePolicy</span> <span class="hljs-operator">=</span> FOREVER;<br><br><span class="hljs-comment">/* The Java-level namelookup cache policy for negative lookups:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * -1: caching forever</span><br><span class="hljs-comment"> * any positive value: the number of seconds to cache an address for</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * default value is 0. It can be set to some other value for</span><br><span class="hljs-comment"> * performance reasons.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">negativeCachePolicy</span> <span class="hljs-operator">=</span> NEVER;<br></code></pre></td></tr></table></figure><h3 id="7-2、设置-DNS-缓存"><a href="#7-2、设置-DNS-缓存" class="headerlink" title="7.2、设置 DNS 缓存"></a>7.2、设置 DNS 缓存</h3><p>为了避免这种奇奇怪怪的 DNS 缓存策略问题, 最好我们在启动时通过增加 <code>-Dsun.net.inetaddr.ttl=xxx</code> 参数手动设置 DNS 缓存时间:</p><p><img src="https://cdn.oss.link/markdown/AWMvSc.png"></p><p><strong>可以看到, 一但我们手动设置了 DNS 缓存, 那么不论是否开启 <code>Security Manager</code> 都会遵循我们的设置.</strong> 如果需要更细致的调试 DNS 缓存推荐使用 Alibaba 开源的 <a href="https://github.com/alibaba/java-dns-cache-manipulator">DCM</a> 工具.</p><h2 id="八、Native-编译"><a href="#八、Native-编译" class="headerlink" title="八、Native 编译"></a>八、Native 编译</h2><p>Native 编译优化是指通过 GraalVM 将 Java 代码编译为可以直接被平台执行的二进制文件, 编译后的可执行文件运行速度会有极大提升. <strong>但是 GraalVM 需要应用的代码层调整、框架升级等操作, 总体来说比较苛刻; 但是如果是新项目, 最好让开发能支持一下 GraalVM 的 Native 编译, 这对启动速度等有巨大提升.</strong></p><p>上面介绍的用于测试优雅关闭的项目已经内置了 GraalVM 支持, 只需要下载 GraalVM 并设置 <code>JAVA_HOME</code> 和 <code>PATH</code> 变量, 并使用 <code>mvn clean package -Dmaven.test.skip=true -Pnative</code> 编译即可:</p><p><img src="https://cdn.oss.link/markdown/69Dkfu.png"></p><p>编译成功后将在 <code>target</code> 目录下生成可以直接执行的二进制文件, 以下为启动速度对比测试:</p><p><img src="https://cdn.oss.link/markdown/ky6yv3.png"></p><p><strong>可以看到 GraalVM 编译后启动速度具有碾压级的优势, 基本差出一个数量级; 但是综合来说这种方式目前还不是特别成熟, 迄今为止国内 Java 生态仍是 OpneJDK 8 横行, 老旧项目想要满足 GraalVM 需要调整的地方比较巨大; 所以总结就是新项目能支持尽量支持, 老项目不要作死.</strong></p>]]></content>
    
    
    <summary type="html">记录 Java 应用容器化时候的一些小基洗以及一些小问题解决方案, 希望对其他人有帮助. 本文只讨论 JDK 8+ 版本, 更低版本暂不在讨论范围内.</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Java" scheme="https://mritd.com/tags/java/"/>
    
    <category term="Memory Limit" scheme="https://mritd.com/tags/memory-limit/"/>
    
    <category term="Tini" scheme="https://mritd.com/tags/tini/"/>
    
  </entry>
  
  <entry>
    <title>Headscale 搭建 P2P 内网穿透</title>
    <link href="https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network/"/>
    <id>https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network/</id>
    <published>2022-10-19T14:07:00.000Z</published>
    <updated>2022-10-19T14:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、内网穿透简述"><a href="#一、内网穿透简述" class="headerlink" title="一、内网穿透简述"></a>一、内网穿透简述</h2><p>由于国内网络环境问题, 普遍家庭用户宽带都没有分配到公网 IP(我有固定公网 IP, 嘿嘿); 这时候一般我们需要从外部访问家庭网络时就需要通过一些魔法手段, 比如 VPN、远程软件(向日葵…)等; 但是这些工具都有一个普遍存在的问题: 慢+卡!</p><h3 id="1-1、传统星型拓扑"><a href="#1-1、传统星型拓扑" class="headerlink" title="1.1、传统星型拓扑"></a>1.1、传统星型拓扑</h3><p>究其根本因素在于, 在传统架构中如果两个位于多层 NAT(简单理解为多个路由器)之后的设备, 只能通过一些中央(VPN&#x2F;远程软件)中转服务器进行链接, 这时网络连接速度取决于中央服务器带宽和速度; 这种网络架构我这里简称为: 星型拓扑</p><p><img src="https://cdn.oss.link/markdown/MKn6bf.png"> </p><p>从这张图上可以看出, <strong>你的 “工作笔记本” 和 “家庭 NAS” 之间通讯的最大传输速度为 <code>Up/Down: 512K/s</code></strong>; 因为流量经过了中央服务器中转, 由于网络木桶效应存在, 即使你两侧的网络速度再高也没用, 整体的速度取决于这个链路中最低的一个设备网速而不是你两端的设备.</p><p><strong>在这种拓扑下, 想提高速度只有一个办法: 加钱!</strong> 在不使用 “钞能力” 的情况下, 普遍免费的软件提供商不可能给予过多的资源来让用户白嫖, 而自己弄大带宽的中央服务器成本又过高.</p><h3 id="1-2、NAT-穿透与网状拓扑"><a href="#1-2、NAT-穿透与网状拓扑" class="headerlink" title="1.2、NAT 穿透与网状拓扑"></a>1.2、NAT 穿透与网状拓扑</h3><blockquote><p>本部分只做简述, 具体里面有大量细节和规则可能描述不准确, 细节部分推荐阅读 <a href="https://tailscale.com/blog/how-nat-traversal-works/">How NAT traversal works</a>.</p></blockquote><p>既然传统的星型拓扑有这么多问题, 那么有没有其他骚操作可以解决呢? 答案是有的, 简单来说就是利用 NAT 穿透原理. NAT 穿透简单理解如下: <strong>在 A 设备主动向 B 设备发送流量后, 整个链路上的防火墙会短时间打开一个映射规则, 该规则允许 B 设备短暂的从这个路径上反向向 A 设备发送流量.</strong> 更通俗的讲大概就是所谓的: <strong>“顺着网线来打你”</strong></p><p><img src="https://cdn.oss.link/markdown/by4z9m.png"></p><p>搞清了这个规则以后, 我们就可以<strong>弄一台 “低配” 的中央服务器</strong>, 让中央服务器来<strong>帮助我们协商</strong>两边的设备谁先访问谁(或者说是访问规则); 两个设备一起无脑访问对方, 然后触发防火墙的 NAT 穿透规则(防火墙打开), 此后两个设备就可以不通过中央服务器源源不断的通讯了. 在这种架构下我们的设备其实就组成了一个非标准的网状拓扑:</p><p><img src="https://cdn.oss.link/markdown/MrF6yn.png"></p><p>在这种拓扑下, 两个设备之间的通讯速度已经不在取决于中央服务器, 而是直接取决于两端设备的带宽, 也就是说达到了设备网络带宽峰值. <strong>当然 NAT 穿透也不是百分百能够成功的, 在复杂网络情况下有些防火墙不会按照预期工作或者说有更严格的限制;</strong> 比如 IP、端口、协议限制等等, 所以为了保证可靠性可以让中央服务器中转做后备方案, 即尽量尝试 NAT 穿透, 如果不行走中央服务器中继.</p><h2 id="二、Tailscale-简介"><a href="#二、Tailscale-简介" class="headerlink" title="二、Tailscale 简介"></a>二、Tailscale 简介</h2><blockquote><p>第一部分是为了方便读者理解一些新型内网穿透的大致基本原理, 现在回到本文重点: Tailscale</p></blockquote><p>Tailscale 就是一种利用 NAT 穿透(aka: P2P 穿透)技术的 VPN 工具. Tailscale 客户端等是开源的, 不过遗憾的是中央控制服务器目前并不开源; Tailscale 目前也提供免费的额度给用户使用, 在 NAT 穿透成功的情况下也能保证满速运行.</p><p>不过一旦无法 NAT 穿透需要做中转时, Tailscale 官方的服务器由于众所周知的原因在国内访问速度很拉胯; 不过万幸的是开源社区大佬们搓了一个开源版本的中央控制服务器(Headscale), 也就是说: <strong>我们可以自己搭建中央服务器啦, 完全 “自主可控” 啦.</strong></p><h2 id="三、搭建-Headscale-服务端"><a href="#三、搭建-Headscale-服务端" class="headerlink" title="三、搭建 Headscale 服务端"></a>三、搭建 Headscale 服务端</h2><blockquote><p>以下命令假设安装系统为 Ubuntu 22.04, 其他系统请自行调整.</p></blockquote><h3 id="3-1、宿主机安装"><a href="#3-1、宿主机安装" class="headerlink" title="3.1、宿主机安装"></a>3.1、宿主机安装</h3><p>Headscale 是采用 Go 语言编写的, 所以只有一个二进制文件, 在 <a href="https://github.com/juanfont/headscale/releases">Github Releases</a> 页面下载最新版本即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载</span><br>wget https://github.com/juanfont/headscale/releases/download/v0.16.4/headscale_0.16.4_linux_amd64 -O /usr/local/bin/headscale<br><br><span class="hljs-comment"># 增加可执行权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/headscale<br></code></pre></td></tr></table></figure><p>下载完成后为了安全性我们需要创建单独的用户和目录用于 Headscale 运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/headscale<br><br><span class="hljs-comment"># 创建用户</span><br>useradd \<br>--create-home \<br>--home-dir /var/lib/headscale/ \<br>--system \<br>--user-group \<br>--shell /usr/sbin/nologin \<br>headscale<br></code></pre></td></tr></table></figure><p>为了保证 Headscale 能持久运行, 我们需要创建 SystemD 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /lib/systemd/system/headscale.service</span><br>[Unit]<br>Description=headscale controller<br>After=syslog.target<br>After=network.target<br><br>[Service]<br>Type=simple<br>User=headscale<br>Group=headscale<br>ExecStart=/usr/local/bin/headscale serve<br>Restart=always<br>RestartSec=5<br><br><span class="hljs-comment"># Optional security enhancements</span><br>NoNewPrivileges=<span class="hljs-built_in">yes</span><br>PrivateTmp=<span class="hljs-built_in">yes</span><br>ProtectSystem=strict<br>ProtectHome=<span class="hljs-built_in">yes</span><br>ReadWritePaths=/var/lib/headscale /var/run/headscale<br>AmbientCapabilities=CAP_NET_BIND_SERVICE<br>RuntimeDirectory=headscale<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="3-2、配置-Headscale"><a href="#3-2、配置-Headscale" class="headerlink" title="3.2、配置 Headscale"></a>3.2、配置 Headscale</h3><p>安装完成以后我们需要在 <code>/etc/headscale/config.yaml</code> 中配置 Headscale 的启动配置, 以下为配置样例以及解释(仅列出重要配置):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># Headscale 服务器的访问地址</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># 这个地址是告诉客户端需要访问的地址, 即使你需要在跑在</span><br><span class="hljs-comment"># 负载均衡器之后这个地址也必须写成负载均衡器的访问地址</span><br><span class="hljs-attr">server_url:</span> <span class="hljs-string">https://your.domain.com</span><br><br><span class="hljs-comment"># Headscale 实际监听的地址</span><br><span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:8080</span><br><br><span class="hljs-comment"># 监控地址</span><br><span class="hljs-attr">metrics_listen_addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9090</span><br><br><span class="hljs-comment"># grpc 监听地址</span><br><span class="hljs-attr">grpc_listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:50443</span><br><br><span class="hljs-comment"># 是否允许不安全的 grpc 连接(非 TLS)</span><br><span class="hljs-attr">grpc_allow_insecure:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 客户端分配的内网网段</span><br><span class="hljs-attr">ip_prefixes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">fd7a:115c:a1e0::/48</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">100.64</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/10</span><br><br><span class="hljs-comment"># 中继服务器相关配置</span><br><span class="hljs-attr">derp:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment"># 关闭内嵌的 derper 中继服务(可能不安全, 还没去看代码)</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 下发给客户端的中继服务器列表(默认走官方的中继节点)</span><br>  <span class="hljs-attr">urls:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://controlplane.tailscale.com/derpmap/default</span><br><br>  <span class="hljs-comment"># 可以在本地通过 yaml 配置定义自己的中继接待你</span><br>  <span class="hljs-attr">paths:</span> []<br><br><span class="hljs-comment"># SQLite config</span><br><span class="hljs-attr">db_type:</span> <span class="hljs-string">sqlite3</span><br><span class="hljs-attr">db_path:</span> <span class="hljs-string">/var/lib/headscale/db.sqlite</span><br><br><span class="hljs-comment"># 使用自动签发证书是的域名</span><br><span class="hljs-attr">tls_letsencrypt_hostname:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 使用自定义证书时的证书路径</span><br><span class="hljs-attr">tls_cert_path:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">tls_key_path:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 是否让客户端使用随机端口, 默认使用 41641/UDP</span><br><span class="hljs-attr">randomize_client_port:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="3-3、证书及反向代理"><a href="#3-3、证书及反向代理" class="headerlink" title="3.3、证书及反向代理"></a>3.3、证书及反向代理</h3><p>可能很多人和我一样, 希望使用 ACME 自动证书, 又不想占用 80&#x2F;443 端口, 又想通过负载均衡器负载, 配置又看的一头雾水; 所以这里详细说明一下 Headscale 证书相关配置和工作逻辑:</p><ul><li>1、Headscale 的 ACME 只支持 HTTP&#x2F;TLS 挑战, 所以使用后必定占用 80&#x2F;443</li><li>2、当配置了 <code>tls_letsencrypt_hostname</code> 时一定会进行 ACME 申请</li><li>3、在不配置 <code>tls_letsencrypt_hostname</code> 时如果配置了 <code>tls_cert_path</code> 则使用自定义证书</li><li>4、两者都不配置则不使用任何证书, 服务端监听 HTTP 请求</li><li>5、三种情况下(ACME 证书、自定义证书、无证书)主服务都只监听 <code>listen_addr</code> 地址, 与 <code>server_url</code> 没半毛钱关系</li><li>6、只有在有证书(ACME 证书或自定义证书)的情况下或者手动开启了 <code>grpc_allow_insecure</code> 才会监听 grpc 远程调用服务</li></ul><p>综上所述, 如果你想通过 Nginx、Caddy 反向代理 Headscale, 则你需要满足以下配置:</p><ul><li>1、删除掉 <code>tls_letsencrypt_hostname</code> 或留空, 防止 ACME 启动</li><li>2、删除掉 <code>tls_cert_path</code> 或留空, 防止加载自定义证书</li><li>3、<code>server_url</code> 填写 Nginx 或 Caddy 被访问的 HTTPS 地址</li><li>4、在你的 Nginx 或 Caddy 中反向代理填写 <code>listen_addr</code> 的 HTTP 地址</li></ul><p>Nginx 配置参考 <a href="https://github.com/juanfont/headscale/wiki/nginx-configuration">官方 Wiki</a>, Caddy 只需要一行 <code>reverse_proxy headscale:8080</code> 即可(地址自行替换).</p><p>至于 ACME 证书你可以通过使用 <code>acme.sh</code> 自动配置 Nginx 或者使用 Caddy 自动申请等方式, 这些已经与 Headscale 无关了, 不在本文探讨范围内.</p><h3 id="3-4、内网地址分配"><a href="#3-4、内网地址分配" class="headerlink" title="3.4、内网地址分配"></a>3.4、内网地址分配</h3><p>请尽量不要将 <code>ip_prefixes</code> 配置为默认的 <code>100.64.0.0/10</code> 网段, 如果你有兴趣查询了该地址段, 那么你应该明白它叫 CGNAT; 很不幸的是例如 Aliyun 底层的 apt 源等都在这个范围内, 可能会有一些奇怪问题.</p><h3 id="3-5、启动-Headscale"><a href="#3-5、启动-Headscale" class="headerlink" title="3.5、启动 Headscale"></a>3.5、启动 Headscale</h3><p>在处理完证书等配置后, 只需要愉快的启动一下即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开机自启动 并 立即启动</span><br>systemctl <span class="hljs-built_in">enable</span> headscale --now<br></code></pre></td></tr></table></figure><p>再啰嗦一嘴, 如果你期望使用 Headscale ACME 自动申请证书, 你的关键配置应该像这样:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server_url:</span> <span class="hljs-string">https://your.domain.com</span><br><span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:443</span><br><span class="hljs-attr">tls_letsencrypt_hostname:</span> <span class="hljs-string">&quot;your.domain.com&quot;</span><br><span class="hljs-attr">tls_cert_path:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">tls_key_path:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>如果你期望使用自定义证书, 则你的关键配置应该像这样:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server_url:</span> <span class="hljs-string">https://your.domain.com</span><br><span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:443</span><br><span class="hljs-attr">tls_letsencrypt_hostname:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">tls_cert_path:</span> <span class="hljs-string">&quot;/path/to/cert&quot;</span><br><span class="hljs-attr">tls_key_path:</span> <span class="hljs-string">&quot;/path/to/key&quot;</span><br></code></pre></td></tr></table></figure><p>如果你期望使用负载均衡器, 那么你的关键配置应该像这样:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server_url:</span> <span class="hljs-string">https://your.domain.com</span><br><span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:8080</span><br><span class="hljs-attr">tls_letsencrypt_hostname:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">tls_cert_path:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">tls_key_path:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>在使用负载均衡器配置时, 启动后会有一行警告日志, 忽略即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-09-18T07:57:36Z WRN Listening without TLS but ServerURL does not start with http://<br></code></pre></td></tr></table></figure><h3 id="3-6、Docker-Compose-安装"><a href="#3-6、Docker-Compose-安装" class="headerlink" title="3.6、Docker Compose 安装"></a>3.6、Docker Compose 安装</h3><p>Compose 配置样例文件如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># docker-compose.yaml</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">headscale:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">headscale</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">headscale/headscale:0.16.4</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">cap_add:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NET_RAW</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SYS_MODULE</span><br>    <span class="hljs-attr">sysctls:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net.ipv4.ip_forward=1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net.ipv6.conf.all.forwarding=1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf:/etc/headscale</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data:/var/lib/headscale</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;headscale&quot;</span>, <span class="hljs-string">&quot;serve&quot;</span>]<br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">config:</span><br>  <span class="hljs-attr">data:</span><br></code></pre></td></tr></table></figure><p>你需要在与 <code>docker-compose.yaml</code> 同级目录下创建 <code>conf</code> 目录用于存储配置文件; 具体配置请参考上面的配置详解等部分, 最后不要忘记你的 Compose 文件端口映射需要和配置文件保持一致.</p><h2 id="四、客户端安装"><a href="#四、客户端安装" class="headerlink" title="四、客户端安装"></a>四、客户端安装</h2><p>对于客户端来说, Tailscale 提供了多个平台和发行版的预编译安装包, 并且部分客户端直接支持设置自定义的中央控制服务器.</p><h3 id="4-1、Linux-客户端"><a href="#4-1、Linux-客户端" class="headerlink" title="4.1、Linux 客户端"></a>4.1、Linux 客户端</h3><p>Linux 用户目前只需要使用以下命令安装即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -fsSL https://tailscale.com/install.sh | sh<br></code></pre></td></tr></table></figure><p>默认该脚本会检测相关的 Linux 系统发行版并使用对应的包管理器安装 Tailscale, 安装完成后使用以下命令启动:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tailscale up --login-server https://your.domain.com --advertise-routes=192.168.11.0/24 --accept-routes=<span class="hljs-literal">true</span> --accept-dns=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>关于选项设置:</p><ul><li><code>--login-server</code>: 指定使用的中央服务器地址(必填)</li><li><code>--advertise-routes</code>: 向中央服务器报告当前客户端处于哪个内网网段下, 便于中央服务器让同内网设备直接内网直连(可选的)或者将其他设备指定流量路由到当前内网(可选)</li><li><code>--accept-routes</code>: 是否接受中央服务器下发的用于路由到其他客户端内网的路由规则(可选)</li><li><code>--accept-dns</code>: 是否使用中央服务器下发的 DNS 相关配置(可选, 推荐关闭)</li></ul><p>启动完成后, <strong><code>tailscale</code> 将会卡住, 并打印一个你的服务器访问地址; 浏览器访问该地址后将会得到一条命令:</strong></p><p><img src="https://cdn.oss.link/markdown/l2zjmV.png"></p><p><img src="https://cdn.oss.link/markdown/JU8BVZ.png"></p><p><strong>注意: 浏览器上显示的命令需要在中央控制服务器执行(Headscale), <code>NAMESAPCE</code> 位置应该替换为一个具体的 Namespace, 可以使用以下命令创建 Namespace (名字随意)并让设备加入:</strong></p><p><img src="https://cdn.oss.link/markdown/x9tA4A.png" alt="x9tA4A"></p><p>在 Headscale 服务器上执行命令成功后客户端命令行在稍等片刻便会执行完成, 此时该客户端已经被加入 Headscale 网络并分配了特定的内网 IP; 多个客户端加入后在 NAT 穿透成功时就可以互相 ping 通, 如果出现问题请阅读后面的调试细节, 只要能注册成功就算是成功了一半, 暂时不要慌.</p><h3 id="4-2、MacOS-客户端"><a href="#4-2、MacOS-客户端" class="headerlink" title="4.2、MacOS 客户端"></a>4.2、MacOS 客户端</h3><p>MacOS 客户端安装目前有两种方式, 一种是使用标准的 AppStore 版本(好像还有一个可以直接下载的), 需要先设置服务器地址然后再启动 App:</p><p>首先访问你的 Headscale 地址 <code>https://your.domain.com/apple</code>:</p><p><img src="https://cdn.oss.link/markdown/Y1cXjS.png"></p><p>复制倒数第二行命令到命令行执行(可能需要 sudo 执行), 然后去 AppStore 搜索 Hailscale 安装并启动; 启动后会自动打开浏览器页面, 与 Linux 安装类似, 复制命令到 Headscale 服务器执行即可(Namespace 创建一次就行).</p><p><strong>第二种方式也是比较推荐的方式, 直接编译客户端源码安装, 体验与 Linux 版本一致:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 go</span><br>brew install go<br><br><span class="hljs-comment"># 编译命令行客户端</span><br>go install tailscale.com/cmd/tailscale&#123;,d&#125;@main<br><br><span class="hljs-comment"># 安装为系统服务</span><br>sudo tailscaled install-system-daemon<br></code></pre></td></tr></table></figure><p>安装完成后同样通过 <code>tailscale up</code> 命令启动并注册即可, 具体请参考 Linux 客户端安装部分.</p><h3 id="4-3、其他客户端"><a href="#4-3、其他客户端" class="headerlink" title="4.3、其他客户端"></a>4.3、其他客户端</h3><p>关于 Windows 客户端大致流程就是创建一个注册表, 然后同样安装官方 App 启动, 接着浏览器复制命令注册即可. 至于移动端本人没有需求, 所以暂未研究. <strong>Windows 具体的安装流程请访问 <code>https://your.domain.com/windows</code> 地址查看(基本与 MacOS AppStore 版本安装类似).</strong></p><h2 id="五、中继服务器搭建"><a href="#五、中继服务器搭建" class="headerlink" title="五、中继服务器搭建"></a>五、中继服务器搭建</h2><p>在上面的 Headscale 搭建完成并添加客户端后, 某些客户端可能无法联通; 这是由于网络复杂情况下导致了 NAT 穿透失败; 为此我们可以搭建一个中继服务器来进行传统的星型拓扑通信.</p><h3 id="5-1、搭建-DERP-Server"><a href="#5-1、搭建-DERP-Server" class="headerlink" title="5.1、搭建 DERP Server"></a>5.1、搭建 DERP Server</h3><p>首先需要注意的是, 在需要搭建 DERP Server 的服务器上, 请先安装一个 Tailscale 客户端并注册到 Headscale; <strong>这样做的目的是让搭建的 DERP Server 开启客户端认证, 否则你的 DERP Server 可以被任何人白嫖.</strong></p><p>目前 Tailscale 官方并未提供 DERP Server 的安装包, 所以需要我们自行编译安装; 在编译之前请确保安装了最新版本的 Go 语言及其编译环境.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编译 DERP Server</span><br>go install tailscale.com/cmd/derper@main<br><br><span class="hljs-comment"># 复制到系统可执行目录</span><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;GOPATH&#125;</span>/bin/derper /usr/local/bin<br><br><span class="hljs-comment"># 创建用户和运行目录</span><br>useradd \<br>        --create-home \<br>        --home-dir /var/lib/derper/ \<br>        --system \<br>        --user-group \<br>        --shell /usr/sbin/nologin \<br>        derper<br></code></pre></td></tr></table></figure><p>接下来创建一个 SystemD 配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /lib/systemd/system/derper.service</span><br>[Unit]<br>Description=tailscale derper server<br>After=syslog.target<br>After=network.target<br><br>[Service]<br>Type=simple<br>User=derper<br>Group=derper<br>ExecStart=/usr/local/bin/derper -c=/var/lib/derper/private.key -a=:8989 -stun-port=3456 -verify-clients<br>Restart=always<br>RestartSec=5<br><br><span class="hljs-comment"># Optional security enhancements</span><br>NoNewPrivileges=<span class="hljs-built_in">yes</span><br>PrivateTmp=<span class="hljs-built_in">yes</span><br>ProtectSystem=strict<br>ProtectHome=<span class="hljs-built_in">yes</span><br>ReadWritePaths=/var/lib/derper /var/run/derper<br>AmbientCapabilities=CAP_NET_BIND_SERVICE<br>RuntimeDirectory=derper<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>最后使用以下命令启动 Derper Server 即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> derper --now<br></code></pre></td></tr></table></figure><p><strong>注意: 默认情况下 Derper Server 会监听在 <code>:443</code> 上, 同时会触发自动 ACME 申请证书. 关于证书逻辑如下:</strong></p><ul><li>1、如果不指定 <code>-a</code> 参数, 则默认监听 <code>:443</code></li><li>2、如果监听 <code>:443</code> 并且未指定 <code>--certmode=manual</code> 则会强制使用 <code>--hostname</code> 指定的域名进行 ACME 申请证书</li><li>3、如果指定了 <code>--certmode=manual</code> 则会使用 <code>--certmode</code> 指定目录下的证书开启 HTTPS</li><li>4、如果指定了 <code>-a</code> 为非 <code>:443</code> 端口, 且没有指定 <code>--certmode=manual</code> 则只监听 HTTP</li></ul><p><strong>如果期望使用 ACME 自动申请只需要不增加 <code>-a</code> 选项即可(占用 443 端口), 如果期望通过负载均衡器负载, 则需要将 <code>-a</code> 选项指定到非 443 端口, 然后配置 Nginx、Caddy 等 LB 软件即可. 最后一点 <code>stun</code> 监听的是 UDP 端口, 请确保防火墙打开此端口.</strong></p><h3 id="5-2、配置-Headscale"><a href="#5-2、配置-Headscale" class="headerlink" title="5.2、配置 Headscale"></a>5.2、配置 Headscale</h3><p>在创建完 Derper 中继服务器后, 我们还需要配置 Headscale 来告诉所有客户端在必要时可以使用此中继节点进行通信; 为了达到这个目的, 我们需要在 Headscale 服务器上创建以下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># /etc/headscale/derper.yaml</span><br><br><span class="hljs-attr">regions:</span><br>  <span class="hljs-attr">901:</span><br>    <span class="hljs-attr">regionid:</span> <span class="hljs-number">901</span><br>    <span class="hljs-attr">regioncode:</span> <span class="hljs-string">private-derper</span><br>    <span class="hljs-attr">regionname:</span> <span class="hljs-string">&quot;My Private Derper Server&quot;</span><br>    <span class="hljs-attr">nodes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">private-derper</span><br>        <span class="hljs-attr">regionid:</span> <span class="hljs-number">901</span><br>        <span class="hljs-comment"># 自行更改为自己的域名</span><br>        <span class="hljs-attr">hostname:</span> <span class="hljs-string">derper.xxxxx.com</span><br>        <span class="hljs-comment"># Derper 节点的 IP</span><br>        <span class="hljs-attr">ipv4:</span> <span class="hljs-number">123.123</span><span class="hljs-number">.123</span><span class="hljs-number">.123</span><br>        <span class="hljs-comment"># Derper 设置的 STUN 端口</span><br>        <span class="hljs-attr">stunport:</span> <span class="hljs-number">3456</span><br></code></pre></td></tr></table></figure><p>在创建好基本的 Derper Server 节点信息配置后, 我们需要调整主配置来让 Headscale 加载:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">derp:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment"># 这里关闭 Headscale 默认的 Derper Server</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># urls 留空, 保证不加载官方的默认 Derper</span><br>  <span class="hljs-attr">urls:</span> []<br>  <span class="hljs-comment"># 这里填写 Derper 节点信息配置的绝对路径</span><br>  <span class="hljs-attr">paths:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/headscale/derper.yaml</span><br><br>  <span class="hljs-comment"># If enabled, a worker will be set up to periodically</span><br>  <span class="hljs-comment"># refresh the given sources and update the derpmap</span><br>  <span class="hljs-comment"># will be set up.</span><br>  <span class="hljs-attr">auto_update_enabled:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># How often should we check for DERP updates?</span><br>  <span class="hljs-attr">update_frequency:</span> <span class="hljs-string">24h</span><br></code></pre></td></tr></table></figure><p>接下来重启 Headscale 并重启 client 上的 tailscale 即可看到中继节点:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">~ ❯❯❯ tailscale netcheck<br><br>Report:<br>        * UDP: <span class="hljs-literal">true</span><br>        * IPv4: <span class="hljs-built_in">yes</span>, 124.111.111.111:58630<br>        * IPv6: no, but OS has support<br>        * MappingVariesByDestIP: <span class="hljs-literal">false</span><br>        * HairPinning: <span class="hljs-literal">false</span><br>        * PortMapping: UPnP, NAT-PMP, PCP<br>        * CaptivePortal: <span class="hljs-literal">true</span><br>        * Nearest DERP: XXXX Derper Server<br>        * DERP latency:<br>                - XXXX: 10.1ms  (XXXX Derper Server)<br></code></pre></td></tr></table></figure><p>到此中继节点搭建完成.</p><h3 id="5-3、Docker-Compose-安装"><a href="#5-3、Docker-Compose-安装" class="headerlink" title="5.3、Docker Compose 安装"></a>5.3、Docker Compose 安装</h3><p>目前官方似乎也没有提供 Docker 镜像, 我自己通过 GitHub Action 编译了一个 Docker 镜像,  以下是使用此镜像的 Compose 文件样例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.9&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">derper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mritd/derper</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">derper</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080/tcp&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3456:3456/udp&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/tailscale:/var/run/tailscale</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data:/var/lib/derper</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data:</span><br></code></pre></td></tr></table></figure><p><strong>该镜像默认开启了客户端验证, 所以请确保 <code>/var/run/tailscale</code> 内存在已加入 Headscale 成功的 tailscaled 实例的 sock 文件. 其他具体环境变量等参数配置请参考 <a href="https://github.com/mritd/autobuild/blob/main/derper/Earthfile">Earthfile</a>.</strong></p><h2 id="六、客户端网络调试"><a href="#六、客户端网络调试" class="headerlink" title="六、客户端网络调试"></a>六、客户端网络调试</h2><blockquote><p>在调试中继节点或者不确定网络情况时, 可以使用一些 Tailscale 内置的命令来调试网络.</p></blockquote><h3 id="6-1、Ping-命令"><a href="#6-1、Ping-命令" class="headerlink" title="6.1、Ping 命令"></a>6.1、Ping 命令</h3><p><code>tailscale ping</code> 命令可以用于测试 IP 连通性, 同时可以看到时如何连接目标节点的. <strong>默认情况下 Ping 命令首先会使用 Derper 中继节点通信, 然后尝试 P2P 连接; 一旦 P2P 连接成功则自动停止 Ping:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">~ ❯❯❯ tailscale ping 10.24.0.5<br>pong from k8s13 (10.24.0.5) via DERP(XXXXX) <span class="hljs-keyword">in</span> 14ms<br>pong from k8s13 (10.24.0.5) via DERP(XXXXX) <span class="hljs-keyword">in</span> 13ms<br>pong from k8s13 (10.24.0.5) via DERP(XXXXX) <span class="hljs-keyword">in</span> 14ms<br>pong from k8s13 (10.24.0.5) via DERP(XXXXX) <span class="hljs-keyword">in</span> 12ms<br>pong from k8s13 (10.24.0.5) via DERP(XXXXX) <span class="hljs-keyword">in</span> 12ms<br>pong from k8s13 (10.24.0.5) via 3.4.170.23:2495 <span class="hljs-keyword">in</span> 9ms<br></code></pre></td></tr></table></figure><p>由于其先走 Derper 的特性也可以用来测试 Derper 连通性.</p><h3 id="6-2、Status-命令"><a href="#6-2、Status-命令" class="headerlink" title="6.2、Status 命令"></a>6.2、Status 命令</h3><p>通过 <code>tailscale status</code> 命令可以查看当前节点与其他对等节点的连接方式, 通过此命令可以查看到当前节点可连接的节点以及是否走了 Derper 中继:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">~ ❯❯❯ tailscale status<br>10.24.0.8       xmac                 kovacs       macOS   -<br>                alivpn               kovacs       linux   active; direct 4.3.4.5:41644, tx 1264 rx 944<br>                aliyun               kovacs       linux   -<br>                bob                  kovacs       macOS   offline<br>                bob-imac             kovacs       macOS   offline<br>                company              kovacs       linux   active; direct 114.114.114.114:41642, tx 1296 rx 880<br></code></pre></td></tr></table></figure><h3 id="6-3、NetCheck-命令"><a href="#6-3、NetCheck-命令" class="headerlink" title="6.3、NetCheck 命令"></a>6.3、NetCheck 命令</h3><p>有些情况下我们可以确认是当前主机的网络问题导致没法走 P2P 连接, 但是我们又想了解一下当前的网络环境; 此时可以使用 <code>tailscale netcheck</code> 命令来检测当前的网络环境, 此命令将会打印出详细的网络环境报告:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">~ ❯❯❯ tailscale netcheck<br>2022/10/19 21:15:27 portmap: [v1] Got PMP response; IP: 123.123.123.123, epoch: 297671<br>2022/10/19 21:15:27 portmap: [v1] Got PCP response: epoch: 297671<br>2022/10/19 21:15:27 portmap: [v1] UPnP reply &#123;Location:http://192.168.11.1:39735/rootDesc.xml Server:AsusWRT/386 UPnP/1.1 MiniUPnPd/2.2.0 USN:uuid:23345-2380-45f5-34534-04421abwb7cf0::urn:schemas-upnp-org:device:InternetGatewayDevice:1&#125;, <span class="hljs-string">&quot;HTTP/1.1 200 OK\r\nCACHE-CONTROL: max-age=120\r\nST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\r\nUSN: uuid:34564645-2380-45f5-b069-sdfdght3245.....&quot;</span><br>2022/10/19 21:15:27 portmap: UPnP meta changed: &#123;Location:http://192.168.11.1:39735/rootDesc.xml Server:AsusWRT/386 UPnP/1.1 MiniUPnPd/2.2.0 USN:uuid:23345-2380-45f5-b069-04421abwb7cf0::urn:schemas-upnp-org:device:InternetGatewayDevice:1&#125;<br><br>Report:<br>        * UDP: <span class="hljs-literal">true</span><br>        * IPv4: <span class="hljs-built_in">yes</span>, 123.123.123.123:5935<br>        * IPv6: no, but OS has support<br>        * MappingVariesByDestIP: <span class="hljs-literal">false</span><br>        * HairPinning: <span class="hljs-literal">true</span><br>        * PortMapping: UPnP, NAT-PMP, PCP<br>        * CaptivePortal: <span class="hljs-literal">true</span><br>        * Nearest DERP: XXXXX Aliyun<br>        * DERP latency:<br>                - XXXXX: 9.5ms   (XXXXX Aliyun)<br>                - XXXXX: 53.1ms  (XXXXX BandwagonHost)<br></code></pre></td></tr></table></figure><h2 id="七、其他补充"><a href="#七、其他补充" class="headerlink" title="七、其他补充"></a>七、其他补充</h2><h3 id="7-1、某些代理工具兼容性"><a href="#7-1、某些代理工具兼容性" class="headerlink" title="7.1、某些代理工具兼容性"></a>7.1、某些代理工具兼容性</h3><p>MacOS 下使用一些增强代理工具时, 如果安装 App Store 的官方图形化客户端, 则可能与这些软件冲突, 推荐使用纯命令行版本<strong>并添加进程规则匹配 <code>tailscale</code> 和 <code>tailscaled</code> 两个进程, 让它们始终走 <code>DIRECT</code> 规则即可.</strong></p><h3 id="7-2、MacOS-下-CPU-占用突然起飞"><a href="#7-2、MacOS-下-CPU-占用突然起飞" class="headerlink" title="7.2、MacOS 下 CPU 占用突然起飞"></a>7.2、MacOS 下 CPU 占用突然起飞</h3><p>在使用一些网络代理工具时, 网络工具会设置默认路由; 这可能导致 <code>tailscaled</code> 无法获取到默认路由接口, 然后进入死循环并把 CPU 吃满, 同时会与 Derper 服务器产生大量上传流量. <strong>截止本文发布此问题已修复, 请使用 <code>mian</code> 分支编译安装, 具体见 <a href="https://github.com/tailscale/tailscale/issues/5879">ISSUE&#x2F;5879</a>.</strong></p><h3 id="7-3、阿里云安装客户端后无法更新软件"><a href="#7-3、阿里云安装客户端后无法更新软件" class="headerlink" title="7.3、阿里云安装客户端后无法更新软件"></a>7.3、阿里云安装客户端后无法更新软件</h3><p>Tailscale 默认使用 CGNAT(<code>100.64.0.0/10</code>) 网段作为内部地址分配网段, <strong>目前 Tailscale 仅允许自己的接口使用此网段, 不巧的是阿里云的 DNS、Apt 源等也采用此网段.</strong> 这会导致阿里云服务器安装客户端后 DNS、Apt 等不可用, 解决方案目前只能修改源码删除掉这两个 DROP 规则并重新编译.</p><p><img src="https://cdn.oss.link/markdown/Nnv35j.png"></p><h3 id="7-4、开启路由转发"><a href="#7-4、开启路由转发" class="headerlink" title="7.4、开启路由转发"></a>7.4、开启路由转发</h3><p>大多数时候我们可能并不会在每个服务器上都安装 Tailscale 客户端, 通常只安装 2、3 台, 然后想通过这两三台转发该内网的所有流量. <strong>此时你需要</strong></p><ul><li>启动 tailscale 时设置正确的路由提示 <code>--advertise-routes=192.168.1.0/24</code> 来告诉 Headscale 服务器 “我这个节点可以转发这些地址的路由”</li><li>其他节点启动时需要增加 <code>--accept-routes=true</code> 选项来声明 “我接受外部其他节点发布的路由”</li></ul><p><strong>以上两个选项配置后, 只需要 Headscale 服务器上使用 <code>headscale node route enable -a -i XX(ID)</code> 开启即可. 开启后目标节点(ID)的路由就会发布到接受外部路由的所有节点, 想要关闭的话去掉 <code>-a</code> 即可.</strong></p><h3 id="7-5、其他问题"><a href="#7-5、其他问题" class="headerlink" title="7.5、其他问题"></a>7.5、其他问题</h3><p>以上也只是我个人遇到的一些问题, 如果有其他问题推荐先搜索然后查看 ISSUE, 最后不行可以看看源码. 目前来说 Tailscale 很多选项很模糊, 可能需要阅读源码以后才能知道到底应该怎么做.</p>]]></content>
    
    
    <summary type="html">嗨呀, 最近 Java 写吐了... 来折腾一下内网穿透.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Headscale" scheme="https://mritd.com/tags/headscale/"/>
    
    <category term="Tailscale" scheme="https://mritd.com/tags/tailscale/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Mac 上愉快地使用 Docker</title>
    <link href="https://mritd.com/2022/06/08/happy-using-docker-on-macos/"/>
    <id>https://mritd.com/2022/06/08/happy-using-docker-on-macos/</id>
    <published>2022-06-08T07:36:00.000Z</published>
    <updated>2022-06-08T07:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、目标任务"><a href="#一、目标任务" class="headerlink" title="一、目标任务"></a>一、目标任务</h2><p>首先要明确的是, 作为了一个每天在 Linux Server 上 <code>rm -rf</code> 的人来说, 如果想在 Mac 上使用  Docker, 最舒服的也是兼容所有 docker cli 命令行操作即可; 至于图形化的界面完全不需要, 我们并不指望图形化界面能比敲命令快到哪里去, 也不指望图形化界面变为主力; 所以本篇文章的核心目标:</p><ul><li>在 Mac 上使用完整的 docker cli 命令, 包括对基本的 <code>-v</code> 挂载支持</li><li>可以支持 x86 的模拟, 可以为 x86 build 或者运行相关镜像</li><li>在尽可能的情况下可以进行 CPU 架构切换, arm64 与 x86 最好都可以支持</li></ul><h2 id="二、工具选型"><a href="#二、工具选型" class="headerlink" title="二、工具选型"></a>二、工具选型</h2><p>首先是我们最熟悉的 Docker Desktop, 安装包奇大无比, UI 卡成翔, 启动速度更不用提而且还时不时的卡死, 所以 Docker Desktop 是完全不考虑的; 那么剩下几种方案类型如下:</p><ul><li>VM 虚拟机方案</li><li>Colima 方案</li><li>Lima 方案</li></ul><p><strong>先说结论: Lima YES! VM 虚拟机方案要花钱且难受, Colima 暂且不稳定. Lima 方案直接看第五节.</strong></p><h2 id="三、虚拟机方案"><a href="#三、虚拟机方案" class="headerlink" title="三、虚拟机方案"></a>三、虚拟机方案</h2><p>目前在 M1 上, 唯一可用或者说堪用的虚拟机当属 Parallels Desktop, 至于其他的 VBox、VMware 目前还不成熟; 如果纯 qemu 有点过于硬核(愿意自己封装脚本的当我没说); 对于 Parallels Desktop 来说, 我们需要购买开发版本的 License, 因为我们需要借助 <code>prlctl</code> 来实现一些自动化 , 一年好几百… 经过测试这种方案也有一定可行性:</p><ul><li>1、首先通过 PD 创建 Ubuntu 之类的虚拟机</li><li>2、在虚拟机里安装好 Docker</li><li>3、通过 cli 程序启动虚拟机, 并且将 <code>~</code> rw 挂载到虚拟机里</li></ul><p>基于这个方案我个人尝试过, 曾经写过一个 <a href="https://github.com/mritd/pd/blob/010101042308ecbad805cffebb93973b55db4ff2/helper/prlctl_wrapper.go#L332">PD</a> 的小工具来辅助完成挂载动作. 但是这种工具有一些明显的缺点:</p><ul><li>目前不支持 x86 的模拟, 可通过 binfmt 缓解, 但是不完善</li><li>虚拟机要花钱且需要虚拟机 cli 支持完善</li></ul><h2 id="四、Colima-方案"><a href="#四、Colima-方案" class="headerlink" title="四、Colima 方案"></a>四、Colima 方案</h2><p>Colima 号称是专门为了解决 Mac 平台容器化工具链的, 但是实际测试发现目前 Colima 还不算稳定, 有时可能会有一些小问题; 当然 Colima 最大的问题是: <strong>可自定义化程度不高, 底层基于 Lima.</strong> Colima 具体的使用方式啥的这里暂不详细描述, 目前还不稳定不太推荐.</p><h2 id="五、Lima-方案"><a href="#五、Lima-方案" class="headerlink" title="五、Lima 方案"></a>五、Lima 方案</h2><p>Lima 目前是基于 QEMU 的自动化 VM 方案, 当前由于其出色设计, 借助 Cloud Init 可以在很多阶段帮助我们完成 hook; 所以不论是装个 Docker 还是 k8s, 亦或是弄个其他的东西都很方便; 而且很多方案比如 docker 官方都有相关样例, 我们可以直接照抄外加做点自定义.</p><h3 id="5-1、Lima-安装"><a href="#5-1、Lima-安装" class="headerlink" title="5.1、Lima 安装"></a>5.1、Lima 安装</h3><p>Lima 在 Mac 下安装相对简单, 以下命令将安装 master 分支版本.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install lima --HEAD<br></code></pre></td></tr></table></figure><p>在正常情况下, 安装 Lima 会附带安装 QEMU, 如果本机已经安装 QEMU, 可能需要执行以下命令<strong>将 QEMU 升级到 7.0</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew upgrade qemu<br></code></pre></td></tr></table></figure><p>为了使用 docker, 还需要通过 brew 安装一下 docker cli:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install docker<br></code></pre></td></tr></table></figure><h3 id="5-2、Lima-使用"><a href="#5-2、Lima-使用" class="headerlink" title="5.2、Lima 使用"></a>5.2、Lima 使用</h3><p>默认情况下 Lima 安装完成后会生成一个 <code>lima</code> 的快捷命令, 目前不太推荐使用, 原因是看起来方便一点但是没法控制太多参数, <strong>所以仍然建议使用标准的 <code>limactl</code> 命令进行操作.</strong> limactl 使用方式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sh">Lima: Linux virtual machines<br><br>Usage:<br>  limactl [<span class="hljs-built_in">command</span>]<br><br>Examples:<br>  Start the default instance:<br>  $ limactl start<br><br>  Open a shell:<br>  $ lima<br><br>  Run a container:<br>  $ lima nerdctl run -d --name nginx -p 8080:80 nginx:alpine<br><br>  Stop the default instance:<br>  $ limactl stop<br><br>  See also example YAMLs: /opt/homebrew/share/doc/lima/examples<br><br>Available Commands:<br>  completion    Generate the autocompletion script <span class="hljs-keyword">for</span> the specified shell<br>  copy          Copy files between host and guest<br>  delete        Delete an instance of Lima.<br>  edit          Edit an instance of Lima<br>  factory-reset Factory reset an instance of Lima<br>  <span class="hljs-built_in">help</span>          Help about any <span class="hljs-built_in">command</span><br>  info          Show diagnostic information<br>  list          List instances of Lima.<br>  prune         Prune garbage objects<br>  shell         Execute shell <span class="hljs-keyword">in</span> Lima<br>  show-ssh      Show the ssh <span class="hljs-built_in">command</span> line<br>  start         Start an instance of Lima<br>  stop          Stop an instance<br>  sudoers       Generate /etc/sudoers.d/lima file <span class="hljs-keyword">for</span> enabling vmnet.framework support<br>  validate      Validate YAML files<br><br>Flags:<br>      --debug     debug mode<br>  -h, --<span class="hljs-built_in">help</span>      <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> limactl<br>  -v, --version   version <span class="hljs-keyword">for</span> limactl<br><br>Use <span class="hljs-string">&quot;limactl [command] --help&quot;</span> <span class="hljs-keyword">for</span> more information about a <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><h3 id="5-3、Lima-配置文件"><a href="#5-3、Lima-配置文件" class="headerlink" title="5.3、Lima 配置文件"></a>5.3、Lima 配置文件</h3><p>Lima 通过读取一个 yaml 配置描述文件来决定如何创建一个虚拟机, 该文件基本结构如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定义每个平台架构需要使用的启动镜像</span><br><span class="hljs-attr">images:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img&quot;</span><br>  <span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;x86_64&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img&quot;</span><br>  <span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;aarch64&quot;</span><br><br><span class="hljs-comment"># 定义虚拟机需要使用哪个架构启动(对应上面的镜像)</span><br><span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;x86_64&quot;</span><br><br><span class="hljs-comment"># CPU 数量</span><br><span class="hljs-attr">cpus:</span> <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 内存大小</span><br><span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;16G&quot;</span><br><br><span class="hljs-comment"># 磁盘大小</span><br><span class="hljs-attr">disk:</span> <span class="hljs-string">&quot;100G&quot;</span><br><br><span class="hljs-comment"># 虚拟机与 macOS 宿主机挂载时使用的挂载技术</span><br><span class="hljs-comment"># 目前推荐 9p, 可换成 sshfs, 但是 sshfs 会有权限问题</span><br><span class="hljs-attr">mountType:</span> <span class="hljs-string">9p</span><br><br><span class="hljs-comment"># 定义虚拟机和 macOS 宿主机有哪些目录可以共享</span><br><span class="hljs-attr">mounts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;~&quot;</span><br>  <span class="hljs-comment"># 定义虚拟机对这个目录是否可写</span><br>  <span class="hljs-attr">writable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">9p:</span><br>    <span class="hljs-comment"># 对于可写的共享目录, cache 推荐类型为 mmap, 不写好像默认 fscache</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-string">&quot;mmap&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;/tmp/lima&quot;</span><br>  <span class="hljs-attr">writable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">9p:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-string">&quot;mmap&quot;</span><br><span class="hljs-comment"># containerd is managed by Docker, not by Lima, so the values are set to false here.</span><br><span class="hljs-attr">containerd:</span><br>  <span class="hljs-attr">system:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># cloud-init hook 定义</span><br><span class="hljs-attr">provision:</span><br><span class="hljs-comment"># 定义以什么权限在虚拟机内执行脚本</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-string">system</span><br>  <span class="hljs-comment"># This script defines the host.docker.internal hostname when hostResolver is disabled.</span><br>  <span class="hljs-comment"># It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.</span><br>  <span class="hljs-comment"># Names defined in /etc/hosts inside the VM are not resolved inside containers when</span><br>  <span class="hljs-comment"># using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    #!/bin/sh</span><br><span class="hljs-string">    sed -i &#x27;s/host.lima.internal.*/host.lima.internal host.docker.internal/&#x27; /etc/hosts</span><br><span class="hljs-string"></span><span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-string">system</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    #!/bin/bash</span><br><span class="hljs-string">    set -eux -o pipefail</span><br><span class="hljs-string">    if command -v docker &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="hljs-string">      docker run --platform=linux/amd64 --privileged --rm tonistiigi/binfmt --install all</span><br><span class="hljs-string">      exit 0</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">      export DEBIAN_FRONTEND=noninteractive</span><br><span class="hljs-string">      curl -fsSL https://get.docker.com | sh</span><br><span class="hljs-string">      docker run --platform=linux/amd64 --privileged --rm tonistiigi/binfmt --install all</span><br><span class="hljs-string">      # NOTE: you may remove the lines below, if you prefer to use rootful docker, not rootless</span><br><span class="hljs-string">      systemctl disable --now docker</span><br><span class="hljs-string">      apt-get install -y uidmap dbus-user-session</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string"></span><span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    #!/bin/bash</span><br><span class="hljs-string">    set -eux -o pipefail</span><br><span class="hljs-string">    systemctl --user start dbus</span><br><span class="hljs-string">    dockerd-rootless-setuptool.sh install</span><br><span class="hljs-string">    docker context use rootless</span><br><span class="hljs-string"></span><span class="hljs-attr">probes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">script:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    #!/bin/bash</span><br><span class="hljs-string">    set -eux -o pipefail</span><br><span class="hljs-string">    if ! timeout 30s bash -c &quot;until command -v docker &gt;/dev/null 2&gt;&amp;1; do sleep 3; done&quot;; then</span><br><span class="hljs-string">      echo &gt;&amp;2 &quot;docker is not installed yet&quot;</span><br><span class="hljs-string">      exit 1</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">    if ! timeout 30s bash -c &quot;until pgrep rootlesskit; do sleep 3; done&quot;; then</span><br><span class="hljs-string">      echo &gt;&amp;2 &quot;rootlesskit (used by rootless docker) is not running&quot;</span><br><span class="hljs-string">      exit 1</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string"></span>  <span class="hljs-attr">hint:</span> <span class="hljs-string">See</span> <span class="hljs-string">&quot;/var/log/cloud-init-output.log&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">guest</span><br><span class="hljs-attr">hostResolver:</span><br>  <span class="hljs-comment"># hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also</span><br>  <span class="hljs-comment"># resolve inside containers, and not just inside the VM itself.</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-attr">host.docker.internal:</span> <span class="hljs-string">host.lima.internal</span><br><span class="hljs-attr">portForwards:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">guestSocket:</span> <span class="hljs-string">&quot;/run/user/<span class="hljs-template-variable">&#123;&#123;.UID&#125;&#125;</span>/docker.sock&quot;</span><br>  <span class="hljs-attr">hostSocket:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;.Dir&#125;&#125;</span>/sock/docker.sock&quot;</span><br><span class="hljs-comment"># 自己定义的启动后消息输出</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">|</span><br><span class="hljs-string">  To run `docker` on the host (assumes docker-cli is installed), run the following commands:</span><br><span class="hljs-string">  ------</span><br><span class="hljs-string">  docker context create amd64 --docker &quot;host=unix://&#123;&#123;.Dir&#125;&#125;/sock/docker.sock&quot;</span><br><span class="hljs-string">  docker context use amd64</span><br><span class="hljs-string">  ------</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="5-4、启动-VM"><a href="#5-4、启动-VM" class="headerlink" title="5.4、启动 VM"></a>5.4、启动 VM</h3><p>limactl 命令提供了一个 <code>start</code> 子命令用于启动一个虚拟机, 子命令接受一个参数, 这个参数形式不同会产生不同的行为:</p><ul><li>如果参数为一个文件路径, 则假定文件为一个 lima 虚拟机的 yaml 配置, 读取并启动</li><li>如果参数是单纯字符串, 首先尝试从已存在的虚拟机中查找名字相同的, 找到则立即启动</li><li>如果参数是单纯字符串, 且未找到已存在同名的虚拟机, 则尝试通过内置模版来创建一个新的虚拟机</li></ul><p>以上面我自己定义的 docker 配置文件为例, 我们直接启动这个配置既可以创建一个 docker 虚拟机:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">limactl start ./docker-amd64.yaml<br></code></pre></td></tr></table></figure><p>启动后会提示是否编辑然后再启动, 这是为了使用同一个配置来启动多个 vm 使用的, 所以不编辑直接启动即可:</p><p><img src="https://cdn.oss.link/markdown/dJwuuJ.png"></p><p>稍等片刻后虚拟机将启动成功:</p><p><img src="https://cdn.oss.link/markdown/MhWILZ.png"></p><p>启动完成后, <strong>执行最下面打印出的两条命令, 即可在宿主机上完整的使用 <code>docker</code>.</strong> 其本质上利用 docker context 功能, 然后通过将虚拟机中的 sock 文件挂载到宿主机, 并配置 docker context 来实现无缝使用 docker 命令.</p><h3 id="5-5、虚拟机调整"><a href="#5-5、虚拟机调整" class="headerlink" title="5.5、虚拟机调整"></a>5.5、虚拟机调整</h3><p>某些情况下, 我们需要定制一些 VM 里的配置, 在定制时主要需要调整配置文件的 <code>provision</code> 部分; 在该部分中, 如果 <code>mode</code> 被定义为 <code>system</code> 则会以 root 用户执行相关命令, 否则以普通用户来执行命令. <strong>需要注意的是, 我们定义的脚本需要具有幂等性, 因为脚本在每次都会执行一次, 所以一般对于可能造成数据擦除动作的命令都要写好判断逻辑, 避免重复执行.</strong></p><p>关于文件挂载, 这里推荐使用 <code>9p</code> 类型, 未来 lima 将完全切换到该挂载方式; 同时经过测试<strong>目前仅有 <code>9p</code> 挂载模式下, 本地目录 rw 映射到虚拟机时不会出现权限问题, sshfs 方式挂载如果遇到 <code>chown</code> 之类的命令会造成权限错误, 可能导致容器启动失败(例如 mysql).</strong></p><p>在测试虚拟机配置过程中, 可以直接使用 <code>limactl delete -f xxxx</code> 来强制删除目标虚拟机, 然后重新启动即可; <strong>虚拟机名称默认与 yaml 文件名相同, 可使用 <code>limactl ls</code> 命令查看.</strong></p><h3 id="5-6、多平台兼容"><a href="#5-6、多平台兼容" class="headerlink" title="5.6、多平台兼容"></a>5.6、多平台兼容</h3><p>在上面我的 docker 配置样例中, 每次虚拟机启动完成后会自动安装 binfmt:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --platform=linux/amd64 --privileged --<span class="hljs-built_in">rm</span> tonistiigi/binfmt --install all<br></code></pre></td></tr></table></figure><p>这样能保证无论 Lima 虚拟机原始架构是什么, 都能运行其他平台的 docker 镜像; 典型的例如某些 openjdk8 镜像只有 amd64 的版本, 但是在 lima 虚拟机为 aarch64 的情况下仍然可以使用.</p><p>除了这种 “速度较快” 的跨架构运行方式, lima 还支持直接在 VM 中定义架构, 这样在 qemu 启动时则会直接从 VM 系统层模拟目标架构; <strong>这种方式的好处是对目标架构兼容性很好, 但是运行速度会更慢.</strong> 调整 VM 架构只需要修改 <code>arch</code> 配置即可(注意, 目标架构的镜像一定要配置好):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定义每个平台架构需要使用的启动镜像</span><br><span class="hljs-attr">images:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img&quot;</span><br>  <span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;x86_64&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">location:</span> <span class="hljs-string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img&quot;</span><br>  <span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;aarch64&quot;</span><br><br><span class="hljs-comment"># 定义本虚拟机需要使用哪个架构启动(对应会使用上面目标架构的镜像)</span><br><span class="hljs-attr">arch:</span> <span class="hljs-string">&quot;aarch64&quot;</span><br></code></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>目前整体来看, Docker Desktop 在 mac 上基本上是很难用的, Colima 现在还不太成熟, 适合轻度使用 docker 的用户; 而重度使用 docker 并且有定制化需求的用户还是推荐 Lima 虚拟机; 同时 Lima 也支持很多操作系统, 官方有大量的<a href="https://github.com/lima-vm/lima/tree/master/examples">样例模版</a>(包括 k8s、k3s、podman 等), 非常适合重度容器使用者.</p>]]></content>
    
    
    <summary type="html">Docker Desktop 拉垮是众所周之的, 配合 M1 的 arm 不兼容 x86 的特性, 简直是痛不欲生... 为了让我的 64G RAM 得以发挥性能, 研究了一下 Docker 最舒服的使用方式.</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="macOS" scheme="https://mritd.com/tags/macos/"/>
    
    <category term="Lima" scheme="https://mritd.com/tags/lima/"/>
    
  </entry>
  
  <entry>
    <title>Taskfile - 比 Makefile 更好用的构建工具</title>
    <link href="https://mritd.com/2022/04/25/taskfile-a-better-build-tool-than-makefile/"/>
    <id>https://mritd.com/2022/04/25/taskfile-a-better-build-tool-than-makefile/</id>
    <published>2022-04-25T04:24:00.000Z</published>
    <updated>2022-04-25T04:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Taskfile-是什么"><a href="#一、Taskfile-是什么" class="headerlink" title="一、Taskfile 是什么"></a>一、Taskfile 是什么</h2><p>Taskfile 通过 yaml 来描述各种执行任务, 其核心采用 go 编写; 相较于 Makefile 的 tab 分割和 bash 结合语法 Taskfile 显得更加现代化和易于使用(虽然会变成 yaml 工程师). Taskfile 内置了动态变量、操作系统等环境变量识别等高级功能都更贴合现代化的 Coding 方式. </p><p>总体来说如果你是一个对 Makefile 不太熟悉的人, 又期望通过类似 Makefile 的工具完成一些批量任务, 那么相对于 Makefile 来说 Taskfile 会更加便于入门, 学习曲线更低且速度也足够快.</p><h2 id="二、安装及使用"><a href="#二、安装及使用" class="headerlink" title="二、安装及使用"></a>二、安装及使用</h2><h3 id="2-1、安装-go-task"><a href="#2-1、安装-go-task" class="headerlink" title="2.1、安装 go-task"></a>2.1、安装 go-task</h3><p>对于 mac 用户来说官方提供了 brew 安装方式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install go-task/tap/go-task<br></code></pre></td></tr></table></figure><p>对于 Linux 用户, 官方提供了部分 Linux 发行版的安装包, 但由于其只有一个二进制文件, 所以官方也提供了快速安装脚本:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># For Default Installation to ./bin with debug logging</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl --location https://taskfile.dev/install.sh)</span>&quot;</span> -- -d<br><br><span class="hljs-comment"># For Installation To /usr/local/bin for userwide access with debug logging</span><br><span class="hljs-comment"># May require sudo sh</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl --location https://taskfile.dev/install.sh)</span>&quot;</span> -- -d -b /usr/local/bin<br></code></pre></td></tr></table></figure><p>如果本地已经有了 Go 语言开发环境也可以直接通过 go 命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go install github.com/go-task/task/v3/cmd/task@latest<br></code></pre></td></tr></table></figure><h3 id="2-2、快速开始"><a href="#2-2、快速开始" class="headerlink" title="2.2、快速开始"></a>2.2、快速开始</h3><p>安装完成后, 只需要编写一个 <code>Taskfile.yml</code> 的 yaml 文件, 然后就可以通过 <code>task</code> 命令运行相应的任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;执行 build 任务&quot;</span><br>      <br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/TOdvoi.png"></p><p>如果需要设置默认执行任务, 只需要创建一个名字为 <code>default</code> 的任务即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;这是默认任务&quot;</span><br><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;执行 build 任务&quot;</span><br><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/M34EKd.png"></p><h2 id="三、进阶使用"><a href="#三、进阶使用" class="headerlink" title="三、进阶使用"></a>三、进阶使用</h2><h3 id="3-1、环境变量"><a href="#3-1、环境变量" class="headerlink" title="3.1、环境变量"></a>3.1、环境变量</h3><p>Taskfile 支持引用三种环境变量:</p><ul><li>Shell 环境变量</li><li>Taskfile 内定义的环境变量</li><li>变量文件内定义的环境变量</li></ul><p>如果需要引用 Shell 内的环境变量只需要使用 <code>$变量名</code> 方式直接引用即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$ABCD&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/zElUCE.png"></p><p>同样在 Taskfile 内也可以定义环境变量:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">TENV2:</span> <span class="hljs-string">&quot;t2&quot;</span> <span class="hljs-comment"># 全局环境变量</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$TENV1&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$TENV2&quot;</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TENV1:</span> <span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-comment"># 单个 task 环境变量</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/qs1O2Y.png"></p><p>除了这种直接引用变量的方式, Taskfile 也支持类似 docker-compose 一样读取 env 文件来加载环境变量; <strong>Taskfile 会默认加载同级目录下的 <code>.env</code> 文件, 也可以在 Taskfile 内通过 <code>dotenv</code> 命令来配置特定文件:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">dotenv:</span> [<span class="hljs-string">&quot;.env&quot;</span>, <span class="hljs-string">&quot;.testenv&quot;</span>]<br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$ABCD&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$TESTENV&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/nqTBMF.png"></p><h3 id="3-2、增强变量"><a href="#3-2、增强变量" class="headerlink" title="3.2、增强变量"></a>3.2、增强变量</h3><p>除了标准的环境变量以外, 在 Taskfile 中还内置了一种使用更加广泛的增强变量 <code>vars</code>; 该变量模式可以通过 go 的模版引擎进行读取(插值引用), 且具有环境变量不具备的特殊特性. 以下为 vars 变量的示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-comment"># 全局 var 变量</span><br><span class="hljs-attr">vars:</span><br>  <span class="hljs-attr">GLOBAL_VAR:</span> <span class="hljs-string">&quot;global var&quot;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">testvar:</span><br>    <span class="hljs-comment"># task var 变量</span><br>    <span class="hljs-attr">vars:</span><br>      <span class="hljs-attr">TASK_VAR:</span> <span class="hljs-string">&quot;task var&quot;</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;echo <span class="hljs-template-variable">&#123;&#123;.GLOBAL_VAR&#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;echo <span class="hljs-template-variable">&#123;&#123;.TASK_VAR&#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>除了上面与环境变量类似的使用以外, vars 增强变量还支持动态定义; 常见的场景, 比如我们想每次 task 执行时都获取当前的 git commit id, 此时可以使用 vars 的动态定义特性:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">-ldflags=&quot;-X</span> <span class="hljs-string">main.Version=&#123;&#123;.GIT_COMMIT&#125;&#125;&quot;</span> <span class="hljs-string">main.go</span><br>    <span class="hljs-attr">vars:</span><br>      <span class="hljs-comment"># 每次任务执行时, GIT_COMMIT 都会调用 shell 命令来生成这个变量</span><br>      <span class="hljs-attr">GIT_COMMIT:</span><br>        <span class="hljs-attr">sh:</span> <span class="hljs-string">git</span> <span class="hljs-string">log</span> <span class="hljs-string">-n</span> <span class="hljs-number">1</span> <span class="hljs-string">--format=%h</span><br></code></pre></td></tr></table></figure><p>vars 变量还内置了一些特殊的预定义变量, 例如 <strong><code>&#123;&#123;.TASK&#125;&#125;</code> 变量永远表示当前的任务名称、<code>&#123;&#123;.CLI_ARGS&#125;&#125;</code> 可以引用命令行输入等.</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">yarn:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">yarn</span> &#123;&#123;<span class="hljs-string">.CLI_ARGS</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>此时如果执行 <code>task yarn -- install</code>, 那么 <code>&#123;&#123;.CLI_ARGS&#125;&#125;</code> 值将会变成 <code>install</code> 从而执行 <code>yarn install</code> 命令.</p><p>除此之外, vars 变量还具备一些其他特性, 比如跨任务引用时可进行覆盖传递等, 这些特性将会在后面介绍.</p><h3 id="3-3、执行目录"><a href="#3-3、执行目录" class="headerlink" title="3.3、执行目录"></a>3.3、执行目录</h3><p>Taskfile 内定义的 task 默认在当前目录下执行, 如果期望在其他目录执行, 无需手动编写 <code>cd</code> 等命令, 可以直接通过配置 <code>dir</code> 参数来设置执行目录:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">test1:</span><br>    <span class="hljs-attr">dir:</span> <span class="hljs-string">/tmp</span> <span class="hljs-comment"># 在指定目录执行</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ls&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-4、任务依赖"><a href="#3-4、任务依赖" class="headerlink" title="3.4、任务依赖"></a>3.4、任务依赖</h3><p>在 CI 等环境的使用中, 我们常常需要定义任务的执行顺序和依赖关系; Taskfile 中通过 <code>deps</code> 配置来提供任务依赖关系的支持:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build-jar:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;编译 jar 包...&quot;</span><br>  <span class="hljs-attr">build-static:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;编译前端 UI...&quot;</span><br>  <span class="hljs-attr">build-docker:</span><br>    <span class="hljs-attr">deps:</span> [<span class="hljs-string">build-jar</span>, <span class="hljs-string">build-static</span>]<br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像...&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-5、任务调用"><a href="#3-5、任务调用" class="headerlink" title="3.5、任务调用"></a>3.5、任务调用</h3><p>当我们在 Taskfile 中定义了多个任务时, 很可能一些任务具有一定的相似性, 此时我们可以通过任务互相调用和 vars 变量动态覆盖的方式来定义<strong>模版 Task</strong>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-comment">#- docker build -t &#123;&#123;.IMAGE_NAME&#125;&#125; &#123;&#123;.BUILD_CONTEXT&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> &#123;&#123;<span class="hljs-string">.IMAGE_NAME</span>&#125;&#125; &#123;&#123;<span class="hljs-string">.BUILD_CONTEXT</span>&#125;&#125;<br><br>  <span class="hljs-attr">build-backend:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">docker</span> <span class="hljs-comment"># 引用其他 task</span><br>        <span class="hljs-attr">vars:</span> &#123; <span class="hljs-comment"># 动态传入变量</span><br>          <span class="hljs-attr">IMAGE_NAME:</span> <span class="hljs-string">&quot;backend&quot;</span>,<br>          <span class="hljs-attr">BUILD_CONTEXT:</span> <span class="hljs-string">&quot;maven/target&quot;</span><br>        &#125;<br><br>  <span class="hljs-attr">build-frontend:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">docker</span><br>        <span class="hljs-attr">vars:</span> &#123;<br>          <span class="hljs-attr">IMAGE_NAME:</span> <span class="hljs-string">&quot;frontend&quot;</span>,<br>          <span class="hljs-attr">BUILD_CONTEXT:</span> <span class="hljs-string">&quot;public&quot;</span><br>        &#125;<br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">build-backend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">build-frontend</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/qEcj9e.png"></p><h3 id="3-6、引入其他文件"><a href="#3-6、引入其他文件" class="headerlink" title="3.6、引入其他文件"></a>3.6、引入其他文件</h3><p>Taskfile 支持通过 <code>includes</code> 关键字来引入其他 Taskfile, 从而方便 Taskfile 的结构化处理.</p><p><strong>需要注意的是, 由于引入的文件中可能会包含多特 task, 所以在使用时需要对引入的文件进行命名, 且通过命名引用目标 task:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">includes:</span><br>  <span class="hljs-attr">file1:</span> <span class="hljs-string">./file1.yaml</span> <span class="hljs-comment"># 直接引用 yaml 文件</span><br>  <span class="hljs-attr">dir2:</span> <span class="hljs-string">./dir2</span> <span class="hljs-comment"># 引用目录时默认引用该目录下的 Taskfile.yaml</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/1F8bHI.png"></p><p>在引入其他 Taskfile 时, <strong>默认情况下会在当前主 Taskfile 目录下执行命令, 我们同样可以通过 <code>dir</code> 参数来控制引入的 Taskfile 内的 task 在特定目录下执行:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">includes:</span><br>  <span class="hljs-attr">dir1:</span> <span class="hljs-string">./dirtest.yaml</span> <span class="hljs-comment"># 直接在当前目录执行</span><br>  <span class="hljs-attr">dir2:</span><br>    <span class="hljs-attr">taskfile:</span> <span class="hljs-string">./dirtest.yaml</span><br>    <span class="hljs-attr">dir:</span> <span class="hljs-string">/tmp</span> <span class="hljs-comment"># 在指定目录执行</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/mEzbbI.png"></p><h3 id="3-7、defer-处理"><a href="#3-7、defer-处理" class="headerlink" title="3.7、defer 处理"></a>3.7、defer 处理</h3><p>熟悉 go 语言的同学应该知道, go 里面有个很方便的关键字 <code>defer</code>; 该指令用于定义在最终代码收尾时要执行的动作, 常见的比如资源清理等. Taskfile 中同样支持了该指令, 可以方便我们在任务执行期间完成一些清理操作:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-comment"># 定义清理动作</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">defer:</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tar</span> <span class="hljs-string">-zxf</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/cMckuz.png"></p><p><strong>当然, defer 指令除了直接写命令以外, 还可以引用其他 task 完成清理:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">cleanup:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> &#123;&#123;<span class="hljs-string">.FILE</span>&#125;&#125;<br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-comment"># 引用其他 task 进行清理, 同时也可以传递动态变量</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">defer:</span> &#123;<span class="hljs-attr">task:</span> <span class="hljs-string">cleanup</span>, <span class="hljs-attr">vars:</span> &#123;<span class="hljs-attr">FILE:</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span>&#125;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tar</span> <span class="hljs-string">-zxf</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="四、高级应用"><a href="#四、高级应用" class="headerlink" title="四、高级应用"></a>四、高级应用</h2><h3 id="4-1、动态检测"><a href="#4-1、动态检测" class="headerlink" title="4.1、动态检测"></a>4.1、动态检测</h3><h4 id="4-1-1、输出检测"><a href="#4-1-1、输出检测" class="headerlink" title="4.1.1、输出检测"></a>4.1.1、输出检测</h4><p>在某些时候, 一些任务我们可能期望进行缓存处理, 比如说已经下载好了文件就不要重复运行下载; 针对于这种需求, Taskfile 允许我们定义源文件和生成的文件, 通过这组文件的 hash 值来确定是否需要执行该任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>    <span class="hljs-attr">sources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">testfile</span><br>    <span class="hljs-attr">generates:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/hfYWNk.png"></p><p>从上图中可以看到, 当首次执行任务时会生成 <code>.task</code> 目录, 该目录包含文件的 hash 值; 当重复执行任务时, 如果 hash 值不改变则真实任务不会真正执行. <strong>Taskfile 默认有两种文件检测的方式: <code>checksum</code>、<code>timestamp</code>, <code>checksum</code> 执行文件的 hash 检测(默认), 该模式只需要定义 <code>sources</code> 配置; <code>timestamp</code> 执行文件的时间戳检测, 该模式需要同时定义 <code>sources</code> 和 <code>generates</code> 配置.</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">sources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./*.go</span><br>    <span class="hljs-attr">generates:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">app&#123;&#123;exeExt&#125;&#125;</span><br>    <span class="hljs-attr">method:</span> <span class="hljs-string">checksum</span> <span class="hljs-comment"># 指定检测方式</span><br></code></pre></td></tr></table></figure><p>除了内置的两种检测模式外, 我们还可以通过 <code>status</code> 配置来定义自己的检测命令, <strong>如果命令执行结果为 0, 则认为文件是最新的, 不需要执行任务:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">generate-files:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file2.txt</span><br>    <span class="hljs-comment"># test existence of files</span><br>    <span class="hljs-attr">status:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-d</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">directory/file2.txt</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2、输入检测"><a href="#4-1-2、输入检测" class="headerlink" title="4.1.2、输入检测"></a>4.1.2、输入检测</h4><p>上面的输出检测用于检测任务生成的文件结果等, 在某些情况下我们可能期望在运行任务之前来判断某个条件, 在完全不执行的情况下确定任务是否需要运行; 此时我们可以使用 <code>preconditions</code> 配置指令:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">generate-files:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file2.txt</span><br>    <span class="hljs-comment"># test existence of files</span><br>    <span class="hljs-attr">preconditions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">.env</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">sh:</span> <span class="hljs-string">&quot;[ 1 = 0 ]&quot;</span><br>        <span class="hljs-attr">msg:</span> <span class="hljs-string">&quot;One doesn&#x27;t equal Zero, Halting&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2、Go-模版引擎"><a href="#4-2、Go-模版引擎" class="headerlink" title="4.2、Go 模版引擎"></a>4.2、Go 模版引擎</h3><p>在上面变量环节中已经展示了一部分模版引擎的使用, 实际上 Taskfile 内集成了 <a href="https://go-task.github.io/slim-sprig/">slim-sprig</a> 库, 该库中提供了一些比较便利的方法, 这些方法都可以在模版引擎内使用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">print-date:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> &#123;&#123;<span class="hljs-string">now</span> <span class="hljs-string">|</span> <span class="hljs-string">date</span> <span class="hljs-string">&quot;2006-01-02&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><strong>关于这些方法和模版引擎的使用具体请参考 Go Template 相关文档以及 <a href="https://go-task.github.io/slim-sprig/">slim-sprig</a> 文档.</strong></p><h3 id="4-3、交互式终端"><a href="#4-3、交互式终端" class="headerlink" title="4.3、交互式终端"></a>4.3、交互式终端</h3><p>有些任务命令可能需要交互式终端来执行, 此时可以为 task 设置 <code>interactive</code> 选项; 当 <code>interactive</code> 设置为 <code>true</code> 时, task 在运行时可以打开交互式终端:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">cmds:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vim</span> <span class="hljs-string">my-file.txt</span><br>  <span class="hljs-attr">interactive:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>更多关于 Taskfile 的细节使用请阅读其<a href="https://taskfile.dev/">官方文档</a>, 本文限于篇幅不在过多阐述.</p>]]></content>
    
    
    <summary type="html">自打会写 go 以后慢慢的也开始折腾 Makefile, 不过迫于非 C 系出身, Makefile 对我来说依然是 &quot;又不是不能用&quot; 的地步. 年前发现了 Taskfile 这个好东西, 最近有时间正好写写.</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Taskfile" scheme="https://mritd.com/tags/taskfile/"/>
    
    <category term="Makefile" scheme="https://mritd.com/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>Caddy2 支持 WebP 和 AVIF</title>
    <link href="https://mritd.com/2022/03/24/caddy2-support-webp/"/>
    <id>https://mritd.com/2022/03/24/caddy2-support-webp/</id>
    <published>2022-03-24T05:14:00.000Z</published>
    <updated>2022-03-24T05:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、方案选型"><a href="#一、方案选型" class="headerlink" title="一、方案选型"></a>一、方案选型</h2><p>目前对于 WebP 和 AVIF 格式支持大致有两种方案, 一种是动态转换, 另一种是静态转换.</p><ul><li>动态转换: 即在流量的代理层进行处理, 实现对用户的透明化, 用户无需进行任何更改, 由负载均衡器或者中间件进行动态转换处理.</li><li>静态转换: 通过工具预先转换好, 然后通过请求匹配分析来选择返回的图片格式.</li></ul><h2 id="二、动态转换"><a href="#二、动态转换" class="headerlink" title="二、动态转换"></a>二、动态转换</h2><blockquote><p>懒得放代码了, 自己搓到一半放弃了.</p></blockquote><p>对于 WebP 格式来说, 在 Caddy2 上动态转换比较简单, 基本上就是添加一个插件即可; 例如 <a href="https://github.com/zhshch2002/caddy-webp">caddy-webp</a> 这个插件. 有关于 Caddy 的插件开发可以参考官方的 <a href="https://caddyserver.com/docs/extending-caddy">Extending Caddy</a> 文档. </p><p>动态转换的核心思想是在接收到请求后, <strong>判断请求中的 <code>Accept</code> 头, 如果包含 <code>image/webp</code> 则说明浏览器可以识别 WebP 格式图片(AVIF 同理);</strong> 此时可以将请求先转发给后续的 HTTP 处理逻辑, 待返回响应后将其暂时 Cache 住, 然后执行转换逻辑, <strong>改变其格式后重新设置 <code>Content-Type</code> 头然后把新的格式数据返回给前端.</strong></p><p>针对这种操作可以在负载均衡器层(例如 Caddy2 Plugin)完成, 也可以通过单独的中间件完成; 但无论哪种其涉及到一些缺陷(可优化):</p><ul><li>每次响应需要先完成 load 到内存进行转换(内存消耗大)</li><li>转换过程会浪费 CPU 资源(CPU 一样消耗很大)</li><li>转换过程可能导致请求失败</li></ul><p>针对这些情况, 个人认为在生产环境资源充足的情况下完全可以解决, 核心思想还是一个: 缓存为王; 想办法在第一次转换后将其存储到缓存位置, 避免每次都转换; 如果资源足够甚至可以考虑内存级的缓存方案配合 LRU 等失效策略.</p><h2 id="三、静态转换"><a href="#三、静态转换" class="headerlink" title="三、静态转换"></a>三、静态转换</h2><p>经过一波搓代码从入门到放弃, 最终我选择了目前我这个小破站能承担得起的方案; 即先在本地执行转换然后直接扔到服务器上; 由于网站本身就是静态站点, 所以可以在 Caddyfile 中基于动态转换的套路处理请求头返回不同文件.</p><p>本地转换目前采用 <a href="https://github.com/funbox/optimizt">optimizt</a> 这个工具完成:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装</span><br>npm i -g optimizt<br><br><span class="hljs-comment"># 转换</span><br>optimizt --force --webp --avif public/img<br></code></pre></td></tr></table></figure><p>这样在我的图片目录下就会生成同名的 WebP 和 AVIF 格式图片</p><p><img src="https://cdn.oss.link/markdown/fjgfLg.png"></p><p>最后只需要在 Caddyfile 中增加以下请求头匹配的配置即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># avif support</span><br>@acceptsAVIF &#123;<br>    header Accept *image/avif*<br>    path_regexp avif ^(.+)\.(jpg|jpeg|png)$<br>&#125;<br>handle @acceptsAVIF &#123;<br>    @hasAVIF file &#123;re.avif.1&#125;.avif<br>    rewrite @hasAVIF &#123;re.avif.1&#125;.avif<br>&#125;<br><br><span class="hljs-comment"># webp support</span><br>@acceptsWebp &#123;<br>    header Accept *image/webp*<br>    path_regexp webp ^(.+)\.(jpg|jpeg|png)$<br>&#125;<br>handle @acceptsWebp &#123;<br>    @hasWebp file &#123;re.webp.1&#125;.webp<br>    rewrite @hasWebp &#123;re.webp.1&#125;.webp<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>动态转换比价适合商业化模式, 在资源支撑足够的情况下可以延迟随机、预热、高性能缓存等方式配合起来将图片透明转换完成, 对用户无感且友好. 小破站资源匮乏等情况比较适合静态转换完后逻辑匹配规则返回不同物理文件. 说实话我想弄成高大上的动态转换写点代码的, 但是弄到一半发现全是问题又没资源解决, 只能在打打嘴炮了.</p>]]></content>
    
    
    <summary type="html">最近网站的 Goolge 分析页面提示首页图片过大加载时间过长, 推荐进行优化, 正好想到了 WebP 格式; 由于本博客采用 Caddy2 所以研究了一下支持方案.</summary>
    
    
    
    <category term="Caddy" scheme="https://mritd.com/categories/caddy/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
    <category term="WebP" scheme="https://mritd.com/tags/webp/"/>
    
    <category term="AVIF" scheme="https://mritd.com/tags/avif/"/>
    
  </entry>
  
  <entry>
    <title>树莓派 Clash 透明代理(TProxy)</title>
    <link href="https://mritd.com/2022/02/06/clash-tproxy/"/>
    <id>https://mritd.com/2022/02/06/clash-tproxy/</id>
    <published>2022-02-06T15:17:00.000Z</published>
    <updated>2022-02-06T15:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不想看原理的可以直接使用 <a href="https://github.com/mritd/tpclash">TPClash</a>, 想仔细看原理的可以看 <a href="https://github.com/mritd/tpclash/wiki">TPClash wiki</a>.</p></blockquote><h2 id="一、注意事项"><a href="#一、注意事项" class="headerlink" title="一、注意事项"></a>一、注意事项</h2><p>本文中内网 CIDR 为 <code>192.168.0.0/16</code>, 即所有地址段规则、配置都是针对当前内网 CIDR 进行处理的; <strong>clash fake-ip 的 CIDR 为 <code>198.18.0.0/16</code>, 请不要写错成 <code>192</code>, 这是 <code>198</code>(也不要问我为什么强调).</strong></p><h2 id="二、安装-Clash"><a href="#二、安装-Clash" class="headerlink" title="二、安装 Clash"></a>二、安装 Clash</h2><p>本文所采用的透明代理方式不依赖于 TUN, 所有是否是增强版本不重要, 如果可以请尽量使用最新版本.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># x86 用户请自行替换</span><br>wget https://github.com/Dreamacro/clash/releases/download/v1.9.0/clash-linux-armv8-v1.9.0.gz<br><br><span class="hljs-comment"># 解压</span><br>gzip -d clash-linux-armv8-v1.9.0.gz<br><br><span class="hljs-comment"># 安装到系统 PATH</span><br><span class="hljs-built_in">chmod</span> +x clash-linux-armv8-v1.9.0<br><span class="hljs-built_in">mv</span> clash-linux-armv8-v1.9.0 /usr/bin/clash<br></code></pre></td></tr></table></figure><p>创建专用的 clash 用户:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">useradd -M -s /usr/sbin/nologin clash<br></code></pre></td></tr></table></figure><p>编写 Systemd 配置文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /lib/systemd/system/clash.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Clash TProxy</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=simple</span><br><span class="hljs-string">User=clash</span><br><span class="hljs-string">Group=clash</span><br><span class="hljs-string">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW</span><br><span class="hljs-string">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string"></span><br><span class="hljs-string">ExecStartPre=+/usr/bin/bash /etc/clash/clean.sh</span><br><span class="hljs-string">ExecStart=/usr/bin/clash -d /etc/clash</span><br><span class="hljs-string">ExecStartPost=+/usr/bin/bash /etc/clash/iptables.sh</span><br><span class="hljs-string"></span><br><span class="hljs-string">ExecStopPost=+/usr/bin/bash /etc/clash/clean.sh</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="三、调整配置"><a href="#三、调整配置" class="headerlink" title="三、调整配置"></a>三、调整配置</h2><p>本文中 Clash 配置文件、脚本等统一存放到 <code>/etc/clash</code> 目录中, 针对于 Clash 配置文件, 着重说明重点配置, 完整配置请从官方 Wiki 复制: <a href="https://github.com/Dreamacro/clash/wiki/configuration#all-configuration-options">https://github.com/Dreamacro/clash/wiki/configuration#all-configuration-options</a></p><h3 id="3-1、端口配置"><a href="#3-1、端口配置" class="headerlink" title="3.1、端口配置"></a>3.1、端口配置</h3><p>端口配置请尽量保持默认, 如果需要调整端口, 请同步修改后面相关脚本中的端口(TProxy):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 注释掉 port 端口配置, 使用 mixed-port</span><br><span class="hljs-comment">#port: 7890</span><br><br><span class="hljs-comment"># 注释掉 socks-port 端口配置, 使用 mixed-port</span><br><span class="hljs-comment">#socks-port: 7891</span><br><br><span class="hljs-comment"># 注释掉 redir-port 端口配置, 因为全部采用 TProxy 模式</span><br><span class="hljs-comment">#redir-port: 7892</span><br><br><span class="hljs-comment"># TProxy 的透明代理端口</span><br><span class="hljs-attr">tproxy-port:</span> <span class="hljs-number">7893</span><br><br><span class="hljs-comment"># mixed-port 端口将同时支持 SOCKS5/HTTP</span><br><span class="hljs-attr">mixed-port:</span> <span class="hljs-number">7890</span><br><br><span class="hljs-comment"># 允许来自局域网的连接</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 绑定到所有接口</span><br><span class="hljs-attr">bind-address:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-2、DNS-配置"><a href="#3-2、DNS-配置" class="headerlink" title="3.2、DNS 配置"></a>3.2、DNS 配置</h3><p>Clash 配置中请开启 DNS, 并使用 <code>fake-ip</code> 模式, 样例配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">listen:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:1053</span><br>  <span class="hljs-attr">ipv6:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">default-nameserver:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>  <span class="hljs-attr">enhanced-mode:</span> <span class="hljs-string">fake-ip</span><br></code></pre></td></tr></table></figure><h3 id="3-3、防火墙规则"><a href="#3-3、防火墙规则" class="headerlink" title="3.3、防火墙规则"></a>3.3、防火墙规则</h3><p>为了保证防火墙规则不被破坏, 本文采用脚本暴力操作, 如果宿主机有其他 iptables 控制程序, 则推荐手动执行并通过 <code>iptables-persistent</code> 等工具进行持久化;</p><p><strong><code>/etc/clash/iptables.sh</code>: 负责启动时添加 iptables 规则</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -ex<br><br><span class="hljs-comment"># ENABLE ipv4 forward</span><br>sysctl -w net.ipv4.ip_forward=1<br><br><span class="hljs-comment"># ROUTE RULES</span><br>ip rule add fwmark 666 lookup 666<br>ip route add <span class="hljs-built_in">local</span> 0.0.0.0/0 dev lo table 666<br><br><span class="hljs-comment"># clash 链负责处理转发流量 </span><br>iptables -t mangle -N clash<br><br><span class="hljs-comment"># 目标地址为局域网或保留地址的流量跳过处理</span><br><span class="hljs-comment"># 保留地址参考: https://zh.wikipedia.org/wiki/%E5%B7%B2%E5%88%86%E9%85%8D%E7%9A%84/8_IPv4%E5%9C%B0%E5%9D%80%E5%9D%97%E5%88%97%E8%A1%A8</span><br>iptables -t mangle -A clash -d 0.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash -d 127.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash -d 10.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash -d 172.16.0.0/12 -j RETURN<br>iptables -t mangle -A clash -d 192.168.0.0/16 -j RETURN<br>iptables -t mangle -A clash -d 169.254.0.0/16 -j RETURN<br><br>iptables -t mangle -A clash -d 224.0.0.0/4 -j RETURN<br>iptables -t mangle -A clash -d 240.0.0.0/4 -j RETURN<br><br><span class="hljs-comment"># 其他所有流量转向到 7893 端口，并打上 mark</span><br>iptables -t mangle -A clash -p tcp -j TPROXY --on-port 7893 --tproxy-mark 666<br>iptables -t mangle -A clash -p udp -j TPROXY --on-port 7893 --tproxy-mark 666<br><br><span class="hljs-comment"># 转发所有 DNS 查询到 1053 端口</span><br><span class="hljs-comment"># 此操作会导致所有 DNS 请求全部返回虚假 IP(fake ip 198.18.0.1/16)</span><br>iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to 1053<br><br><span class="hljs-comment"># 如果想要 dig 等命令可用, 可以只处理 DNS SERVER 设置为当前内网的 DNS 请求</span><br><span class="hljs-comment">#iptables -t nat -I PREROUTING -p udp --dport 53 -d 192.168.0.0/16 -j REDIRECT --to 1053</span><br><br><span class="hljs-comment"># 最后让所有流量通过 clash 链进行处理</span><br>iptables -t mangle -A PREROUTING -j clash<br><br><span class="hljs-comment"># clash_local 链负责处理网关本身发出的流量</span><br>iptables -t mangle -N clash_local<br><br><span class="hljs-comment"># nerdctl 容器流量重新路由</span><br><span class="hljs-comment">#iptables -t mangle -A clash_local -i nerdctl2 -p udp -j MARK --set-mark 666</span><br><span class="hljs-comment">#iptables -t mangle -A clash_local -i nerdctl2 -p tcp -j MARK --set-mark 666</span><br><br><span class="hljs-comment"># 跳过内网流量</span><br>iptables -t mangle -A clash_local -d 0.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash_local -d 127.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash_local -d 10.0.0.0/8 -j RETURN<br>iptables -t mangle -A clash_local -d 172.16.0.0/12 -j RETURN<br>iptables -t mangle -A clash_local -d 192.168.0.0/16 -j RETURN<br>iptables -t mangle -A clash_local -d 169.254.0.0/16 -j RETURN<br><br>iptables -t mangle -A clash_local -d 224.0.0.0/4 -j RETURN<br>iptables -t mangle -A clash_local -d 240.0.0.0/4 -j RETURN<br><br><span class="hljs-comment"># 为本机发出的流量打 mark</span><br>iptables -t mangle -A clash_local -p tcp -j MARK --set-mark 666<br>iptables -t mangle -A clash_local -p udp -j MARK --set-mark 666<br><br><span class="hljs-comment"># 跳过 clash 程序本身发出的流量, 防止死循环(clash 程序需要使用 &quot;clash&quot; 用户启动) </span><br>iptables -t mangle -A OUTPUT -p tcp -m owner --uid-owner clash -j RETURN<br>iptables -t mangle -A OUTPUT -p udp -m owner --uid-owner clash -j RETURN<br><br><span class="hljs-comment"># 让本机发出的流量跳转到 clash_local</span><br><span class="hljs-comment"># clash_local 链会为本机流量打 mark, 打过 mark 的流量会重新回到 PREROUTING 上</span><br>iptables -t mangle -A OUTPUT -j clash_local<br><br><span class="hljs-comment"># 修复 ICMP(ping)</span><br><span class="hljs-comment"># 这并不能保证 ping 结果有效(clash 等不支持转发 ICMP), 只是让它有返回结果而已</span><br><span class="hljs-comment"># --to-destination 设置为一个可达的地址即可</span><br>sysctl -w net.ipv4.conf.all.route_localnet=1<br>iptables -t nat -A PREROUTING -p icmp -d 198.18.0.0/16 -j DNAT --to-destination 127.0.0.1<br></code></pre></td></tr></table></figure><p><strong><code>/etc/clash/clean.sh</code>: 负责启动前&#x2F;停止后清理 iptables 规则(暴力清理)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-built_in">set</span> -ex<br><br>ip rule del fwmark 666 table 666 || <span class="hljs-literal">true</span><br>ip route del <span class="hljs-built_in">local</span> 0.0.0.0/0 dev lo table 666 || <span class="hljs-literal">true</span><br><br>iptables -t nat -F<br>iptables -t nat -X<br>iptables -t mangle -F<br>iptables -t mangle -X clash || <span class="hljs-literal">true</span><br>iptables -t mangle -X clash_local || <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="3-4、最终目录结构"><a href="#3-4、最终目录结构" class="headerlink" title="3.4、最终目录结构"></a>3.4、最终目录结构</h3><p>所有配置编写完成后, 其目录结构如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@openrpi <span class="hljs-comment"># ❯❯❯ tree -L 1 /etc/clash</span><br>/etc/clash<br>├── clean.sh<br>├── config.yaml<br>└── iptables.sh<br></code></pre></td></tr></table></figure><p><strong>最后需要修复 <code>/etc/clash</code> 目录权限, 因为 Clash 启动后会写入其他文件:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R clash:clash /etc/clash<br></code></pre></td></tr></table></figure><h2 id="四、启动及测试"><a href="#四、启动及测试" class="headerlink" title="四、启动及测试"></a>四、启动及测试</h2><p>如果所有配置和文件安装没问题的话, 可以直接通过 Systemd 启动:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start clash<br><br><span class="hljs-comment"># 查看日志</span><br>jouranlctl -fu clash<br></code></pre></td></tr></table></figure><p>如果启动成功, 那么此时内网设备将网关设置到当前 Clash 所在机器即可完成透明代理; 如果 Clash 机器足够稳定, 也可以一步到位将内网路由器的 DHCP 设置中下发的网关直接填写为 Clash 机器 IP(Clash 机器需要使用静态 IP).</p>]]></content>
    
    
    <summary type="html">迫于 OpenWrt 编译太麻烦, 使用别人的有太多插件不够精简同时在树莓派上运行也不怎么稳定; 最终决定直接在 Ubuntu 上通过 Clash 搭建一个透明代理的网关来使用。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="clash" scheme="https://mritd.com/tags/clash/"/>
    
    <category term="tproxy" scheme="https://mritd.com/tags/tproxy/"/>
    
  </entry>
  
  <entry>
    <title>互联网基础架构之锅的传递及作用域</title>
    <link href="https://mritd.com/2022/01/06/super-black-pot/"/>
    <id>https://mritd.com/2022/01/06/super-black-pot/</id>
    <published>2022-01-06T05:32:00.000Z</published>
    <updated>2022-01-06T05:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网基础架构之锅的传递及作用域"><a href="#互联网基础架构之锅的传递及作用域" class="headerlink" title="互联网基础架构之锅的传递及作用域"></a>互联网基础架构之锅的传递及作用域</h1><blockquote><p>最近比较忙，也遇到了一些比较烦的事情。同样也在总结和分析在当前工作过程中的一些有意思的事情，今天决定好好写(水)一篇高质量文章，我愿称之为 “锅理学” 或 “锅链”。</p></blockquote><h2 id="一、锅的诞生"><a href="#一、锅的诞生" class="headerlink" title="一、锅的诞生"></a>一、锅的诞生</h2><p>“锅” 这个东西从人类文明诞生之初就一直存在，而随着人类文明发展，分工合作的这种社会关系日趋紧密；小到个人大到团队甚至是国家之间，”锅” 作为一个推卸责任和无耻的下三路手段被疯狂得在合作关系中传递。</p><p>“锅” 的产生核心在于问题的产生，不论任何环境下， <strong>只要存在合作关系且由于某种原因出现了问题，那么 “锅” 就会被 “锻锅者” 们创造出来；</strong> 一但 “锻锅者” 们拿起手中的锤子，创造出了 “锅”， <strong>“锅” 就可以利用人性的阴暗面为能量，本着 “死道友不死贫道” 的规则开始进行流动</strong> ；但这个流动过程并非永恒的，根据能量守恒原理:</p><blockquote><p>“锅” 在流动过程中需要能量支撑，当遇到能量不足或出现异常的干扰着时，”锅” 会停留在某一点；处于该点的人我们称之为 <strong>“锅坦森”</strong> ，如果该点具有更多的 “锅坦森” 或该点作为一个社会组织构成，则 “锅” 会产生分裂，俗称 <strong>“锅裂变”</strong> 或 “锅坦森均衡效应”；在极端情况下，如果 “锅坦森” 比较多，且 “锅坦森” 之间的能量极度不均衡，”锅” 会产生聚合，俗称 <strong>“锅聚变”</strong> 或 “锅坦森凝态效应”。</p></blockquote><h2 id="二、锅的传递"><a href="#二、锅的传递" class="headerlink" title="二、锅的传递"></a>二、锅的传递</h2><h3 id="2-1、顺次传递规则"><a href="#2-1、顺次传递规则" class="headerlink" title="2.1、顺次传递规则"></a>2.1、顺次传递规则</h3><p>“锅” 在流转规程中大体上保持顺次传递原则， <strong>即在合作关系中，”锅” 大体上只会从供应关系的上游向下游传递；在普通的互联网公司内部大致如下:</strong></p><p><img src="https://cdn.oss.link/markdown/EsMbnM.jpg"></p><h3 id="2-2、回弹规则"><a href="#2-2、回弹规则" class="headerlink" title="2.2、回弹规则"></a>2.2、回弹规则</h3><p>你可能已经注意到，在传递规则的图中 Cloud Provider 的箭头反向指向了 Ops；这是因为虽然在整体上 “锅” 顺次传递， <strong>但是在特殊情况下会产生回弹或异常终止。</strong> 这种回弹通常出以下情况(规则)中:</p><ul><li>1、下游出现了 “爱用用，不用滚” 法则定义者，且该定义者具有绝对权威(例如云厂商)</li><li>2、下游使用了特定的第三世界法则，以其他未知方式沟通了猎食者(例如下游是老板的亲戚)</li><li>3、”锅坦森” 能量值出现负差，导致对 “锅” 引力增强(例如锅坦森们决定逆流而上表忠心时)</li><li>4、下游有创世者以一己之力洞察了 “锅” 的流转轨迹(例如运维里出现了能看懂业务代码的异端)</li></ul><p>在以上这些情况出现下，”锅” 可能会产生回弹效应，从而违反 “传统锅学” 定律。</p><h2 id="三、锅的状态及作用域"><a href="#三、锅的状态及作用域" class="headerlink" title="三、锅的状态及作用域"></a>三、锅的状态及作用域</h2><h3 id="3-1、不稳定态的锅"><a href="#3-1、不稳定态的锅" class="headerlink" title="3.1、不稳定态的锅"></a>3.1、不稳定态的锅</h3><p>“锅” 一般处于一种不稳定状态，随着外力作用，”锅” 会随时湮灭或变异；但是由于其存在轨迹，所以我们依然能进行追溯， <strong>“锅” 在流转过程中极度不稳定，它通常表现为从某一个节点流转后改变了基本的物理性质(比如接口不稳定变为基础架构不稳定、基础架构不稳定变为宇宙射线导致的硬件故障 byte 翻转等)，</strong> “锅” 的这种行为和现象在因果律支撑的人类世界很罕见，但又似乎合情合理；这也是 “锅” 最让人着迷的地方: <strong>它不在三界之内，超脱五行之中，浑然天成而又无迹可寻。</strong></p><h3 id="3-2、稳定态的锅"><a href="#3-2、稳定态的锅" class="headerlink" title="3.2、稳定态的锅"></a>3.2、稳定态的锅</h3><p>虽然 “锅” 大部分时间处于不稳定态，但是如果施加外力作用，例如增加 “领导强力”；则 “锅” 会被束缚并保持稳定态，这种稳定态的 “锅” 一般其 “锅理学” 性质极其稳定， <strong>它会以超光速流动(跨越时间)并跨越现实物理学，从而产生 “人在家中坐，锅从天上来” 的有趣现象。</strong></p><h3 id="3-3、锅的分裂和聚合"><a href="#3-3、锅的分裂和聚合" class="headerlink" title="3.3、锅的分裂和聚合"></a>3.3、锅的分裂和聚合</h3><p>不稳定态的 “锅” 由于其流转位置的作用力原因，常常会产生两种 “锅理学” 现象，即 “锅裂变” 和 “锅聚变”。</p><p>“锅裂变” 的产生是由于外力作用降低，无法再束缚 “锅”，同时过多的 “锅坦森” 的出现也会产生类似拉扯力一样的作用力作用在 “锅” 本身；此时一个大的 “锅” 会逐渐分裂成一些小的 “锅”，这些小 “锅” 会最终附着到 “锅坦森” 身上并发光发亮，最终会促成 “锅坦森” 的经验加成并完成升级(“Big 锅坦森”)。</p><p>“锅聚变” 与 “锅裂变” 恰恰相反，在 “锅” 流转到某一节点时，外力作用突然加强(比如 “领导说这是某个人爱写 BUG”)，此时 “锅” 会瞬间产生 “锅聚变”，以极其迅速且稳定的状态落到指定 “锅坦森” 身上；此过程也会导致 “锅坦森” 发光发亮； <strong>但如果无法促成 “锅坦森” 升级，则可能会直接摧毁 “锅坦森”，最终会表现为我们常见的 “明天离职” 现象。</strong></p><h3 id="3-4、锅的变异"><a href="#3-4、锅的变异" class="headerlink" title="3.4、锅的变异"></a>3.4、锅的变异</h3><p>“锅” 的变异通常非常频繁且复杂，上面已经描述了几种情况，但是经过我的观察，目前已知的变异途径如下:</p><ul><li>1、突然施加的外力作用导致的聚变或裂变</li><li>2、”锅坦森” 突然被摧毁导致的湮灭</li><li>3、大能掌控法则导致 “锅” 反弹破碎并湮灭</li><li>4、创世者尝试追踪轨迹导致 “锅” 相变</li></ul><p>除了这些情况以外，我本着 “刨根问底、没事胡扯” 的原则，对 “锅” 进行了著名的双缝实验；实验结果表明 <strong>如果 “锅” 在流转过程中被进行观测，则 “锅” 会由于观察者效应进行重组并变为某种稳定态。</strong></p><h2 id="四、锅坦森与锻锅者"><a href="#四、锅坦森与锻锅者" class="headerlink" title="四、锅坦森与锻锅者"></a>四、锅坦森与锻锅者</h2><p>在本世纪初 “锻锅者” 群体逐渐涌现在人们的视野中，随着 “锻锅者” 的增加和竞争日益激烈，”锻锅者” 的锻造技术得到了飞速发展，现已基本形成稳定且可持续发展的产业链；甚至在某些企业内已经形成了 “锻锅者” 联盟和管理委员会，有专门的 “锅贤者” 负责培训并教导和监督新出现的 “锻锅者”；例如以前的一个简单的锻造手法为 “2.22 机器重启导致的”，现在已经演变为 “基础架构不稳定”；在这种高精度低成本的带动下，被 “锻锅者” 锻造出的 “锅” 已经从以前的单体不稳定攻击变为群体、范围性的群体攻击和精确目标打击； <strong>所有目前 21 世纪的 “锻锅者” 锻造的 “锅” 通常会造成 “锅坦森” 们的非战斗性减员。</strong></p><p>当然有了 “锻锅者” 来锻造 “锅” 必然会有 “锅坦森” 来接收 “锅”，这两者一般是相辅相成的；不过随着 “锅” 群伤效果的增加，”锅坦森” 群体也逐渐并不满足于单纯的接收；某些 “锅坦森” 由于其长期接收各种 “锅”，开始主动学习一些 “锻锅者” 的技能，从而逐渐进化成了创世者；这些创世者并不会单纯的接收普通的 “锅”，普通的 “锅” 在他们眼里所有运行轨迹清晰可见，这种 “锅” 失去了可以违反因果律的美感，所以创世者们会通过施加外力重新改变其轨迹； <strong>创世者们只喜欢那些无法被语言形容的 “锅”，这些 “锅” 神秘且强大，它跨越时间和历史长河，甚至出现离职再入职，依然可观测可接收的大自然奇迹。</strong></p><h2 id="五、应对和总结"><a href="#五、应对和总结" class="headerlink" title="五、应对和总结"></a>五、应对和总结</h2><ul><li>留三分贪财好色，以防与世俗格格不入，</li><li>留七分一本正经，以图安分守己谋此生。</li><li>漏三分茫然无措，以瞒天地人泯然于世，</li><li>藏七分众醉独醒，以致人智己看破红尘。</li></ul>]]></content>
    
    
    <summary type="html">最近比较忙，也遇到了一些比较烦的事情。同样也在总结和分析在当前工作过程中的一些有意思的事情，今天决定好好写(水)一篇高质量文章，我愿称之为 &quot;锅理学&quot; 或 &quot;锅链&quot;。</summary>
    
    
    
    <category term="随笔" scheme="https://mritd.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="黑锅" scheme="https://mritd.com/tags/%E9%BB%91%E9%94%85/"/>
    
  </entry>
  
  <entry>
    <title>Earthly 一个更加强大的镜像构建工具</title>
    <link href="https://mritd.com/2021/10/27/the-best-image-build-tool-earthly/"/>
    <id>https://mritd.com/2021/10/27/the-best-image-build-tool-earthly/</id>
    <published>2021-10-27T10:20:00.000Z</published>
    <updated>2021-10-27T10:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Earthly-介绍"><a href="#一、Earthly-介绍" class="headerlink" title="一、Earthly 介绍"></a>一、Earthly 介绍</h2><blockquote><p>开局一张图，功能全靠吹。</p></blockquote><p><img src="https://cdn.oss.link/markdown/LnXXtV.png"></p><p>Earthly 是一个更加高级的 Docker 镜像构建工具，Earthly 通过自己定义的 Earthfile 来代替传统的 Dockerfile 完成镜像构建；Earthfile 就如同 Earthly 官方所描述:</p><p><strong>Makefile + Dockerfile &#x3D; Earthfile</strong></p><p>在使用 Earthly 进行构建镜像时目前强依赖于 buildkit，Earthly 通过 buildkit 支持了一些 Dockerfile 的扩展语法，同时将 Dockerfile 与 Makefile 整合，使得多平台构建和代码化 Dockerfile 变得更加简单；使用 Earthly 可以更加方便的完成 Dockerfile 的代码复用以及更加友好的 CI 自动集成。</p><h2 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h2><h3 id="2-1、安装依赖"><a href="#2-1、安装依赖" class="headerlink" title="2.1、安装依赖"></a>2.1、安装依赖</h3><p>Earthly 目前依赖于 Docker 和 Git，所以安装 Earthly 前请确保机器已经安装了 Docker 和 Git。</p><h3 id="2-2、安装-Earthly"><a href="#2-2、安装-Earthly" class="headerlink" title="2.2、安装 Earthly"></a>2.2、安装 Earthly</h3><p>Earthly 采用 Go 编写，所以主要就一个二进制文件，Linux 下安装可以直接参考官方的安装脚本:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo /bin/sh -c <span class="hljs-string">&#x27;wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly &amp;&amp; chmod +x /usr/local/bin/earthly &amp;&amp; /usr/local/bin/earthly bootstrap --with-autocomplete&#x27;</span><br></code></pre></td></tr></table></figure><p>安装完成后 Earthly 将会启动一个 buildkitd 容器: <code>earthly-buildkitd</code>。</p><h3 id="2-3、语法高亮"><a href="#2-3、语法高亮" class="headerlink" title="2.3、语法高亮"></a>2.3、语法高亮</h3><p>目前 Earthly 官方支持 VS Code、VIM 以及 Sublime Text 三种编辑器的语法高亮，具体如何安装请参考 <a href="https://earthly.dev/get-earthly">官方文档</a>。</p><h3 id="2-4、基本使用"><a href="#2-4、基本使用" class="headerlink" title="2.4、基本使用"></a>2.4、基本使用</h3><p>本示例源于官方 Basic 教程，以下示例以编译 Go 项目为样例:</p><p>首先创建一个任意名称的目录，目录中存在项目源码文件以及一个 <code>Earthfile</code> 文件；</p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Earthfile</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">FROM golang:1.17-alpine<br>WORKDIR /go-example<br><br><span class="hljs-section">build:</span><br>    COPY main.go .<br>    RUN go build -o build/go-example main.go<br>    SAVE ARTIFACT build/go-example /go-example AS LOCAL build/go-example<br><br><span class="hljs-section">docker:</span><br>    COPY +build/go-example .<br>    ENTRYPOINT [<span class="hljs-string">&quot;/go-example/go-example&quot;</span>]<br>    SAVE IMAGE go-example:latest<br></code></pre></td></tr></table></figure><p>有了 <code>Earthfile</code> 以后我们就可以使用 <code>Earthly</code> 将其打包为镜像；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 目录结构</span><br>~/t/earthlytest ❯❯❯ tree<br>.<br>├── Earthfile<br>└── main.go<br><br>0 directories, 2 files<br><br><span class="hljs-comment"># 通过 earthly 进行构建</span><br>~/t/earthlytest ❯❯❯ earthly +docker<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/Djzrl7.png"></p><p>构建完成后我们就可以直接从 docker 的 images 列表中查看刚刚构建的镜像，并运行:</p><p><img src="https://cdn.oss.link/markdown/niRXA9.png"></p><h2 id="三、进阶使用"><a href="#三、进阶使用" class="headerlink" title="三、进阶使用"></a>三、进阶使用</h2><h3 id="3-1、多阶段构建"><a href="#3-1、多阶段构建" class="headerlink" title="3.1、多阶段构建"></a>3.1、多阶段构建</h3><p>Earthfile 中包含类似 Makefile 一样的 <code>target</code>，不同的 <code>target</code> 之间还可以通过特定语法进行引用，每个 <code>target</code> 都可以被单独执行，执行过程中 earthly 会自动解析这些依赖关系。</p><p>这种多阶段构建时语法很弹性，我们可以在每个阶段运行独立的命令以及使用不同的基础镜像；从快速开始中可以看到，我们始终使用了一个基础镜像(<code>golang:1.17-alpine</code>)，对于 Go 这种编译后自带运行时不依赖其语言 SDK 的应用，我们事实上可以将 “发布物” 仅放在简单的运行时系统镜像内，从而减少最终镜像体积:</p><p><img src="https://cdn.oss.link/markdown/txn0cd.png"></p><p>由于使用了多个 target，所以我们可以单独的运行 <code>build</code> 这个 target 来验证我们的编译流程，<strong>这种多 target 的设计方便我们构建应用时对编译、打包步骤的细化拆分，同时也方便我们进行单独的验证。</strong> 例如我们单独执行 <code>build</code> 这个 target 来验证我们的编译流程是否正确:</p><p><img src="https://cdn.oss.link/markdown/3Ls4qN.png"></p><p>在其他阶段验证完成后，我们可以直接运行最终的 target，earthly 会自动识别到这种依赖关系从而自动运行其依赖的 target:</p><p><img src="https://cdn.oss.link/markdown/MKhfiz.png"></p><h3 id="3-2、扩展指令"><a href="#3-2、扩展指令" class="headerlink" title="3.2、扩展指令"></a>3.2、扩展指令</h3><h4 id="3-2-1、SAVE"><a href="#3-2-1、SAVE" class="headerlink" title="3.2.1、SAVE"></a>3.2.1、SAVE</h4><p>SAVE 指令是 Earthly 自己的一个扩展指令，实际上分为 <code>SAVE ARTIFACT</code> 和 <code>SAVE IMAGE</code>；其中 <code>SAVE ARTIFACT</code> 指令格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SAVE ARTIFACT [--keep-ts] [--keep-own] [--if-exists] [--force] &lt;src&gt; [&lt;artifact-dest-path&gt;] [AS LOCAL &lt;local-path&gt;]<br></code></pre></td></tr></table></figure><p><code>SAVE ARTIFACT</code> 指令用于将文件或目录从 build 运行时环境保存到 target 的 artifact 环境；当保存到 artifact 环境后，可以通过 <code>COPY</code> 等命令在其他位置进行引用，类似于 Dockerfile 的 <code>COPY --from...</code> 语法；不同的是 <code>SAVE ARTIFACT</code> 支持 <code>AS LOCAL &lt;local-path&gt;</code> 附加参数，一但指定此参数后，earthly 会同时将文件或目录在宿主机复制一份，一般用于调试等目的。<code>SAVE ARTIFACT</code> 命令在上面的样例中已经展示了，在运行完 <code>earthly +build</code> 命令后实际上会在本地看到被 SAVE 出来的 ARTIFACT:</p><p><img src="https://cdn.oss.link/markdown/9OeBwr.png"></p><p>而另一个 <code>SAVE IMAGE</code> 指令则主要用于将当前的 build 环境 SAVE 为一个 IMAGE，<strong>如果指定了 <code>--push</code> 选项，同时在执行 <code>earthly +target</code> 命令时也加入 <code>--push</code> 选项，该镜像将会自动被推送到目标 Registry 上。</strong><code>SAVE IMAGE</code> 指令格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SAVE IMAGE [--cache-from=&lt;cache-image&gt;] [--push] &lt;image-name&gt;...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/93IkCr.png"></p><h4 id="3-2-2、GIT-CLONE"><a href="#3-2-2、GIT-CLONE" class="headerlink" title="3.2.2、GIT CLONE"></a>3.2.2、GIT CLONE</h4><p><code>GIT CLONE</code> 指令用于将指定 git 仓库 clone 到 build 环境中；与 <code>RUN git clone...</code> 命令不同的是，**<code>GIT CLONE</code> 通过宿主机的 git 命令运行，它不依赖于容器内的 git 命令，同时还可以直接为 earthly 配置 git 认证，从而避免将这些安全信息泄漏到 build 环境中；** 关于如何配置 earthly 的 git 认证请参考 <a href="https://docs.earthly.dev/docs/guides/auth">官方文档</a>；下面是 <code>GIT CLONE</code> 指令的样例:</p><p><img src="https://cdn.oss.link/markdown/rOqwZT.png"></p><h4 id="3-2-3、COPY"><a href="#3-2-3、COPY" class="headerlink" title="3.2.3、COPY"></a>3.2.3、COPY</h4><p><code>COPY</code> 指令与标准的 Dockerfile COPY 指令类似，除了支持 Dockerfile 标准的 COPY 功能以外，<strong>earthly 中的 <code>COPY</code> 指令可以引用其他 target 环节产生的 artifact，在引用时会自动声明依赖关系；即当在 <code>B</code> target 中存在 <code>COPY +A/xxxxx /path/to/copy</code> 类似的指令时，如果只单纯的执行 <code>earthly +B</code>，那么 earthly 根据依赖分析会得出在 COPY 之前需要执行 target A。</strong><code>COPY</code> 指令的语法格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 与 Dockerfile 相同的使用方式，从上下文复制</span><br>COPY [options...] &lt;src&gt;... &lt;dest&gt;<br><br><span class="hljs-comment"># 扩展支持的从 target 复制方式</span><br>COPY [options...] &lt;src-artifact&gt;... &lt;dest&gt;<br></code></pre></td></tr></table></figure><h4 id="3-2-4、RUN"><a href="#3-2-4、RUN" class="headerlink" title="3.2.4、RUN"></a>3.2.4、RUN</h4><p><code>RUN</code> 指令在标准使用上与 Dockerfile 里保持一致，除此之外增加了更多的扩展选项，其指令格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># shell 方式运行(/bin/sh -c)</span><br>RUN [--push] [--entrypoint] [--privileged] [--secret &lt;env-var&gt;=&lt;secret-ref&gt;] [--ssh] [--mount &lt;mount-spec&gt;] [--] &lt;<span class="hljs-built_in">command</span>&gt;<br><br><span class="hljs-comment"># exec 方式运行</span><br>RUN [[&lt;flags&gt;...], <span class="hljs-string">&quot;&lt;executable&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;arg1&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;arg2&gt;&quot;</span>, ...]<br></code></pre></td></tr></table></figure><p>其中 <code>--privileged</code> 选项允许运行的命令使用 <code>privileged capabilities</code>，但是需要 earthly 在运行 target 时增加 <code>--allow-privileged</code> 选项；<code>--interactive / --interactive-keep</code> 选项用于交互式执行一些命令，在完成交互后 build 继续进行，<strong>在交互过程中进行的操作都会被持久化到 镜像中:</strong></p><p><img src="https://cdn.oss.link/markdown/IsTpqf.png"></p><p>限于篇幅原因，其他的具体指令请查阅官方文档 <a href="https://docs.earthly.dev/docs/earthfile">Earthfile reference</a>。</p><h3 id="3-3、UDCS"><a href="#3-3、UDCS" class="headerlink" title="3.3、UDCS"></a>3.3、UDCS</h3><p>UDCs 全称 “User-defined commands”，即用户定义指令；通过 UDCs 我们可以将 Earthfile 中特定的命令剥离出来，从而实现更加通用和统一的代码复用；下面是一个定义 UDCs 指令的样例:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 定义一个 Command</span><br><span class="hljs-comment"># ⚠️ 注意: 语法必须满足以下规则</span><br><span class="hljs-comment"># 1、名称全大写</span><br><span class="hljs-comment"># 2、名称下划线分割</span><br><span class="hljs-comment"># 3、首个命令必须为 COMMAND(后面没有冒号)</span><br><span class="hljs-section">MY_COPY:</span><br>    COMMAND<br>    ARG src<br>    ARG dest=./<br>    ARG recursive=false<br>    RUN cp <span class="hljs-variable">$(<span class="hljs-built_in">if</span> $recursive =  &quot;true&quot;; then printf -- -r; fi)</span> <span class="hljs-string">&quot;$src&quot;</span> <span class="hljs-string">&quot;$dest&quot;</span><br><br><span class="hljs-comment"># target 中引用</span><br><span class="hljs-section">build:</span><br>    FROM alpine:3.13<br>    WORKDIR /udc-example<br>    RUN echo <span class="hljs-string">&quot;hello&quot;</span> &gt;./foo<br>    <span class="hljs-comment"># 通过 DO 关键字引用 UDCs</span><br>    DO +MY_COPY --src=./foo --dest=./bar<br>    RUN cat ./bar <span class="hljs-comment"># prints &quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p><strong>UDCs 不光可以定义在一个 Earthfile 中，UDCs 可以跨文件、跨目录引用:</strong></p><p><img src="https://cdn.oss.link/markdown/ujocwp.png"></p><p>有了 UDCs 以后，我们可以通过这种方式将对基础镜像的版本统一控制、对特殊镜像的通用处理等操作全部抽象出来，然后每个 Earthfile 根据需要进行引用；关于 UDCs 的使用样例可以参考我的 <a href="https://github.com/mritd/autobuild">autobuild</a> 项目，其中的 <a href="https://github.com/mritd/autobuild/tree/main/earthfiles/udcs">udcs</a> 目录定义了大量的通用 UDCs，这些 UDCs 被其他目标镜的 Earthfile 批量引用。</p><h3 id="3-4、多平台构建"><a href="#3-4、多平台构建" class="headerlink" title="3.4、多平台构建"></a>3.4、多平台构建</h3><p>在以前使用 Dockerfile 的时候，我们需要自己配置然后开启 buildkit 来实现多平台构建；在配置过程中可能会很繁琐，现在使用 earthly 可以默认帮我们实现多平台的交叉编译，我们需要做的仅仅是在 Earthfile 中声明需要支持哪些平台而已:</p><p><img src="https://cdn.oss.link/markdown/YwIQeb.png"></p><p>以上 Earthfile 在执行 <code>earthly --push +all</code> 构建时，将会自动构建四个平台的镜像，并保持单个 tag，同时由于使用了 <code>--push</code> 选项还会自动推送到 Docker Hub 上:</p><p><img src="https://cdn.oss.link/markdown/eHNKXN.png"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Earthly 弥补了 Dockerfile 的很多不足，解决了很多痛点问题；但同样可能需要一些学习成本，但是如果已经熟悉了 Dockerfile 其实学习成本不高；所以目前还是比较推荐将 Dockerfile 切换为 Earthfile 进行统一和版本化管理的。本文由于篇幅所限(懒)很多地方没有讲，比如共享缓存等，所以关于 Earthly 更多的详细使用等最好还是仔细阅读一下<a href="https://docs.earthly.dev/docs/guides">官方文档</a>。</p>]]></content>
    
    
    <summary type="html">Earthly 是一个更加高级的 Docker 镜像构建工具，Earthly 通过自己定义的 Earthfile 来代替传统的 Dockerfile 完成镜像构建。</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="earthly" scheme="https://mritd.com/tags/earthly/"/>
    
  </entry>
  
  <entry>
    <title>从 oh-my-zsh 到 prezto</title>
    <link href="https://mritd.com/2021/09/22/migrate-from-oh-my-zsh-to-prezto/"/>
    <id>https://mritd.com/2021/09/22/migrate-from-oh-my-zsh-to-prezto/</id>
    <published>2021-09-22T11:05:00.000Z</published>
    <updated>2021-09-22T11:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么切换？"><a href="#一、为什么切换？" class="headerlink" title="一、为什么切换？"></a>一、为什么切换？</h2><p>在一开始接触 oh-my-zsh 的时候说实话只是因为它的主题非常漂亮，例如 powerlevel10k 主题；这对于一个常年在终端上锻炼左右手的人来说确实是非常 “Sexy”。后来随着逐渐深度使用，oh-my-zsh 深度集成的这种一体化插件方案等确实带来了极大便利；例如简单的命令行搜索、git、docker、kuebctl 等各种插件的快速提示等。</p><p>但是当终端使用久了以后突然发现，其实像 powerlevel10k 这种花哨的终端主题并不适合我；当逐渐切换回简洁的一些主题，并在 Kubernetes 等大项目的目录下左右横跳时，oh-my-zsh 极慢的响应速度开始展露弊端；仅仅在 Kubernetes 的 Git 仓库目录下，按住回车键终端都能卡出动画…</p><p>所以当忍受不了终端这种拉垮的响应速度时，我感觉是时候换一个了。</p><h2 id="二、Prezto-介绍"><a href="#二、Prezto-介绍" class="headerlink" title="二、Prezto 介绍"></a>二、Prezto 介绍</h2><p>Prezto 官方仓库的介绍很简单，简单到只说 Prezto 是一个 zsh 配置框架，集成了一些主题、插件等。但是如果细说的话，其实 Prezto 最早应该是 oh-my-zsh 的 fork 版本，然后 Prezto 被一点点重写，现在已经基本看不到 oh-my-zsh 的影子了。不过唯一可以肯定的是，性能以及易用性上比 oh-my-zsh 好得多。</p><blockquote><p>Prezto has been rewritten by the author who wanted to achieve a good zsh setup by ensuring all the scripts are making use of zsh syntax. It has a few more steps to install but should only take a few minutes extra.    —- John Stevenson</p></blockquote><h2 id="三、Prezto-安装"><a href="#三、Prezto-安装" class="headerlink" title="三、Prezto 安装"></a>三、Prezto 安装</h2><p>Prezto 安装按照仓库文档的方法安装即可:</p><h3 id="3-1、zsh-安装"><a href="#3-1、zsh-安装" class="headerlink" title="3.1、zsh 安装"></a>3.1、zsh 安装</h3><p>首先确定已经安装了 zsh，如果没有安装则需要通过相应系统的包管理器等工具进行安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># macOS(最新版本的 macOS 已经默认安装了 zsh)</span><br>brew install zsh<br><br><span class="hljs-comment"># Ubuntu</span><br>apt install zsh -y<br></code></pre></td></tr></table></figure><h3 id="3-2、克隆仓库"><a href="#3-2、克隆仓库" class="headerlink" title="3.2、克隆仓库"></a>3.2、克隆仓库</h3><p>在仓库进行克隆时一般分为两种情况，一种默认克隆到 <code>&quot;$&#123;ZDOTDIR:-$HOME&#125;/.zprezto&quot;</code> 目录(标准安装):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> --recursive https://github.com/sorin-ionescu/prezto.git <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.zprezto&quot;</span><br></code></pre></td></tr></table></figure><p>另一种高级用户可能使用 <code>XDG_CONFIG_HOME</code> 配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 克隆仓库</span><br>git <span class="hljs-built_in">clone</span> --recursive https://github.com/sorin-ionescu/prezto.git <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$&#123;XDG_CONFIG_HOME:-<span class="hljs-variable">$HOME</span>/.config&#125;</span>/zsh&#125;</span>/.zprezto&quot;</span><br><br><span class="hljs-comment"># 调整 Prezto 的 XDG_CONFIG_HOME 配置</span><br><span class="hljs-comment"># 该配置需要写入到 $HOME/.zshenv 中</span><br><span class="hljs-built_in">export</span> XDG_CONFIG_HOME=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME:=$HOME/.config&#125;</span>&quot;</span><br><span class="hljs-built_in">export</span> ZDOTDIR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:=$XDG_CONFIG_HOME/zsh&#125;</span>&quot;</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ZDOTDIR</span>/.zshenv&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-3、创建软连接"><a href="#3-3、创建软连接" class="headerlink" title="3.3、创建软连接"></a>3.3、创建软连接</h3><p>Prezto 的安装方式比较方便定制化，在主仓库克隆完成后，只需要将相关的初始化加载配置软连接到 <code>$HOME</code> 目录即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">setopt</span> EXTENDED_GLOB<br><span class="hljs-keyword">for</span> rcfile <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>&quot;</span>/.zprezto/runcoms/^README.md(.N); <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">ln</span> -s <span class="hljs-string">&quot;<span class="hljs-variable">$rcfile</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.<span class="hljs-variable">$&#123;rcfile:t&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>不过需要注意的是上面的命令在某些 shell 脚本里直接写可能会有兼容性问题，在这种情况下可以直接通过命令进行简单处理:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> rcfile <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.zprezto/runcoms/* | xargs -n 1 <span class="hljs-built_in">basename</span> | grep -v README); <span class="hljs-keyword">do</span><br>    target=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.<span class="hljs-variable">$&#123;rcfile:t&#125;</span>&quot;</span><br>    <span class="hljs-built_in">ln</span> -s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.zprezto/runcoms/<span class="hljs-variable">$&#123;rcfile&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;target&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>至此，Prezto 算是安装完成，重新登录 shell 即可看到效果。</p><h2 id="四、细节调整"><a href="#四、细节调整" class="headerlink" title="四、细节调整"></a>四、细节调整</h2><h3 id="4-1、更换主题"><a href="#4-1、更换主题" class="headerlink" title="4.1、更换主题"></a>4.1、更换主题</h3><p>默认情况下 Prezto 使用 sorin 这个主题，如果对默认主题不满意可以通过 <code>prompt</code> 命令切换:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出当前支持的主题</span><br>prompt -l<br><br><span class="hljs-comment"># 直接在命令行上展示所有主题样式(预览)</span><br>prompt -p<br><br><span class="hljs-comment"># 临时试用某个主题</span><br>prompt 主题名称<br><br><span class="hljs-comment"># 保存该主题到配置中(使用)</span><br>prompt -s 主题名称<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/Uxo7e0.png"></p><h3 id="4-2、grep-高亮"><a href="#4-2、grep-高亮" class="headerlink" title="4.2、grep 高亮"></a>4.2、grep 高亮</h3><p>默认情况下 Prezto 在执行 grep 时会对结果进行高亮处理，在某些终端主题上可能会很影响观感:</p><p><img src="https://cdn.oss.link/markdown/S5H0HX.png"></p><p>grep 高亮是在 <code>utility</code> 插件中被开启的，可以通过在 <code>~/.zpreztorc</code> 中增加以下配置关闭:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:prezto:module:utility:grep&#x27;</span> color <span class="hljs-string">&#x27;no&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-3、命令、语法高亮"><a href="#4-3、命令、语法高亮" class="headerlink" title="4.3、命令、语法高亮"></a>4.3、命令、语法高亮</h3><p>Prezto 通过 syntax-highlighting 插件提供了各种语法高亮配置，通过解开以下配置的注释开启更多的自动高亮:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Set syntax highlighters.</span><br><span class="hljs-comment"># By default, only the main highlighter is enabled.</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:prezto:module:syntax-highlighting&#x27;</span> highlighters \<br>  <span class="hljs-string">&#x27;main&#x27;</span> \<br>  <span class="hljs-string">&#x27;brackets&#x27;</span> \<br>  <span class="hljs-string">&#x27;pattern&#x27;</span> \<br>  <span class="hljs-string">&#x27;line&#x27;</span> \<br>  <span class="hljs-string">&#x27;cursor&#x27;</span> \<br>  <span class="hljs-string">&#x27;root&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/m6D71F.png"></p><p><strong>需要注意的是，默认 root 高亮开启后，root 用户所有执行命令都会高亮，这样可能在主题配色上导致看不清输入的命令，可以简单的移除 root 高亮配置即可。</strong></p><h3 id="4-4、自定义命令高亮"><a href="#4-4、自定义命令高亮" class="headerlink" title="4.4、自定义命令高亮"></a>4.4、自定义命令高亮</h3><p>在 <code>syntax-highlighting</code> 插件中启用了 <code>pattern</code> 高亮后，可以通过以下配置设置一些自定义的命令高亮配置，例如 <code>rm -rf</code> 等:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Set syntax pattern styles.</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:prezto:module:syntax-highlighting&#x27;</span> pattern \<br>  <span class="hljs-string">&#x27;rm*-rf*&#x27;</span> <span class="hljs-string">&#x27;fg=white,bold,bg=red&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/sveZAs.png"></p><h3 id="4-5、历史命令搜索"><a href="#4-5、历史命令搜索" class="headerlink" title="4.5、历史命令搜索"></a>4.5、历史命令搜索</h3><p>oh-my-zsh 通过上下箭头按键来快速搜索历史命令是一个非常实用的功能，在切换到 Perzto 后会发现上下箭头的搜索变成了全命令的模糊匹配；例如输入 <code>vim</code> 然后上下翻页会匹配到位于命令中间带有 <code>vim</code> 字样的历史命令:</p><p><img src="https://cdn.oss.link/markdown/FwkGH9.png"></p><p>解决这个问题需要将 <code>history-substring-search</code> 插件依赖的 <code>zsh-history-substring-search</code> 切换到 master 分支并增加 <code>HISTORY_SUBSTRING_SEARCH_PREFIXED</code> 变量配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 切换 zsh-history-substring-search 到 master 分支</span><br>(<span class="hljs-built_in">cd</span> ~/.zprezto/modules/history-substring-search/external &amp;&amp; git checkout master)<br><br><span class="hljs-comment"># 在 ~/.zshrc 中增加环境变量配置</span><br><span class="hljs-built_in">export</span> HISTORY_SUBSTRING_SEARCH_PREFIXED=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>同时历史搜索里还有一个问题是同样的命令如果出现多次会被多次匹配，解决这个问题需要增加以下变量:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="五、其他插件"><a href="#五、其他插件" class="headerlink" title="五、其他插件"></a>五、其他插件</h2><p>更多可以使用的插件请参考 <a href="https://github.com/sorin-ionescu/prezto/tree/master/modules">modules</a> 目录下每个插件的文档，以及如何开启和配置。</p><p><strong>为了方便自己使用，我在我的 <a href="https://github.com/mritd/init/tree/master/prezto">init</a> 项目下创建了快速初始化脚本，以上这些调整将自动完成:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://raw.githubusercontent.com/mritd/init/master/prezto/init.sh | bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了从 oh-my-zsh 切换到 prezto 的过程以及一些配置调整过程。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="ohmyzsh" scheme="https://mritd.com/tags/ohmyzsh/"/>
    
    <category term="prezto" scheme="https://mritd.com/tags/prezto/"/>
    
  </entry>
  
  <entry>
    <title>从 Nginx 切换到 Caddy</title>
    <link href="https://mritd.com/2021/08/20/switching-rrom-nginx-too-caddy/"/>
    <id>https://mritd.com/2021/08/20/switching-rrom-nginx-too-caddy/</id>
    <published>2021-08-20T13:42:00.000Z</published>
    <updated>2021-08-20T13:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天把公司测试环境 Nginx 切换到了 Caddy，在实际切换过程中还是有一点小问题，但是目前感觉良好，这里记录一些细节。</p></blockquote><h2 id="一、为什么要切换"><a href="#一、为什么要切换" class="headerlink" title="一、为什么要切换"></a>一、为什么要切换</h2><p>大部分情况我们的生产环境使用一个域名，为了保证隔离性我们会在测试环境采用另一个域名(偷偷透露一下，测试环境买 <code>*.link</code> 域名，国内能备案还贼便宜)；然而我们不太舍得掏钱去给测试域名再买个证书，所以一直 ACME 大法。</p><p>众所周知这个玩意的证书 3 个月需要续签一次，脚本式续签然后 nginx reload 有时候还不太靠谱，总之内部环境复杂下脚本式操作还是有点风险，所以最后决定 Caddy 一把梭一劳永逸了。</p><h2 id="二、切换中涉及到的细节"><a href="#二、切换中涉及到的细节" class="headerlink" title="二、切换中涉及到的细节"></a>二、切换中涉及到的细节</h2><h3 id="2-1、规则匹配"><a href="#2-1、规则匹配" class="headerlink" title="2.1、规则匹配"></a>2.1、规则匹配</h3><p>在某个站点中我们采用了 Nginx 判断 User-Agent 来处理访问到底是移动端还是桌面端，说实话我比较讨厌这种骚这种东西:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">map <span class="hljs-variable">$http_user_agent</span> <span class="hljs-variable">$is_desktop</span> &#123;<br>    default 0;<br>    ~*linux.*android|windows\s+(?:ce|phone) 0; <span class="hljs-comment"># exceptions to the rule</span><br>    ~*spider|crawl|slurp|bot 1; <span class="hljs-comment"># bots</span><br>    ~*windows|linux|os\s+x\s*[\d\._]+|solaris|bsd 1; <span class="hljs-comment"># OSes</span><br>&#125;<br><br>map <span class="hljs-variable">$is_desktop</span> <span class="hljs-variable">$is_mobile</span> &#123;<br>    1 0;<br>    0 1;<br>&#125;<br><br>server &#123;<br>    <span class="hljs-comment"># reverse proxy</span><br>    location / &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$is_mobile</span>) &#123;<br>            rewrite ^ https://<span class="hljs-variable">$host</span>/h5 redirect;<br>            <span class="hljs-built_in">break</span>;<br>        &#125;<br>        proxy_pass http://backend;<br>        include conf.d/common/proxy.conf;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始通过查找 Caddy 文档发现 Caddy 也是支持 map 的:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">map &#123;host&#125;             &#123;my_placeholder&#125;  &#123;magic_number&#125; &#123;<br>example.com        <span class="hljs-string">&quot;some value&quot;</span>      3<br>foo.example.com    <span class="hljs-string">&quot;another value&quot;</span><br>(.*)\.example.com  <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span> subdomain&quot;</span>  5<br><br>~.*\.net$          -                 7<br>~.*\.xyz$          -                 15<br><br>default            <span class="hljs-string">&quot;unknown domain&quot;</span>  42<br>&#125;<br></code></pre></td></tr></table></figure><p>在实际配置时发现其实这个问题只需要用自定义规则匹配器判断一下是不是移动端即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">@mobile &#123;<br>    header_regexp User-Agent (?i)linux.*android|windows\s+(?:ce|phone)<br>    not path_regexp ^.+\.(?:css|cur|js|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|woff2|svg)$<br>    not path /web/*<br>&#125;<br>rewrite @mobile /h5/&#123;path&#125;?&#123;query&#125;<br></code></pre></td></tr></table></figure><p>在后续编写匹配规则时发现 Caddy 的匹配规则确实是非常强大，在官方的 <a href="https://caddyserver.com/docs/caddyfile/matchers#request-matchers">Request Matchers</a> 文档页面上可以找到基本上满足所有需求的匹配器，从请求头到请求方法、协议、请求路径，从标准匹配到通配符、正则匹配基本上样样俱全，甚至支持代码式的 <a href="https://github.com/google/cel-spec">CEL (Common Expression Language)</a> 表达式匹配；多个匹配还可以自定义命名作为业务相关的匹配器使用。</p><h3 id="2-2、规则重写"><a href="#2-2、规则重写" class="headerlink" title="2.2、规则重写"></a>2.2、规则重写</h3><p>在 Nginx 中 rewrite 指令是多种行为的，比如可以进行 URL 隐式改写，也可以返回 301、307 等重定向代码；但是在 Caddy 中这两种行为被划分为两个指令:</p><ul><li>rewrite: 内部重写，对 URL、参数等进行内部替换，浏览器地址将保持不变</li><li>redir: 重定向，返回 HTTP 状态码让客户端自行重定向到新页面</li></ul><h4 id="2-2-1、rewrite"><a href="#2-2-1、rewrite" class="headerlink" title="2.2.1、rewrite"></a>2.2.1、rewrite</h4><p>针对于地址的隐式重写 rewrite 指令其语法规则如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rewrite [&lt;matcher&gt;] &lt;to&gt;<br></code></pre></td></tr></table></figure><p>匹配器就是全局标准的匹配器定义，可以使用内置的，也可以组合内置匹配器为自定义匹配器，这个匹配器比 Nginx 强大太多；<code>to</code> 中分为三种情况:</p><ul><li><strong>只替换 PATH: <code>rewrite /abc /bcd</code>:</strong></li></ul><p>这种情况下，rewrite 根据 “匹配器” 确定匹配路径，然后完全替换为最后一个路径；<strong>最后面的路径可以使用 <code>&#123;path&#125;</code> 占位符引用原始路径。</strong></p><ul><li><strong>只替换 请求参数: <code>rewrite /api ?a=b</code>:</strong></li></ul><p>这种情况下，Caddy 以 <code>?</code> 作为分隔符，如果 <code>?</code> 后面有内容就意味着将请求参数替换为后面的请求参数；<strong>最后面的请求参数可以通过 <code>&#123;query&#125;</code> 引用原始请求参数。</strong></p><ul><li><strong>全部替换: <code>rewrite /abc /bcd?&#123;query&#125;&amp;custom=1</code>:</strong></li></ul><p>这种情况下，Caddy 根据 “匹配器” 匹配会即替换请求路径也替换请求参数，当然两个占位符也都是可用的。</p><p><strong>需要注意的是: <code>rewrite</code> 只做重写，不会中断请求链，这意味着最终返回结果根据后续的请求匹配来决定。</strong></p><h4 id="2-2-2、redir"><a href="#2-2-2、redir" class="headerlink" title="2.2.2、redir"></a>2.2.2、redir</h4><p>redir 用于向客户端声明显式的重定向，即返回特定重定向状态码，其语法如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redir [&lt;matcher&gt;] &lt;to&gt; [&lt;code&gt;]<br></code></pre></td></tr></table></figure><p>匹配器就不说了，全都一样；**<code>&lt;to&gt;</code> 这个参数会作为 <code>Location</code> 头部值返回，其中可以使用占位符引用原始变量:**</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redir * https://example.com&#123;uri&#125;<br></code></pre></td></tr></table></figure><p><code>code</code> 部分分为四种情况:</p><ul><li>一个 <code>3xx</code> 的自定义状态码</li><li><code>temporary</code>: 返回 302 临时重定向</li><li><code>permanent</code>: 返回 301 永久重定向</li><li><code>html</code>: 使用 HTML 文档方式重定向</li></ul><p>例如将所有请求永久重定向到新站点:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redir https://example.com&#123;uri&#125; permanent<br></code></pre></td></tr></table></figure><p>这里面 HTML 方式是比较难理解的，这起源于一个规范，具体如下:</p><blockquote><p>HTTP 协议中重定向机制是应该优先采用的创建重定向映射的方式，但是有时候 Web 开发者对于服务器没有控制权，或者无法对其进行配置。针对这些特定的应用情景，Web 开发者可以在精心制作的 HTML 页面的 <head>  部分添加一个 <meta> 元素，并将其 http-equiv 属性的值设置为 refresh 。当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。</p></blockquote><p>在源码中如果使用了 <code>html</code> 重定向方式，Caddy 会返回一个 HTML 页面以满足上述方式的情况下让浏览器自行刷新:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> body <span class="hljs-type">string</span><br><span class="hljs-keyword">switch</span> code &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;permanent&quot;</span>:<br>code = <span class="hljs-string">&quot;301&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;temporary&quot;</span>, <span class="hljs-string">&quot;&quot;</span>:<br>code = <span class="hljs-string">&quot;302&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;html&quot;</span>:<br><span class="hljs-comment">// Script tag comes first since that will better imitate a redirect in the browser&#x27;s</span><br><span class="hljs-comment">// history, but the meta tag is a fallback for most non-JS clients.</span><br><span class="hljs-keyword">const</span> metaRedir = <span class="hljs-string">`&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;title&gt;Redirecting...&lt;/title&gt;</span><br><span class="hljs-string">&lt;script&gt;window.location.replace(&quot;%s&quot;);&lt;/script&gt;</span><br><span class="hljs-string">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; URL=&#x27;%s&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;Redirecting to &lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;...&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">`</span><br>safeTo := html.EscapeString(to)<br>body = fmt.Sprintf(metaRedir, safeTo, safeTo, safeTo, safeTo)<br>code = <span class="hljs-string">&quot;302&quot;</span><br><span class="hljs-keyword">default</span>:<br>codeInt, err := strconv.Atoi(code)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, h.Errf(<span class="hljs-string">&quot;Not a supported redir code type or not valid integer: &#x27;%s&#x27;&quot;</span>, code)<br>&#125;<br><span class="hljs-keyword">if</span> codeInt &lt; <span class="hljs-number">300</span> || codeInt &gt; <span class="hljs-number">399</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, h.Errf(<span class="hljs-string">&quot;Redir code not in the 3xx range: &#x27;%v&#x27;&quot;</span>, codeInt)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3、uri"><a href="#2-2-3、uri" class="headerlink" title="2.2.3、uri"></a>2.2.3、uri</h4><p><code>uri</code> 指令是一个特殊指令，它与 <code>rewrite</code> 类似，不同的是它用于对 URI 重写更加方便，其语法如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">uri [&lt;matcher&gt;] strip_prefix|strip_suffix|replace|path_regexp \<br>&lt;target&gt; \<br>[&lt;replacement&gt; [&lt;<span class="hljs-built_in">limit</span>&gt;]]<br></code></pre></td></tr></table></figure><p><strong>语法中第二个参数为一个动词，用来定义如何替换 URI:</strong></p><ul><li><code>strip_prefix</code>: 从路径中去除前缀</li><li><code>strip_suffix</code>: 从路径中去除后缀</li><li><code>replace</code>: 在整个 URI 路径中执行子替换(例如 <code>/a/b/c/d</code> 替换为 <code>/a/1/2/d</code>)</li><li><code>path_regexp</code>: 在路径中进行正则替换</li></ul><p>以下为一些样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 去除 &quot;/api/v1&quot; 前缀</span><br>uri strip_prefix /api/v1<br><br><span class="hljs-comment"># 去除 &quot;.html&quot; 后缀</span><br>uri strip_suffix .html<br><br><span class="hljs-comment"># 子路径替换 &quot;/v1&quot; =&gt; &quot;/v2&quot;</span><br>uri replace /v1/ /v2/<br><br><span class="hljs-comment"># 正则替换 &quot;/api/v数字&quot; =&gt; &quot;/api&quot;</span><br>uri path_regexp /api/v\d /api<br></code></pre></td></tr></table></figure><p>其中在使用 <code>replace</code> 时最后面可以跟一个数字，代表从 URI 中找找替换多少次，默认为 <code>-1</code> 即全部替换。</p><h3 id="2-3、WebSocket-代理"><a href="#2-3、WebSocket-代理" class="headerlink" title="2.3、WebSocket 代理"></a>2.3、WebSocket 代理</h3><p>在 Nginx 配置中，如果想要代理 WebSocket 链接，我们需要增加以下设置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>proxy_set_header Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br></code></pre></td></tr></table></figure><p>但是在 Caddy 中一切变得更加简单… 简单到就是我们啥也不用干，自动支持:</p><blockquote><p>Websocket proxying “just works” in v2; there is no need to “enable” websockets like in v1.</p></blockquote><h3 id="2-4、URL-编码"><a href="#2-4、URL-编码" class="headerlink" title="2.4、URL 编码"></a>2.4、URL 编码</h3><p>在使用路径匹配器时，URL 默认是被解码的，例如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 中文已经被解码，需要直接写解码后的字符串才能匹配到</span><br>redir /2016/03/22/Java-内存之直接内存 https://mritd.com/2016/03/22/java-memory-direct-memory permanent<br></code></pre></td></tr></table></figure><p><strong>至于反向代理 <code>reverse_proxy</code> 传出时的编码暂时还没有遇到，还需要测试一下。</strong></p><h3 id="2-5、强制-HTTP"><a href="#2-5、强制-HTTP" class="headerlink" title="2.5、强制 HTTP"></a>2.5、强制 HTTP</h3><p>有些站点可能默认就是 HTTP 的，我们也不期望以 HTTPS 方式访问；但是 Caddy 默认会为站点进行 ACME 证书申请，而申请不下来证书时又访问不了；这种情况下只需要在站点地址上强制写明 HTTP 协议即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">http://example.com &#123;<br>    reverse_proxy ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6、代理-HTTPS"><a href="#2-6、代理-HTTPS" class="headerlink" title="2.6、代理 HTTPS"></a>2.6、代理 HTTPS</h3><p>如果想要代理 HTTPS 服务，那么只需要在 <code>reverse_proxy</code> 中填写 HTTPS 地址即可；<strong>不过与 Nginx 不同，Caddy 的 TLS 校验默认是开着的，所以如果后端 HTTPS 证书过期等情况可能导致 Caddy 返回 502 错误；</strong> 这种情况可以通过 <code>transport</code> 进行关闭:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">reg.example.com &#123;<br>    handle &#123;<br>        request_body &#123;<br>            max_size 1G<br>        &#125;<br>        reverse_proxy &#123;<br>            to https://172.16.11.40:443<br>            transport http &#123;<br>                <span class="hljs-comment"># SNI</span><br>                tls_server_name reg.example.link<br>                <span class="hljs-comment"># 关闭后端 TLS 验证</span><br>                tls_insecure_skip_verify<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7、自定义证书"><a href="#2-7、自定义证书" class="headerlink" title="2.7、自定义证书"></a>2.7、自定义证书</h3><p>如果已经有自己的证书，而不期望 Caddy 自动申请，那么只需要在 <code>tls</code> 指令后加上证书即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">reg.example.com &#123;<br>    handle &#123;<br>        ...<br>    &#125;<br>    <br>    <span class="hljs-comment"># 使用自定义证书</span><br>    tls cert.pem key.pem<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8、日志打印"><a href="#2-8、日志打印" class="headerlink" title="2.8、日志打印"></a>2.8、日志打印</h3><p>Caddy 的日志系统与 Nginx 完全不同，Caddy 日志按照 Namespace 划分，<strong>在站点配置中默认为只可以打印当前站点的请求日志，如果需要打印例如反向代理的上游地址等需要在全局日志配置中配置。</strong> 日志这一块一句两句说不清，推荐直接看官方文档以及日志实现逻辑，如果懂 go 的话可以看看 <a href="https://github.com/uber-go/zap">uber-go&#x2F;zap</a> 这个日志框架；下面是按文件分开打印请求日志和上游日志的样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Global options</span><br>&#123;<br>    <span class="hljs-comment"># 打印反向代理 upstream 信息日志(upstream 这个位置随便起名)</span><br>    <span class="hljs-built_in">log</span> upstream &#123;<br>        level DEBUG<br>        format json &#123;<br>            time_format <span class="hljs-string">&quot;iso8601&quot;</span><br>        &#125;<br>        output file /data/logs/upstream.log &#123;<br>            roll_size 100mb<br>            roll_keep 3<br>            roll_keep_for 7d<br>        &#125;<br>        <span class="hljs-comment"># 需要指定 Namespace 才能打印</span><br>        include <span class="hljs-string">&quot;http.handlers.reverse_proxy&quot;</span><br>    &#125;<br>&#125;<br><br>example.com &#123;<br>    <span class="hljs-comment"># 打印站点请求日志</span><br>    <span class="hljs-built_in">log</span> &#123;<br>        format json &#123;<br>            time_format <span class="hljs-string">&quot;iso8601&quot;</span><br>        &#125;<br>        output file <span class="hljs-string">&quot;/data/logs/example.com.log&quot;</span> &#123;<br>            roll_size 100mb<br>            roll_keep 3<br>            roll_keep_for 7d<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9、TLS-版本不支持"><a href="#2-9、TLS-版本不支持" class="headerlink" title="2.9、TLS 版本不支持"></a>2.9、TLS 版本不支持</h3><p>很不幸的是我们有一个 TLS 1.1 兼容的服务，当切换到 Caddy 后 TLS 1.1 已经不被支持，目前 Caddy 的 TLS 兼容性最小为 TLS 1.2，最大为 TLS 1.3:</p><p><strong><code>protocols &lt;min&gt; [&lt;max&gt;]</code></strong></p><blockquote><p><code>protocols</code> specifies the minimum and maximum protocol versions. Default min: <code>tls1.2</code>. Default max: <code>tls1.3</code>.</p></blockquote><h2 id="三、切换总结"><a href="#三、切换总结" class="headerlink" title="三、切换总结"></a>三、切换总结</h2><p>总结一句话: 匹配器舒服，配置行为明确，配置引用少写一万行，其他的坑继续踩。</p>]]></content>
    
    
    <summary type="html">记录一些测试环境 Nginx 切换到 Caddy 的一些小细节。</summary>
    
    
    
    <category term="Caddy" scheme="https://mritd.com/categories/caddy/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>使用 GoReplay 进行 HTTP 流量复制</title>
    <link href="https://mritd.com/2021/08/03/use-goreplay-to-record-your-live-traffic/"/>
    <id>https://mritd.com/2021/08/03/use-goreplay-to-record-your-live-traffic/</id>
    <published>2021-08-03T10:23:00.000Z</published>
    <updated>2021-08-03T10:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>GoReplay 采用 Go 编写，其只有一个单独的可执行文件，在官方 <a href="https://github.com/buger/goreplay/releases">Release</a> 页下载后将其放到 <code>PATH</code> 目录即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/buger/goreplay/releases/download/v1.2.0/gor_v1.2.0_x64.tar.gz<br>tar -zxvf gor_v1.2.0_x64.tar.gz<br><span class="hljs-built_in">mv</span> gor /usr/local/bin<br></code></pre></td></tr></table></figure><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>GoReplay 命令行整体使用方式为指定输入端和输入端，然后 GoReplay 从输入端将流量复制到输出端。</p><h3 id="2-1、实时流量复制"><a href="#2-1、实时流量复制" class="headerlink" title="2.1、实时流量复制"></a>2.1、实时流量复制</h3><p>GoReplay 输入端可以指定一个 tcp 地址，然后 GoReplay 将该端口流量复制到输出端；下面样例展示从 <code>127.0.0.0:8000</code> 复制流量并输出到控制台的样例。</p><p><strong>首先启动一个 HTTP Server，这里直接使用 <code>python</code> 的 HTTP Server</strong></p><p><img src="https://cdn.oss.link/markdown/hnOfHX.png"></p><p><strong>接着再让 gor 监听同样的端口，<code>--output-stdout</code> 指定输出端为控制台</strong></p><p><img src="https://cdn.oss.link/markdown/QhFUdM.png"></p><p><strong>此时通过 <code>curl</code> 访问 <code>python</code> 的 HTTP Server 可以看到 gor 将 HTTP 请求复制并输出到了控制台</strong></p><p><img src="https://cdn.oss.link/markdown/uilePc.png"></p><p>同样如果我们通过 <code>--output-http</code> 选项将输出端指定为另一个 HTTP Server，那么 gor 会将请求同步复制并发送到输出端 HTTP Server。</p><p><img src="https://cdn.oss.link/markdown/vFQiRs.png"></p><h3 id="2-2、流量抓取与重放"><a href="#2-2、流量抓取与重放" class="headerlink" title="2.2、流量抓取与重放"></a>2.2、流量抓取与重放</h3><h4 id="2-2-1、基本使用"><a href="#2-2-1、基本使用" class="headerlink" title="2.2.1、基本使用"></a>2.2.1、基本使用</h4><p>GoReplay 可以将输出端指定为文件，从而将流量保存到文件中，然后 GoReplay 读取该保存的流量文件并重放到指定的 HTTP Server 中。</p><p><strong>首先通过 <code>--outpu-file</code> 选项将请求保存到文件中</strong></p><p><img src="https://cdn.oss.link/markdown/yuxiYQ-1627911532-lA2val.png"></p><p><strong>使用 <code>--input-file</code> 选项读取流量信息，然后通过 <code>--output-http</code> 选项重放到目标服务器</strong></p><p><img src="https://cdn.oss.link/markdown/cRB3x4-1627911738-7pLgTp.png"></p><h4 id="2-2-2、扩展选项"><a href="#2-2-2、扩展选项" class="headerlink" title="2.2.2、扩展选项"></a>2.2.2、扩展选项</h4><p>在将流量保存到文件时，默认情况下 GoReplay 以块形式写入文件，并且每个块将生成一个独立的文件名(<code>test_0.gor</code>)，如果想要将所有块的流量全部写入一个文件中，<strong>可以设置 <code>--output-file-append</code> 为 <code>true</code>。</strong></p><p>同时 GoReplay 输出文件名支持日期占位符，例如 <code>--output-file %Y%m%d.gor</code> 会生成 <code>20210801.gor</code> 这种文件名；所有可用的日期占位符如下:</p><ul><li><code>%Y</code>: year including the century (at least 4 digits)</li><li><code>%m</code>: month of the year (01..12)</li><li><code>%d</code>: Day of the month (01..31)</li><li><code>%H</code>: Hour of the day, 24-hour clock (00..23)</li><li><code>%M</code>: Minute of the hour (00..59)</li><li><code>%S</code>: Second of the minute (00..60)</li></ul><p>请求比较多时，将流量保存到文件可能会导致文件很大，这时候可以使用 <code>.gz</code> 结尾作为文件名，GoReplay 读取到 <code>.gz</code> 后缀后会自动进行 GZip 压缩处理。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-raw :8000 --output-file test.gor.gz<br></code></pre></td></tr></table></figure><p>如果需要对多个文件进行聚合重放，只需要指定多个文件即可，重放过程中 GoReplay 会自动保持请求顺序:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-file *.gor --output-http http://127.0.0.1:8080<br></code></pre></td></tr></table></figure><p>在使用文件输入时，GoReplay 还支持压力测试，通过 <code>test.gor|200%</code> 这种方式指定的文件名，GoReplay 会以两倍的速率进行请求重放:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Replay from file on 2x speed </span><br>gor --input-file <span class="hljs-string">&quot;requests.gor|200%&quot;</span> --output-http <span class="hljs-string">&quot;staging.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-3、数据丢失与缓冲区"><a href="#2-3、数据丢失与缓冲区" class="headerlink" title="2.3、数据丢失与缓冲区"></a>2.3、数据丢失与缓冲区</h3><p>GoReplay 采用比较底层的数据包拦截技术，当一个 TCP 数据包到达时内核 GoReplay 会进行拦截；然而数据包可以乱序到达，接下来内核需要重建 TCP 流来保证上层应用能以正确的顺序读取 TCP 数据包，这时候内核就会有一个数据包的缓冲区；默认情况下 Linux 系统的缓冲区为 2M，Windiws 为 1M，当特定的 HTTP 请求数据包超过缓冲区时，GoReplay 就无法正确的拦截(因为 GoReplay 需要一个完整的 HTTP 请求数据包用于保存到文件或者重放)，同时可能会导致请求丢失、请求损坏等问题。</p><p>为了解决这种问题，GoReplay 提供了 <code>--input-raw-buffer-size</code> 选项用于调整缓冲区大小，例如 <code>--input-raw-buffer-size 10485760</code> 选项会将缓冲区调整为 10M。</p><h3 id="2-4、速率限制"><a href="#2-4、速率限制" class="headerlink" title="2.4、速率限制"></a>2.4、速率限制</h3><p>某些情况下可能为了方便调试，我们在生产环境抓取流量并镜像到测试环境进行重放；但是可能由于生产环境流量比较大，我们并不需要如此大的请求速率，这时候可以通过速率限制让 GoReplay 帮我们控制请求数量。</p><p><strong>绝对数量限制:</strong> 使用 <code>--output-http &quot;ADDRESS|N&quot;</code> 形式的参数时，GoReplay 会保证镜像的流量请求每秒不会超过 “N” 个。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># staging.server will not get more than ten requests per second</span><br>gor --input-tcp :28020 --output-http <span class="hljs-string">&quot;http://staging.com|10&quot;</span><br></code></pre></td></tr></table></figure><p><strong>百分比限制限制:</strong> 使用 <code>--output-http &quot;ADDRESS|N%&quot;</code> 形式的参数时，GoReplay 会保证镜像的流量维持在总流量的 “N%”。</p><h3 id="2-5、请求过滤"><a href="#2-5、请求过滤" class="headerlink" title="2.5、请求过滤"></a>2.5、请求过滤</h3><p>在某些时候我们只期望把生产环境的特定流量重放到测试环境，或者禁止一些流量重放到测试环境，这时候我们可以使用 GoReplay 的过滤功能；GoReplay 提供以下选项来提供过滤功能:</p><ul><li><code>--http-allow-header</code>: 允许重放的 HTTP 头(支持正则)</li><li><code>--http-allow-method</code>: 允许重放的 HTTP 方法</li><li><code>--http-allow-url</code>: 允许重放的 URL(支持正则)</li><li><code>--http-disallow-header</code>: 不允许的 HTTP 头(支持正则)</li><li><code>--http-disallow-url</code>: 不允许的 HTTP URL(支持正则)</li></ul><p>以下是官方给出的命令样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># only forward requests being sent to the /api endpoint</span><br>gor --input-raw :8080 --output-http staging.com --http-allow-url /api<br><br><span class="hljs-comment"># only forward requests NOT being sent to the /api... endpoint</span><br>gor --input-raw :8080 --output-http staging.com --http-disallow-url /api<br><br><span class="hljs-comment"># only forward requests with an api version of 1.0x</span><br>gor --input-raw :8080 --output-http staging.com --http-allow-header api-version:^1\.0\d<br><br><span class="hljs-comment"># only forward requests NOT containing User-Agent header value &quot;Replayed by Gor&quot;</span><br>gor --input-raw :8080 --output-http staging.com --http-disallow-header <span class="hljs-string">&quot;User-Agent: Replayed by Gor&quot;</span><br><br>gor --input-raw :80 --output-http <span class="hljs-string">&quot;http://staging.server&quot;</span> \<br>    --http-allow-method GET \<br>    --http-allow-method OPTIONS<br></code></pre></td></tr></table></figure><h3 id="2-6、请求重写"><a href="#2-6、请求重写" class="headerlink" title="2.6、请求重写"></a>2.6、请求重写</h3><p>有时候可能测试环境的 URL 路径与生产环境完全不同，此时如果直接把生产环境的流量在测试环境重放可能会导致请求路径错误等情况；为此 GoReplay 提供了 URL 重写、参数设置、请求头设置等功能。</p><p><strong>通过 <code>--http-rewrite-url</code> 选项进行 URL 重写</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Rewrites all `/v1/user/&lt;user_id&gt;/ping` requests to `/v2/user/&lt;user_id&gt;/ping`</span><br>gor --input-raw :8080 --output-http staging.com --http-rewrite-url /v1/user/([^\\/]+)/ping:/v2/user/<span class="hljs-variable">$1</span>/ping<br></code></pre></td></tr></table></figure><p><strong>设置 URL 参数</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-raw :8080 --output-http staging.com --http-set-param api_key=1<br></code></pre></td></tr></table></figure><p><strong>设置请求头</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-raw :80 --output-http <span class="hljs-string">&quot;http://staging.server&quot;</span> \<br>    --http-header <span class="hljs-string">&quot;User-Agent: Replayed by Gor&quot;</span> \<br>    --http-header <span class="hljs-string">&quot;Enable-Feature-X: true&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Host 头是一个特殊的请求头，默认情况下 GoReplay 会将其自动设置为目标重放地址的域名，如果想关闭这种默认行为请使用 <code>--http-original-host</code> 选项。</strong></p><h2 id="三、其他高级配置"><a href="#三、其他高级配置" class="headerlink" title="三、其他高级配置"></a>三、其他高级配置</h2><h3 id="3-1、中继服务器"><a href="#3-1、中继服务器" class="headerlink" title="3.1、中继服务器"></a>3.1、中继服务器</h3><p>GoReplay 可以使用中继服务器从而实现链式的流量传递，使用中继服务器时只需要将输出端设置为 TCP 模式，然后中继服务器输入端也设置为 TCP 模式即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Run on servers where you want to catch traffic. You can run it on each `web` machine.</span><br>gor --input-raw :80 --output-tcp replay.local:28020<br><br><span class="hljs-comment"># Replay server (replay.local).</span><br>gor --input-tcp replay.local:28020 --output-http http://staging.com<br></code></pre></td></tr></table></figure><p>如果有多个中继服务器，可以使用 <code>--split-output</code> 选项让每个抓取流量的 GoReplay 使用轮询算法向每个中继服务器发送流量:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-raw :80 --split-output --output-tcp replay1.local:28020 --output-tcp replay2.local:28020<br></code></pre></td></tr></table></figure><h3 id="3-2、输出到-ElasticSearch"><a href="#3-2、输出到-ElasticSearch" class="headerlink" title="3.2、输出到 ElasticSearch"></a>3.2、输出到 ElasticSearch</h3><p>GoReplay 支持将输出端设置为 ElasticSearch:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./gor --input-raw :8000 --output-http http://staging.com --output-http-elasticsearch localhost:9200/gor<br></code></pre></td></tr></table></figure><p>输出到 ES 时不需要预先创建索引，GoReplay 会自动完成，输出到 ES 后其数据结构如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ESRequestResponse <span class="hljs-keyword">struct</span> &#123;<br>ReqURL               <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_URL&quot;`</span><br>ReqMethod            <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Method&quot;`</span><br>ReqUserAgent         <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_User-Agent&quot;`</span><br>ReqAcceptLanguage    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Accept-Language,omitempty&quot;`</span><br>ReqAccept            <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Accept,omitempty&quot;`</span><br>ReqAcceptEncoding    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Accept-Encoding,omitempty&quot;`</span><br>ReqIfModifiedSince   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_If-Modified-Since,omitempty&quot;`</span><br>ReqConnection        <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Connection,omitempty&quot;`</span><br>ReqCookies           <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Req_Cookies,omitempty&quot;`</span><br>RespStatus           <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Status&quot;`</span><br>RespStatusCode       <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Status-Code&quot;`</span><br>RespProto            <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Proto,omitempty&quot;`</span><br>RespContentLength    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Content-Length,omitempty&quot;`</span><br>RespContentType      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Content-Type,omitempty&quot;`</span><br>RespTransferEncoding <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Transfer-Encoding,omitempty&quot;`</span><br>RespContentEncoding  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Content-Encoding,omitempty&quot;`</span><br>RespExpires          <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Expires,omitempty&quot;`</span><br>RespCacheControl     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Cache-Control,omitempty&quot;`</span><br>RespVary             <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Vary,omitempty&quot;`</span><br>RespSetCookie        <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;Resp_Set-Cookie,omitempty&quot;`</span><br>Rtt                  <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;RTT&quot;`</span><br>Timestamp            time.Time<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、Kafka-对接"><a href="#3-3、Kafka-对接" class="headerlink" title="3.3、Kafka 对接"></a>3.3、Kafka 对接</h3><p>除了输出到 ES 以外，GoReplay 还支持输出到 Kafka 以及从 Kafka 中读取数据:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">gor --input-raw :8080 --output-kafka-host <span class="hljs-string">&#x27;192.168.0.1:9092,192.168.0.2:9092&#x27;</span> --output-kafka-topic <span class="hljs-string">&#x27;kafka-log&#x27;</span><br><br>gor --input-kafka-host <span class="hljs-string">&#x27;192.168.0.1:9092,192.168.0.2:9092&#x27;</span> --input-kafka-topic <span class="hljs-string">&#x27;kafka-log&#x27;</span> --output-stdout<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">GoReplay 是一个实时流量抓取工具，可以将生产环境流量实时抓取并重放到测试环境；本文主要记录 GoReplay 的相关使用。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="GoReplay" scheme="https://mritd.com/tags/goreplay/"/>
    
  </entry>
  
  <entry>
    <title>k0s 折腾笔记</title>
    <link href="https://mritd.com/2021/07/29/test-the-k0s-cluster/"/>
    <id>https://mritd.com/2021/07/29/test-the-k0s-cluster/</id>
    <published>2021-07-29T06:13:00.000Z</published>
    <updated>2021-07-29T06:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近两年一直在使用 kubeadm 部署 kubernetes 集群，总体来说配合一些自己小脚本还有一些自动化工具还算是方便；但是全容器化稳定性确实担忧，也遇到过莫名其妙的证书过期错误，最后重启大法解决这种问题；所以也在探索比较方便的二进制部署方式，比如这个 k0s。</p></blockquote><h2 id="一、k0s-介绍"><a href="#一、k0s-介绍" class="headerlink" title="一、k0s 介绍"></a>一、k0s 介绍</h2><blockquote><p>The Simple, Solid &amp; Certified Kubernetes Distribution.</p></blockquote><p>k0s 可以认为是一个下游的 Kubernetes 发行版，与原生 Kubernetes 相比，k0s 并未阉割大量 Kubernetes 功能；k0s 主要阉割部分基本上只有<strong>树内 Cloud provider</strong>，其他的都与原生 Kubernetes 相同。</p><p><strong>k0s 自行编译 Kubernetes 源码生成 Kubernetes 二进制文件，然后在安装后将二进制文件释放到宿主机再启动；这种情况下所有功能几乎与原生 Kubernetes 没有差异。</strong></p><h2 id="二、k0sctl-使用"><a href="#二、k0sctl-使用" class="headerlink" title="二、k0sctl 使用"></a>二、k0sctl 使用</h2><p>k0sctl 是 k0s 为了方便快速部署集群所提供的工具，有点类似于 kubeadm，但是其扩展性要比 kubeadm 好得多。在多节点的情况下，k0sctl 通过 ssh 链接目标主机然后按照步骤释放文件并启动 Kubernetes 相关服务，从而完成集群初始化。</p><h3 id="2-1、k0sctl-安装集群"><a href="#2-1、k0sctl-安装集群" class="headerlink" title="2.1、k0sctl 安装集群"></a>2.1、k0sctl 安装集群</h3><p>安装过程中会自动下载相关镜像，需要保证所有节点可以扶墙，如何离线安装后面讲解。<strong>安装前保证目标机器的 hostname 为非域名形式，否则可能会出现一些问题。</strong>以下是一个简单的启动集群示例:</p><p><strong>首先安装 k0sctl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 k0sctl</span><br>wget https://github.com/k0sproject/k0sctl/releases/download/v0.9.0/k0sctl-linux-x64<br><span class="hljs-built_in">chmod</span> +x k0sctl-linux-x64<br><span class="hljs-built_in">mv</span> k0sctl-linux-x64 /usr/local/bin/k0sctl<br></code></pre></td></tr></table></figure><p><strong>然后编写 k0sctl.yaml 配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">worker</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">worker</span><br>  <span class="hljs-attr">k0s:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.21</span><span class="hljs-number">.2</span><span class="hljs-string">+k0s.1</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0s.k0sproject.io/v1beta1</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br>      <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">k0s</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">api:</span><br>          <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-attr">port:</span> <span class="hljs-number">6443</span><br>          <span class="hljs-attr">k0sApiPort:</span> <span class="hljs-number">9443</span><br>          <span class="hljs-attr">sans:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>        <span class="hljs-attr">storage:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">etcd</span><br>          <span class="hljs-attr">etcd:</span><br>            <span class="hljs-attr">peerAddress:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>        <span class="hljs-attr">network:</span><br>          <span class="hljs-attr">kubeProxy:</span><br>            <span class="hljs-attr">disabled:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><br></code></pre></td></tr></table></figure><p><strong>最后执行 <code>apply</code> 命令安装即可，安装前确保你的操作机器可以 ssh 免密登陆所有目标机器:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  tmp k0sctl apply -c bak.yaml<br><br>⠀⣿⣿⡇⠀⠀⢀⣴⣾⣿⠟⠁⢸⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀█████████ █████████ ███<br>⠀⣿⣿⡇⣠⣶⣿⡿⠋⠀⠀⠀⢸⣿⡇⠀⠀⠀⣠⠀⠀⢀⣠⡆⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀███          ███    ███<br>⠀⣿⣿⣿⣿⣟⠋⠀⠀⠀⠀⠀⢸⣿⡇⠀⢰⣾⣿⠀⠀⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀███          ███    ███<br>⠀⣿⣿⡏⠻⣿⣷⣤⡀⠀⠀⠀⠸⠛⠁⠀⠸⠋⠁⠀⠀⣿⣿⡇⠈⠉⠉⠉⠉⠉⠉⠉⠉⢹⣿⣿⠀███          ███    ███<br>⠀⣿⣿⡇⠀⠀⠙⢿⣿⣦⣀⠀⠀⠀⣠⣶⣶⣶⣶⣶⣶⣿⣿⡇⢰⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⠀█████████    ███    ██████████<br><br>k0sctl 0.0.0 Copyright 2021, k0sctl authors.<br>Anonymized telemetry of usage will be sent to the authors.<br>By continuing to use k0sctl you agree to these terms:<br>https://k0sproject.io/licenses/eula<br>INFO ==&gt; Running phase: Connect to hosts<br>INFO [ssh] 10.0.0.15:22: connected<br>INFO [ssh] 10.0.0.11:22: connected<br>INFO [ssh] 10.0.0.12:22: connected<br>INFO [ssh] 10.0.0.14:22: connected<br>INFO [ssh] 10.0.0.13:22: connected<br>INFO ==&gt; Running phase: Detect host operating systems<br>INFO [ssh] 10.0.0.11:22: is running Ubuntu 20.04.2 LTS<br>INFO [ssh] 10.0.0.12:22: is running Ubuntu 20.04.2 LTS<br>INFO [ssh] 10.0.0.14:22: is running Ubuntu 20.04.2 LTS<br>INFO [ssh] 10.0.0.13:22: is running Ubuntu 20.04.2 LTS<br>INFO [ssh] 10.0.0.15:22: is running Ubuntu 20.04.2 LTS<br>INFO ==&gt; Running phase: Prepare hosts<br>INFO ==&gt; Running phase: Gather host facts<br>INFO [ssh] 10.0.0.11:22: discovered ens33 as private interface<br>INFO [ssh] 10.0.0.13:22: discovered ens33 as private interface<br>INFO [ssh] 10.0.0.12:22: discovered ens33 as private interface<br>INFO ==&gt; Running phase: Download k0s on hosts<br>INFO [ssh] 10.0.0.11:22: downloading k0s 1.21.2+k0s.1<br>INFO [ssh] 10.0.0.13:22: downloading k0s 1.21.2+k0s.1<br>INFO [ssh] 10.0.0.12:22: downloading k0s 1.21.2+k0s.1<br>INFO [ssh] 10.0.0.15:22: downloading k0s 1.21.2+k0s.1<br>INFO [ssh] 10.0.0.14:22: downloading k0s 1.21.2+k0s.1<br>......<br></code></pre></td></tr></table></figure><p>稍等片刻后带有三个 Master 和两个 Node 的集群将安装完成:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 注意: 目标机器 hostname 不应当为域名形式，这里的样例是已经修复了这个问题</span><br>k1.node ➜ ~ k0s kubectl get node -o wide<br>NAME      STATUS   ROLES    AGE   VERSION       INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME<br>k1.node   Ready    &lt;none&gt;   10m   v1.21.2+k0s   10.0.0.11     &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-77-generic   containerd://1.4.6<br>k2.node   Ready    &lt;none&gt;   10m   v1.21.2+k0s   10.0.0.12     &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-77-generic   containerd://1.4.6<br>k3.node   Ready    &lt;none&gt;   10m   v1.21.2+k0s   10.0.0.13     &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-77-generic   containerd://1.4.6<br>k4.node   Ready    &lt;none&gt;   10m   v1.21.2+k0s   10.0.0.14     &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-77-generic   containerd://1.4.6<br>k5.node   Ready    &lt;none&gt;   10m   v1.21.2+k0s   10.0.0.15     &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-77-generic   containerd://1.4.6<br></code></pre></td></tr></table></figure><h3 id="2-2、k0sctl-的扩展方式"><a href="#2-2、k0sctl-的扩展方式" class="headerlink" title="2.2、k0sctl 的扩展方式"></a>2.2、k0sctl 的扩展方式</h3><p>与 kubeadm 不同，k0sctl 几乎提供了所有安装细节的可定制化选项，其通过三种行为来完成扩展:</p><ul><li><strong>文件上传:</strong> k0sctl 允许定义在安装前的文件上传，在安装之前 k0sctl 会把已经定义的相关文件全部上传到目标主机，包括不限于 k0s 本身二进制文件、离线镜像包、其他安装文件、其他辅助脚本等。</li><li><strong>Manifests 与 Helm:</strong> 当将特定的文件上传到 master 节点的 <code>/var/lib/k0s/manifests</code> 目录时，k0s 在安装过程中会自动应用这些配置，类似 kubelet 的 static pod 一样，只不过 k0s 允许全部资源(包括不限于 deployment、daemonset、namespace 等)；同样也可以直接在 <code>k0sctl.yaml</code> 添加 Helm 配置，k0s 也会以同样的方式帮你管理。</li><li><strong>辅助脚本:</strong> 可以在每个主机下配置 <code>hooks</code> 选项来实现执行一些特定的脚本(文档里没有，需要看源码)，以便在特定情况下做点骚操作。</li></ul><h3 id="2-3、k0sctl-使用离线镜像包"><a href="#2-3、k0sctl-使用离线镜像包" class="headerlink" title="2.3、k0sctl 使用离线镜像包"></a>2.3、k0sctl 使用离线镜像包</h3><p>基于上面的扩展，k0s 还方便的帮我们集成了离线镜像包的自动导入，我们只需要定义一个文件上传，将镜像包上传到 <code>/var/lib/k0s/images/</code> 目录后，k0s 会自定将其倒入到 containerd 中而无需我们手动干预:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-comment"># files 配置将会在安装前将相关文件上传到目标主机</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-comment"># 在该目录下的 image 压缩包将会被自动导入到 containerd 中</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br><span class="hljs-string">......</span><br></code></pre></td></tr></table></figure><p><strong>关于 image 压缩包(bundle_file)如何下载以及自己自定义问题请参考官方 <a href="https://docs.k0sproject.io/v1.21.2+k0s.1/airgap-install/">Airgap install</a> 文档。</strong></p><p><img src="https://cdn.oss.link/markdown/LJIS7j.png"></p><h3 id="2-4、切换-CNI-插件"><a href="#2-4、切换-CNI-插件" class="headerlink" title="2.4、切换 CNI 插件"></a>2.4、切换 CNI 插件</h3><p>默认情况下 k0s 内部集成了两个 CNI 插件: calico 和 kube-router；如果我们使用其他的 CNI 插件例如 flannel，我们只需要将默认的 CNI 插件设置为 <code>custom</code>，然后将 flannel 的部署 yaml 上传到一台 master 的 <code>/var/lib/k0s/manifests</code> 目录即可，k0s 会自动帮我门执行 <code>apply -f xxxx.yaml</code> 这种操作。</p><p>下面是切换到 flannel 的样例，需要注意的是 flannel 官方镜像不会帮你安装 CNI 的二进制文件，我们需要借助文件上传自己安装(<a href="https://github.com/containernetworking/plugins/releases">CNI GitHub 插件下载地址</a>):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-comment"># 将 flannel 的 yaml 放到 manifests 里(需要单独创建一个目录)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/kube-flannel.yaml</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/manifests/flannel</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0644</span><br>    <span class="hljs-comment"># 自己安装一下 CNI 插件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-attr">k0s:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.21.2+k0s.1</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0s.k0sproject.io/v1beta1</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br>      <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">k0s</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">api:</span><br>          <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-attr">port:</span> <span class="hljs-number">6443</span><br>          <span class="hljs-attr">k0sApiPort:</span> <span class="hljs-number">9443</span><br>          <span class="hljs-attr">sans:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>        <span class="hljs-attr">storage:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">etcd</span><br>        <span class="hljs-attr">network:</span><br>          <span class="hljs-attr">podCIDR:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>          <span class="hljs-attr">serviceCIDR:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>          <span class="hljs-comment"># 这里指定 CNI 为 custom 自定义类型，这样</span><br>          <span class="hljs-comment"># k0s 就不会安装 calico/kube-router 了</span><br>          <span class="hljs-attr">provider:</span> <span class="hljs-string">custom</span><br></code></pre></td></tr></table></figure><h3 id="2-5、上传-k0s-二进制文件"><a href="#2-5、上传-k0s-二进制文件" class="headerlink" title="2.5、上传 k0s 二进制文件"></a>2.5、上传 k0s 二进制文件</h3><p>除了普通文件、镜像压缩包等，默认情况下 k0sctl 在安装集群时还会在目标机器上下载 k0s 二进制文件；当然在离线环境下这一步也可以通过一个简单的配置来实现离线上传:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-comment"># 声明需要上传二进制文件</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定二进制文件位置</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/kube-flannel.yaml</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/manifests/flannel</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0644</span><br><span class="hljs-string">......</span><br></code></pre></td></tr></table></figure><h3 id="2-6、更换镜像版本"><a href="#2-6、更换镜像版本" class="headerlink" title="2.6、更换镜像版本"></a>2.6、更换镜像版本</h3><p>默认情况下 k0s 版本号与 Kubernetes 保持一致，但是如果期望某个组件使用特定的版本，则可以直接配置这些内置组件的镜像名称:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/kube-flannel.yaml</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/manifests/flannel</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0644</span><br><span class="hljs-string">......</span><br>  <span class="hljs-attr">k0s:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.21.2+k0s.1</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0s.k0sproject.io/v1beta1</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br>      <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">k0s</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">api:</span><br>          <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-attr">port:</span> <span class="hljs-number">6443</span><br>          <span class="hljs-attr">k0sApiPort:</span> <span class="hljs-number">9443</span><br>          <span class="hljs-attr">sans:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>        <span class="hljs-comment"># 指定内部组件的镜像使用的版本</span><br>        <span class="hljs-attr">images:</span><br>          <span class="hljs-comment">#konnectivity:</span><br>          <span class="hljs-comment">#  image: us.gcr.io/k8s-artifacts-prod/kas-network-proxy/proxy-agent</span><br>          <span class="hljs-comment">#  version: v0.0.21</span><br>          <span class="hljs-comment">#metricsserver:</span><br>          <span class="hljs-comment">#  image: gcr.io/k8s-staging-metrics-server/metrics-server</span><br>          <span class="hljs-comment">#  version: v0.3.7</span><br>          <span class="hljs-attr">kubeproxy:</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/kube-proxy</span><br>            <span class="hljs-attr">version:</span> <span class="hljs-string">v1.21.3</span><br>          <span class="hljs-comment">#coredns:</span><br>          <span class="hljs-comment">#  image: docker.io/coredns/coredns</span><br>          <span class="hljs-comment">#  version: 1.7.0</span><br>          <span class="hljs-comment">#calico:</span><br>          <span class="hljs-comment">#  cni:</span><br>          <span class="hljs-comment">#    image: docker.io/calico/cni</span><br>          <span class="hljs-comment">#    version: v3.18.1</span><br>          <span class="hljs-comment">#  node:</span><br>          <span class="hljs-comment">#    image: docker.io/calico/node</span><br>          <span class="hljs-comment">#    version: v3.18.1</span><br>          <span class="hljs-comment">#  kubecontrollers:</span><br>          <span class="hljs-comment">#    image: docker.io/calico/kube-controllers</span><br>          <span class="hljs-comment">#    version: v3.18.1</span><br>          <span class="hljs-comment">#kuberouter:</span><br>          <span class="hljs-comment">#  cni:</span><br>          <span class="hljs-comment">#    image: docker.io/cloudnativelabs/kube-router</span><br>          <span class="hljs-comment">#    version: v1.2.1</span><br>          <span class="hljs-comment">#  cniInstaller:</span><br>          <span class="hljs-comment">#    image: quay.io/k0sproject/cni-node</span><br>          <span class="hljs-comment">#    version: 0.1.0</span><br>          <span class="hljs-attr">default_pull_policy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-comment">#default_pull_policy: Never</span><br></code></pre></td></tr></table></figure><h3 id="2-7、调整-master-组件参数"><a href="#2-7、调整-master-组件参数" class="headerlink" title="2.7、调整 master 组件参数"></a>2.7、调整 master 组件参数</h3><p>熟悉 Kubernetes 的应该清楚，master 上三大组件: apiserver、controller、scheduler 管控整个集群；在 k0sctl 安装集群的过程中也允许自定义这些组件的参数，这些调整通过修改使用的 <code>k0sctl.yaml</code> 配置文件完成。</p><ul><li><code>spec.api.extraArgs</code>: 用于自定义 kube-apiserver 的自定义参数(kv map)</li><li><code>spec.scheduler.extraArgs</code>: 用于自定义 kube-scheduler 的自定义参数(kv map)</li><li><code>spec.controllerManager.extraArgs</code>: 用于自定义 kube-controller-manager 自定义参数(kv map)</li><li><code>spec.workerProfiles</code>: 用于覆盖 kubelet-config.yaml 中的配置，该配置最终将于默认的 kubelet-config.yaml 合并</li></ul><p>除此之外在 <code>Host</code> 配置中还有一个 <code>InstallFlags</code> 配置用于传递 k0s 安装时的其他配置选项。</p><h2 id="三、k0s-HA-搭建"><a href="#三、k0s-HA-搭建" class="headerlink" title="三、k0s HA 搭建"></a>三、k0s HA 搭建</h2><blockquote><p>其实上面的第二部分主要都是介绍 k0sctl 一些基础功能，为的就是给下面这部分 HA 生产级部署做铺垫。</p></blockquote><p>就目前来说，k0s HA 仅支持独立负载均衡器的 HA 架构；<strong>即外部需要有一个高可用的 4 层负载均衡器，其他所有 Node 节点链接这个负载均衡器实现 master 的高可用。</strong>在使用 k0sctl 命令搭建 HA 集群时很简单，只需要添加一个外部负载均衡器地址即可；<strong>以下是一个完整的，全离线状态下的 HA 集群搭建配置。</strong></p><h3 id="3-1、外部负载均衡器"><a href="#3-1、外部负载均衡器" class="headerlink" title="3.1、外部负载均衡器"></a>3.1、外部负载均衡器</h3><p><strong>在搭建之前我们假设已经有一个外部的高可用的 4 层负载均衡器，且负载均衡器已经负载了以下端口:</strong></p><ul><li><code>6443(for Kubernetes API)</code>: 负载均衡器 6443 负载所有 master 节点的 6443</li><li><code>9443 (for controller join API)</code>: 负载均衡器 9443 负载所有 master 节点的 9443</li><li><code>8132 (for Konnectivity agent)</code>: 负载均衡器 8132 负载所有 master 节点的 8132</li><li><code>8133 (for Konnectivity server)</code>: 负载均衡器 8133 负载所有 master 节点的 8133</li></ul><p>以下为一个 nginx 4 层代理的样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sh">error_log syslog:server=unix:/dev/log notice;<br><br>worker_processes auto;<br>events &#123;<br>multi_accept on;<br>use epoll;<br>worker_connections 1024;<br>&#125;<br><br>stream &#123;<br>    upstream kube_apiserver &#123;<br>        least_conn;<br>        server 10.0.0.11:6443;<br>        server 10.0.0.12:6443;<br>        server 10.0.0.13:6443;<br>    &#125;<br>    upstream konnectivity_agent &#123;<br>        least_conn;<br>        server 10.0.0.11:8132;<br>        server 10.0.0.12:8132;<br>        server 10.0.0.13:8132;<br>    &#125;<br>    upstream konnectivity_server &#123;<br>        least_conn;<br>        server 10.0.0.11:8133;<br>        server 10.0.0.12:8133;<br>        server 10.0.0.13:8133;<br>    &#125;<br>    upstream controller_join_api &#123;<br>        least_conn;<br>        server 10.0.0.11:9443;<br>        server 10.0.0.12:9443;<br>        server 10.0.0.13:9443;<br>    &#125;<br>    <br>    server &#123;<br>        listen        0.0.0.0:6443;<br>        proxy_pass    kube_apiserver;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>    server &#123;<br>        listen        0.0.0.0:8132;<br>        proxy_pass    konnectivity_agent;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>    server &#123;<br>        listen        0.0.0.0:8133;<br>        proxy_pass    konnectivity_server;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>    server &#123;<br>        listen        0.0.0.0:9443;<br>        proxy_pass    controller_join_api;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2、搭建-HA-集群"><a href="#3-2、搭建-HA-集群" class="headerlink" title="3.2、搭建 HA 集群"></a>3.2、搭建 HA 集群</h3><p>以下为 k0sctl 的 HA + 离线部署样例配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0sctl.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s-cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-comment"># role 支持的值</span><br>    <span class="hljs-comment"># &#x27;controller&#x27; 单 master</span><br>    <span class="hljs-comment"># &#x27;worker&#x27; 单 worker</span><br>    <span class="hljs-comment"># &#x27;controller+worker&#x27; master 和 worker 都运行 </span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <br>    <span class="hljs-comment"># 从本地 上传 k0s bin 文件，不要在目标机器下载</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <br>    <span class="hljs-comment"># 上传其他文件</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-comment"># 上传 flannel 配置，使用自定的 flannel 替换内置的 calico</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/kube-flannel.yaml</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/manifests/flannel</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0644</span><br>    <br>    <span class="hljs-comment"># 上传打包好的 image 镜像包，k0s 会自动导入到 containerd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>    <br>    <span class="hljs-comment"># 使用 flannel 后每个机器要上传对应的 CNI 插件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">controller+worker</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">worker</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ssh:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">keyPath:</span> <span class="hljs-string">/Users/bleem/.ssh/id_rsa</span><br>    <span class="hljs-attr">role:</span> <span class="hljs-string">worker</span><br>    <span class="hljs-attr">uploadBinary:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">k0sBinaryPath:</span> <span class="hljs-string">/Users/bleem/tmp/k0s</span><br>    <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">image-bundle</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/bundle_file</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/var/lib/k0s/images/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-plugins</span><br>      <span class="hljs-attr">src:</span> <span class="hljs-string">/Users/bleem/tmp/cni-plugins/*</span><br>      <span class="hljs-attr">dstDir:</span> <span class="hljs-string">/opt/cni/bin/</span><br>      <span class="hljs-attr">perm:</span> <span class="hljs-number">0755</span><br>  <span class="hljs-attr">k0s:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.21.2+k0s.1</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0s.k0sproject.io/v1beta1</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br>      <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">k0s</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">api:</span><br>          <span class="hljs-comment"># 此处填写外部的负载均衡器地址，所有 kubelet 会链接这个地址</span><br>          <span class="hljs-attr">externalAddress:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.20</span><br>          <span class="hljs-comment"># 不要忘了为外部负载均衡器添加 api 证书的 SAN</span><br>          <span class="hljs-attr">sans:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.20</span><br>        <span class="hljs-comment"># 存储类型使用 etcd，etcd 集群由 k0s 自动管理</span><br>        <span class="hljs-attr">storage:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">etcd</span><br>        <span class="hljs-attr">network:</span><br>          <span class="hljs-attr">podCIDR:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>          <span class="hljs-attr">serviceCIDR:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>          <span class="hljs-comment"># 网络插件使用 custom，然后让 flannel 接管</span><br>          <span class="hljs-attr">provider:</span> <span class="hljs-string">custom</span><br>          <span class="hljs-attr">kubeProxy:</span><br>            <span class="hljs-attr">disabled:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-comment"># 开启 kubelet 的 ipvs 模式</span><br>            <span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><br>        <span class="hljs-comment"># 不发送任何匿名统计信息</span><br>        <span class="hljs-attr">telemetry:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">images:</span><br>          <span class="hljs-attr">default_pull_policy:</span> <span class="hljs-string">IfNotPresent</span><br></code></pre></td></tr></table></figure><p>最后只需要执行 <code>k0sctl apply -c k0sctl.yaml</code> 稍等几分钟集群就搭建好了，安装过程中可以看到相关文件的上传流程:</p><p><img src="https://cdn.oss.link/markdown/4rQzJU.png"></p><h3 id="3-3、证书续签和管理"><a href="#3-3、证书续签和管理" class="headerlink" title="3.3、证书续签和管理"></a>3.3、证书续签和管理</h3><p>kubeadm 集群默认证书有效期是一年，到期要通过 kubeadm 重新签署；k0s 集群也差不多一样，但是不同的是 k0s 集群更加暴力；<strong>只要 CA(默认 10年) 不丢，k0s 每次重启都强行重新生成一年有效期的证书，所以在 HA 的环境下，快到期时重启一下 k0s 服务就行。</strong></p><p><strong>k0sctl 安装完的集群默认只有一个 <code>k0scontroller.service</code> 服务，master、node 上所有服务都由这个服务启动，所以到期之前 <code>systemctl restart k0scontroller.service</code> 一下就行。</strong></p><h2 id="四、集群备份和恢复"><a href="#四、集群备份和恢复" class="headerlink" title="四、集群备份和恢复"></a>四、集群备份和恢复</h2><p>k0sctl 提供了集群备份和恢复功能，默认情况下只需要执行 <code>k0sctl backup</code> 即可完成集群备份，该命令会在当前目录下生成一个 <code>k0s_backup_TIMESTAMP.tar.gz</code> 备份文件。</p><p>需要恢复集群时使用 <code>k0sctl apply --restore-from k0s_backup_TIMESTAMP.tar.gz</code> 命令进行恢复即可；需要注意的是恢复命令等同于在新机器重新安装集群，所以有一定风险。</p><p><strong>经过连续两天的测试，感觉这个备份恢复功能并不算靠谱，还是推荐使用 Velero 备份集群。</strong></p><h2 id="五、其他高级功能"><a href="#五、其他高级功能" class="headerlink" title="五、其他高级功能"></a>五、其他高级功能</h2><h3 id="5-1、Etcd-替换"><a href="#5-1、Etcd-替换" class="headerlink" title="5.1、Etcd 替换"></a>5.1、Etcd 替换</h3><p>在小规模集群场景下可能并不需要特别完善的 Etcd 作为存储，k0s 借助于 kine 库可以实现使用 SQLite 或 MySQL 等传统数据库作为集群存储；如果想要切换存储只需要调整 <code>k0sctl.yaml</code> 配置即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k0s.k0sproject.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k0s</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storage:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">kine</span><br>    <span class="hljs-attr">kine:</span><br>      <span class="hljs-attr">dataSource:</span> <span class="hljs-string">&quot;sqlite:///var/lib/k0s/db/state.db?more=rwc&amp;_journal=WAL&amp;cache=shared&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2、集群用户管理"><a href="#5-2、集群用户管理" class="headerlink" title="5.2、集群用户管理"></a>5.2、集群用户管理</h3><p>使用 k0sctl 搭建的集群通过 <code>k0s</code> 命令可以很方便的为集群添加用户，以下是添加样例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">k0s kubeconfig create --<span class="hljs-built_in">groups</span> <span class="hljs-string">&quot;system:masters&quot;</span> testUser &gt; k0s.config<br></code></pre></td></tr></table></figure><h3 id="5-3、Containerd-配置"><a href="#5-3、Containerd-配置" class="headerlink" title="5.3、Containerd 配置"></a>5.3、Containerd 配置</h3><p>在不做配置的情况下 k0s 集群使用默认的 Containerd 配置，如果需要自己定义特殊配置，可以在安装时通过文件上传方式将 Containerd 配置文件上传到 <code>/etc/k0s/containerd.toml</code> 位置，该配置将会被 k0s 启动的 Containerd 读取并使用。</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>k0s 是个不错的项目，对于二进制宿主机部署 Kubernetes 集群很方便，由于其直接采用 Kubernetes 二进制文件启动，所以基本没有功能阉割，而 k0sctl 又为自动化安装提供了良好的扩展性，所以值得一试。不过目前来说 k0s 在细节部分还有一定瑕疵，比如 <code>konnectivity</code> 服务在安装时无法选择性关闭等；k0s 综合来说是个不错的工具，也推荐看看源码，里面很多设计很新颖也比较利于了解集群引导过程。</p>]]></content>
    
    
    <summary type="html">发现一个宿主机二进制部署 Kubernetes 的好工具 -&gt; k0s</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="k0s" scheme="https://mritd.com/tags/k0s/"/>
    
  </entry>
  
  <entry>
    <title>Caddy2 file server 自动重定向问题</title>
    <link href="https://mritd.com/2021/07/02/fix-caddy2-fileserver-auto-redirect/"/>
    <id>https://mritd.com/2021/07/02/fix-caddy2-fileserver-auto-redirect/</id>
    <published>2021-07-02T08:44:00.000Z</published>
    <updated>2021-07-02T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、事情起因"><a href="#一、事情起因" class="headerlink" title="一、事情起因"></a>一、事情起因</h2><p>自打很多年前开始使用静态博客工具来发布博客，现在基本上博客源码编译后就是一堆 html 等静态文件；一开始使用 nginx 作为静态文件服务器，后来切换到的 Caddy2；不过最近在 Google Search Console 中发现了大量的无效链接，给出的提示是 “网页会自动重定向”。</p><p><img src="https://cdn.oss.link/markdown/V71ZCH.png"></p><p>经过测试后发现这些链接地址在访问时都会重定向一下，然后在结尾加上 <code>/</code>；没办法我就开始探索这个 <code>/</code> 是怎么来的了。</p><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><p>没办法，也不知道那个配置影响的，只能去翻 file server 的源码，在几经查找之后找到了以下代码(而且还带着注释):</p><p><img src="https://cdn.oss.link/markdown/LbCAVp.png"></p><p>从代码逻辑上看，只要 <code>*fsrv.CanonicalURIs</code> 这个变量为 <code>true</code>，那么就会触发自动重定像，并在 “目录” 尾部补上 <code>/</code>；注释里也说的很清楚是为了目录规范化，如果想看详细讨论可以参考那两个 issue。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="3-1、Admin-API"><a href="#3-1、Admin-API" class="headerlink" title="3.1、Admin API"></a>3.1、Admin API</h3><p>翻了这个 <code>*fsrv.CanonicalURIs</code> 变量以后，突然发现 Caddyfile 里其实是不支持这个配置的；所以比较 low 的办法就是利用 Admin API，先把 json 弄出来，然后加上配置再。POST 回去:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs diff">&#123;<br>&quot;apps&quot;: &#123;<br>&quot;http&quot;: &#123;<br>&quot;servers&quot;: &#123;<br>&quot;srv0&quot;: &#123;<br>&quot;listen&quot;: [<br>&quot;:80&quot;<br>],<br>&quot;routes&quot;: [<br>&#123;<br>&quot;handle&quot;: [<br>&#123;<br><span class="hljs-addition">+&quot;canonical_uris&quot;: false,</span><br>&quot;handler&quot;: &quot;file_server&quot;,<br>&quot;hide&quot;: [<br>&quot;./Caddyfile&quot;<br>]<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -XPOST http://localhost:2019/load -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -d @caddy.json<br></code></pre></td></tr></table></figure><h3 id="3-2、升级版本"><a href="#3-2、升级版本" class="headerlink" title="3.2、升级版本"></a>3.2、升级版本</h3><p>现在可以直接从 master 构建 Caddy，或者等待 <code>v2.4.4</code> 版本发布，这两种方式产生的 Caddy 二进制文件已经支持了这个配置选项，配置样例如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">:<span class="hljs-number">80</span><br><br>file_server &#123;<br>disable_canonical_uris<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Google Search Console 上看到好多无效链接，说我博客很多链接自动重定向了，研究半天发现是 Caddy2 的 file_server 问题，折腾两天顺手 PR 一下。</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    <category term="Caddy" scheme="https://mritd.com/categories/golang/caddy/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>Caddyfile 语法浅析</title>
    <link href="https://mritd.com/2021/06/30/understand-caddyfile-syntax/"/>
    <id>https://mritd.com/2021/06/30/understand-caddyfile-syntax/</id>
    <published>2021-06-30T09:28:00.000Z</published>
    <updated>2021-06-30T09:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>发现大部分人在切换 Caddy 时遇到的比较大的困难就是这个 Caddyfile 不知道怎么写，一开始我也是很懵逼的状态，今天决定写写这个 Caddyfile 配置语法，顺便自己也完整的学学。</p></blockquote><h2 id="一、Caddy-配置体系"><a href="#一、Caddy-配置体系" class="headerlink" title="一、Caddy 配置体系"></a>一、Caddy 配置体系</h2><p>在 Caddy1 时代，Caddy 自创了一种被称之为 Caddyfile 的配置文件格式，当然可以理解为创造了一种语法，这里面深入的说就涉及到了编译原理相关知识，这里不再展开细谈(因为我也不会)；Caddyfile 由内部的语法解析器进行语法、词法分析最后 “序列化” 到 Go 的配置结构体中。</p><p>随着 Caddy 壮大，到了 Caddy2 时代人们已经并不满足于单纯的 Caddyfile 配置，因为学习 Caddyfile 是有代价的，负载均衡器选型的切换本身就代价很大，还要去花心思学习 Caddyfile 语法，这无异非常痛苦。<strong>所以 Caddy2 在经过取舍过后决定使用 json 作为内部标准配置，然后其他类型的配置通过 <code>Config Adapters</code> 将其转换为 json 再使用，而 Caddyfile 的 Adapter 作为官方支持的内置 Adapter 存在。</strong></p><p><strong>最终要说明的是: Caddyfile 里支持哪些指令是由 Caddyfile 的 Adapter 决定的，内部的 json 配置对应的指令名称可能跟 Caddyfile 不同，也可能内部 json 支持一些指令，而 Caddyfile 根本不支持。</strong></p><h2 id="二、Caddyfile-基本结构"><a href="#二、Caddyfile-基本结构" class="headerlink" title="二、Caddyfile 基本结构"></a>二、Caddyfile 基本结构</h2><p><strong>开局一张图，文章全靠编(下面是官方的语法结构图)</strong></p><p><img src="https://cdn.oss.link/markdown/HUABKX.jpg"></p><h3 id="2-1、全局选项"><a href="#2-1、全局选项" class="headerlink" title="2.1、全局选项"></a>2.1、全局选项</h3><p>在一个 Caddyfile 内(空白文本文件)，<strong>如果仅以两个大括号括起来的配置就是全局配置项</strong>，例如下面的配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br>debug<br>http_port  8080<br>https_port 8443<br>&#125;<br></code></pre></td></tr></table></figure><p>那么一共有哪些<strong>全局配置项</strong>呢？当然是看 <a href="https://caddyserver.com/docs/caddyfile/options">官方文档</a>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;<br><span class="hljs-comment"># General Options</span><br>debug<br>http_port  &lt;port&gt;<br>https_port &lt;port&gt;<br>order &lt;dir1&gt; first|last|[before|after &lt;dir2&gt;]<br>storage &lt;module_name&gt; &#123;<br>&lt;options...&gt;<br>&#125;<br>storage_clean_interval &lt;duration&gt;<br>admin   off|&lt;addr&gt; &#123;<br>origins &lt;origins...&gt;<br>enforce_origin<br>&#125;<br><span class="hljs-built_in">log</span> [name] &#123;<br>output  &lt;writer_module&gt; ...<br>format  &lt;encoder_module&gt; ...<br>level   &lt;level&gt;<br>include &lt;namespaces...&gt;<br>exclude &lt;namespaces...&gt;<br>&#125;<br>grace_period &lt;duration&gt;<br><br><span class="hljs-comment"># TLS Options</span><br>auto_https off|disable_redirects|ignore_loaded_certs<br>email &lt;yours&gt;<br>default_sni &lt;name&gt;<br>local_certs<br>skip_install_trust<br>acme_ca &lt;directory_url&gt;<br>acme_ca_root &lt;pem_file&gt;<br>acme_eab &lt;key_id&gt; &lt;mac_key&gt;<br>acme_dns &lt;provider&gt; ...<br>on_demand_tls &#123;<br>ask      &lt;endpoint&gt;<br>interval &lt;duration&gt;<br>burst    &lt;n&gt;<br>&#125;<br>key_type ed25519|p256|p384|rsa2048|rsa4096<br>cert_issuer &lt;name&gt; ...<br>ocsp_stapling off<br>preferred_chains [smallest] &#123;<br>root_common_name &lt;common_names...&gt;<br>any_common_name  &lt;common_names...&gt;<br>&#125;<br><br><span class="hljs-comment"># Server Options</span><br>servers [&lt;listener_address&gt;] &#123;<br>listener_wrappers &#123;<br>&lt;listener_wrappers...&gt;<br>&#125;<br>timeouts &#123;<br>read_body   &lt;duration&gt;<br>read_header &lt;duration&gt;<br>write       &lt;duration&gt;<br>idle        &lt;duration&gt;<br>&#125;<br>max_header_size &lt;size&gt;<br>protocol &#123;<br>allow_h2c<br>experimental_http3<br>strict_sni_host<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这些全局配置具体都什么意思这里就不细说了，请自行查阅文档；当然文档也可能并不一定准确，有些兴趣的可以去查看 Caddy 源码，这些都在源码中定义了 <a href="https://github.com/caddyserver/caddy/blob/v2.4.3/caddyconfig/httpcaddyfile/options.go#L28">caddyconfig&#x2F;httpcaddyfile&#x2F;options.go:28</a></p><h3 id="2-2、代码块"><a href="#2-2、代码块" class="headerlink" title="2.2、代码块"></a>2.2、代码块</h3><p>叫代码块可能不太恰当，也可以叫做配置块或配置片段；这是 Caddyfile 比较棒的一个功能，配置片段可以实现类似代码这种引用使用，方便组合配置文件；配置片段的语法如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">(配置片段名字) &#123;<br>    <span class="hljs-comment"># 这里写配置片段的内容</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个配置片段示例(不能运行，只是举例):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 定义一个叫 TLS_INTERMEDIATE 的配置片段</span><br>(TLS_INTERMEDIATE) &#123;<br>    protocols tls1.2 tls1.3<br>    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br>&#125;<br><br>www.mritd.com &#123;<br>    <span class="hljs-comment"># 重定向</span><br>    redir https://mritd.com&#123;uri&#125;<br><br>    <span class="hljs-comment"># 这里引用上面的 TLS_INTERMEDIATE 配置</span><br>    import TLS_INTERMEDIATE<br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法与下面的配置等价，目的就是增加配置的重用和规范化:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">www.mritd.com &#123;<br>    <span class="hljs-comment"># 重定向</span><br>    redir https://mritd.com&#123;uri&#125;<br><br>    protocols tls1.2 tls1.3<br>    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、站点配置"><a href="#2-3、站点配置" class="headerlink" title="2.3、站点配置"></a>2.3、站点配置</h3><p>站点配置是 Caddyfile 的核心中的核心，从开局的图上也可以看到，能在 “Top Level” 上存在的只有三种配置，其中就包含了这个站点配置块，站点配置块格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">站点域名 &#123;<br>    <span class="hljs-comment"># 其他配置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以下是两个合法的站点配置示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">example1.com &#123;<br>root * /www/example.com<br>file_server<br>&#125;<br><br>example2.com &#123;<br>reverse_proxy localhost:9000<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4、自定义匹配器"><a href="#2-4、自定义匹配器" class="headerlink" title="2.4、自定义匹配器"></a>2.4、自定义匹配器</h3><p>请求匹配器是 Caddy 内置的一种针对请求的过滤工具，有点类似于 nginx 配置中的 <code>location /api &#123;...&#125;</code>，只不过 Caddyfile 中的匹配器更加强大；标准的请求匹配器列表如下:</p><ul><li><a href="https://caddyserver.com/docs/caddyfile/matchers#expression">expression</a>: 表达式匹配(<a href="https://github.com/google/cel-spec">CEL</a>)</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#file">file</a>: 文件匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#header">header</a>: 请求头匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#header-regexp">header_regexp</a>: 请求头正则匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#host">host</a>: 域名匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#method">method</a>: HTTP 请求方法匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#not">not</a>: 对其他匹配器取反</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#path">path</a>: 请求路径匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#path-regexp">path_regexp</a>: 请求路径正则匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#protocol">protocol</a>: 请求协议匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#query">query</a>: 请求查询参数匹配</li><li><a href="https://caddyserver.com/docs/caddyfile/matchers#remote-ip">remote_ip</a>: 请求 IP 匹配</li></ul><p>自定义命名匹配器的作用是组合多个标准匹配器，然后实现复用，自定义命名匹配器语法如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"># @ 后面跟一个自定义名称<br>@api &#123;<br>    # 标准匹配器组合<br>    path /api<span class="hljs-comment">/*</span><br><span class="hljs-comment">    host example.com</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>然后这个自定义的命名匹配器可以在其他位置引用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    @api &#123;<br>        # 标准匹配器组合<br>        path /api<span class="hljs-comment">/*</span><br><span class="hljs-comment">        host example.com</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    reverse_proxy @api 127.0.0.1:9000</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="三、Caddyfile-语法细节"><a href="#三、Caddyfile-语法细节" class="headerlink" title="三、Caddyfile 语法细节"></a>三、Caddyfile 语法细节</h2><h3 id="3-1、Blocks"><a href="#3-1、Blocks" class="headerlink" title="3.1、Blocks"></a>3.1、Blocks</h3><p>Caddyfile 中的配置块可以理解为代码中的作用域，其包含两个大括号范围内的所有配置:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">... &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>当 Caddyfile 中只有一个站点配置，且不需要其他全局配置等信息时，Blocks 可以被省略，例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    reverse_proxy /api<span class="hljs-comment">/* localhost:9001</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>这个配置可以直接简写为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com<br><br>reverse_proxy /api<span class="hljs-comment">/* localhost:9001</span><br></code></pre></td></tr></table></figure><p>这么做的目的是方便单站点快速配置，但是一般不常用也不推荐使用。在同一个 Caddyfile 中可以包含多个站点配置，只要地址不同即可:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    ...<br>&#125;<br><br>abcd.com &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2、Directives"><a href="#3-2、Directives" class="headerlink" title="3.2、Directives"></a>3.2、Directives</h3><p>指令是指描述站点配置的一些关键字，例如下面的站点配置文件:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    reverse_proxy /api<span class="hljs-comment">/* localhost:9001</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>在这个配置文件中 <code>reverse_proxy</code> 就是一个指令，同时指令还可能包含子指令(Subdirectives)，下面的配置中 <code>lb_policy</code> 就是 <code>reverse_proxy</code> 的一个子指令:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    reverse_proxy localhost:<span class="hljs-number">9000</span> localhost:<span class="hljs-number">9001</span> &#123;<br>        lb_policy first<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、Tokens-and-quotes"><a href="#3-3、Tokens-and-quotes" class="headerlink" title="3.3、Tokens and quotes"></a>3.3、Tokens and quotes</h3><p>在 Caddyfile 被 Caddy 读取后，Caddy 会将配置文件解析为一个个的 Token；Caddyfile 中所有 Token 都认为是空格分割，所以如果某些指令需要传递参数时我们需要通过合理的空格和引号来确保 Token 正确解析:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    # 这里 localhost:<span class="hljs-number">9000</span> localhost:<span class="hljs-number">9001</span> 空格分割就认为是两个 Token<br>    reverse_proxy localhost:<span class="hljs-number">9000</span> localhost:<span class="hljs-number">9001</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果某些参数需要包含空格，那么需要使用双引号包裹:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    file_server &#123;<br>        # 双引号包裹住有空格的参数<br>        root <span class="hljs-string">&quot;/data/Application Data/html&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果这个参数里需要包含双引号，只需要通过反斜线转义即可，例如 <code>&quot;\&quot;a b\&quot;&quot;</code>；如果有太多的双引号或者空格，可以使用 Go 语言中类似的反引号来定义 “绝对字符串”:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com &#123;<br>    file_server &#123;<br>        # 反引号包裹<br>        root <span class="hljs-string">`/data/Application Data/html`</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、Addresses"><a href="#3-4、Addresses" class="headerlink" title="3.4、Addresses"></a>3.4、Addresses</h3><p>Caddyfile 中的地址其实是一种很宽泛的格式，在上面讲站点配置时其实前面的字符串并不一定是域名，准确的说应该是地址:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">地址 &#123;<br>    # 站点具体配置<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Caddyfile 中以下格式全部都是合法的地址:</p><ul><li><code>localhost</code></li><li><code>example.com</code></li><li><code>:443</code></li><li><code>http://example.com</code></li><li><code>localhost:8080</code></li><li><code>127.0.0.1</code></li><li><code>[::1]:2015</code></li><li><code>example.com/foo/*</code></li><li><code>*.example.com</code></li><li><code>http://</code></li></ul><p><strong>需要注意的是: 自动 HTTPS 是 Caddy 服务器的一个重要特性，但是自动 HTTPS 会隐式进行，除非在地址中明确的写明 <code>http://example.com</code> 这种格式时 Caddy 才会单纯监听 HTTP 协议，否则域名格式的地址 Caddy 都会进行 HTTPS 证书申请。</strong></p><p>如果地址中指定了域名，那么只有匹配到域名的请求才会接受；例如地址为 <code>localhost</code> 的站点不会响应 <code>127.0.0.1</code> 方式的访问请求。同时地址中可以采用 <code>*</code> 作为通配符，通配符作用域仅在域名的英文句号 <code>.</code> 之内，意思就是说 <code>*.example.com</code> 会匹配 <code>test.example.com</code> 但不会匹配 <code>abc.test.example.com</code>。</p><p>如果多个域名&#x2F;地址共享一个站点配置，可以采用英文逗号分隔的方式写在一起:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">example.com,www.example.com,localhost,<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> &#123;<br>    file_server &#123;<br>        root /data/html<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5、Matchers"><a href="#3-5、Matchers" class="headerlink" title="3.5、Matchers"></a>3.5、Matchers</h3><p>匹配器其实在第一部分已经介绍过，这里仅做一下简单说明；匹配器一般紧跟在指令之后，其大致格式分为以下三种:</p><ul><li><code>*</code>: 匹配所有请求(通配符)</li><li><code>/path</code>: 匹配特定路径</li><li><code>@name</code>: 自定义命名匹配器</li></ul><p>匹配器的用法样例如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"># 自定义一个叫 websockets 的匹配器<br>@websockets &#123;<br>    # 匹配请求头 Connection 中包含 Upgrade 的请求<br>    header Connection *Upgrade*<br>    <br>    # 匹配请求头 Upgrade 为 websocket 的请求<br>    header Upgrade    websocket<br>&#125;<br><br># 反向代理时使用 @websockets 匹配器<br>reverse_proxy @websockets localhost:<span class="hljs-number">6001</span><br></code></pre></td></tr></table></figure><p>具体更细节的官方匹配器使用限于篇幅这里不再详细说明，请自行阅读 <a href="https://caddyserver.com/docs/caddyfile/matchers">官方文档</a></p><h3 id="3-6、Placeholders"><a href="#3-6、Placeholders" class="headerlink" title="3.6、Placeholders"></a>3.6、Placeholders</h3><p>占位符可以理解为 Caddyfile 内部的变量替换符号，占位符同样以大括号包裹，同时支持转义:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"># 标准占位符<br>&#123;system.hostname&#125;<br><br># 避免冲突可进行转义<br>\&#123;system.hostname\&#125;<br></code></pre></td></tr></table></figure><p>Caddyfile 内部可用的占位符有很多，但是并非在所有情况下都可用，比如 HTTP 相关的占位符仅在处理 HTTP 请求相关配置中才可用；同时占位符也支持简写，下面是官方目前支持的占位符列表:</p><p><img src="https://cdn.oss.link/markdown/MMqfJ4.png"></p><h3 id="3-7、Snippets"><a href="#3-7、Snippets" class="headerlink" title="3.7、Snippets"></a>3.7、Snippets</h3><p>片段上面也介绍过了，这里说一下片段更高级的用法: <strong>支持参数传递</strong>；下面是定义一个通用日志格式，然后通过参数引用实现不同站点使用不同日志文件的配置:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">(LOG_COMMON) &#123;<br>    log &#123;<br>        format formatted <span class="hljs-string">&quot;[&#123;ts&#125;] &#123;request&gt;remote_addr&#125; &#123;request&gt;proto&#125; &#123;request&gt;method&#125; &lt;- &#123;status&#125; -&gt; &#123;request&gt;host&#125; &#123;request&gt;uri&#125; &#123;request&gt;headers&gt;User-Agent&gt;[0]&#125;&quot;</span>  &#123;<br>            time_format <span class="hljs-string">&quot;iso8601&quot;</span><br>        &#125;<br>        <br>        # &#123;args<span class="hljs-number">.0</span>&#125; 声明引用传入的第一个参数<br>        output file <span class="hljs-string">&quot;&#123;args.0&#125;&quot;</span> &#123;<br>            roll_size <span class="hljs-number">100</span>mb<br>            roll_keep <span class="hljs-number">3</span><br>            roll_keep_for <span class="hljs-number">7</span>d<br>        &#125;<br>    &#125;<br>&#125;<br><br>example.com &#123;<br>    # 此时 /data/log/example.com.log 作为 <span class="hljs-string">&quot;&#123;args.0&#125;&quot;</span> 被传入<br>    <span class="hljs-keyword">import</span> LOG_COMMON /data/log/example.com.log<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-8、Comments"><a href="#3-8、Comments" class="headerlink" title="3.8、Comments"></a>3.8、Comments</h3><p>注释没啥好说的，以 <code>#</code> 作为开头就行了。</p><h3 id="3-9、Environment-variables"><a href="#3-9、Environment-variables" class="headerlink" title="3.9、Environment variables"></a>3.9、Environment variables</h3><p>环境变量和占位符类似，不同的是占位符是 Caddyfile 内置的变量，而环境变量是引用系统环境变量；环境变量的使用格式如下(推荐全大写):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"># 引用一个叫 SITE_ADDRESS 的环境变量<br>&#123;$SITE_ADDRESS&#125; &#123;<br>    # 站点具体配置...<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置在 Caddy 启动时会读取 <code>SITE_ADDRESS</code> 作为监听地址，如果 <code>SITE_ADDRESS</code> 读取不到则会报错退出；如果想要为 <code>SITE_ADDRESS</code> 设置默认值，那么只需要使用如下格式即可:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;$SITE_ADDRESS:localhost&#125; &#123;<br>    # 站点具体配置...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、其他补充"><a href="#四、其他补充" class="headerlink" title="四、其他补充"></a>四、其他补充</h2><p>Caddyfile 并不是万能的，但是 Caddyfile 因为更易于编写和维护所以使用比较广泛；在第一部分介绍 Caddy 的配置文件体系时已经说明了，实际上 Caddy 内部是使用 json 作为配置的；这时就可能出现一些极端情况，比如说真的某个配置只能通过 json 配置，那么这时候可以考虑先通过 json 管理 API 进行动态修改，然后再去向官方发 issue，有能力也可以直接 PR；API 动态修改的流程如下:</p><p>首先假设你已经有一个能够正常启动的 Caddyfile，但是某个配置选项不支持，这时候你可以通过 API 获取内部的 json 配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 结尾一定要有 /</span><br>➜ ~ curl localhost:2019/config/<br>&#123;<span class="hljs-string">&quot;apps&quot;</span>:&#123;<span class="hljs-string">&quot;http&quot;</span>:&#123;<span class="hljs-string">&quot;servers&quot;</span>:&#123;<span class="hljs-string">&quot;srv0&quot;</span>:&#123;<span class="hljs-string">&quot;listen&quot;</span>:[<span class="hljs-string">&quot;:80&quot;</span>],<span class="hljs-string">&quot;routes&quot;</span>:[&#123;<span class="hljs-string">&quot;handle&quot;</span>:[&#123;<span class="hljs-string">&quot;canonical_uris&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;handler&quot;</span>:<span class="hljs-string">&quot;file_server&quot;</span>,<span class="hljs-string">&quot;hide&quot;</span>:[<span class="hljs-string">&quot;./Caddyfile&quot;</span>]&#125;]&#125;]&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>得到这个配置以后，你可以通过格式化工具格式化 json，然后添加特定选项，再将其保存到一个配置文件中，然后重新 load 回去即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 假设修改后的 json 文件叫 caddy.json</span><br>➜ ~ curl -XPOST http://localhost:2019/load -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -d @caddy.json<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">发现大部分人在切换 Caddy 时遇到的比较大的困难就是这个 Caddyfile 不知道怎么写，一开始我也是很懵逼的状态，今天决定写写这个 Caddyfile 配置语法，顺便自己也完整的学学。</summary>
    
    
    
    <category term="Caddy" scheme="https://mritd.com/categories/caddy/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
    <category term="Caddyfile" scheme="https://mritd.com/tags/caddyfile/"/>
    
  </entry>
  
  <entry>
    <title>Golang Context 源码分析</title>
    <link href="https://mritd.com/2021/06/27/golang-context-source-code/"/>
    <id>https://mritd.com/2021/06/27/golang-context-source-code/</id>
    <published>2021-06-27T07:57:00.000Z</published>
    <updated>2021-06-27T07:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文所有源码分析基于 Go 1.16.4，阅读时请自行切换版本。</p></blockquote><h2 id="一、Context-介绍"><a href="#一、Context-介绍" class="headerlink" title="一、Context 介绍"></a>一、Context 介绍</h2><p>标准库中的 Context 是一个接口，其具体实现有很多种；Context 在 Go 1.7 中被添加入标准库，主要用于跨多个 Goroutine 设置截止时间、同步信号、传递上下文请求值等。</p><p>由于需要跨多个 Goroutine 传递信号，所以多个 Context 往往需要关联到一起，形成类似一个树的结构。这种树状的关联关系需要有一个根(root) Context，然后其他 Context 关联到 root Context 成为它的子(child) Context；这种关联可以是多级的，所以在角色上 Context 分为三种: </p><ul><li>root(根) Context</li><li>parent(父) Context</li><li>child(子) Context</li></ul><h2 id="二、Context-类型"><a href="#二、Context-类型" class="headerlink" title="二、Context 类型"></a>二、Context 类型</h2><h3 id="2-1、Context-的创建"><a href="#2-1、Context-的创建" class="headerlink" title="2.1、Context 的创建"></a>2.1、Context 的创建</h3><p>标准库中定义的 Context 创建方法大致如下:</p><ul><li>context.Background(): 该方法用于创建 root Context，且不可取消</li><li>context.TODO(): 该方法同样用于创建 root Context(不准确)，也不可取消，TODO 通常代表不知道要使用哪个 Context，所以后面可能有调整</li><li>context.WithCancel(parent Context): 从 parent Context 创建一个带有取消方法的 child Context，该 Context 可以手动调用 cancel</li><li>context.WithDeadline(parent Context, d time.Time): 从 parent Context 创建一个带有取消方法的 child Context，不同的是当到达 d 时间后该 Context 将自动取消</li><li>context.WithTimeout(parent Context, timeout time.Duration): 与 WithDeadline 类似，只不过指定的是一个从当前时间开始的超时时间</li><li>context.WithValue(parent Context, key, val interface{}): 从 parent Context 创建一个 child Context，该 Context 可以存储一个键值对，同时这是一个不可取消的 Context</li></ul><h3 id="2-2、Context-内部类型"><a href="#2-2、Context-内部类型" class="headerlink" title="2.2、Context 内部类型"></a>2.2、Context 内部类型</h3><p>在阅读源码后会发现，Context 各种创建方法其实主要只使用到了 4 种类型的 Context 实现:</p><h4 id="2-2-1、emptyCtx"><a href="#2-2-1、emptyCtx" class="headerlink" title="2.2.1、emptyCtx"></a>2.2.1、emptyCtx</h4><p><code>emptyCtx</code> 实际上就是个 int，其对 Context 接口的主要实现(<code>Deadline</code>、<code>Done</code>、<code>Err</code>、<code>Value</code>)全部返回了 <code>nil</code>，也就是说其实是一个 “啥也不干” 的 Context；<strong>它通常用于创建 root Context，标准库中 <code>context.Background()</code> 和 <code>context.TODO()</code> 返回的就是这个 <code>emptyCtx</code>。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// An emptyCtx is never canceled, has no values, and has no deadline. It is not</span><br><span class="hljs-comment">// struct&#123;&#125;, since vars of this type must have distinct addresses.</span><br><span class="hljs-keyword">type</span> emptyCtx <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Err() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Value(key <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *emptyCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> e &#123;<br><span class="hljs-keyword">case</span> background:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;context.Background&quot;</span><br><span class="hljs-keyword">case</span> todo:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;context.TODO&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unknown empty Context&quot;</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>background = <span class="hljs-built_in">new</span>(emptyCtx)<br>todo       = <span class="hljs-built_in">new</span>(emptyCtx)<br>)<br><br><span class="hljs-comment">// Background returns a non-nil, empty Context. It is never canceled, has no</span><br><span class="hljs-comment">// values, and has no deadline. It is typically used by the main function,</span><br><span class="hljs-comment">// initialization, and tests, and as the top-level Context for incoming</span><br><span class="hljs-comment">// requests.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Background</span><span class="hljs-params">()</span></span> Context &#123;<br><span class="hljs-keyword">return</span> background<br>&#125;<br><br><span class="hljs-comment">// TODO returns a non-nil, empty Context. Code should use context.TODO when</span><br><span class="hljs-comment">// it&#x27;s unclear which Context to use or it is not yet available (because the</span><br><span class="hljs-comment">// surrounding function has not yet been extended to accept a Context</span><br><span class="hljs-comment">// parameter).</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TODO</span><span class="hljs-params">()</span></span> Context &#123;<br><span class="hljs-keyword">return</span> todo<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2、cancelCtx"><a href="#2-2-2、cancelCtx" class="headerlink" title="2.2.2、cancelCtx"></a>2.2.2、cancelCtx</h4><p><code>cancelCtx</code> 内部包含一个 <code>Context</code> 接口实例，还有一个 <code>children map[canceler]struct&#123;&#125;</code>；这两个变量的作用就是保证 <code>cancelCtx</code> 可以在 parent Context 和 child Context 两种角色之间转换:</p><ul><li>作为其他 Context 实例的 parent Context 时，将其他 Context 实例存储在 <code>children map[canceler]struct&#123;&#125;</code> 中建立关联关系</li><li>作为其他 Context 实例的 child Context 时，将其他 Context 实例存储在 “Context” 变量里建立关联</li></ul><p><strong><code>cancelCtx</code> 被定义为一个可以取消的 Context，而由于 Context 的树形结构，当作为 parent Context 取消时需要同步取消节点下所有 child Context，这时候只需要遍历 <code>children map[canceler]struct&#123;&#125;</code> 然后逐个取消即可。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A cancelCtx can be canceled. When canceled, it also cancels any children</span><br><span class="hljs-comment">// that implement canceler.</span><br><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br><br>mu       sync.Mutex            <span class="hljs-comment">// protects following fields</span><br>done     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;         <span class="hljs-comment">// created lazily, closed by first cancel call</span><br>children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// set to nil by the first cancel call</span><br>err      <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Value(key <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> key == &amp;cancelCtxKey &#123;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><span class="hljs-keyword">return</span> c.Context.Value(key)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.done == <span class="hljs-literal">nil</span> &#123;<br>c.done = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>d := c.done<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> d<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> Err() <span class="hljs-type">error</span> &#123;<br>c.mu.Lock()<br>err := c.err<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">type</span> stringer <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">contextName</span><span class="hljs-params">(c Context)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> s, ok := c.(stringer); ok &#123;<br><span class="hljs-keyword">return</span> s.String()<br>&#125;<br><span class="hljs-keyword">return</span> reflectlite.TypeOf(c).String()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.Context) + <span class="hljs-string">&quot;.WithCancel&quot;</span><br>&#125;<br><br><span class="hljs-comment">// cancel closes c.done, cancels each of c&#x27;s children, and, if</span><br><span class="hljs-comment">// removeFromParent is true, removes c from its parent&#x27;s children.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// already canceled</span><br>&#125;<br>c.err = err<br><span class="hljs-keyword">if</span> c.done == <span class="hljs-literal">nil</span> &#123;<br>c.done = closedchan<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">close</span>(c.done)<br>&#125;<br><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child.cancel(<span class="hljs-literal">false</span>, err)<br>&#125;<br>c.children = <span class="hljs-literal">nil</span><br>c.mu.Unlock()<br><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c.Context, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3、timerCtx"><a href="#2-2-3、timerCtx" class="headerlink" title="2.2.3、timerCtx"></a>2.2.3、timerCtx</h4><p><code>timerCtx</code> 实际上是在 <code>cancelCtx</code> 之上构建的，唯一的区别就是增加了计时器和截止时间；<strong>有了这两个配置以后就可以在特定时间进行自动取消，<code>WithDeadline(parent Context, d time.Time)</code> 和 <code>WithTimeout(parent Context, timeout time.Duration)</code> 方法返回的都是这个 <code>timerCtx</code>。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span><br><span class="hljs-comment">// implement Done and Err. It implements cancel by stopping its timer then</span><br><span class="hljs-comment">// delegating to cancelCtx.cancel.</span><br><span class="hljs-keyword">type</span> timerCtx <span class="hljs-keyword">struct</span> &#123;<br>cancelCtx<br>timer *time.Timer <span class="hljs-comment">// Under cancelCtx.mu.</span><br><br>deadline time.Time<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">return</span> c.deadline, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.cancelCtx.Context) + <span class="hljs-string">&quot;.WithDeadline(&quot;</span> +<br>c.deadline.String() + <span class="hljs-string">&quot; [&quot;</span> +<br>time.Until(c.deadline).String() + <span class="hljs-string">&quot;])&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>c.cancelCtx.cancel(<span class="hljs-literal">false</span>, err)<br><span class="hljs-keyword">if</span> removeFromParent &#123;<br><span class="hljs-comment">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>removeChild(c.cancelCtx.Context, c)<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.timer != <span class="hljs-literal">nil</span> &#123;<br>c.timer.Stop()<br>c.timer = <span class="hljs-literal">nil</span><br>&#125;<br>c.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-4、valueCtx"><a href="#2-2-4、valueCtx" class="headerlink" title="2.2.4、valueCtx"></a>2.2.4、valueCtx</h4><p><code>valueCtx</code> 内部同样包含了一个 <code>Context</code> 接口实例，目的也是可以作为 child Context，同时为了保证其 “Value” 特性，其内部包含了两个无限制变量 <code>key, val interface&#123;&#125;</code>；<strong>在调用 <code>valueCtx.Value(key interface&#123;&#125;)</code> 会进行递归向上查找，但是这个查找只负责查找 “直系” Context，也就是说可以无限递归查找 parent Context 是否包含这个 key，但是无法查找兄弟 Context 是否包含。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// A valueCtx carries a key-value pair. It implements Value for that key and</span><br><span class="hljs-comment">// delegates all other calls to the embedded Context.</span><br><span class="hljs-keyword">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br>key, val <span class="hljs-keyword">interface</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// stringify tries a bit to stringify v, without using fmt, since we don&#x27;t</span><br><span class="hljs-comment">// want context depending on the unicode tables. This is only used by</span><br><span class="hljs-comment">// *valueCtx.String().</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringify</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> s := v.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> stringer:<br><span class="hljs-keyword">return</span> s.String()<br><span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br><span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;not Stringer&gt;&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *valueCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.Context) + <span class="hljs-string">&quot;.WithValue(type &quot;</span> +<br>reflectlite.TypeOf(c.key).String() +<br><span class="hljs-string">&quot;, val &quot;</span> + stringify(c.val) + <span class="hljs-string">&quot;)&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *valueCtx)</span></span> Value(key <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> c.key == key &#123;<br><span class="hljs-keyword">return</span> c.val<br>&#125;<br><span class="hljs-keyword">return</span> c.Context.Value(key)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、cancelCtx-源码分析"><a href="#三、cancelCtx-源码分析" class="headerlink" title="三、cancelCtx 源码分析"></a>三、cancelCtx 源码分析</h2><h3 id="3-1、cancelCtx-是如何被创建的"><a href="#3-1、cancelCtx-是如何被创建的" class="headerlink" title="3.1、cancelCtx 是如何被创建的"></a>3.1、cancelCtx 是如何被创建的</h3><p>cancelCtx 在调用 <code>context.WithCancel</code> 方法时创建(暂不考虑其他衍生类型)，创建方法比较简单:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCancel</span><span class="hljs-params">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;<br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>c := newCancelCtx(parent)<br>propagateCancel(parent, &amp;c)<br><span class="hljs-keyword">return</span> &amp;c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>newCancelCtx</code> 方法就是将 parent Context 设置到内部变量中，<strong>值得分析的是 <code>propagateCancel(parent, &amp;c)</code> 方法和被其调用的 <code>parentCancelCtx(parent Context) (*cancelCtx, bool)</code> 方法，这两个方法保证了 Context 链可以从顶端到底端的及联 cancel</strong>，关于这两个方法的分析如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class="hljs-comment">// propagateCancel 这个方法主要负责保证当 parent Context 被取消时，child Context 也会被及联取消</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">propagateCancel</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br><span class="hljs-comment">// 针对于 context.Background()/TODO() 创建的 Context(emptyCtx)，其 done channel 将永远为 nil</span><br><span class="hljs-comment">// 对于其他的标准的可取消的 Context(cancelCtx、timerCtx) 调用 Done() 方法将会延迟初始化 done channel(调用时创建)</span><br><span class="hljs-comment">// 所以 done channel 为 nil 时说明 parent context 必然永远不会被取消，所以就无需及联到 child Context</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// parent is never canceled</span><br>&#125;<br><br><span class="hljs-comment">// 如果 done channel 不是 nil，说明 parent Context 是一个可以取消的 Context</span><br><span class="hljs-comment">// 这里需要立即判断一下 done channel 是否可读取，如果可以读取说明上面无锁阶段</span><br><span class="hljs-comment">// parent Context 已经被取消了，那么应该立即取消 child Context</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-comment">// parent is already canceled</span><br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>&#125;<br><br><span class="hljs-comment">// parentCancelCtx 用于获取 parent Context 的底层可取消 Context(cancelCtx)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 如果 parent Context 本身就是 *cancelCtx 或者是标准库中基于 cancelCtx 衍生的 Context 会返回 true</span><br><span class="hljs-comment">// 如果 parent Context 已经取消/或者根本无法取消 会返回 false</span><br><span class="hljs-comment">// 如果 parent Context 无法转换为一个 *cancelCtx 也会返回 false</span><br><span class="hljs-comment">// 如果 parent Context 是一个自定义深度包装的 cancelCtx(自己定义了 done channel) 则也会返回 false</span><br><span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123; <span class="hljs-comment">// ok 为 true 说明 parent Context 为 标准库的 cancelCtx 或者至少可以完全转换为 *cancelCtx</span><br><span class="hljs-comment">// 先对 parent Context 加锁，防止更改</span><br>p.mu.Lock()<br><span class="hljs-comment">// 因为 ok 为 true 就已经确定了 parent Context 一定为 *cancelCtx，而 cancelCtx 取消时必然设置 err</span><br><span class="hljs-comment">// 所以并发加锁情况下如果 parent Context 的 err 不为空说明已经被取消了</span><br><span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// parent has already been canceled</span><br><span class="hljs-comment">// parent Context 已经被取消，则直接及联取消 child Context</span><br>child.cancel(<span class="hljs-literal">false</span>, p.err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 在 ok 为 true 时确定了 parent Context 一定为 *cancelCtx，此时 err 为 nil</span><br><span class="hljs-comment">// 这说明 parent Context 还没被取消，这时候要在 parent Context 的 children map 中关联 child Context</span><br><span class="hljs-comment">// 这个 children map 在 parent Context 被取消时会被遍历然后批量调用 child Context 的取消方法</span><br><span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;<br>p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>p.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// ok 为 false，说明: &quot;parent Context 已经取消&quot; 或 &quot;根本无法取消&quot; 或 &quot;无法转换为一个 *cancelCtx&quot; 或 &quot;是一个自定义深度包装的 cancelCtx&quot;</span><br>atomic.AddInt32(&amp;goroutines, +<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 由于代码在方法开始时就判断了 parent Context &quot;已经取消&quot;、&quot;根本无法取消&quot; 这两种情况</span><br><span class="hljs-comment">// 所以这两种情况在这里不会发生，因此 &lt;-parent.Done() 不会产生 panic</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// 唯一剩下的可能就是 parent Context &quot;无法转换为一个 *cancelCtx&quot; 或 &quot;是一个被覆盖了 done channel 的自定义 cancelCtx&quot;</span><br><span class="hljs-comment">// 这种两种情况下无法通过 parent Context 的 children map 建立关联，只能通过创建一个 Goroutine 来完成及联取消的操作</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-parent.Done():<br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">case</span> &lt;-child.Done():<br>&#125;<br>&#125;()<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// parentCancelCtx returns the underlying *cancelCtx for parent.</span><br><span class="hljs-comment">// It does this by looking up parent.Value(&amp;cancelCtxKey) to find</span><br><span class="hljs-comment">// the innermost enclosing *cancelCtx and then checking whether</span><br><span class="hljs-comment">// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx</span><br><span class="hljs-comment">// has been wrapped in a custom implementation providing a</span><br><span class="hljs-comment">// different done channel, in which case we should not bypass it.)</span><br><span class="hljs-comment">// parentCancelCtx 负责从 parent Context 中取出底层的 cancelCtx</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parentCancelCtx</span><span class="hljs-params">(parent Context)</span></span> (*cancelCtx, <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 如果 parent context 的 done 为 nil 说明不支持 cancel，那么就不可能是 cancelCtx</span><br><span class="hljs-comment">// 如果 parent context 的 done 为 可复用的 closedchan 说明 parent context 已经 cancel 了</span><br><span class="hljs-comment">// 此时取出 cancelCtx 没有意义(具体为啥没意义后面章节会有分析)</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == closedchan || done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// 如果 parent context 属于原生的 *cancelCtx 或衍生类型(timerCtx) 需要继续进行后续判断</span><br><span class="hljs-comment">// 如果 parent context 无法转换到 *cancelCtx，则认为非 cancelCtx，返回 nil,fasle</span><br>p, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>p.mu.Lock()<br><span class="hljs-comment">// 经过上面的判断后，说明 parent context 可以被转换为 *cancelCtx，这时存在多种情况:</span><br><span class="hljs-comment">//   - parent context 就是 *cancelCtx</span><br><span class="hljs-comment">//   - parent context 是标准库中的 timerCtx</span><br><span class="hljs-comment">//   - parent context 是个自己自定义包装的 cancelCtx</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 针对这 3 种情况需要进行判断，判断方法就是: </span><br><span class="hljs-comment">//   判断 parent context 通过 Done() 方法获取的 done channel 与 Value 查找到的 context 的 done channel 是否一致</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// 一致情况说明 parent context 为 cancelCtx 或 timerCtx 或 自定义的 cancelCtx 且未重写 Done()，</span><br><span class="hljs-comment">// 这种情况下可以认为拿到了底层的 *cancelCtx</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// 不一致情况说明 parent context 是一个自定义的 cancelCtx 且重写了 Done() 方法，并且并未返回标准 *cancelCtx 的</span><br><span class="hljs-comment">// 的 done channel，这种情况需要单独处理，故返回 nil, false</span><br>ok = p.done == done<br>p.mu.Unlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> p, <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2、cancelCtx-是如何取消的"><a href="#3-2、cancelCtx-是如何取消的" class="headerlink" title="3.2、cancelCtx 是如何取消的"></a>3.2、cancelCtx 是如何取消的</h3><p>在上面的 cancelCtx 创建源码中可以看到，cancelCtx 内部跨多个 Goroutine 实现信号传递其实靠的就是一个 done channel；<strong>如果要取消这个 Context，那么就需要让所有 <code>&lt;-c.Done()</code> 停止阻塞，这时候最简单的办法就是把这个 channel 直接 close 掉，或者干脆换成一个已经被 close 的 channel，</strong>事实上官方也是怎么做的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// cancel closes c.done, cancels each of c&#x27;s children, and, if</span><br><span class="hljs-comment">// removeFromParent is true, removes c from its parent&#x27;s children.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 首先判断 err 是不是 nil，如果不是 nil 则直接 panic</span><br>    <span class="hljs-comment">// 这么做的目的是因为 cancel 方法是个私有方法，标准库内任何调用 cancel</span><br>    <span class="hljs-comment">// 的方法保证了一定会传入 err，如果没传那就是非正常调用，所以可以直接 panic</span><br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 对 context 加锁，防止并发更改</span><br>c.mu.Lock()<br><span class="hljs-comment">// 如果加锁后有并发访问，那么二次判断 err 可以防止重复 cancel 调用</span><br><span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// already canceled</span><br>&#125;<br><span class="hljs-comment">// 这里设置了内部的 err，所以上面的判断 c.err != nil 与这里是对应的</span><br><span class="hljs-comment">// 也就是说加锁后一定有一个 Goroutine 先 cannel，cannel 后 c.err 一定不为 nil</span><br>c.err = err<br><span class="hljs-comment">// 判断内部的 done channel 是不是为 nil，因为在 context.WithCancel 创建 cancelCtx 的</span><br><span class="hljs-comment">// 时候并未立即初始化 done channel(延迟初始化)，所以这里可能为 nil</span><br><span class="hljs-comment">// 如果 done channel 为 nil，那么就把它设置成共享可重用的一个已经被关闭的 channel</span><br><span class="hljs-keyword">if</span> c.done == <span class="hljs-literal">nil</span> &#123;<br>c.done = closedchan<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果 done channel 已经被初始化，则直接 close 它</span><br><span class="hljs-built_in">close</span>(c.done)<br>&#125;<br><span class="hljs-comment">// 如果当前 Context 下面还有关联的 child Context，且这些 child Context 都是</span><br><span class="hljs-comment">// 可以转换成 *cancelCtx 的 Context(见上面的 propagateCancel 方法分析)，那么</span><br><span class="hljs-comment">// 直接遍历 childre map，并且调用 child Context 的 cancel 即可</span><br><span class="hljs-comment">// 如果关联的 child Context 不能转换成 *cancelCtx，那么由 propagateCancel 方法</span><br><span class="hljs-comment">// 中已经创建了单独的 Goroutine 来关闭这些 child Context</span><br><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child.cancel(<span class="hljs-literal">false</span>, err)<br>&#125;<br><span class="hljs-comment">// 清除 c.children map 并解锁</span><br>c.children = <span class="hljs-literal">nil</span><br>c.mu.Unlock()<br><br>    <span class="hljs-comment">// 如果 removeFromParent 为 true，那么从 parent Context 中清理掉自己</span><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c.Context, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、parentCancelCtx-为什么不取出已取消的-cancelCtx"><a href="#3-3、parentCancelCtx-为什么不取出已取消的-cancelCtx" class="headerlink" title="3.3、parentCancelCtx 为什么不取出已取消的 cancelCtx"></a>3.3、parentCancelCtx 为什么不取出已取消的 cancelCtx</h3><p>在上面的 3.1 章节中分析 <code>parentCancelCtx</code> 方法时有这么一段:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parentCancelCtx</span><span class="hljs-params">(parent Context)</span></span> (*cancelCtx, <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 如果 parent context 的 done 为 nil 说明不支持 cancel，那么就不可能是 cancelCtx</span><br><span class="hljs-comment">// 如果 parent context 的 done 为 可复用的 closedchan 说明 parent context 已经 cancel 了</span><br><span class="hljs-comment">// 此时取出 cancelCtx 没有意义(具体为啥没意义后面章节会有分析)</span><br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == closedchan || done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// ...... 省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在来仔细说明一下 “为什么没有意义？” 这个问题:</p><p>首先是调用 <code>parentCancelCtx</code> 方法的位置，在 context 包中只有两个位置调用了 <code>parentCancelCtx</code> 方法；一个是在创建 cancelCtx 的 <code>func WithCancel(parent Context)</code> 的 <code>propagateCancel(parent, &amp;c)</code> 方法中，另一个就是 <code>cancel</code> 方法的 <code>removeChild(c.Context, c)</code> 调用中；下面分析一下这两个方法的目的。</p><h4 id="3-3-1、propagateCancel-parent-c"><a href="#3-3-1、propagateCancel-parent-c" class="headerlink" title="3.3.1、propagateCancel(parent, &amp;c)"></a>3.3.1、propagateCancel(parent, &amp;c)</h4><p><code>propagateCancel</code> 负责保证当 parent cancelCtx 在取消时能正确传递到 child Context；<strong>那么它需要通过 <code>parentCancelCtx</code> 来确定 parent Context 是否是一个 cancelCtx，如果是那就把 child Context 加到 parent Context 的 children map 中，然后 parent Context 在 cancel 时会自动遍历 map 调用 child Context 的 cancel；如果不是那就开 Goroutine 阻塞读 parent Context 的 done channel然后再调用 child Context 的 cancel。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>    p.mu.Lock()<br>    <span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// parent has already been canceled</span><br>        child.cancel(<span class="hljs-literal">false</span>, p.err)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;<br>            p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>        &#125;<br>        p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    &#125;<br>    p.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    atomic.AddInt32(&amp;goroutines, +<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;-parent.Done():<br>            child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br>        <span class="hljs-keyword">case</span> &lt;-child.Done():<br>        &#125;<br>    &#125;()<br>&#125;<br></code></pre></td></tr></table></figure><p>所以在这个方法调用时，<strong>如果 <code>parentCancelCtx</code> 取出一个已取消的 cancelCtx，那么 parent Context 的 children map 在 cancel 时已经清空了，这时要是再给设置上就有问题了，同样业务需求中 <code>propagateCancel</code> 为了就是控制传播，明明 parent Context 已经 cancel 了，再去传播就没意义了。</strong></p><h4 id="3-3-2、removeChild-c-Context-c"><a href="#3-3-2、removeChild-c-Context-c" class="headerlink" title="3.3.2、removeChild(c.Context, c)"></a>3.3.2、removeChild(c.Context, c)</h4><p>同上面的 3.3.1 一样，**<code>removeChild(c.Context, c)</code> 目的是在 cancel 时断开与 parent Context 的关联，同样是为了处理 children map 的问题；此时如果 <code>parentCancelCtx</code> 也取出一个已经 cancel 的 parent Context，由于 parent Context 在 cancel 时已经清空了 childre map，这里再尝试 remove 也没有任何意义。**</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// removeChild removes a context from its parent.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeChild</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br>p, ok := parentCancelCtx(parent)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>p.mu.Lock()<br><span class="hljs-keyword">if</span> p.children != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">delete</span>(p.children, child)<br>&#125;<br>p.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、timerCtx-源码分析"><a href="#四、timerCtx-源码分析" class="headerlink" title="四、timerCtx 源码分析"></a>四、timerCtx 源码分析</h2><h3 id="4-1、timerCtx-是如何创建的"><a href="#4-1、timerCtx-是如何创建的" class="headerlink" title="4.1、timerCtx 是如何创建的"></a>4.1、timerCtx 是如何创建的</h3><p>timerCtx 的创建主要通过 <code>context.WithDeadline</code> 方法，同时 <code>context.WithTimeout</code> 实际上也是调用的 <code>context.WithDeadline</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WithDeadline returns a copy of the parent context with the deadline adjusted</span><br><span class="hljs-comment">// to be no later than d. If the parent&#x27;s deadline is already earlier than d,</span><br><span class="hljs-comment">// WithDeadline(parent, d) is semantically equivalent to parent. The returned</span><br><span class="hljs-comment">// context&#x27;s Done channel is closed when the deadline expires, when the returned</span><br><span class="hljs-comment">// cancel function is called, or when the parent context&#x27;s Done channel is</span><br><span class="hljs-comment">// closed, whichever happens first.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Canceling this context releases resources associated with it, so code should</span><br><span class="hljs-comment">// call cancel as soon as the operations running in this Context complete.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent Context, d time.Time)</span></span> (Context, CancelFunc) &#123;<br>    <span class="hljs-comment">// 与 cancelCtx 一样先检查一下 parent Context</span><br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>    <br>    <span class="hljs-comment">// 判断 parent Context 是否支持 Deadline，如果支持的话需要判断 parent Context 的截止时间</span><br>    <span class="hljs-comment">// 假设 parent Context 的截止时间早于当前设置的截止时间，那就意味着 parent Context 肯定会先</span><br>    <span class="hljs-comment">// 被 cancel，同样由于 parent Context 的 cancel 会导致当前这个 child Context 也会被 cancel</span><br>    <span class="hljs-comment">// 所以这时候直接返回一个 cancelCtx 就行了，计时器已经没有必要存在了</span><br><span class="hljs-keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br><span class="hljs-comment">// The current deadline is already sooner than the new one.</span><br><span class="hljs-keyword">return</span> WithCancel(parent)<br>&#125;<br><br>    <span class="hljs-comment">// 创建一个 timerCtx</span><br>c := &amp;timerCtx&#123;<br>cancelCtx: newCancelCtx(parent),<br>deadline:  d,<br>&#125;<br><br>    <span class="hljs-comment">// 与 cancelCtx 一样的传播操作</span><br>propagateCancel(parent, c)<br><br>    <span class="hljs-comment">// 判断当前时间已经已经过了截止日期，如果超过了直接 cancel</span><br>dur := time.Until(d)<br><span class="hljs-keyword">if</span> dur &lt;= <span class="hljs-number">0</span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded) <span class="hljs-comment">// deadline has already passed</span><br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">false</span>, Canceled) &#125;<br>&#125;<br><br>    <span class="hljs-comment">// 所有 check 都没问题的情况下，创建一个定时器，在到时间后自动 cancel</span><br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<br>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded)<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、timerCtx-是如何取消的"><a href="#4-2、timerCtx-是如何取消的" class="headerlink" title="4.2、timerCtx 是如何取消的"></a>4.2、timerCtx 是如何取消的</h3><p>了解了 cancelCtx 的取消流程以后再来看 timerCtx 的取消就相对简单的多，主要就是调用一下里面的 cancelCtx 的 cancel，然后再把定时器停掉:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *timerCtx)</span></span> cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;<br>c.cancelCtx.cancel(<span class="hljs-literal">false</span>, err)<br><span class="hljs-keyword">if</span> removeFromParent &#123;<br><span class="hljs-comment">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>removeChild(c.cancelCtx.Context, c)<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.timer != <span class="hljs-literal">nil</span> &#123;<br>c.timer.Stop()<br>c.timer = <span class="hljs-literal">nil</span><br>&#125;<br>c.mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、valueCtx-源码分析"><a href="#五、valueCtx-源码分析" class="headerlink" title="五、valueCtx 源码分析"></a>五、valueCtx 源码分析</h2><p>相对于 cancelCtx 还有 timerCtx，valueCtx 实在是过于简单，因为它没有及联的取消逻辑，也没有过于复杂的 kv 存储:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WithValue returns a copy of parent in which the value associated with key is</span><br><span class="hljs-comment">// val.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Use context Values only for request-scoped data that transits processes and</span><br><span class="hljs-comment">// APIs, not for passing optional parameters to functions.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The provided key must be comparable and should not be of type</span><br><span class="hljs-comment">// string or any other built-in type to avoid collisions between</span><br><span class="hljs-comment">// packages using context. Users of WithValue should define their own</span><br><span class="hljs-comment">// types for keys. To avoid allocating when assigning to an</span><br><span class="hljs-comment">// interface&#123;&#125;, context keys often have concrete type</span><br><span class="hljs-comment">// struct&#123;&#125;. Alternatively, exported context key variables&#x27; static</span><br><span class="hljs-comment">// type should be a pointer or interface.</span><br><span class="hljs-comment">// WithValue 方法负责创建 valueCtx</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithValue</span><span class="hljs-params">(parent Context, key, val <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> Context &#123;<br>    <span class="hljs-comment">// parent 检测</span><br><span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">// key 检测</span><br><span class="hljs-keyword">if</span> key == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;nil key&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">// key 必须是可比较的</span><br><span class="hljs-keyword">if</span> !reflectlite.TypeOf(key).Comparable() &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;key is not comparable&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;valueCtx&#123;parent, key, val&#125;<br>&#125;<br><br><span class="hljs-comment">// A valueCtx carries a key-value pair. It implements Value for that key and</span><br><span class="hljs-comment">// delegates all other calls to the embedded Context.</span><br><span class="hljs-keyword">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;<br>Context<br>key, val <span class="hljs-keyword">interface</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// stringify tries a bit to stringify v, without using fmt, since we don&#x27;t</span><br><span class="hljs-comment">// want context depending on the unicode tables. This is only used by</span><br><span class="hljs-comment">// *valueCtx.String().</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringify</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">switch</span> s := v.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> stringer:<br><span class="hljs-keyword">return</span> s.String()<br><span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br><span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;not Stringer&gt;&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *valueCtx)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> contextName(c.Context) + <span class="hljs-string">&quot;.WithValue(type &quot;</span> +<br>reflectlite.TypeOf(c.key).String() +<br><span class="hljs-string">&quot;, val &quot;</span> + stringify(c.val) + <span class="hljs-string">&quot;)&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *valueCtx)</span></span> Value(key <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>    <span class="hljs-comment">// 先判断当前 Context 里有没有这个 key</span><br><span class="hljs-keyword">if</span> c.key == key &#123;<br><span class="hljs-keyword">return</span> c.val<br>&#125;<br>    <span class="hljs-comment">// 如果没有递归向上查找</span><br><span class="hljs-keyword">return</span> c.Context.Value(key)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、结尾"><a href="#六、结尾" class="headerlink" title="六、结尾"></a>六、结尾</h2><p>分析 Context 源码断断续续经历了 3、4 天，说心里话发现里面复杂情况有很多，网上其他文章很多都是只提了一嘴，但是没有深入具体逻辑，尤其是 cancelCtx 的相关调用；我甚至觉得我有些地方可能理解的也不完全正确，目前就先写到这里，如果有不对的地方欢迎补充。</p>]]></content>
    
    
    <summary type="html">好久之前就想仔细看看这个 Context，最近稍微有点时间就分析了一手</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
    <category term="Context" scheme="https://mritd.com/tags/context/"/>
    
  </entry>
  
  <entry>
    <title>Caddy2 的 ListenerWrapper</title>
    <link href="https://mritd.com/2021/06/15/caddy2-listenerwrapper/"/>
    <id>https://mritd.com/2021/06/15/caddy2-listenerwrapper/</id>
    <published>2021-06-15T06:04:00.000Z</published>
    <updated>2021-06-15T06:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文所有源码分析基于 Caddy2 v2.4.2 版本进行，未来版本可能源码会有变化，阅读本文时请自行将源码切换到 v2.4.2 版本。</p></blockquote><h2 id="一、这玩意是什么？"><a href="#一、这玩意是什么？" class="headerlink" title="一、这玩意是什么？"></a>一、这玩意是什么？</h2><p>Caddy2 对配置文件中的 <code>listener_wrappers</code> 配置有以下描述:</p><blockquote><p>Allows configuring listener wrappers, which can modify the behaviour of the base listener. They are applied in the given order.</p></blockquote><p>同时对于 <code>tls</code> 这个 <code>listener_wrappers</code> 还做了一下说明:</p><blockquote><p>There is a special no-op tls listener wrapper provided as a standard module which marks where TLS should be handled in the chain of listener wrappers. It should only be used if another listener wrapper must be placed in front of the TLS handshake.</p></blockquote><p>综上所述，简单的理解就是 <code>listener_wrappers</code> 在 Caddy2 中用于改变链接行为，这个行为可以理解为我们可以自定义接管链接，这些 “接管” 更偏向于底层，比如在 TLS 握手之前做点事情或者在 TLS 握手之后做点事情，这样我们就可以实现一些魔法操作。</p><h2 id="二、加载与初始化"><a href="#二、加载与初始化" class="headerlink" title="二、加载与初始化"></a>二、加载与初始化</h2><p>在 Caddy2 启动时首先会进行配置文件解析，例如解析 Caddyfile、json 等格式的配置文件，<code>listener_wrappers</code> 在配置文件中被定义为一个 <code>ServerOption</code>:</p><p><strong><a href="https://github.com/caddyserver/caddy/blob/v2.4.2/caddyconfig/httpcaddyfile/serveroptions.go#L47">caddyconfig&#x2F;httpcaddyfile&#x2F;serveroptions.go:47</a></strong></p><p><img src="https://cdn.oss.link/markdown/s7XueV.jpg"></p><p>该配置最终会被注入到 Server 的 listenerWrappers 属性中(先解析为 <code>ListenerWrappersRaw</code> 然后再实例化)</p><p><strong><a href="https://github.com/caddyserver/caddy/blob/v2.4.2/modules/caddyhttp/server.go#L132">modules&#x2F;caddyhttp&#x2F;server.go:132</a></strong> </p><p><img src="https://cdn.oss.link/markdown/vs5icq.jpg"></p><p>最后在 App 的启动过程中遍历 listenerWrappers 并逐个应用，在应用 <code>listenerWrappers</code> 时有个比较重要的顺序处理:</p><p><strong>首先 Caddy2 会尝试在 <code>net.Listener</code> 上应用一部分 <code>listenerWrappers</code>，当触及到 <code>tls</code> 这个 token 的 <code>listenerWrappers</code> 之后终止应用；终止前已被应用的这部分 <code>listenerWrappers</code> 被认为是 TLS 握手之前的自定义处理，然后在 TLS 握手之后再次应用剩下的 <code>listenerWrappers</code>，后面这部分被认为是 TLS 握手之后的自定义处理。</strong></p><p><strong><a href="https://github.com/caddyserver/caddy/blob/v2.4.2/modules/caddyhttp/app.go#L318">modules&#x2F;caddyhttp&#x2F;app.go:318</a></strong><br><img src="https://cdn.oss.link/markdown/6KQipF.jpg"></p><p>最终对 ListenerWrapper 加载流程分析如下:</p><ul><li>首先解析配置文件，并将配置转化为 Server 的 <code>ListenerWrappersRaw []json.RawMessage</code></li><li>然后通过 <code>ctx.LoadModule(srv, &quot;ListenerWrappersRaw&quot;)</code> 实例化 ListenerWrapper</li><li>在 <code>ctx.LoadModule</code> 时，如果发现了 <code>tls</code> 指令则按照配置文件顺序排序 ListenerWrapper 切片，否则将 <code>tls</code> 这个特殊的 ListenerWrapper 放在首位；<strong>这意味着在配置中不写 <code>tls</code> 时，所有 ListenerWrapper 永远处于 TLS 握手之后</strong></li><li>最后在 App 启动时按照切片顺序应用 ListenerWrapper，需要注意的是 ListenerWrapper 接口针对的是 <code>net.Listener</code> 的处理，其底层是 <code>net.Conn</code>；<strong>这意味着 ListenerWrapper 不会对 UDP(<code>net.PacketConn</code>) 做处理，代码中也可以看到 ListenerWrapper 并未对 HTTP3 处理</strong></li></ul><h2 id="三、具体实际应用"><a href="#三、具体实际应用" class="headerlink" title="三、具体实际应用"></a>三、具体实际应用</h2><p>说了半天，也分析了源码，那么最终回到问题原点: <strong>ListenerWrapper 能干什么？</strong>答案就是自定义协议，例如神奇的 <a href="https://github.com/imgk/caddy-trojan">caddy-trojan</a> 插件。</p><p>caddy-trojan 插件实现了 ListenerWrapper，在 App 启动时通过源码可以看到，<strong>TLS 握手完成后原始的 TCP 链接将交由这个 ListenerWrapper 处理:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// finish wrapping listener where we left off before TLS</span><br><span class="hljs-keyword">for</span> i := lnWrapperIdx; i &lt; <span class="hljs-built_in">len</span>(srv.listenerWrappers); i++ &#123;<br>ln = srv.listenerWrappers[i].WrapListener(ln)<br>&#125;<br></code></pre></td></tr></table></figure><p>该插件对 <code>WrapListener</code> 方法的实现如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WrapListener implements caddy.ListenWrapper</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *ListenerWrapper)</span></span> WrapListener(l net.Listener) net.Listener &#123;<br>ln := NewListener(l, m.upstream, m.logger)<br><span class="hljs-comment">// 异步后台捕获新链接</span><br><span class="hljs-keyword">go</span> ln.loop()<br><span class="hljs-keyword">return</span> ln<br>&#125;<br></code></pre></td></tr></table></figure><p>所以这个 wrapper 核心处理在 <code>loop()</code> 中:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// loop is ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Listener)</span></span> loop() &#123;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := l.Listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-l.closed:<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>l.logger.Error(fmt.Sprintf(<span class="hljs-string">&quot;accept net.Conn error: %v&quot;</span>, err))<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c net.Conn, lg *zap.Logger, up *Upstream)</span></span> &#123;<br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, HeaderLen+<span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> _, err := io.ReadFull(c, b); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> errors.Is(err, io.EOF) &#123;<br>lg.Error(fmt.Sprintf(<span class="hljs-string">&quot;read prefix error: read tcp %v -&gt; %v: read: %v&quot;</span>, c.RemoteAddr(), c.LocalAddr(), err))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>lg.Error(fmt.Sprintf(<span class="hljs-string">&quot;read prefix error: %v&quot;</span>, err))<br>&#125;<br>c.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// check the net.Conn</span><br><span class="hljs-keyword">if</span> ok := up.Validate(ByteSliceToString(b[:HeaderLen])); !ok &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-l.closed:<br>c.Close()<br><span class="hljs-keyword">default</span>:<br>l.conns &lt;- &amp;rawConn&#123;Conn: c, r: bytes.NewReader(b)&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> c.Close()<br>lg.Info(fmt.Sprintf(<span class="hljs-string">&quot;handle trojan net.Conn from %v&quot;</span>, c.RemoteAddr()))<br><br>nr, nw, err := Handle(io.Reader(c), io.Writer(c))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>lg.Error(fmt.Sprintf(<span class="hljs-string">&quot;handle net.Conn error: %v&quot;</span>, err))<br>&#125;<br>up.Consume(ByteSliceToString(b[:HeaderLen]), nr, nw)<br>&#125;(conn, l.logger, l.upstream)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以看到，当新链接进入时，首先对包头做检测 <code>if ok := up.Validate(ByteSliceToString(b[:HeaderLen]))</code>；如果检测通过那么这个链接就完全插件自己处理后续逻辑了；如果不通过则将此链接返回给 Caddy2，让 Caddy2 继续处理。</strong></p><p>这里面涉及到一个一开始让我不解的问题: “链接不可重复读”，后来看源码才明白作者处理方式很简单: <strong>包装一个 <code>rawConn</code>，在验证部分由于已经读了一点数据，如果验证不通过就把它存起来，然后让下一个读操作先读这个 buffer，从而实现原始数据组装。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// rawConn is ...</span><br><span class="hljs-keyword">type</span> rawConn <span class="hljs-keyword">struct</span> &#123;<br>net.Conn<br>r *bytes.Reader<br>&#125;<br><br><span class="hljs-comment">// Read is ...</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *rawConn)</span></span> Read(b []<span class="hljs-type">byte</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> c.r == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> c.Conn.Read(b)<br>&#125;<br>n, err := c.r.Read(b)<br><span class="hljs-keyword">if</span> errors.Is(err, io.EOF) &#123;<br>c.r = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> n, err<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、思考和总结"><a href="#四、思考和总结" class="headerlink" title="四、思考和总结"></a>四、思考和总结</h2><p>ListenerWrapper 是 Caddy2 一个强大的扩展能力，在 ListenerWrapper 基础上我们可以实现对 TCP 链接自定义处理，我们因此可以创造一些奇奇怪怪的协议。同时我们通过让链接重新交由 Caddy2 处理又能做到完美的伪装: <strong>当你去尝试访问时，如果密码学验证不通过，那么后续行为就与标准 Caddy2 表现一致，主动探测基本无效。对任何自己创造的 ListenerWrapper 来说，如果开启了类似 AEAD 这种加密，探测行为本身就会被转接到对抗密码学原理上。</strong></p>]]></content>
    
    
    <summary type="html">最近分析了一下 Caddy2 的 ListenerWrapper，觉得很厉害索性写下来</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    <category term="Caddy" scheme="https://mritd.com/categories/golang/caddy/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains 常用插件</title>
    <link href="https://mritd.com/2021/06/06/jetbrains-plugins/"/>
    <id>https://mritd.com/2021/06/06/jetbrains-plugins/</id>
    <published>2021-06-06T05:23:00.000Z</published>
    <updated>2021-06-06T05:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>所谓工欲善其事，必先利其器；这篇文章分享一些日常 Coding 中常用 JetBrains 系列 IDE 插件(本文所有插件可直接从 Marketplace 搜索并安装)。</p></blockquote><h2 id="One-Dark-theme"><a href="#One-Dark-theme" class="headerlink" title="One Dark theme"></a>One Dark theme</h2><p>上来先整点没用的吧，主题配色这个东西根据个人喜好；我比较喜欢花花绿绿的感觉，在防止眼疲劳的同时还有点 RMB 的感觉(RMB 也花花绿绿的)，毕竟 Coding 的时候要 “酷一点”，然后才能心情愉悦的写 BUG(代码和我只要有一个能跑就行)。</p><p><img src="https://cdn.oss.link/markdown/kikZwf.jpg"></p><h2 id="Gopher"><a href="#Gopher" class="headerlink" title="Gopher"></a>Gopher</h2><p>也是啥用没有的插件，唯一的效果就是在各种 Loading 的时候进度条变成了 Go 的吉祥物(Golang 天下第一，嘶吼)…当然还有个同款，Gopher 变成了彩虹猫，需要的自己搜吧。</p><p><img src="https://cdn.oss.link/markdown/uVYpSQ.jpg"></p><h2 id="Extra-Icons"><a href="#Extra-Icons" class="headerlink" title="Extra Icons"></a>Extra Icons</h2><p>这个插件为项目里一些特殊文件增加 Icon，比如 <code>.gitignore</code> 文件、CI 配置等，可以让人看着更舒服一些。</p><p><img src="https://cdn.oss.link/markdown/RQek39.jpg"></p><h2 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h2><p>GitToolBox 会在光标定位到某一行代码时显示其最近改动等提交信息，方便在甩锅时精确定位到背锅侠。</p><p><img src="https://cdn.oss.link/markdown/zyLD6C.png"></p><h2 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h2><p>这个就牛逼了，非常有实用价值的一个插件；当某些规范下你必须进行 “驼峰&#x2F;下划线&#x2F;短横线&#x2F;全大写&#x2F;全小写&#x2F;大写加下划线&#x2F;小写加下划线…” 疯狂转换时，String Manipulation 只需要选中右键即可完成。</p><p><img src="https://cdn.oss.link/markdown/GBB7KC.gif"></p><h2 id="Randomness"><a href="#Randomness" class="headerlink" title="Randomness"></a>Randomness</h2><p>Randomness 在需要测试数据时很有用，它可以快速生成一些随机性的垃圾数据填充进来；例如写示例配置时。</p><p><img src="https://cdn.oss.link/markdown/Cj9bsm.png"></p><h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><p>英文渣必备插件，除了能翻译一些单词之外，还能自动识别文档进行翻译，甚至还带单词本。</p><p><img src="https://cdn.oss.link/markdown/psZGNv.png"></p><h2 id="carbon-now-sh"><a href="#carbon-now-sh" class="headerlink" title="carbon-now-sh"></a>carbon-now-sh</h2><p>当你想把你的代码发到某个群里装X，或者写博客不想让别人复制只想展示时，carbon-now-sh 可以帮你把选中的代码传输到 <a href="https://carbon.now.sh/">https://carbon.now.sh/</a> 来生成漂亮的图片。</p><p><img src="https://cdn.oss.link/markdown/qXDcrg.png"></p>]]></content>
    
    
    <summary type="html">分享一些好玩的和有用的 JetBrains 系列 IDE 插件</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="JetBrains" scheme="https://mritd.com/tags/jetbrains/"/>
    
  </entry>
  
  <entry>
    <title>寥寥浮生，莫问前程</title>
    <link href="https://mritd.com/2021/06/04/liao-liao-fu-sheng-mo-wen-qian-cheng/"/>
    <id>https://mritd.com/2021/06/04/liao-liao-fu-sheng-mo-wen-qian-cheng/</id>
    <published>2021-06-04T13:41:00.000Z</published>
    <updated>2021-06-04T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<audio  autoplay="autoplay">  <source src="https://cdn.oss.link/bgm/night-piano9.mp3" type="audio/mpeg" loop="loop" />Your browser does not support the audio element.</audio><p><img src="https://cdn.oss.link/markdown/pHOIRa.png"></p><center>月下映双鱼，白首雁归去，自古无愁难成句。    --- 双鱼</center><h2 id="给岁月以青春，而不是给青春以岁月"><a href="#给岁月以青春，而不是给青春以岁月" class="headerlink" title="给岁月以青春，而不是给青春以岁月"></a>给岁月以青春，而不是给青春以岁月</h2><blockquote><p>给时光以生命，而不是给生命以时光。</p></blockquote><p>每当谈起岁月，总显得是那么残忍，残忍到能真切的感受到 “岁月如刀”，然后一刀又一刀；今天莫名其妙的看了一下我的生日(是的，已经忘记了年龄)，然后得到了一个很有意思的答案: </p><p><strong>在这个世界上生活了 9684 天，生命进度条以 80 岁算正好 <code>33%</code>。</strong></p><p>所以我的青春已经开始向我挥手告别，或许有些艰难，或许有点感慨，但终究都已不再重要。我庆幸的是我的青春不会像大多数人一样无趣，虽然充满血腥却显得美丽；但同样也会留下许多遗憾，缺了孩子气的天真，没体会过关心，没了热血冲动的经历。</p><p>以前每当回想起来的时候，总是带着那么一点悲伤；今天突然想起一句话: “给时光以生命，而不是给生命以时光。”，<strong>所以当我们回首青春，应当给岁月以青春，而不是给青春以岁月；这段青春，感谢你砥砺前行，让岁月不在苦涩。</strong></p><h2 id="勇敢的质疑，勇敢的被质疑"><a href="#勇敢的质疑，勇敢的被质疑" class="headerlink" title="勇敢的质疑，勇敢的被质疑"></a>勇敢的质疑，勇敢的被质疑</h2><blockquote><p>世上没有绝对的真理，这就是我要对你们说的话。</p></blockquote><p>质疑事物的能力，看似简单，我却缺少了太多；父母曾经无数次对我说过 “你应该怎样怎样…”，小到吃饭喝水，大到人生规划，最后事实证明基本没有对的；有些看似亘古不变的东西让我忘却了它存在的意义，以至于我选择了随波逐流，却从未质疑过一个基本的对与错。</p><p>同样，这个世界不只有黑与白，还有很多灰。别人的对我质疑是否真正重要？这是否是自己放弃的理由？…让质疑我的人去质疑吧，这是他的权利，但我活不成他的样子。</p><p><strong>这世界上从来就没有绝对的真理，浩瀚星河里我太过渺小，而命运又太过伟大；我抱着敬畏之心质疑一切，也接受这个世界对我的质疑。</strong></p><h2 id="对未知的结论永远应该是未知"><a href="#对未知的结论永远应该是未知" class="headerlink" title="对未知的结论永远应该是未知"></a>对未知的结论永远应该是未知</h2><blockquote><p>我们用眼睛观察，而不全然接受。</p></blockquote><p>我曾不止一次对只是看到表象的事物作出定论，以为笑容背后就是开心，以为乌云密布就会下雨。我把太多的归因算到我所看到或是模糊看到的东西上，当 “墨菲定律” 和 “幸存者偏差” 双重作用时，悲观的人会更悲观，快乐的人会更快乐。</p><p>现在人到中年，终于学会了放弃；<strong>我所看到的不一定是真的，我没看清的也不一定是假的，对待未知的结论永远应该是未知，所以赌不赌看自己，莫要让整个世界买单。</strong></p><h2 id="成功无法复制，经验或许没用"><a href="#成功无法复制，经验或许没用" class="headerlink" title="成功无法复制，经验或许没用"></a>成功无法复制，经验或许没用</h2><blockquote><p>世界上没有完全相同的两片树叶。</p></blockquote><p>太多的人喜欢对别人讲述 “自己的经验”，一件事怎么做才能成功，甚至认为自己是 “苦口婆心”。我曾经也做过类似的傻事，直到前些年遇到了一个出租车司机；</p><p>他以前是一个搞自动化测试的，几年前跟我一样一个人来到北京打拼，我们有着差不多相似的经历，但结果却并不相同也不相似；直到现在我还记得那一段路上他所诉说的艰苦和努力，还有命运的不公。</p><p>我那时才意识到: <strong>成功根本无法复制，经验也或许没用，别人的一生之所以那样只是命运垂青，或是开了个玩笑。怎么做事，我无法说服别人，也没人可以教导我。</strong></p><h2 id="对抗随机性等于向既定轨道回归"><a href="#对抗随机性等于向既定轨道回归" class="headerlink" title="对抗随机性等于向既定轨道回归"></a>对抗随机性等于向既定轨道回归</h2><blockquote><p>已经在开往地狱的路上，那就应该和魔鬼一起笑着去。</p></blockquote><p>这是前两天在 Twitter 上看到老刘(@Yachen Liu)发的感悟:</p><blockquote><p>对于多数人，大概在初中至大学阶段，思维方式、思维能力、性格等终身基本不变的特征就已经定型了，与此对应的人生未来轨道也已经基本确定，之后的时间不过是不断的对抗随机性向既定轨道回归。</p></blockquote><p>我很认同这句话，环境会改变人的，很多性格、习惯其实都是那个懵懵懂懂的年纪养成的；所以现在开始不去尝试对抗随机性，给自己一点机会，<strong>我期望我短暂的生命中会有些其他的东西，因为我不想回到以前的轨道上。</strong></p><h2 id="一切达观，都是对悲苦的省略"><a href="#一切达观，都是对悲苦的省略" class="headerlink" title="一切达观，都是对悲苦的省略"></a>一切达观，都是对悲苦的省略</h2><p>写到最后，以大雪将至里的话结尾吧:</p><blockquote><p>和所有的人一样，在他的一生里，也曾怀有过自己的想象和梦想，其中的一些是他自己实现的，有一些是命运赠予给他的，很多是从来都无法实现的，或者是刚刚得到，就又被从手中掠夺走的。但是他一直还活着。</p><p>他想不起来，他是从哪儿来的，最终他也不知道，他将要去向何方。但是，这生来死去之间的时光，他的一生，他可以不含遗憾地去回看，用一个戛然而止的微笑，然后就只是巨大的惊讶。</p></blockquote><p>BGM 取自 “<a href="https://www.youtube.com/watch?v=NRh3ubYJmw4">石进 - 夜的钢琴曲</a>“ 系列第九曲。</p>]]></content>
    
    
    <summary type="html">月下映双鱼，白首雁归去，自古无愁难成句。 --- 双鱼</summary>
    
    
    
    <category term="随笔" scheme="https://mritd.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="浮生" scheme="https://mritd.com/tags/%E6%B5%AE%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>搓一个 Telegram Bot</title>
    <link href="https://mritd.com/2021/06/03/make-a-telegram-bot/"/>
    <id>https://mritd.com/2021/06/03/make-a-telegram-bot/</id>
    <published>2021-06-03T04:20:00.000Z</published>
    <updated>2021-06-03T04:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一个月光如雪的晚上和 PMheart 在 Telegram 闲聊，突然发现群里一个人的昵称是当前时间，然后观察一会儿发现还在不停变化… 最可气的是他还弄个 “东半球🌏最准报时” 的头衔，我一开始以为是 Telegram 又出的什么 “高级功能”(毕竟微信炸💩都是 Telegram 好久之前玩剩下的)，几经 Google 我发现其实就是自己写个 Bot，然后定时 rename；<strong>那我要不整个 “东半球最浪漫诗人” 岂不是太面了🤔。</strong></p></blockquote><h2 id="一、Telegram-Bot-介绍"><a href="#一、Telegram-Bot-介绍" class="headerlink" title="一、Telegram Bot 介绍"></a>一、Telegram Bot 介绍</h2><p>在 Telegram 官方的文档描述中，其 Bot Api 实质上分为两种，这两种 Api 用途也各不相同:</p><h3 id="1-1、标准-Bot"><a href="#1-1、标准-Bot" class="headerlink" title="1.1、标准 Bot"></a>1.1、标准 Bot</h3><p>由用户自行联系 <code>BotFather</code> (人如其名)交互式创建，该 Bot 是官方所认为的标准 Bot，其主要目的就是作为一个真正的 Bot；我们可以通过一个 Token 调用 Telegram Api 来控制它，玩法很多，包括不限于发送告警、作为群管机器人、交互式的帮你做各种自动化等等；同时这个 Bot 具有严格的隐私权限控制，比如拉到群里可以控制 Bot 对群消息是否可见等等(Telegram 这点做的非常 OJBK)；借助于这类 Bot，也有些脑洞大开的大哥在浪的边缘疯狂试探，比如下面的扫雷机器人:</p><p><img src="https://cdn.oss.link/markdown/I3IcQn.png" alt="I3IcQn"></p><p>还有算命的:<br><img src="https://cdn.oss.link/markdown/pIZYSS.png" alt="pIZYSS"></p><p>Github 真正干活的:<br><img src="https://cdn.oss.link/markdown/9wPxeI.png" alt="9wPxeI"></p><p>我的证书告警:<br><img src="https://cdn.oss.link/markdown/HAvQny.png" alt="HAvQny"></p><p>当然肯定有高铁动车组的(🔞我是正经人):<br><img src="https://cdn.oss.link/markdown/1zmI2m.png" alt="1zmI2m"></p><h3 id="1-2、客户端-Bot"><a href="#1-2、客户端-Bot" class="headerlink" title="1.2、客户端 Bot"></a>1.2、客户端 Bot</h3><p>准确的官方介绍是 <code>TDLib – build your own Telegram</code>，从这个介绍可以看出，这一个 “Bot” Api 本质上并不是让你写 Bot，而是作为开发一个第三方 Telegram 客户端用的；所以这个 Api 的权限很大，可以完整的模拟一个用户；目前我发现被滥用最多的就是用这个 Api 作为恶意拉人、发广告等，简直是币圈割韭菜御用。</p><p><strong>TDLib 本质上是一个 C++ 的 lib，官方提供了引导页面来帮助你用主流语言跨语言调用来使用它:</strong></p><p><img src="https://cdn.oss.link/markdown/yTAC3k.png" alt="yTAC3k"></p><h2 id="二、标准-Bot-使用"><a href="#二、标准-Bot-使用" class="headerlink" title="二、标准 Bot 使用"></a>二、标准 Bot 使用</h2><p>标准 Bot 使用相对简单，按照官方文档跟 <code>BotFather</code> 聊天创建一个即可:</p><p><img src="https://cdn.oss.link/markdown/gPhI8O.png" alt="gPhI8O"></p><p>当创建完成后在 Bot 设置界面你可以获取一个 <code>Token</code>，使用这个 Token 连接 Bot Api 地址就可以开始控制你的 Bot；Golang 开发可以考虑使用 <a href="https://github.com/tucnak/telebot">https://github.com/tucnak/telebot</a> 这个库，用法相当简单:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>tb <span class="hljs-string">&quot;gopkg.in/tucnak/telebot.v2&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>b, err := tb.NewBot(tb.Settings&#123;<br><span class="hljs-comment">// You can also set custom API URL.</span><br><span class="hljs-comment">// If field is empty it equals to &quot;https://api.telegram.org&quot;.</span><br>URL: <span class="hljs-string">&quot;http://195.129.111.17:8012&quot;</span>,<br><br>Token:  <span class="hljs-string">&quot;TOKEN_HERE&quot;</span>,<br>Poller: &amp;tb.LongPoller&#123;Timeout: <span class="hljs-number">10</span> * time.Second&#125;,<br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>b.Handle(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(m *tb.Message)</span></span> &#123;<br>b.Send(m.Sender, <span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;)<br><br>b.Start()<br>&#125;<br></code></pre></td></tr></table></figure><p>基于这个库，我为了方便使用写了一个命令行小工具，方便我发送告警信息等: <a href="https://github.com/mritd/tgsend">tgsend</a></p><p><img src="https://cdn.oss.link/markdown/BCSMIV.png" alt="BCSMIV"></p><p><img src="https://cdn.oss.link/markdown/warOjJ.png" alt="warOjJ"></p><h2 id="三、客户端-Api-使用"><a href="#三、客户端-Api-使用" class="headerlink" title="三、客户端 Api 使用"></a>三、客户端 Api 使用</h2><p>标准 Bot Api 很丰富，日常干活啥的也完全能满足，但是！<strong>人如果不会装X那和咸鱼有什么区别？</strong>我的 “东半球最浪漫诗人” 得提上日程。</p><h3 id="3-1、TDLib-构建"><a href="#3-1、TDLib-构建" class="headerlink" title="3.1、TDLib 构建"></a>3.1、TDLib 构建</h3><p>关于 Api 易用性，开发生态环境，这一点说实话，Telegram 能把所有国内 IM 按在地上摩擦，就像这样:</p><p><img src="https://cdn.oss.link/markdown/iI1jz8.jpg" alt="iI1jz8"></p><p>Telegram 官方提供了完整的 “点一点” 构建 TDLib 引导页面: <a href="https://tdlib.github.io/td/build.html">https://tdlib.github.io/td/build.html</a></p><p>勾选好自己的语言、操作系统、系统版本、甚至是编译的内存大小等设置后，无脑复制下面的命令执行就行:</p><p><img src="https://cdn.oss.link/markdown/DnZdvD.png" alt="DnZdvD"></p><h3 id="3-2、Telegram-API-HASH"><a href="#3-2、Telegram-API-HASH" class="headerlink" title="3.2、Telegram API HASH"></a>3.2、Telegram API HASH</h3><p>TDLib 构建完成后，需要自行申请一个 API_HASH，API_HASH 类似一个让 Telegram 识别你的客户端的 “合法标识”；API_HASH 申请需要登陆 <a href="https://my.telegram.org/">https://my.telegram.org/</a>，然后选择 <strong>API development tools</strong>:</p><p><img src="https://cdn.oss.link/markdown/qp2BjK.png" alt="qp2BjK"></p><p>然后填写相关信息，最后 Telegram 就会为你生成好 API_HASH:</p><p><img src="https://cdn.oss.link/markdown/QGoh8Q.png" alt="QGoh8Q"></p><h3 id="3-3、TDLib-使用"><a href="#3-3、TDLib-使用" class="headerlink" title="3.3、TDLib 使用"></a>3.3、TDLib 使用</h3><p>TDLib 构建好了，API HASH 也有了，那么根据自己选择的语言找一个靠谱的 SDK 使用即可；比如 Golang 开发，我选择了 <a href="https://github.com/Arman92/go-tdlib">https://github.com/Arman92/go-tdlib</a>，这个库使用相当简单:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/Arman92/go-tdlib&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tdlib.SetLogVerbosityLevel(<span class="hljs-number">1</span>)<br>tdlib.SetFilePath(<span class="hljs-string">&quot;./errors.txt&quot;</span>)<br><br><span class="hljs-comment">// Create new instance of client</span><br>client := tdlib.NewClient(tdlib.Config&#123;<br>APIID:               <span class="hljs-string">&quot;187786&quot;</span>,<br>APIHash:             <span class="hljs-string">&quot;e782045df67ba48e441ccb105da8fc85&quot;</span>,<br>SystemLanguageCode:  <span class="hljs-string">&quot;en&quot;</span>,<br>DeviceModel:         <span class="hljs-string">&quot;Server&quot;</span>,<br>SystemVersion:       <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>ApplicationVersion:  <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>UseMessageDatabase:  <span class="hljs-literal">true</span>,<br>UseFileDatabase:     <span class="hljs-literal">true</span>,<br>UseChatInfoDatabase: <span class="hljs-literal">true</span>,<br>UseTestDataCenter:   <span class="hljs-literal">false</span>,<br>DatabaseDirectory:   <span class="hljs-string">&quot;./tdlib-db&quot;</span>,<br>FileDirectory:       <span class="hljs-string">&quot;./tdlib-files&quot;</span>,<br>IgnoreFileNames:     <span class="hljs-literal">false</span>,<br>&#125;)<br><br><span class="hljs-keyword">for</span> &#123;<br>currentState, _ := client.Authorize()<br><span class="hljs-keyword">if</span> currentState.GetAuthorizationStateEnum() == tdlib.AuthorizationStateWaitPhoneNumberType &#123;<br>fmt.Print(<span class="hljs-string">&quot;Enter phone: &quot;</span>)<br><span class="hljs-keyword">var</span> number <span class="hljs-type">string</span><br>fmt.Scanln(&amp;number)<br>_, err := client.SendPhoneNumber(number)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Error sending phone number: %v&quot;</span>, err)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> currentState.GetAuthorizationStateEnum() == tdlib.AuthorizationStateWaitCodeType &#123;<br>fmt.Print(<span class="hljs-string">&quot;Enter code: &quot;</span>)<br><span class="hljs-keyword">var</span> code <span class="hljs-type">string</span><br>fmt.Scanln(&amp;code)<br>_, err := client.SendAuthCode(code)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Error sending auth code : %v&quot;</span>, err)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> currentState.GetAuthorizationStateEnum() == tdlib.AuthorizationStateWaitPasswordType &#123;<br>fmt.Print(<span class="hljs-string">&quot;Enter Password: &quot;</span>)<br><span class="hljs-keyword">var</span> password <span class="hljs-type">string</span><br>fmt.Scanln(&amp;password)<br>_, err := client.SendAuthPassword(password)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Error sending auth password: %v&quot;</span>, err)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> currentState.GetAuthorizationStateEnum() == tdlib.AuthorizationStateReadyType &#123;<br>fmt.Println(<span class="hljs-string">&quot;Authorization Ready! Let&#x27;s rock&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Main loop</span><br><span class="hljs-keyword">for</span> update := <span class="hljs-keyword">range</span> client.RawUpdates &#123;<br><span class="hljs-comment">// Show all updates</span><br>fmt.Println(update.Data)<br>fmt.Print(<span class="hljs-string">&quot;\n\n&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 Telegram 是允许多客户端登陆的(<strong>跟我一起喊:微信垃圾、张小龙垃圾</strong>)，所以使用 TDLib 我们可以完全控制我们的账户行为；那么 “东半球最浪漫诗人” 实现就相对简单:</p><ul><li>自己爬一点古诗名句: <a href="https://github.com/mritd/poetbot/blob/master/poet.txt">https://github.com/mritd/poetbot/blob/master/poet.txt</a></li><li>写点代码定时 rename: <a href="https://github.com/mritd/poetbot/blob/master/main.go#L165">https://github.com/mritd/poetbot/blob/master/main.go#L165</a></li></ul><p>核心代码就这几行:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 一个定时任务工具</span><br>cn := cron.New()<br><br><span class="hljs-comment">// 默认 30s 执行一次</span><br>_, err = cn.AddFunc(c.String(<span class="hljs-string">&quot;cron&quot;</span>), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    rand.Seed(time.Now().Unix())<br>    <span class="hljs-comment">// 随机取一句诗</span><br>    name := data[rand.Intn(<span class="hljs-built_in">len</span>(data)<span class="hljs-number">-1</span>)]<br>    logger.Infof(<span class="hljs-string">&quot;update name to [%s]...&quot;</span>, name)<br>    <span class="hljs-comment">// 调用 TDLib 改名</span><br>    _, err := client.SetName(name, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        logger.Error(err)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>效果嘛，就这样:</p><p><img src="https://cdn.oss.link/markdown/A15b2P.png" alt="A15b2P"></p><p><img src="https://cdn.oss.link/markdown/3MXSCI.png" alt="3MXSCI"></p>]]></content>
    
    
    <summary type="html">Telegram 确实好用，搓个 Bot 也好玩</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
    <category term="Telegram" scheme="https://mritd.com/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>nerdctl 初试</title>
    <link href="https://mritd.com/2021/06/01/nerdctl-test/"/>
    <id>https://mritd.com/2021/06/01/nerdctl-test/</id>
    <published>2021-06-01T13:46:00.000Z</published>
    <updated>2021-06-01T13:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Containerd 发布 1.5 以后，nerdctl 工具配合 Containerd 的情况下基本已经可以替换掉 Docker 和 Docker Compose；由于天下苦 Docker 久已，没忍住今天试了试。</p><h2 id="一、nerdctl-安装"><a href="#一、nerdctl-安装" class="headerlink" title="一、nerdctl 安装"></a>一、nerdctl 安装</h2><p>nerdctl 官方发布包包含两个安装版本:</p><ul><li>Minimal: 仅包含 nerdctl 二进制文件以及 rootless 模式下的辅助安装脚本</li><li>Full: 看名字就能知道是个全量包，其包含了 Containerd、CNI、runc、BuildKit 等完整组件</li></ul><p>这时候用脚趾头想我都要一把梭，在一把梭之前先卸载以前安装的 Docker 以及 Containerd 等组件(以下以 Ubuntu 20.04 为例):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt purge docker.io containerd -y<br></code></pre></td></tr></table></figure><p>然后下载安装包解压启动即可(一把梭真香):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载压缩包</span><br>wget https://github.com/containerd/nerdctl/releases/download/v0.8.2/nerdctl-full-0.8.2-linux-amd64.tar.gz<br><br><span class="hljs-comment"># 解压安装</span><br>tar Cxzvvf /usr/local nerdctl-full-0.8.2-linux-amd64.tar.gz<br><br><span class="hljs-comment"># 启动 containerd 和 buildkitd</span><br>systemctl <span class="hljs-built_in">enable</span> --now containerd<br>systemctl <span class="hljs-built_in">enable</span> --now buildkit<br></code></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>启动完成后就可以通过 <code>ctr</code>、<code>crictl</code> 命令测试 containerd 是否工作正常了；没问题的话继续折腾 <code>nerdctl</code>。</p><h3 id="2-1、Docker-CLI-兼容"><a href="#2-1、Docker-CLI-兼容" class="headerlink" title="2.1、Docker CLI 兼容"></a>2.1、Docker CLI 兼容</h3><p>Docker CLI 的兼容具体情况可以从 <a href="https://github.com/containerd/nerdctl#command-reference">https://github.com/containerd/nerdctl#command-reference</a> 中查看相关说明；既然是为了兼容 Docker CLI，那么在运行时只需要把 <code>docker</code> 命令换成 <code>nerdctl</code> 命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh">vm.node ➜ ~ nerdctl run -d --name <span class="hljs-built_in">test</span> -p 8080:80 nginx:alpine<br>80342ff329574ab290c212b2b786b52dd0c3f3209ee8e9e06878259dd1186879<br>vm.node ➜  ~ nerdctl ps<br>CONTAINER ID    IMAGE                             COMMAND                   CREATED          STATUS    PORTS                   NAMES<br>80342ff32957    docker.io/library/nginx:alpine    <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>    3 seconds ago    Up        0.0.0.0:8080-&gt;80/tcp    <span class="hljs-built_in">test</span><br>vm.node ➜ ~ curl 10.0.0.5:8080<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>    body &#123;<br>        width: 35em;<br>        margin: 0 auto;<br>        font-family: Tahoma, Verdana, Arial, sans-serif;<br>    &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>唯一需要注意的是部分命令选项还是有一定不兼容，比如 <code>run</code> 的时候 <code>-d</code> 和 <code>-t</code> 不能一起用，<code>--restart</code> 策略不支持等，但是通过列表可以看到大部分 cli 都已经完成了。</strong></p><h3 id="2-2、Docker-Compose-兼容"><a href="#2-2、Docker-Compose-兼容" class="headerlink" title="2.2、Docker Compose 兼容"></a>2.2、Docker Compose 兼容</h3><p>由于环境不同吧，说实话 Docker Compose 兼容才是吸引最大的一点；因为现实环境中很少有直接 <code>docker run...</code> 这么干的，大部分不重要服务都是通过 <code>docker-compose</code> 启动的；而目前来说 <code>nerdctl</code> 配合 CNI 等已经完成了大部分 Compose 的兼容:</p><p><strong>docker-compose.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">cloudreve:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mritd/cloudreve:relativepath</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cloudreve</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5212:5212&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5443:5443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/etc/cloudreve</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">data:/data</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">shared:/downloads</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;/etc/cloudreve/conf.ini&quot;</span>]<br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">shared:</span><br>  <span class="hljs-attr">data:</span><br></code></pre></td></tr></table></figure><p>运行测试:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">vm.node ➜ nerdctl compose up -d<br>INFO[0000] Creating network test_default<br>INFO[0000] Ensuring image mritd/cloudreve:relativepath<br>INFO[0000] Creating container cloudreve<br></code></pre></td></tr></table></figure><p><strong>不过目前比较尴尬的是 compose 还不支持 <code>ps</code> 命令，同时如果 volume 了宿主机目录，如果目录不存在也不会自动创建；<code>logs</code> 命令似乎也有 BUG。</strong></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>nerdctl 目前还有很多不完善的地方，比如 <code>cp</code> 等命令不支持，<code>compose</code> 命令不完善，BuildKit 还不支持多平台交叉编译等；所以简单玩玩倒是可以，距离生产使用还需要一些时间，但是总体来说<strong>未来可期</strong>，相信不久以后我们会离 Docker 越来越远。</p>]]></content>
    
    
    <summary type="html">今天突然想起了 nerdctl，装一个玩玩...</summary>
    
    
    
    <category term="Containerd" scheme="https://mritd.com/categories/containerd/"/>
    
    
    <category term="nerdctl" scheme="https://mritd.com/tags/nerdctl/"/>
    
  </entry>
  
  <entry>
    <title>Golang 监控 HTTPS 证书过期时间</title>
    <link href="https://mritd.com/2021/05/31/golang-check-certificate-expiration-time/"/>
    <id>https://mritd.com/2021/05/31/golang-check-certificate-expiration-time/</id>
    <published>2021-05-31T04:47:00.000Z</published>
    <updated>2021-05-31T04:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、业务需求"><a href="#一、业务需求" class="headerlink" title="一、业务需求"></a>一、业务需求</h2><p>由于近几年 Let’s Encrypt 的兴起以及 HTTPS 的普及，个人用户终于可以免费 “绿” 一把了；但是 Let’s Encrypt ACME 申请的证书目前只有 3 个月，过期就要更换，最尴尬的是某些比较重要的东西(比如扶墙服务)证书一旦过期会耽误大事；而不同环境下自动更换证书工具也不一定靠谱，极端时候还是需要自己手动更换，所以催生了我想写个证书过期时间检测的小玩具的想法。</p><h2 id="二、HTTPS-证书链"><a href="#二、HTTPS-证书链" class="headerlink" title="二、HTTPS 证书链"></a>二、HTTPS 证书链</h2><p>了解证书加密体系的应该知道，TLS 证书是链式信任的，所以中间任何一个证书过期、失效都会导致整个信任链断裂，不过单纯的 Let’s Encrypt ACME 证书检测可能只关注末端证书即可，除非哪天 Let’s Encrypt 倒下…</p><h2 id="三、Go-的-HTTP-请求"><a href="#三、Go-的-HTTP-请求" class="headerlink" title="三、Go 的 HTTP 请求"></a>三、Go 的 HTTP 请求</h2><p>Go 在发送 HTTP 请求后，在响应体中会包含一个 <code>TLS *tls.ConnectionState</code> 结构体，该结构体中目前存放了服务端返回的整个证书链:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ConnectionState records basic TLS details about the connection.</span><br><span class="hljs-keyword">type</span> ConnectionState <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// Version is the TLS version used by the connection (e.g. VersionTLS12).</span><br>Version <span class="hljs-type">uint16</span><br><br><span class="hljs-comment">// HandshakeComplete is true if the handshake has concluded.</span><br>HandshakeComplete <span class="hljs-type">bool</span><br><br><span class="hljs-comment">// DidResume is true if this connection was successfully resumed from a</span><br><span class="hljs-comment">// previous session with a session ticket or similar mechanism.</span><br>DidResume <span class="hljs-type">bool</span><br><br><span class="hljs-comment">// CipherSuite is the cipher suite negotiated for the connection (e.g.</span><br><span class="hljs-comment">// TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_AES_128_GCM_SHA256).</span><br>CipherSuite <span class="hljs-type">uint16</span><br><br><span class="hljs-comment">// NegotiatedProtocol is the application protocol negotiated with ALPN.</span><br>NegotiatedProtocol <span class="hljs-type">string</span><br><br><span class="hljs-comment">// NegotiatedProtocolIsMutual used to indicate a mutual NPN negotiation.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Deprecated: this value is always true.</span><br>NegotiatedProtocolIsMutual <span class="hljs-type">bool</span><br><br><span class="hljs-comment">// ServerName is the value of the Server Name Indication extension sent by</span><br><span class="hljs-comment">// the client. It&#x27;s available both on the server and on the client side.</span><br>ServerName <span class="hljs-type">string</span><br><br><span class="hljs-comment">// PeerCertificates are the parsed certificates sent by the peer, in the</span><br><span class="hljs-comment">// order in which they were sent. The first element is the leaf certificate</span><br><span class="hljs-comment">// that the connection is verified against.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// On the client side, it can&#x27;t be empty. On the server side, it can be</span><br><span class="hljs-comment">// empty if Config.ClientAuth is not RequireAnyClientCert or</span><br><span class="hljs-comment">// RequireAndVerifyClientCert.</span><br>PeerCertificates []*x509.Certificate<br><br><span class="hljs-comment">// VerifiedChains is a list of one or more chains where the first element is</span><br><span class="hljs-comment">// PeerCertificates[0] and the last element is from Config.RootCAs (on the</span><br><span class="hljs-comment">// client side) or Config.ClientCAs (on the server side).</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// On the client side, it&#x27;s set if Config.InsecureSkipVerify is false. On</span><br><span class="hljs-comment">// the server side, it&#x27;s set if Config.ClientAuth is VerifyClientCertIfGiven</span><br><span class="hljs-comment">// (and the peer provided a certificate) or RequireAndVerifyClientCert.</span><br>VerifiedChains [][]*x509.Certificate<br><br><span class="hljs-comment">// SignedCertificateTimestamps is a list of SCTs provided by the peer</span><br><span class="hljs-comment">// through the TLS handshake for the leaf certificate, if any.</span><br>SignedCertificateTimestamps [][]<span class="hljs-type">byte</span><br><br><span class="hljs-comment">// OCSPResponse is a stapled Online Certificate Status Protocol (OCSP)</span><br><span class="hljs-comment">// response provided by the peer for the leaf certificate, if any.</span><br>OCSPResponse []<span class="hljs-type">byte</span><br><br><span class="hljs-comment">// TLSUnique contains the &quot;tls-unique&quot; channel binding value (see RFC 5929,</span><br><span class="hljs-comment">// Section 3). This value will be nil for TLS 1.3 connections and for all</span><br><span class="hljs-comment">// resumed connections.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Deprecated: there are conditions in which this value might not be unique</span><br><span class="hljs-comment">// to a connection. See the Security Considerations sections of RFC 5705 and</span><br><span class="hljs-comment">// RFC 7627, and https://mitls.org/pages/attacks/3SHAKE#channelbindings.</span><br>TLSUnique []<span class="hljs-type">byte</span><br><br><span class="hljs-comment">// ekm is a closure exposed via ExportKeyingMaterial.</span><br>ekm <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(label <span class="hljs-type">string</span>, context []<span class="hljs-type">byte</span>, length <span class="hljs-type">int</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>根据源码注释可以看到，<code>PeerCertificates</code> 包含了服务端所有证书，那么如果需要检测证书过期时间只需要遍历这个证书切片即可。</p><h2 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h2><p>基本需求确定，且确立代码可行性后直接开始 coding:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkSSL</span><span class="hljs-params">(beforeTime time.Duration)</span></span> <span class="hljs-type">error</span> &#123;<br>client := &amp;http.Client&#123;<br>Transport: &amp;http.Transport&#123;<br><span class="hljs-comment">// 注意如果证书已过期，那么只有在关闭证书校验的情况下链接才能建立成功</span><br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="hljs-literal">true</span>&#125;,<br>&#125;,<br><span class="hljs-comment">// 10s 超时后认为服务挂了</span><br>Timeout: <span class="hljs-number">10</span> * time.Second,<br>&#125;<br>resp, err := client.Get(<span class="hljs-string">&quot;https://mritd.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; _ = resp.Body.Close() &#125;()<br><br><span class="hljs-comment">// 遍历所有证书</span><br><span class="hljs-keyword">for</span> _, cert := <span class="hljs-keyword">range</span> resp.TLS.PeerCertificates &#123;<br><span class="hljs-comment">// 检测证书是否已经过期</span><br><span class="hljs-keyword">if</span> !cert.NotAfter.After(time.Now()) &#123;<br><span class="hljs-keyword">return</span> NewWebSiteError(fmt.Sprintf(<span class="hljs-string">&quot;Website [https://mritd.com] certificate has expired: %s&quot;</span>, cert.NotAfter.Local().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)))<br>&#125;<br><br><span class="hljs-comment">// 检测证书距离当前时间 是否小于 beforeTime</span><br><span class="hljs-comment">// 例如 beforeTime = 7d，那么在证书过期前 6d 开始就发出警告</span><br><span class="hljs-keyword">if</span> cert.NotAfter.Sub(time.Now()) &lt; beforeTime &#123;<br><span class="hljs-keyword">return</span> NewWebSiteError(fmt.Sprintf(<span class="hljs-string">&quot;Website [https://mritd.com] certificate will expire, remaining time: %fh&quot;</span>, cert.NotAfter.Sub(time.Now()).Hours()))<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、整合告警"><a href="#五、整合告警" class="headerlink" title="五、整合告警"></a>五、整合告警</h2><p>基本检测逻辑完成后，可以尝试集成告警服务，例如 Email、Telegram、微信通知等；告警的实现暂时不在本文讨论范围内，具体完整实现可以参考 <a href="https://github.com/mritd/certmonitor">https://github.com/mritd/certmonitor</a>，certmonitor 集成了 Telegram，最终效果如下:</p><p><img src="https://cdn.oss.link/markdown/ixjtRl.png" alt="ixjtRl"></p><h2 id="六、其他改进"><a href="#六、其他改进" class="headerlink" title="六、其他改进"></a>六、其他改进</h2><p>有些情况下某些服务不一定是完全基于 HTTPS 的，所以协议上可以后续去尝试使用 tls 客户端直接链接，还可能需要考虑未来基于 QUIC 的 HTTP3 等，复杂点也要支持文件证书检测… 给我时间我能给自己提一万个需求(今天就先码到这)…</p>]]></content>
    
    
    <summary type="html">迫于需要节省成本(穷)，一直使用 Let&#39;s Encrypt 签发的证书，为了防止证书过期，自己撮了一个小工具</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 切换到 Containerd</title>
    <link href="https://mritd.com/2021/05/29/use-containerd-with-kubernetes/"/>
    <id>https://mritd.com/2021/05/29/use-containerd-with-kubernetes/</id>
    <published>2021-05-29T15:01:00.000Z</published>
    <updated>2021-05-29T15:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ul><li>Ubuntu 20.04 x5</li><li>Etcd 3.4.16</li><li>Kubernetes 1.21.1</li><li>Containerd 1.3.3</li></ul><h3 id="1-1、处理-IPVS"><a href="#1-1、处理-IPVS" class="headerlink" title="1.1、处理 IPVS"></a>1.1、处理 IPVS</h3><p>由于 Kubernetes 新版本 Service 实现切换到 IPVS，所以需要确保内核加载了 IPVS modules；以下命令将设置系统启动自动加载 IPVS 相关模块，执行完成后需要重启。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Kernel modules</span><br><span class="hljs-built_in">cat</span> &gt; /etc/modules-load.d/50-kubernetes.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"># Load some kernel modules needed by kubernetes at boot</span><br><span class="hljs-string">nf_conntrack</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">ip_vs</span><br><span class="hljs-string">ip_vs_lc</span><br><span class="hljs-string">ip_vs_wlc</span><br><span class="hljs-string">ip_vs_rr</span><br><span class="hljs-string">ip_vs_wrr</span><br><span class="hljs-string">ip_vs_lblc</span><br><span class="hljs-string">ip_vs_lblcr</span><br><span class="hljs-string">ip_vs_dh</span><br><span class="hljs-string">ip_vs_sh</span><br><span class="hljs-string">ip_vs_fo</span><br><span class="hljs-string">ip_vs_nq</span><br><span class="hljs-string">ip_vs_sed</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># sysctl</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/50-kubernetes.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">net.ipv4.ip_forward=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="hljs-string">fs.inotify.max_user_watches=525000</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>重启完成后务必检查相关 module 加载以及内核参数设置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># check ipvs modules</span><br>➜ ~ lsmod | grep ip_vs<br>ip_vs_sed              16384  0<br>ip_vs_nq               16384  0<br>ip_vs_fo               16384  0<br>ip_vs_sh               16384  0<br>ip_vs_dh               16384  0<br>ip_vs_lblcr            16384  0<br>ip_vs_lblc             16384  0<br>ip_vs_wrr              16384  0<br>ip_vs_rr               16384  0<br>ip_vs_wlc              16384  0<br>ip_vs_lc               16384  0<br>ip_vs                 155648  22 ip_vs_wlc,ip_vs_rr,ip_vs_dh,ip_vs_lblcr,ip_vs_sh,ip_vs_fo,ip_vs_nq,ip_vs_lblc,ip_vs_wrr,ip_vs_lc,ip_vs_sed<br>nf_conntrack          139264  1 ip_vs<br>nf_defrag_ipv6         24576  2 nf_conntrack,ip_vs<br>libcrc32c              16384  5 nf_conntrack,btrfs,xfs,raid456,ip_vs<br><br><span class="hljs-comment"># check sysctl</span><br>➜ ~ sysctl -a | grep ip_forward<br>net.ipv4.ip_forward = 1<br>net.ipv4.ip_forward_update_priority = 1<br>net.ipv4.ip_forward_use_pmtu = 0<br><br>➜ ~ sysctl -a | grep bridge-nf-call<br>net.bridge.bridge-nf-call-arptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br></code></pre></td></tr></table></figure><h3 id="1-2、安装-Containerd"><a href="#1-2、安装-Containerd" class="headerlink" title="1.2、安装 Containerd"></a>1.2、安装 Containerd</h3><p>Containerd 在 Ubuntu 20 中已经在默认官方仓库中包含，所以只需要 apt 安装即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 其他软件包后面可能会用到，所以顺手装了</span><br>apt install containerd bridge-utils nfs-common tree -y<br></code></pre></td></tr></table></figure><p>安装成功后可以通过执行 <code>ctr images ls</code> 命令验证，<strong>本章节不会对 Containerd 配置做说明，Containerd 配置文件将在 Kubernetes 安装时进行配置。</strong></p><h2 id="二、安装-kubernetes"><a href="#二、安装-kubernetes" class="headerlink" title="二、安装 kubernetes"></a>二、安装 kubernetes</h2><h3 id="2-1、安装-Etcd-集群"><a href="#2-1、安装-Etcd-集群" class="headerlink" title="2.1、安装 Etcd 集群"></a>2.1、安装 Etcd 集群</h3><p>Etcd 对于 Kubernetes 来说是核心中的核心，所以个人还是比较喜欢在宿主机安装；宿主机安装情况下为了方便我打包了一些 <strong><code>*-pack</code></strong> 的工具包，用于快速处理:</p><p>安装 CFSSL 和 ETCD</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载安装包</span><br>wget https://github.com/mritd/etcd-pack/releases/download/v3.4.16/etcd_v3.4.16.run<br>wget https://github.com/mritd/cfssl-pack/releases/download/v1.5.0/cfssl_v1.5.0.run<br><br><span class="hljs-comment"># 安装 cfssl 和 etcd</span><br><span class="hljs-built_in">chmod</span> +x *.run<br>./etcd_v3.4.16.run install<br>./cfssl_v1.5.0.run install<br></code></pre></td></tr></table></figure><p>安装完成后，<strong>自行调整 <code>/etc/cfssl/etcd/etcd-csr.json</code> 相关 IP</strong>，然后执行同目录下 <code>create.sh</code> 生成证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ ~ <span class="hljs-built_in">cat</span> /etc/cfssl/etcd/etcd-csr.json<br>&#123;<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>            <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;etcd Security&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        <span class="hljs-string">&quot;localhost&quot;</span>,<br>        <span class="hljs-string">&quot;*.etcd.node&quot;</span>,<br>        <span class="hljs-string">&quot;*.kubernetes.node&quot;</span>,<br>        <span class="hljs-string">&quot;10.0.0.11&quot;</span>,<br>        <span class="hljs-string">&quot;10.0.0.12&quot;</span>,<br>        <span class="hljs-string">&quot;10.0.0.13&quot;</span><br>    ]<br>&#125;<br><br><span class="hljs-comment"># 复制到 3 台 master</span><br>➜ ~ <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`; <span class="hljs-keyword">do</span> scp /etc/cfssl/etcd/*.pem root@10.0.0.1<span class="hljs-variable">$ip</span>:/etc/etcd/ssl; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>证书生成完成后调整每台机器的 Etcd 配置文件，然后修复权限启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制配置</span><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`; <span class="hljs-keyword">do</span> scp /etc/etcd/etcd.cluster.yaml root@10.0.0.1<span class="hljs-variable">$ip</span>:/etc/etcd/etcd.yaml; <span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 修复权限</span><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`; <span class="hljs-keyword">do</span> ssh root@10.0.0.1<span class="hljs-variable">$ip</span> <span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd; <span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 每台机器启动</span><br>systemctl start etcd<br></code></pre></td></tr></table></figure><p>启动完成后通过 <code>etcdctl</code> 验证集群状态:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 稳妥点应该执行 etcdctl endpoint health</span><br>➜ ~ etcdctl member list<br>55fcbe0adaa45350, started, etcd3, https://10.0.0.13:2380, https://10.0.0.13:2379, <span class="hljs-literal">false</span><br>cebdf10928a06f3c, started, etcd1, https://10.0.0.11:2380, https://10.0.0.11:2379, <span class="hljs-literal">false</span><br>f7a9c20602b8532e, started, etcd2, https://10.0.0.12:2380, https://10.0.0.12:2379, <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="2-2、安装-kubeadm"><a href="#2-2、安装-kubeadm" class="headerlink" title="2.2、安装 kubeadm"></a>2.2、安装 kubeadm</h3><p>kubeadm 国内用户建议使用 aliyun 的安装源:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># kubeadm</span><br>apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -<br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="hljs-string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="hljs-string">EOF</span><br>apt update<br><br><span class="hljs-comment"># ebtables、ethtool kubelet 可能会用，具体忘了，反正从官方文档上看到的</span><br>apt install kubelet kubeadm kubectl ebtables ethtool -y<br></code></pre></td></tr></table></figure><h3 id="2-3、安装-kube-apiserver-proxy"><a href="#2-3、安装-kube-apiserver-proxy" class="headerlink" title="2.3、安装 kube-apiserver-proxy"></a>2.3、安装 kube-apiserver-proxy</h3><p>kube-apiserver-proxy 是我自己编译的一个仅开启四层代理的 Nginx，其主要负责监听 <code>127.0.0.1:6443</code> 并负载到所有的 Api Server 地址(<code>0.0.0.0:5443</code>):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/mritd/kube-apiserver-proxy-pack/releases/download/v1.20.0/kube-apiserver-proxy_v1.20.0.run<br><span class="hljs-built_in">chmod</span> +x *.run<br>./kube-apiserver-proxy_v1.20.0.run install<br></code></pre></td></tr></table></figure><p>安装完成后根据 IP 地址不同自行调整 Nginx 配置文件，然后启动:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ ~ <span class="hljs-built_in">cat</span> /etc/kubernetes/apiserver-proxy.conf<br>error_log syslog:server=unix:/dev/log notice;<br><br>worker_processes auto;<br>events &#123;<br>        multi_accept on;<br>        use epoll;<br>        worker_connections 1024;<br>&#125;<br><br>stream &#123;<br>    upstream kube_apiserver &#123;<br>        least_conn;<br>        server 10.0.0.11:5443;<br>        server 10.0.0.12:5443;<br>        server 10.0.0.13:5443;<br>    &#125;<br><br>    server &#123;<br>        listen        0.0.0.0:6443;<br>        proxy_pass    kube_apiserver;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>&#125;<br><br>systemctl start kube-apiserver-proxy<br></code></pre></td></tr></table></figure><h3 id="2-4、安装-kubeadm-config"><a href="#2-4、安装-kubeadm-config" class="headerlink" title="2.4、安装 kubeadm-config"></a>2.4、安装 kubeadm-config</h3><p>kubeadm-config 是一系列配置文件的组合以及 kubeadm 安装所需的必要镜像文件的打包，安装完成后将会自动配置 Containerd、ctrictl 等:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/mritd/kubeadm-config-pack/releases/download/v1.21.1/kubeadm-config_v1.21.1.run<br><span class="hljs-built_in">chmod</span> +x *.run<br><br><span class="hljs-comment"># --load 选项用于将 kubeadm 所需镜像 load 到 containerd 中</span><br>./kubeadm-config_v1.21.1.run install --load<br></code></pre></td></tr></table></figure><h4 id="2-4-1、containerd-配置"><a href="#2-4-1、containerd-配置" class="headerlink" title="2.4.1、containerd 配置"></a>2.4.1、containerd 配置</h4><p>Containerd 配置位于 <code>/etc/containerd/config.toml</code>，其配置如下:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">version</span> = <span class="hljs-number">2</span><br><span class="hljs-comment"># 指定存储根目录</span><br><span class="hljs-attr">root</span> = <span class="hljs-string">&quot;/data/containerd&quot;</span><br><span class="hljs-attr">state</span> = <span class="hljs-string">&quot;/run/containerd&quot;</span><br><span class="hljs-comment"># OOM 评分</span><br><span class="hljs-attr">oom_score</span> = -<span class="hljs-number">999</span><br><br><span class="hljs-section">[grpc]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><br><br><span class="hljs-section">[metrics]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;127.0.0.1:1234&quot;</span><br><br><span class="hljs-section">[plugins]</span><br>  <span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br>    <span class="hljs-comment"># sandbox 镜像</span><br>    <span class="hljs-attr">sandbox_image</span> = <span class="hljs-string">&quot;k8s.gcr.io/pause:3.4.1&quot;</span><br>    <span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span><br>      <span class="hljs-attr">snapshotter</span> = <span class="hljs-string">&quot;overlayfs&quot;</span><br>      <span class="hljs-attr">default_runtime_name</span> = <span class="hljs-string">&quot;runc&quot;</span><br>      <span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span><br>        <span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span><br>          <span class="hljs-attr">runtime_type</span> = <span class="hljs-string">&quot;io.containerd.runc.v2&quot;</span><br>          <span class="hljs-comment"># 开启 systemd cgroup</span><br>          <span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br>            <span class="hljs-attr">SystemdCgroup</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-4-2、crictl-配置"><a href="#2-4-2、crictl-配置" class="headerlink" title="2.4.2、crictl 配置"></a>2.4.2、crictl 配置</h4><p>在切换到 Containerd 以后意味着以前的 <code>docker</code> 命令将不再可用，containerd 默认自带了一个 <code>ctr</code> 命令，同时 CRI 规范会自带一个 <code>crictl</code> 命令；<code>crictl</code> 命令配置文件存放在 <code>/etc/crictl.yaml</code> 中:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">runtime-endpoint:</span> <span class="hljs-string">unix:///run/containerd/containerd.sock</span><br><span class="hljs-attr">image-endpoint:</span> <span class="hljs-string">unix:///run/containerd/containerd.sock</span><br><span class="hljs-attr">pull-image-on-create:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-4-3、kubeadm-配置"><a href="#2-4-3、kubeadm-配置" class="headerlink" title="2.4.3、kubeadm 配置"></a>2.4.3、kubeadm 配置</h4><p>kubeadm 配置目前分为 2 个，一个是用于首次引导启动的 init 配置，另一个是用于其他节点 join 到 master 的配置；其中比较重要的 init 配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># /etc/kubernetes/kubeadm.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-comment"># kubeadm token create</span><br><span class="hljs-attr">bootstrapTokens:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">token:</span> <span class="hljs-string">&quot;c2t0rj.cofbfnwwrb387890&quot;</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-comment"># CRI 地址(Containerd)</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">unix:///run/containerd/containerd.sock</span><br>  <span class="hljs-attr">kubeletExtraArgs:</span><br>    <span class="hljs-attr">runtime-cgroups:</span> <span class="hljs-string">&quot;/system.slice/containerd.service&quot;</span><br>    <span class="hljs-attr">rotate-server-certificates:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-string">&quot;10.0.0.11&quot;</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">5443</span><br><span class="hljs-comment"># kubeadm certs certificate-key</span><br><span class="hljs-attr">certificateKey:</span> <span class="hljs-string">31f1e534733a1607e5ba67b2834edd3a7debba41babb1fac1bee47072a98d88b</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">&quot;kuberentes&quot;</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">&quot;v1.21.1&quot;</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br><span class="hljs-comment"># Other components of the current control plane only connect to the apiserver on the current host.</span><br><span class="hljs-comment"># This is the expected behavior, see: https://github.com/kubernetes/kubeadm/issues/2271</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&quot;127.0.0.1:6443&quot;</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">external:</span><br>    <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://10.0.0.11:2379&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://10.0.0.12:2379&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://10.0.0.13:2379&quot;</span><br>    <span class="hljs-attr">caFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd-ca.pem&quot;</span><br>    <span class="hljs-attr">certFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>    <span class="hljs-attr">keyFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br><span class="hljs-attr">networking:</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-string">&quot;10.66.0.0/16&quot;</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-string">&quot;10.88.0.1/16&quot;</span><br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">&quot;cluster.local&quot;</span><br><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-attr">alsologtostderr:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-comment">#    audit-log-maxage: &quot;21&quot;</span><br><span class="hljs-comment">#    audit-log-maxbackup: &quot;10&quot;</span><br><span class="hljs-comment">#    audit-log-maxsize: &quot;100&quot;</span><br><span class="hljs-comment">#    audit-log-path: &quot;/var/log/kube-audit/audit.log&quot;</span><br><span class="hljs-comment">#    audit-policy-file: &quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br>    <span class="hljs-attr">authorization-mode:</span> <span class="hljs-string">&quot;Node,RBAC&quot;</span><br>    <span class="hljs-attr">event-ttl:</span> <span class="hljs-string">&quot;720h&quot;</span><br>    <span class="hljs-attr">runtime-config:</span> <span class="hljs-string">&quot;api/all=true&quot;</span><br>    <span class="hljs-attr">service-node-port-range:</span> <span class="hljs-string">&quot;30000-50000&quot;</span><br>    <span class="hljs-attr">service-cluster-ip-range:</span> <span class="hljs-string">&quot;10.66.0.0/16&quot;</span><br><span class="hljs-comment">#    insecure-bind-address: &quot;0.0.0.0&quot;</span><br><span class="hljs-comment">#    insecure-port: &quot;8080&quot;</span><br>    <span class="hljs-comment"># The fraction of requests that will be closed gracefully(GOAWAY) to prevent</span><br>    <span class="hljs-comment"># HTTP/2 clients from getting stuck on a single apiserver.</span><br>    <span class="hljs-attr">goaway-chance:</span> <span class="hljs-string">&quot;0.001&quot;</span><br><span class="hljs-comment">#  extraVolumes:</span><br><span class="hljs-comment">#  - name: &quot;audit-config&quot;</span><br><span class="hljs-comment">#    hostPath: &quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br><span class="hljs-comment">#    mountPath: &quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br><span class="hljs-comment">#    readOnly: true</span><br><span class="hljs-comment">#    pathType: &quot;File&quot;</span><br><span class="hljs-comment">#  - name: &quot;audit-log&quot;</span><br><span class="hljs-comment">#    hostPath: &quot;/var/log/kube-audit&quot;</span><br><span class="hljs-comment">#    mountPath: &quot;/var/log/kube-audit&quot;</span><br><span class="hljs-comment">#    pathType: &quot;DirectoryOrCreate&quot;</span><br>  <span class="hljs-attr">certSANs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*.kubernetes.node&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10.0.0.11&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10.0.0.12&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10.0.0.13&quot;</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">controllerManager:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-attr">node-cidr-mask-size:</span> <span class="hljs-string">&quot;19&quot;</span><br>    <span class="hljs-attr">deployment-controller-sync-period:</span> <span class="hljs-string">&quot;10s&quot;</span><br>    <span class="hljs-attr">experimental-cluster-signing-duration:</span> <span class="hljs-string">&quot;8670h&quot;</span><br>    <span class="hljs-attr">node-monitor-grace-period:</span> <span class="hljs-string">&quot;20s&quot;</span><br>    <span class="hljs-attr">pod-eviction-timeout:</span> <span class="hljs-string">&quot;2m&quot;</span><br>    <span class="hljs-attr">terminated-pod-gc-threshold:</span> <span class="hljs-string">&quot;30&quot;</span><br><span class="hljs-attr">scheduler:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">oomScoreAdj:</span> <span class="hljs-number">-900</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">&quot;systemd&quot;</span><br><span class="hljs-attr">kubeletCgroups:</span> <span class="hljs-string">&quot;/system.slice/kubelet.service&quot;</span><br><span class="hljs-attr">nodeStatusUpdateFrequency:</span> <span class="hljs-string">5s</span><br><span class="hljs-attr">rotateCertificates:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">evictionSoft:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;15%&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;15%&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br><span class="hljs-attr">evictionSoftGracePeriod:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;3m&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;1m&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;3m&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;1m&quot;</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;5%&quot;</span><br><span class="hljs-attr">evictionMaxPodGracePeriod:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">imageGCLowThresholdPercent:</span> <span class="hljs-number">70</span><br><span class="hljs-attr">imageGCHighThresholdPercent:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">kubeReserved:</span><br>  <span class="hljs-attr">&quot;cpu&quot;:</span> <span class="hljs-string">&quot;500m&quot;</span><br>  <span class="hljs-attr">&quot;memory&quot;:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>  <span class="hljs-attr">&quot;ephemeral-storage&quot;:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-comment"># kube-proxy specific options here</span><br><span class="hljs-attr">clusterCIDR:</span> <span class="hljs-string">&quot;10.88.0.1/16&quot;</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-attr">oomScoreAdj:</span> <span class="hljs-number">-900</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;wrr&quot;</span><br></code></pre></td></tr></table></figure><p>init 配置具体含义请自行参考官方文档，相对于 init 配置，join 配置比较简单，<strong>不过需要注意的是如果需要 join 为 master 则需要 <code>controlPlane</code> 这部分，否则请注释掉 <code>controlPlane</code>。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># /etc/kubernetes/kubeadm-join.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">JoinConfiguration</span><br><span class="hljs-attr">controlPlane:</span><br>  <span class="hljs-attr">localAPIEndpoint:</span><br>    <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-string">&quot;10.0.0.12&quot;</span><br>    <span class="hljs-attr">bindPort:</span> <span class="hljs-number">5443</span><br>  <span class="hljs-attr">certificateKey:</span> <span class="hljs-string">31f1e534733a1607e5ba67b2834edd3a7debba41babb1fac1bee47072a98d88b</span><br><span class="hljs-attr">discovery:</span><br>  <span class="hljs-attr">bootstrapToken:</span><br>    <span class="hljs-attr">apiServerEndpoint:</span> <span class="hljs-string">&quot;127.0.0.1:6443&quot;</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">&quot;c2t0rj.cofbfnwwrb387890&quot;</span><br>    <span class="hljs-comment"># Please replace with the &quot;--discovery-token-ca-cert-hash&quot; value printed</span><br>    <span class="hljs-comment"># after the kubeadm init command is executed successfully</span><br>    <span class="hljs-attr">caCertHashes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;sha256:97590810ae34a82501717e33acfca76f16044f1a365c5ad9a1c66433c386c75c&quot;</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">unix:///run/containerd/containerd.sock</span><br>  <span class="hljs-attr">kubeletExtraArgs:</span><br>    <span class="hljs-attr">runtime-cgroups:</span> <span class="hljs-string">&quot;/system.slice/containerd.service&quot;</span><br>    <span class="hljs-attr">rotate-server-certificates:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-5、拉起-master"><a href="#2-5、拉起-master" class="headerlink" title="2.5、拉起 master"></a>2.5、拉起 master</h3><p>在调整好配置后，拉起 master 节点只需要一条命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm init --config /etc/kubernetes/kubeadm.yaml --upload-certs --ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><p>拉起完成后记得保存相关 Token 以便于后续使用。</p><h3 id="2-6、拉起其他-master"><a href="#2-6、拉起其他-master" class="headerlink" title="2.6、拉起其他 master"></a>2.6、拉起其他 master</h3><p>在第一个 master 启动完成后，使用 <code>join</code> 命令让其他 master 加入即可；<strong>需要注意的是 <code>kubeadm-join.yaml</code> 配置中需要替换 <code>caCertHashes</code> 为第一个 master 拉起后的 <code>discovery-token-ca-cert-hash</code> 的值。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --config /etc/kubernetes/kubeadm-join.yaml --ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><h3 id="2-7、拉起其他-node"><a href="#2-7、拉起其他-node" class="headerlink" title="2.7、拉起其他 node"></a>2.7、拉起其他 node</h3><p>node 节点拉起与拉起其他 master 节点一样，唯一不同的是需要注释掉配置中的 <code>controlPlane</code> 部分。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># /etc/kubernetes/kubeadm-join.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">JoinConfiguration</span><br><span class="hljs-comment">#controlPlane:</span><br><span class="hljs-comment">#  localAPIEndpoint:</span><br><span class="hljs-comment">#    advertiseAddress: &quot;10.0.0.12&quot;</span><br><span class="hljs-comment">#    bindPort: 5443</span><br><span class="hljs-comment">#  certificateKey: 31f1e534733a1607e5ba67b2834edd3a7debba41babb1fac1bee47072a98d88b</span><br><span class="hljs-attr">discovery:</span><br>  <span class="hljs-attr">bootstrapToken:</span><br>    <span class="hljs-attr">apiServerEndpoint:</span> <span class="hljs-string">&quot;127.0.0.1:6443&quot;</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">&quot;c2t0rj.cofbfnwwrb387890&quot;</span><br>    <span class="hljs-comment"># Please replace with the &quot;--discovery-token-ca-cert-hash&quot; value printed</span><br>    <span class="hljs-comment"># after the kubeadm init command is executed successfully</span><br>    <span class="hljs-attr">caCertHashes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;sha256:97590810ae34a82501717e33acfca76f16044f1a365c5ad9a1c66433c386c75c&quot;</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">unix:///run/containerd/containerd.sock</span><br>  <span class="hljs-attr">kubeletExtraArgs:</span><br>    <span class="hljs-attr">runtime-cgroups:</span> <span class="hljs-string">&quot;/system.slice/containerd.service&quot;</span><br>    <span class="hljs-attr">rotate-server-certificates:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --config /etc/kubernetes/kubeadm-join.yaml --ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><h3 id="2-8、其他处理"><a href="#2-8、其他处理" class="headerlink" title="2.8、其他处理"></a>2.8、其他处理</h3><p>由于 kubelet 开启了证书轮转，所以新集群会有大量 csr 请求，批量允许即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get csr | grep Pending | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs kubectl certificate approve<br></code></pre></td></tr></table></figure><p>同时为了 master 节点也能负载 pod，需要调整污点:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl taint nodes --all node-role.kubernetes.io/master-<br></code></pre></td></tr></table></figure><p>后续 CNI 等不在本文内容范围内。</p><h2 id="三、Containerd-常用操作"><a href="#三、Containerd-常用操作" class="headerlink" title="三、Containerd 常用操作"></a>三、Containerd 常用操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出镜像</span><br>ctr images <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 列出 k8s 镜像</span><br>ctr -n k8s.io images <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 导入镜像</span><br>ctr -n k8s.io images import xxxx.tar<br><br><span class="hljs-comment"># 导出镜像</span><br>ctr -n k8s.io images <span class="hljs-built_in">export</span> kube-scheduler.tar k8s.gcr.io/kube-scheduler:v1.21.1<br></code></pre></td></tr></table></figure><h2 id="四、资源仓库"><a href="#四、资源仓库" class="headerlink" title="四、资源仓库"></a>四、资源仓库</h2><p>本文中所有 <code>*-pack</code> 仓库地址如下:</p><ul><li><a href="https://github.com/mritd/cfssl-pack">https://github.com/mritd/cfssl-pack</a></li><li><a href="https://github.com/mritd/etcd-pack">https://github.com/mritd/etcd-pack</a></li><li><a href="https://github.com/mritd/kube-apiserver-proxy-pack">https://github.com/mritd/kube-apiserver-proxy-pack</a></li><li><a href="https://github.com/mritd/kubeadm-config-pack">https://github.com/mritd/kubeadm-config-pack</a></li></ul>]]></content>
    
    
    <summary type="html">换到 Containerd 小半年了，没事写写。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 表结构对比</title>
    <link href="https://mritd.com/2021/05/29/mysql-schema-diff/"/>
    <id>https://mritd.com/2021/05/29/mysql-schema-diff/</id>
    <published>2021-05-29T10:12:00.000Z</published>
    <updated>2021-05-29T10:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装-mysql-schema-diff"><a href="#一、安装-mysql-schema-diff" class="headerlink" title="一、安装 mysql-schema-diff"></a>一、安装 mysql-schema-diff</h2><p>Ubuntu 20.04 系统使用如下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt install libmysql-diff-perl -y<br></code></pre></td></tr></table></figure><p>安装完成后使用 <code>--help</code> 应该能看到相关提示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ ~ mysql-schema-diff --<span class="hljs-built_in">help</span><br>Usage: mysql-schema-diff [ options ] &lt;database1&gt; &lt;database2&gt;<br><br>Options:<br>  -?,  --<span class="hljs-built_in">help</span>                show this <span class="hljs-built_in">help</span><br>  -A,  --apply               interactively patch database1 to match database2<br>  -B,  --batch-apply         non-interactively patch database1 to match database2<br>  -d,  --debug[=N]           <span class="hljs-built_in">enable</span> debugging [level N, default 1]<br>  -l,  --list-tables         output the list off all used tables<br>  -o,  --only-both           only output changes <span class="hljs-keyword">for</span> tables <span class="hljs-keyword">in</span> both databases<br>  -k,  --keep-old-tables     don<span class="hljs-string">&#x27;t output DROP TABLE commands</span><br><span class="hljs-string">  -c,  --keep-old-columns    don&#x27;</span>t output DROP COLUMN commands<br>  -n,  --no-old-defs         suppress comments describing old definitions<br>  -t,  --table-re=REGEXP     restrict comparisons to tables matching REGEXP<br>  -i,  --tolerant            ignore DEFAULT, AUTO_INCREMENT, COLLATE, and formatting changes<br>  -S,  --single-transaction  perform DB dump <span class="hljs-keyword">in</span> transaction<br><br>  -h,  --host=...            connect to host<br>  -P,  --port=...            use this port <span class="hljs-keyword">for</span> connection<br>  -u,  --user=...            user <span class="hljs-keyword">for</span> login <span class="hljs-keyword">if</span> not current user<br>  -p,  --password[=...]      password to use when connecting to server<br>  -s,  --socket=...          socket to use when connecting to server<br><br><span class="hljs-keyword">for</span> &lt;databaseN&gt; only, <span class="hljs-built_in">where</span> N == 1 or 2,<br>       --hostN=...           connect to host<br>       --portN=...           use this port <span class="hljs-keyword">for</span> connection<br>       --userN=...           user <span class="hljs-keyword">for</span> login <span class="hljs-keyword">if</span> not current user<br>       --passwordN[=...]     password to use when connecting to server<br>       --socketN=...         socket to use when connecting to server<br><br>Databases can be either files or database names.<br>If there is an ambiguity, the file will be preferred;<br>to prevent this prefix the database argument with `db:<span class="hljs-string">&#x27;.</span><br></code></pre></td></tr></table></figure><h2 id="二、生成差异-SQL"><a href="#二、生成差异-SQL" class="headerlink" title="二、生成差异 SQL"></a>二、生成差异 SQL</h2><p>安装完成后可直接使用该工具生成<strong>差异 SQL 文件</strong>，<code>mysql-schema-diff</code> 工具使用如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">Usage: mysql-schema-diff [ options ] &lt;database1&gt; &lt;database2&gt;<br><br>Options:<br>  -?,  --<span class="hljs-built_in">help</span>                show this <span class="hljs-built_in">help</span><br>  -A,  --apply               interactively patch database1 to match database2<br>  -B,  --batch-apply         non-interactively patch database1 to match database2<br>  -d,  --debug[=N]           <span class="hljs-built_in">enable</span> debugging [level N, default 1]<br>  -l,  --list-tables         output the list off all used tables<br>  -o,  --only-both           only output changes <span class="hljs-keyword">for</span> tables <span class="hljs-keyword">in</span> both databases<br>  -k,  --keep-old-tables     don<span class="hljs-string">&#x27;t output DROP TABLE commands</span><br><span class="hljs-string">  -c,  --keep-old-columns    don&#x27;</span>t output DROP COLUMN commands<br>  -n,  --no-old-defs         suppress comments describing old definitions<br>  -t,  --table-re=REGEXP     restrict comparisons to tables matching REGEXP<br>  -i,  --tolerant            ignore DEFAULT, AUTO_INCREMENT, COLLATE, and formatting changes<br>  -S,  --single-transaction  perform DB dump <span class="hljs-keyword">in</span> transaction<br><br>  -h,  --host=...            connect to host<br>  -P,  --port=...            use this port <span class="hljs-keyword">for</span> connection<br>  -u,  --user=...            user <span class="hljs-keyword">for</span> login <span class="hljs-keyword">if</span> not current user<br>  -p,  --password[=...]      password to use when connecting to server<br>  -s,  --socket=...          socket to use when connecting to server<br><br><span class="hljs-keyword">for</span> &lt;databaseN&gt; only, <span class="hljs-built_in">where</span> N == 1 or 2,<br>       --hostN=...           connect to host<br>       --portN=...           use this port <span class="hljs-keyword">for</span> connection<br>       --userN=...           user <span class="hljs-keyword">for</span> login <span class="hljs-keyword">if</span> not current user<br>       --passwordN[=...]     password to use when connecting to server<br>       --socketN=...         socket to use when connecting to server<br></code></pre></td></tr></table></figure><p><strong>通俗的说，通过 <code>--hostN</code> 等参数指定两个数据库地址，例如 <code>--password1</code> 指定第一个数据库密码，<code>--password2</code> 指定第二个数据库密码；然后最后仅跟 <code>数据库1[.表名] 数据库2[.表名]</code>，表名如果不写则默认对比两个数据库。</strong>以下为样例命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql-schema-diff \<br>    --host1 127.0.0.1 --port1 3300 \<br>    --user1 bleem --password1=Bleem77965badf \<br>    --host2 127.0.0.1 --port2 3306 \<br>    --user2 bleem --password2=asnfskdf667asd8 \<br>    testdb testdb<br></code></pre></td></tr></table></figure><p>注意，首次运行后请根据生成的 SQL 判断<strong>对比是否正确</strong>，比如说<strong>想把比较新的测试库更改同步到生产库</strong>，那么 SQL 里全是<strong>DROP 字样的删除动作，这说明 <code>--hostN</code> 等参数指定反了(变成了生产库同步测试库)，此时只需要将 <code>--hostN</code> 参数调换一下即可(1改成2，2改成1)，这样生成的 SQL 就会变为 ADD 字样的添加动作。</strong></p><h2 id="三、网络问题"><a href="#三、网络问题" class="headerlink" title="三、网络问题"></a>三、网络问题</h2><p>mysql-schema-diff 工具需要在运行时能同时连接两个数据库，常规情况下可以通过 SSH 打洞来临时解决访问问题；<strong>如果实在无法打通网络环境，mysql-schema-diff 还支持文件对比</strong>，以下为一些文件对比的示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># compare table definitions in two files</span><br>mysql-schema-diff db1.mysql db2.mysql<br><br><span class="hljs-comment"># compare table definitions in a file &#x27;db1.mysql&#x27; with a database &#x27;db2&#x27;</span><br>mysql-schema-diff db1.mysql db2<br><br><span class="hljs-comment"># interactively upgrade schema of database &#x27;db1&#x27; to be like the</span><br><span class="hljs-comment"># schema described in the file &#x27;db2.mysql&#x27;</span><br>mysql-schema-diff -A db1 db2.mysql<br><br><span class="hljs-comment"># compare table definitions in two databases on a remote machine</span><br>mysql-schema-diff --host=remote.host.com --user=myaccount db1 db2<br><br><span class="hljs-comment"># compare table definitions in a local database &#x27;foo&#x27; with a</span><br><span class="hljs-comment"># database &#x27;bar&#x27; on a remote machine, when a file foo already</span><br><span class="hljs-comment"># exists in the current directory</span><br>mysql-schema-diff --host2=remote.host.com --password=secret db:foo bar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近在疯狂码业务代码，由于开发频繁导致生产库结构与测试库不一样，改动太多不想手动搞，记录一下这个小工具。</summary>
    
    
    
    <category term="Database" scheme="https://mritd.com/categories/database/"/>
    
    <category term="MySQL" scheme="https://mritd.com/categories/database/mysql/"/>
    
    
    <category term="MySQL" scheme="https://mritd.com/tags/mysql/"/>
    
    <category term="Database" scheme="https://mritd.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Longhorn 微服务化存储初试</title>
    <link href="https://mritd.com/2021/03/06/longhorn-storage-test/"/>
    <id>https://mritd.com/2021/03/06/longhorn-storage-test/</id>
    <published>2021-03-06T05:40:22.000Z</published>
    <updated>2021-03-06T05:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Longhorn-安装"><a href="#一、Longhorn-安装" class="headerlink" title="一、Longhorn 安装"></a>一、Longhorn 安装</h2><h3 id="1-1、准备工作"><a href="#1-1、准备工作" class="headerlink" title="1.1、准备工作"></a>1.1、准备工作</h3><p>Longhorn 官方推荐的最小配置如下，如果数据并不算太重要可适当缩减和调整，具体请自行斟酌:</p><ul><li>3 Nodes</li><li>4 vCPUs per Node</li><li>4 GiB per Node</li><li>SSD&#x2F;NVMe or similar performance block device on the node for storage(We don’t recommend using spinning disks with Longhorn, due to low IOPS.)</li></ul><p>本次安装测试环境如下:</p><ul><li>Ubuntu 20.04(8c16g)</li><li>Disk 200g</li><li>Kubernetes 1.20.4(kubeadm)</li><li>Longhorn 1.1.0</li></ul><h3 id="1-2、安装-Longhorn-Helm"><a href="#1-2、安装-Longhorn-Helm" class="headerlink" title="1.2、安装 Longhorn(Helm)"></a>1.2、安装 Longhorn(Helm)</h3><p>安装 Longhorn 推荐使用 Helm，因为在卸载时 kubectl 无法直接使用 delete 卸载，需要进行其他清理工作；helm 安装命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># add Longhorn repo</span><br>helm repo add longhorn https://charts.longhorn.io<br><br><span class="hljs-comment"># update</span><br>helm repo update<br><br><span class="hljs-comment"># create namespace</span><br>kubectl create namespace longhorn-system<br><br><span class="hljs-comment"># install</span><br>helm install longhorn longhorn/longhorn --namespace longhorn-system --values longhorn-values.yaml<br></code></pre></td></tr></table></figure><p>其中 <code>longhorn-values.yaml</code> 请从 <a href="https://github.com/longhorn/charts/blob/longhorn-1.1.0/charts/longhorn/values.yaml">Charts 仓库</a> 下载，本文仅修改了以下两项:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">defaultSettings:</span><br>  <span class="hljs-comment"># 默认存储目录(默认为 /var/lib/longhorn)</span><br>  <span class="hljs-attr">defaultDataPath:</span> <span class="hljs-string">&quot;/data/longhorn&quot;</span><br>  <span class="hljs-comment"># 默认副本数量</span><br>  <span class="hljs-attr">defaultReplicaCount:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>安装完成后 Pod 运行情况如下所示:</p><p><img src="https://cdn.oss.link/markdown/M5ZYyb1614931770247.png" alt="M5ZYyb1614931770247"></p><p>此后可通过集群 Ingress 或者 NodePort 等方式暴露 service <code>longhorn-frontend</code> 的 80 端口来访问 Longhorn UI；<strong>注意，Ingress 等负载均衡其如果采用 HTTPS 访问请确保向 Longhorn UI 传递了 <code>X-Forwarded-Proto: https</code> 头，否则可能导致 Websocket 不安全链接以及跨域等问题，后果就是 UI 出现一些神奇的小问题(我排查了好久…)。</strong></p><p><img src="https://cdn.oss.link/markdown/vIFU281614931897632.png" alt="vIFU281614931897632"></p><h3 id="1-3、卸载-Longhorn"><a href="#1-3、卸载-Longhorn" class="headerlink" title="1.3、卸载 Longhorn"></a>1.3、卸载 Longhorn</h3><p>如果在安装过程中有任何操作错误，或想重新安装验证相关设置，可通过以下命令卸载 Longhorn:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 卸载</span><br>helm uninstall longhorn -n longhorn-system<br></code></pre></td></tr></table></figure><h2 id="二、Longhorn-架构"><a href="#二、Longhorn-架构" class="headerlink" title="二、Longhorn 架构"></a>二、Longhorn 架构</h2><h3 id="2-1、Design"><a href="#2-1、Design" class="headerlink" title="2.1、Design"></a>2.1、Design</h3><p>Longhorn 总体设计分为两层: <strong>数据平面和控制平面</strong>；Longhorn Engine 是一个存储控制器，对应数据平面；Longhorn Manager 对应控制平面。</p><h4 id="2-1-1、Longhorn-Manager"><a href="#2-1-1、Longhorn-Manager" class="headerlink" title="2.1.1、Longhorn Manager"></a>2.1.1、Longhorn Manager</h4><p>Longhorn Manager 使用 Operator 模式，作为 Daemonset 运行在每个节点上；Longhorn Manager 负责接收 Longhorn UI 以及 Kubernetes Volume 插件的 API 调用，然后创建和管理 Volume；</p><p>Longhorn Manager 在与 kubernetes API 通信并创建 Longhorn Volume CRD(heml 安装直接创建了相关 CRD，查看代码后发现 Manager 里面似乎也会判断并创建一下)，此后 Longhorn Manager watch 相关 CRD 资源和 Kubernetes 原生资源(PV&#x2F;PVC…)，一但集群内创建了 Longhorn Volume 则 Longhorn Manager 负责创建物理 Volume。</p><p>当 Longhorn Manager 创建 Volume 时，Longhorn Manager 首先会在 Volume 所在节点创建 Longhorn Engine 实例(对比实际行为后发现所谓的 “实例” 其实只是运行了一个 Linux 进程，并非创建 Pod)，然后根据副本数量在所需放置副本的节点上创建对应的副本。</p><h4 id="2-1-2、Longhorn-Engine"><a href="#2-1-2、Longhorn-Engine" class="headerlink" title="2.1.2、Longhorn Engine"></a>2.1.2、Longhorn Engine</h4><p>Longhorn Engine 始终与其使用 Volume 的 Pod 在同一节点上，它跨存储在多个节点上的多个副本同步复制卷；同时数据的多路径保证 Longhorn Volume 的 HA，单个副本或者 Engine 出现问题不会影响到所有副本或 Pod 对 Volume 的访问。</p><p>下图中展示了 Longhorn 的 HA 架构，每个 Kubernetes Volume 将会对应一个 Longhorn Engine，每个 Engine 管理 Volume 的多个副本，Engine 与 副本实质都会是一个单独的 Linux 进程运行:</p><p><img src="https://cdn.oss.link/markdown/Yxljct1614932095536.png" alt="Yxljct1614932095536"></p><p><strong>注意: 图中的 Engine 并非是单独的一个 Pod，而是每一个 Volume 会对应一个 golang exec 出来的 Linux 进程。</strong></p><h3 id="2-2、CSI-Plugin"><a href="#2-2、CSI-Plugin" class="headerlink" title="2.2、CSI Plugin"></a>2.2、CSI Plugin</h3><p>CSI 部分不做过多介绍，具体参考 <a href="https://mritd.com/2020/08/19/how-to-write-a-csi-driver-for-kubernetes/">如何编写 CSI 插件</a>；以下为简要说明:</p><ul><li>Kubernetes CSI 被抽象为具体的 CSI 容器并通过 gRPC 调用目标 plugin</li><li>Longhorn CSI Plugin 负责接收标准 CSI 容器发起的 gRPC 调用</li><li>Longhorn CSI Plugin 将 Kubernetes CSI gRPC 调用转换为自己的 Longhorn API 调用，并将其转发到 Longhorn Manager 控制平面</li><li>Longhorn 某些功能使用了 iSCSI，所以可能需要在节点上安装 open-iscsi 或 iscsiadm</li></ul><h3 id="2-3、Longhorn-UI"><a href="#2-3、Longhorn-UI" class="headerlink" title="2.3、Longhorn UI"></a>2.3、Longhorn UI</h3><p>Longhorn UI 向外暴露一个 Dashboard，并用过 Longhorn API 与 Longhorn Manager 控制平面交互；Longhorn UI 在架构上类似于 Longhorn CSI Plugin 的替代者，只不过一个是通过 Web UI 转化为 Longhorn API，另一个是将 CSI gRPC 转换为 Longhorn API。</p><h3 id="2-4、Replicas-And-Snapshots"><a href="#2-4、Replicas-And-Snapshots" class="headerlink" title="2.4、Replicas And Snapshots"></a>2.4、Replicas And Snapshots</h3><p>在 Longhorn 微服务架构中，副本也作为单独的进程运行，其实质存储文件采用 Linux 的稀释文件方式；每个副本均包含 Longhorn Volume 的快照链，快照就像一个 Image 层，其中最旧的快照用作基础层，而较新的快照位于顶层。如果数据会覆盖旧快照中的数据，则仅将其包含在新快照中；整个快照链展示了数据的当前状态。</p><p>在进行快照时，Longhorn 会创建差异磁盘(differencing disk)文件，每个差异磁盘文件被看作是一个快照，当 Longhorn 读取文件时从上层开始依次查找，其示例图如下:</p><p><img src="https://cdn.oss.link/markdown/tOvsJ91614932116138.jpg" alt="tOvsJ91614932116138"></p><p><strong>为了提高读取性能，Longhorn 维护了一个读取索引，该索引记录了每个 4K 存储块中哪个差异磁盘包含有效数据；读取索引会占用一定的内存，每个 4K 块占用一个字节，字节大小的读取索引意味着每个卷最多可以拍摄 254 个快照，在大约 1TB 的卷中读取索引大约会消耗256MB 的内存。</strong></p><h3 id="2-5、Backups-and-Secondary-Storage"><a href="#2-5、Backups-and-Secondary-Storage" class="headerlink" title="2.5、Backups and Secondary Storage"></a>2.5、Backups and Secondary Storage</h3><p>由于数据大小、网络延迟等限制，跨区域同步复制无法做到很高的时效性，所以 Longhorn 提供了称之为 Secondary Storage 的备份方案；Secondary Storage 依赖外部的 NFS、S3 等存储设施，一旦在 Longhorn 中配置了 Backup Storage，Longhorn 将会通过卷的指定版本快照完成备份；<strong>备份过程中 Longhorn 将会抹平快照信息，这意味着快照历史变更将会丢失，相同的原始卷备份是增量的，通过不断的应用差异磁盘文件完成；为了避免海量小文件带来的性能瓶颈，Longhorn 采用 2MB 分块进行备份，任何边界内 4k 块变动都会触发 2MB 块的备份行为；Longhorn 的备份功能为跨集群、跨区域提供完善的灾难恢复机制。</strong>Longhorn 备份机制如下图所示:</p><p><img src="https://cdn.oss.link/markdown/6EShuz1614932147884.jpg" alt="6EShuz1614932147884"></p><h3 id="2-6、Longhorn-Pods"><a href="#2-6、Longhorn-Pods" class="headerlink" title="2.6、Longhorn Pods"></a>2.6、Longhorn Pods</h3><p>上面的大部分其实来源于对官方文档 <a href="https://longhorn.io/docs/1.1.0/concepts/">Architecture and Concepts</a> 的翻译；在翻译以及阅读文档过程中，通过对比文档与实际行为，还有阅读源码发现了一些细微差异，这里着重介绍一下这些 Pod 都是怎么回事:</p><p><img src="https://cdn.oss.link/markdown/1EUF4y-1615008575-QcVGUt.png" alt="1EUF4y-1615008575-QcVGUt"></p><h4 id="2-6-1、longhorn-manager"><a href="#2-6-1、longhorn-manager" class="headerlink" title="2.6.1、longhorn-manager"></a>2.6.1、longhorn-manager</h4><p>longhorn-manager 与文档描述一致，其通过 Helm 安装时直接以 Daemonset 方式 Create 出来，然后 longhorn-manager 开启 HTTP API(9500) 等待其他组件请求；<strong>同时 longhorn-manager 还会使用 Operator 模式监听各种资源，包括不限于 Longhorn CRD 以及集群的 PV(C) 等资源，然后作出对应的响应。</strong></p><h4 id="2-6-2、longhorn-driver-deployer"><a href="#2-6-2、longhorn-driver-deployer" class="headerlink" title="2.6.2、longhorn-driver-deployer"></a>2.6.2、longhorn-driver-deployer</h4><p>Helm 安装时创建了 longhorn-driver-deployer Deployment，longhorn-driver-deployer 实际上也是 longhorn-manager 镜像启动，只不过启动后会沟通 longhorn-manager HTTP API，然后创建所有 CSI 相关容器，包括 <code>csi-provisioner</code>、<code>csi-snapshotter</code>、<code>longhorn-csi-plugin</code> 等。</p><h4 id="2-6-3、instance-manager-e"><a href="#2-6-3、instance-manager-e" class="headerlink" title="2.6.3、instance-manager-e"></a>2.6.3、instance-manager-e</h4><p>上面所说的每个 Engine 对应一个 Linux 进程其实就是通过这个 Pod 完成的，<strong>instance-manager-e 由 longhorn-manager 创建，创建完成后 instance-manager-e 监听 gRPC 8500 端口，其只要职责就是接收 gRPC 请求，并启动 Engine 进程；从上面我们 Engine 介绍可以得知 Engine 与 Volume 绑定，所以理论上集群内 Volume 被创建时有某个 “东西” 创建了 CRD <code>engines.longhorn.io</code>，然后又有人 watch 了 <code>engines.longhorn.io</code> 并通知 instance-manager-e 启动 Engine 进程；这里不负责任的推测是 longhorn-manager 干的，但是没看代码不敢说死…</strong></p><p><img src="https://cdn.oss.link/markdown/hfk9uQ1614943191222.png" alt="hfk9uQ1614943191222"></p><p>同理 <code>instance-manager-r</code> 是负责启动副本的 Linux 进程的，工作原理与 <code>instance-manager-e</code> 相同，通过简单的查看代码(IDE 没打开…哈哈哈)推测，<code>instance-manager-e/-r</code> 应该是 longhorn-manager Operator 下的产物，其维护了一个自己的 “Daemonset”，但是 kubectl 是看不到的。</p><h4 id="2-6-4、longhorn-ui"><a href="#2-6-4、longhorn-ui" class="headerlink" title="2.6.4、longhorn-ui"></a>2.6.4、longhorn-ui</h4><p>longhorn-ui 很简单，就是个 UI 界面，然后 HTTP API 沟通 longhorn-manager，这里不再做过多说明。</p><h2 id="三、Longhorn-使用"><a href="#三、Longhorn-使用" class="headerlink" title="三、Longhorn 使用"></a>三、Longhorn 使用</h2><h3 id="3-1、常规使用"><a href="#3-1、常规使用" class="headerlink" title="3.1、常规使用"></a>3.1、常规使用</h3><p>默认情况下 Helm 安装完成后会自动创建 StorageClass，如果集群中只有 Longhorn 作为存储，那么 Longhorn 的 StorageClass 将作为默认 StorageClass。关于 StorageClass、PV、PVC 如果使用这里不做过多描述，请参考官方 <a href="https://longhorn.io/docs/1.1.0/references/examples/">Example</a> 文档；</p><p><strong>需要注意的是 Longhorn 作为块存储仅支持 <code>ReadWriteOnce</code> 模式，如果想支持 <code>ReadWriteMany</code> 模式，则需要在节点安装 <code>nfs-common</code>，Longhorn 将会自动创建 <code>share-manager</code> 容器然后通过 NFSV4 共享这个 Volume 从而实现 <code>ReadWriteMany</code>；</strong>具体请参考 <a href="https://longhorn.io/docs/1.1.0/advanced-resources/rwx-workloads/">Support for ReadWriteMany (RWX) workloads</a>。</p><h3 id="3-2、添加删除磁盘"><a href="#3-2、添加删除磁盘" class="headerlink" title="3.2、添加删除磁盘"></a>3.2、添加删除磁盘</h3><p>如果出现磁盘损坏重建或者添加删除磁盘，请直接访问 UI 界面，通过下拉菜单操作即可；在操作前请将节点调整到维护模式并驱逐副本，具体请参考 <a href="https://longhorn.io/docs/1.1.0/volumes-and-nodes/disks-or-nodes-eviction/">Evicting Replicas on Disabled Disks or Nodes</a>。</p><p><img src="https://cdn.oss.link/markdown/0tedBl1614945096177.png" alt="0tedBl1614945096177"></p><p><strong>需要注意的是添加新磁盘时，磁盘挂载的软连接路径不能工作，请使用原始挂载路径或通过 <code>mount --bind</code> 命令设置新路径。</strong></p><p><img src="https://cdn.oss.link/markdown/Ps8QRR1614945234562.png" alt="Ps8QRR1614945234562"></p><h3 id="3-3、创建快照及回滚"><a href="#3-3、创建快照及回滚" class="headerlink" title="3.3、创建快照及回滚"></a>3.3、创建快照及回滚</h3><p>当创建好 Volume 以后可以用过 Longhorn UI 在线对 Volume 创建快照，<strong>但是回滚快照过程需要 Workload(Pod) 离线，同时 Volume 必须以维护模式 reattach 到某一个 Host 节点上，然后在 Longhorn UI 进行调整；</strong>以下为快照创建回滚测试:</p><p><strong>test.pvc.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">longhorn-simple-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">longhorn</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br></code></pre></td></tr></table></figure><p><strong>test.po.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">longhorn-simple-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volume-test</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:stable-alpine</span><br>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">livenessProbe:</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">ls</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/data/lost+found</span><br>        <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volv</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volv</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">longhorn-simple-pvc</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1、创建快照"><a href="#3-3-1、创建快照" class="headerlink" title="3.3.1、创建快照"></a>3.3.1、创建快照</h4><p>首先创建相关资源:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create -f test.pvc.yaml<br>kubectl create -f test.po.yaml<br></code></pre></td></tr></table></figure><p>创建完成后在 Longhorn UI 中可以看到刚刚创建出的 Volume:</p><p><img src="https://cdn.oss.link/markdown/L3hnYi-1615000011-UBMIEE.png" alt="L3hnYi-1615000011-UBMIEE"></p><p>点击 Name 链接进入到 Volume 详情，然后点击 <code>Take Snapshot</code> 按钮即可拍摄快照；<strong>有些情况下 UI 响应缓慢可能导致 <code>Take Snapshot</code> 按钮变灰，刷新两次即可恢复。</strong></p><p><img src="https://cdn.oss.link/markdown/TkKNCz-1615001806-jjaakH.png" alt="TkKNCz-1615001806-jjaakH"></p><p>快照在回滚后仍然可以进行交叉创建</p><p><img src="https://cdn.oss.link/markdown/ykQs66-1615002223-B2Z9Sa.png" alt="ykQs66-1615002223-B2Z9Sa"></p><h4 id="3-3-2、回滚快照"><a href="#3-3-2、回滚快照" class="headerlink" title="3.3.2、回滚快照"></a>3.3.2、回滚快照</h4><p><strong>回滚快照时必须停止 Pod:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 停止</span><br>kubectl delete -f test.po.yaml<br></code></pre></td></tr></table></figure><p><strong>然后重新将 Volume Attach 到宿主机:</strong></p><p><img src="https://cdn.oss.link/markdown/uuAFT8-1615001937-bGA3Sq.png" alt="uuAFT8-1615001937-bGA3Sq"></p><p><strong>注意要开启维护模式</strong></p><p><img src="https://cdn.oss.link/markdown/bFcbW3-1615002020-Q8nG15.png" alt="bFcbW3-1615002020-Q8nG15"></p><p>稍等片刻等待所有副本 “Running” 然后 Revert 即可</p><p><img src="https://cdn.oss.link/markdown/xLZdSP-1615002098-p8sueg.png" alt="xLZdSP-1615002098-p8sueg"></p><p>回滚完成后，需要 Detach Volume，以便供重新创建的 Pod 使用</p><p><img src="https://cdn.oss.link/markdown/JYZZLe-1615002351-x6A6TE.png" alt="JYZZLe-1615002351-x6A6TE"></p><h4 id="3-3-3、定时快照"><a href="#3-3-3、定时快照" class="headerlink" title="3.3.3、定时快照"></a>3.3.3、定时快照</h4><p>除了手动创建快照之外，Longhorn 还支持定时对 Volume 进行快照处理；要使用定时任务，请进入 Volume 详情页面，在 <code>Recurring Snapshot and Backup Schedule</code> 选项卡下新增定时任务即可:</p><p><img src="https://cdn.oss.link/markdown/iUpPnA-1615006838-wM4tBA.png" alt="iUpPnA-1615006838-wM4tBA"></p><p><strong>如果不想为内核 Volume 都手动设置自动快照，可以用过调整 StorageClass 来实现为每个自动创建的 PV 进行自动快照，具体请阅读 <a href="https://longhorn.io/docs/1.1.0/snapshots-and-backups/scheduling-backups-and-snapshots/#set-up-recurring-jobs-using-a-storageclass">Set up Recurring Jobs using a StorageClass</a> 文档。</strong></p><h3 id="3-4、Volume-扩容"><a href="#3-4、Volume-扩容" class="headerlink" title="3.4、Volume 扩容"></a>3.4、Volume 扩容</h3><p>Longhorn 支持对 Volume 进行扩容，扩容方式和回滚快照类似，都需要 Deacth Volume 并开启维护模式。</p><p><strong>首先停止 Workload</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ ~ kubectl <span class="hljs-built_in">exec</span> -it longhorn-simple-pod -- <span class="hljs-built_in">df</span> -h<br>Filesystem                Size      Used Available Use% Mounted on<br>overlay                 199.9G      4.7G    195.2G   2% /<br>tmpfs                    64.0M         0     64.0M   0% /dev<br>tmpfs                     7.8G         0      7.8G   0% /sys/fs/cgroup<br>/dev/longhorn/pvc-1c9e23f4-af29-4a48-9560-87983267b8d3<br>                        975.9M      2.5M    957.4M   0% /data<br>/dev/sda4                60.0G      7.7G     52.2G  13% /etc/hosts<br>/dev/sda4                60.0G      7.7G     52.2G  13% /dev/termination-log<br>/dev/sdc1               199.9G      4.7G    195.2G   2% /etc/hostname<br>/dev/sdc1               199.9G      4.7G    195.2G   2% /etc/resolv.conf<br>shm                      64.0M         0     64.0M   0% /dev/shm<br>tmpfs                     7.8G     12.0K      7.8G   0% /run/secrets/kubernetes.io/serviceaccount<br>tmpfs                     7.8G         0      7.8G   0% /proc/acpi<br>tmpfs                    64.0M         0     64.0M   0% /proc/kcore<br>tmpfs                    64.0M         0     64.0M   0% /proc/keys<br>tmpfs                    64.0M         0     64.0M   0% /proc/timer_list<br>tmpfs                    64.0M         0     64.0M   0% /proc/sched_debug<br>tmpfs                     7.8G         0      7.8G   0% /proc/scsi<br>tmpfs                     7.8G         0      7.8G   0% /sys/firmware<br><br>➜ ~ kubectl delete -f test.po.yaml<br>pod <span class="hljs-string">&quot;longhorn-simple-pod&quot;</span> deleted<br></code></pre></td></tr></table></figure><p><strong>然后直接使用 <code>kubectl</code> 编辑 PVC，调整 <code>spec.resources.requests.storage</code></strong></p><p><img src="https://cdn.oss.link/markdown/LT9aSo-1615006002-L1veZr.png" alt="LT9aSo-1615006002-L1veZr"></p><p>保存后可以从 Longhorn UI 中看到 Volume 在自动 resize</p><p><img src="https://cdn.oss.link/markdown/zG4ugo-1615006070-f7POdb.png" alt="zG4ugo-1615006070-f7POdb"></p><p>重新创建 Workload 可以看到 Volume 已经扩容成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ ~ kubectl create -f test.po.yaml<br>pod/longhorn-simple-pod created<br><br>➜ ~ kubectl <span class="hljs-built_in">exec</span> -it longhorn-simple-pod -- <span class="hljs-built_in">df</span> -h<br>Filesystem                Size      Used Available Use% Mounted on<br>overlay                 199.9G      6.9G    193.0G   3% /<br>tmpfs                    64.0M         0     64.0M   0% /dev<br>tmpfs                     7.8G         0      7.8G   0% /sys/fs/cgroup<br>/dev/longhorn/pvc-1c9e23f4-af29-4a48-9560-87983267b8d3<br>                          4.9G      4.0M      4.9G   0% /data<br>/dev/sda4                60.0G      7.6G     52.4G  13% /etc/hosts<br>/dev/sda4                60.0G      7.6G     52.4G  13% /dev/termination-log<br>/dev/sdc1               199.9G      6.9G    193.0G   3% /etc/hostname<br>/dev/sdc1               199.9G      6.9G    193.0G   3% /etc/resolv.conf<br>shm                      64.0M         0     64.0M   0% /dev/shm<br>tmpfs                     7.8G     12.0K      7.8G   0% /run/secrets/kubernetes.io/serviceaccount<br>tmpfs                     7.8G         0      7.8G   0% /proc/acpi<br>tmpfs                    64.0M         0     64.0M   0% /proc/kcore<br>tmpfs                    64.0M         0     64.0M   0% /proc/keys<br>tmpfs                    64.0M         0     64.0M   0% /proc/timer_list<br>tmpfs                    64.0M         0     64.0M   0% /proc/sched_debug<br>tmpfs                     7.8G         0      7.8G   0% /proc/scsi<br>tmpfs                     7.8G         0      7.8G   0% /sys/firmware<br></code></pre></td></tr></table></figure><p><strong>Volume 扩展过程中 Longhorn 会自动处理文件系统相关调整，但是并不是百分百会处理，一般 Longhorn 仅在以下情况做自动处理：</strong></p><ul><li>扩展后大小大约当前大小(进行扩容)</li><li>Longhorn Volume 中存在一个 Linux 文件系统</li><li>Longhorn Volume 中的 Linux 文件系统为 ext4 或 xfs</li><li>Longhorn Volume 使用 <code>block device</code> 作为 frontend</li></ul><p>非这几种情况外，如还原到更小容量的 Snapshot，可能需要手动调整文件系统，具体请参考 <a href="https://longhorn.io/docs/1.1.0/volumes-and-nodes/expansion/#filesystem-expansion">Filesystem expansion</a> 章节文档。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>总体来说目前 Longhorn 是一个比较清量级的存储解决方案，微服务化使其更加可靠，同时官方文档完善社区响应也比较迅速；最主要的是 Longhorn 采用的技术方案不会过于复杂，通过文档以及阅读源码至少可以比较快速的了解其背后实现，而反观一些其他大型存储要么文档不全，要么实现技术复杂，普通用户很难窥视其核心；综合来说在小型存储选择上比较推荐 Longhorn，至于稳定性么，很不负责的说我也不知道，毕竟我也是新手，备份还没折腾呢…</p>]]></content>
    
    
    <summary type="html">Longhorn 是 Rancher Labs 开源的一个轻量级云原生微服务化存储方案，本篇文章将详细介绍 Longhorn 安装使用以及其设计架构</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="CSI" scheme="https://mritd.com/tags/csi/"/>
    
    <category term="Longhorn" scheme="https://mritd.com/tags/longhorn/"/>
    
  </entry>
  
  <entry>
    <title>Caddy2 简明教程</title>
    <link href="https://mritd.com/2021/01/07/lets-start-using-caddy2/"/>
    <id>https://mritd.com/2021/01/07/lets-start-using-caddy2/</id>
    <published>2021-01-07T09:44:30.000Z</published>
    <updated>2021-01-07T09:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Caddy 是一个 Go 编写的 Web 服务器，类似于 Nginx，Caddy 提供了更加强大的功能，随着 v2 版本发布 Caddy 已经可以作为中小型站点 Web 服务器的另一个选择；相较于 Nginx 来说使用 Caddy 的优势如下:</p><ul><li>自动的 HTTPS 证书申请(ACME HTTP&#x2F;DNS 挑战)</li><li>自动证书续期以及 OCSP stapling 等</li><li>更高的安全性包括但不限于 TLS 配置以及内存安全等</li><li>友好且强大的配置文件支持</li><li>支持 API 动态调整配置(有木有人可以搞个 Dashboard？)</li><li>支持 HTTP3(QUIC)</li><li>支持动态后端，例如连接 Consul、作为 k8s ingress 等</li><li>后端多种负载策略以及健康检测等</li><li>本身 Go 编写，高度模块化的系统方便扩展(CoreDNS 基于 Caddy1 开发)</li><li>……</li></ul><p>就目前来说，Caddy 对于我个人印象唯一的缺点就是性能没有 Nginx 高，但是这是个仁者见仁智者见智的问题；相较于提供的这些便利性，在性能可接受的情况下完全有理由切换到 Caddy。</p><h2 id="一、编译-Caddy2"><a href="#一、编译-Caddy2" class="headerlink" title="一、编译 Caddy2"></a>一、编译 Caddy2</h2><blockquote><p>注意: 在 Caddy1 时代，Caddy 官方发布的预编译二进制文件是不允许进行商业使用的，Caddy2 以后已经全部切换到 Apache 2.0 License，具体请参考 <a href="https://github.com/caddyserver/caddy/issues/2786">issue#2786</a>。</p></blockquote><p>在默认情况下 Caddy2 官方提供了预编译的二进制文件，以及<a href="https://caddyserver.com/download">自定义 build 下载页面</a>，不过对于需要集成一些第三方插件时，我们仍需采用官方提供的 <a href="https://github.com/caddyserver/xcaddy">xcaddy</a> 来进行自行编译；以下为具体的编译过程:</p><h3 id="1-1、Golang-环境安装"><a href="#1-1、Golang-环境安装" class="headerlink" title="1.1、Golang 环境安装"></a>1.1、Golang 环境安装</h3><blockquote><p><strong>本部分编译环境默认为 Ubuntu 20.04 系统，同时使用 root 用户，其他环境请自行调整相关目录以及配置；编译时自行处理好科学上网相关配置，也可以直接用国外 VPS 服务器编译。</strong></p></blockquote><p>首先下载 go 语言的 SDK 压缩包，其他平台可以从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载对应的压缩包:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://golang.org/dl/go1.15.6.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>下载完成后解压并配置相关变量:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 解压</span><br>tar -zxvf go1.15.6.linux-amd64.tar.gz<br><br><span class="hljs-comment"># 移动到任意目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/devtools<br><span class="hljs-built_in">mv</span> go /opt/devtools/go<br><br><span class="hljs-comment"># 创建 go 相关目录</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;HOME&#125;</span>/gopath/&#123;src,bin,pkg&#125;<br><br><span class="hljs-comment"># 调整变量配置，将以下变量加入到 shell 初始化配置中</span><br><span class="hljs-comment"># bash 用户请编辑 ~/.bashrc</span><br><span class="hljs-comment"># zsh 用户请编辑 ~/.zshrc</span><br><span class="hljs-built_in">export</span> GOROOT=<span class="hljs-string">&#x27;/opt/devtools/go&#x27;</span><br><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/gopath&quot;</span><br><span class="hljs-built_in">export</span> GOPROXY=<span class="hljs-string">&#x27;https://goproxy.cn&#x27;</span> <span class="hljs-comment"># 如果已经解决了科学上网问题，GOPROXY 变量可以删除，否则可能会起反作用</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GOROOT&#125;</span>/bin:<span class="hljs-variable">$&#123;GOPATH&#125;</span>/bin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 让配置生效</span><br><span class="hljs-comment"># bash 用户替换成 ~/.basrc</span><br><span class="hljs-comment"># 重新退出登录也可以</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>配置完成后，应该在命令行执行 <code>go version</code> 有成功返回:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">bleem ➜ ~ go version<br>go version go1.15.6 linux/amd64<br></code></pre></td></tr></table></figure><h3 id="1-2、安装-xcaddy"><a href="#1-2、安装-xcaddy" class="headerlink" title="1.2、安装 xcaddy"></a>1.2、安装 xcaddy</h3><p>按照官方文档直接命令行执行 <code>go get -u github.com/caddyserver/xcaddy/cmd/xcaddy</code> 安装即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bleem ➜ ~ go get -u github.com/caddyserver/xcaddy/cmd/xcaddy<br>go: downloading github.com/caddyserver/xcaddy v0.1.7<br>go: found github.com/caddyserver/xcaddy/cmd/xcaddy <span class="hljs-keyword">in</span> github.com/caddyserver/xcaddy v0.1.7<br>go: downloading github.com/Masterminds/semver/v3 v3.1.0<br>go: github.com/Masterminds/semver/v3 upgrade =&gt; v3.1.1<br>go: downloading github.com/Masterminds/semver/v3 v3.1.1<br>.....<br></code></pre></td></tr></table></figure><p>安装完成后应当在命令行可以直接执行 <code>xcaddy</code> 命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># xcaddy 并没有提供完善的命令行支持，所以 `--help` 报错很正常</span><br>bleem ➜  ~ xcaddy --<span class="hljs-built_in">help</span><br>go: cannot match <span class="hljs-string">&quot;all&quot;</span>: working directory is not part of a module<br>2021/01/07 12:15:56 [ERROR] <span class="hljs-built_in">exec</span> [go list -m -f=&#123;&#123;<span class="hljs-keyword">if</span> .Replace&#125;&#125;&#123;&#123;.Path&#125;&#125; =&gt; &#123;&#123;.Replace&#125;&#125;&#123;&#123;end&#125;&#125; all]: <span class="hljs-built_in">exit</span> status 1:<br></code></pre></td></tr></table></figure><h3 id="1-3、编译-Caddy2"><a href="#1-3、编译-Caddy2" class="headerlink" title="1.3、编译 Caddy2"></a>1.3、编译 Caddy2</h3><p>编译之前系统需要安装 <code>jq</code>、<code>curl</code>、<code>git</code> 命令，没有的请使用 <code>apt install -y curl git jq</code> 命令安装；</p><p>自行编译的目的是增加第三方插件方便使用，其中官方列出的插件可以从 <a href="https://caddyserver.com/download">Download</a> 页面获取到:</p><p><img src="https://cdn.oss.link/markdown/XkJZ2R1609993722272.png" alt="XkJZ2R1609993722272"></p><p>其他插件可以从 GitHub 上寻找或者自行编写，整理好这些插件列表以后只需要使用 <code>xcaddy</code> 编译即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取最新版本号，其实直接去 GitHub realse 页复制以下就行</span><br><span class="hljs-comment"># 这里转化为脚本是为了方便自动化</span><br><span class="hljs-built_in">export</span> version=$(curl -s <span class="hljs-string">&quot;https://api.github.com/repos/caddyserver/caddy/releases/latest&quot;</span> | jq -r .tag_name)<br><br><span class="hljs-comment"># 使用 xcaddy 编译</span><br>xcaddy build <span class="hljs-variable">$&#123;version&#125;</span> --output ./caddy_<span class="hljs-variable">$&#123;version&#125;</span> \<br>        --with github.com/abiosoft/caddy-exec \<br>        --with github.com/caddy-dns/cloudflare \<br>        --with github.com/caddy-dns/dnspod \<br>        --with github.com/caddy-dns/duckdns \<br>        --with github.com/caddy-dns/gandi \<br>        --with github.com/caddy-dns/route53 \<br>        --with github.com/greenpau/caddy-auth-jwt \<br>        --with github.com/greenpau/caddy-auth-portal \<br>        --with github.com/greenpau/caddy-trace \<br>        --with github.com/hairyhenderson/caddy-teapot-module \<br>        --with github.com/kirsch33/realip \<br>        --with github.com/porech/caddy-maxmind-geolocation \<br>        --with github.com/caddyserver/format-encoder \<br>        --with github.com/mholt/caddy-webdav<br></code></pre></td></tr></table></figure><p>编译过程日志如下所示，稍等片刻后将会生成编译好的二进制文件:</p><p><img src="https://cdn.oss.link/markdown/Kr2tG61609993987722.png" alt="Kr2tG61609993987722"></p><p>编译成功后可以通过 <code>list-modules</code> 子命令查看被添加的插件是否成功编译到了 caddy 中:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh">bleem ➜  ~ ./caddy_v2.3.0 list-modules<br>admin.api.load<br>admin.api.metrics<br>caddy.adapters.caddyfile<br>caddy.listeners.tls<br>caddy.logging.encoders.console<br>caddy.logging.encoders.filter<br>caddy.logging.encoders.filter.delete<br>caddy.logging.encoders.filter.ip_mask<br>caddy.logging.encoders.formatted<br>caddy.logging.encoders.json<br>caddy.logging.encoders.logfmt<br>caddy.logging.encoders.single_field<br>caddy.logging.writers.discard<br>caddy.logging.writers.file<br>caddy.logging.writers.net<br>caddy.logging.writers.stderr<br>caddy.logging.writers.stdout<br>caddy.storage.file_system<br>dns.providers.cloudflare<br>dns.providers.dnspod<br>dns.providers.duckdns<br>dns.providers.gandi<br>dns.providers.route53<br><span class="hljs-built_in">exec</span><br>http<br>http.authentication.hashes.bcrypt<br>http.authentication.hashes.scrypt<br>http.authentication.providers.http_basic<br>http.authentication.providers.jwt<br>......<br></code></pre></td></tr></table></figure><h2 id="二、安装-Caddy2"><a href="#二、安装-Caddy2" class="headerlink" title="二、安装 Caddy2"></a>二、安装 Caddy2</h2><h3 id="2-1、宿主机安装"><a href="#2-1、宿主机安装" class="headerlink" title="2.1、宿主机安装"></a>2.1、宿主机安装</h3><p>宿主机安装 Caddy2 需要使用 systemd 进行守护，幸运的是 Caddy2 官方提供了各种平台的安装包以及 <a href="https://github.com/caddyserver/dist">systemd 配置文件仓库</a>；目前推荐的方式是直接采用包管理器安装标准版本的 Caddy2，然后替换自编译的可执行文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装标准版本 Caddy2</span><br>sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https<br>curl -1sLf <span class="hljs-string">&#x27;https://dl.cloudsmith.io/public/caddy/stable/cfg/gpg/gpg.155B6D79CA56EA34.key&#x27;</span> | sudo apt-key add -<br>curl -1sLf <span class="hljs-string">&#x27;https://dl.cloudsmith.io/public/caddy/stable/cfg/setup/config.deb.txt?distro=debian&amp;version=any-version&#x27;</span> | sudo <span class="hljs-built_in">tee</span> -a /etc/apt/sources.list.d/caddy-stable.list<br>sudo apt update<br>sudo apt install caddy<br><br><span class="hljs-comment"># 替换二进制文件</span><br>systemctl stop caddy<br><span class="hljs-built_in">rm</span> -f /usr/bin/caddy<br><span class="hljs-built_in">mv</span> ./caddy_v2.3.0 /usr/bin/caddy<br></code></pre></td></tr></table></figure><h3 id="2-2、Docker-安装"><a href="#2-2、Docker-安装" class="headerlink" title="2.2、Docker 安装"></a>2.2、Docker 安装</h3><p>Docker 用户可以通过 Dockerfile 自行编译 image，目前我编写了一个基于 xcaddy 的 <a href="https://github.com/mritd/dockerfile/blob/master/caddy/Dockerfile">Dockerfile</a>，如果有其他插件需要集成自行修改重新编译即可；当前 Dockerfile 预编译的镜像已经推送到了 <a href="https://hub.docker.com/repository/docker/mritd/caddy">Docker Hub</a> 中，镜像名称为 <code>mritd/caddy</code>。</p><h2 id="三、配置-Caddy2"><a href="#三、配置-Caddy2" class="headerlink" title="三、配置 Caddy2"></a>三、配置 Caddy2</h2><p>Caddy2 的配置文件核心采用 json，但是 json 可读性不强，所以官方维护了一个转换器，抽象出称之为 Caddyfile 的新配置格式；关于 Caddyfile 的完整语法请查看官方文档 <a href="https://caddyserver.com/docs/caddyfile">https://caddyserver.com/docs/caddyfile</a>，本文仅做一些基本使用的样例。</p><h3 id="3-1、配置片段"><a href="#3-1、配置片段" class="headerlink" title="3.1、配置片段"></a>3.1、配置片段</h3><p>Caddyfile 支持类似代码中 function 一样的配置片段，<strong>这些配置片段可以在任意位置被 <code>import</code>，同时可以接受参数，</strong>以下为配置片断示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 括号内为片段名称，可以自行定义</span><br>(TLS) &#123;<br>    protocols tls1.2 tls1.3<br>    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br>&#125;<br><br><span class="hljs-comment"># 在任意位置可以引用此片段从而达到配置复用</span><br>import TLS<br></code></pre></td></tr></table></figure><h3 id="3-2、配置模块化"><a href="#3-2、配置模块化" class="headerlink" title="3.2、配置模块化"></a>3.2、配置模块化</h3><p><code>import</code> 指令除了支持引用配置片段以外，还支持引用外部文件，同时支持通配符，有了这个命令以后我们就可以方便的将配置文件进行模块化处理:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 引用外部的 /etc/caddy/*.caddy</span><br>import /etc/caddy/*.caddy<br></code></pre></td></tr></table></figure><h3 id="3-3、站点配置"><a href="#3-3、站点配置" class="headerlink" title="3.3、站点配置"></a>3.3、站点配置</h3><p>针对于站点域名配置，Caddyfile 比较自由化，其格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">地址 &#123;<br>    站点配置<br>&#125;<br></code></pre></td></tr></table></figure><p>关于这个 “地址” 接受多种格式，以下都为合法的地址格式:</p><ul><li><code>localhost</code></li><li><code>example.com</code></li><li><code>:443</code></li><li><code>http://example.com</code></li><li><code>localhost:8080</code></li><li><code>127.0.0.1</code></li><li><code>[::1]:2015</code></li><li><code>example.com/foo/*</code></li><li><code>*.example.com</code></li><li><code>http://</code></li></ul><h3 id="3-4、环境变量"><a href="#3-4、环境变量" class="headerlink" title="3.4、环境变量"></a>3.4、环境变量</h3><p>Caddyfile 支持直接引用系统环境变量，通过此功能可以将一些敏感信息从配置文件中剔除:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 引用环境变量 GANDI_API_TOKEN</span><br>dns gandi &#123;<span class="hljs-variable">$GANDI_API_TOKEN</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5、配置片段参数支持"><a href="#3-5、配置片段参数支持" class="headerlink" title="3.5、配置片段参数支持"></a>3.5、配置片段参数支持</h3><p>针对于配置片段，Caddyfile 还支持类似于函数代码的参数支持，通过参数支持可以让外部引用时动态修改配置信息:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">(LOG) &#123;<br>    <span class="hljs-built_in">log</span> &#123;<br>        format json  &#123;<br>            time_format <span class="hljs-string">&quot;iso8601&quot;</span><br>        &#125;<br>        <span class="hljs-comment"># &quot;&#123;args.0&#125;&quot; 引用传入的第一个参数，此处用于动态传入日志文件名称</span><br>        output file <span class="hljs-string">&quot;&#123;args.0&#125;&quot;</span> &#123;<br>            roll_size 100mb<br>            roll_keep 3<br>            roll_keep_for 7d<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 引用片段</span><br>import LOG <span class="hljs-string">&quot;/data/logs/mritd.com.log&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-6、自动证书申请"><a href="#3-6、自动证书申请" class="headerlink" title="3.6、自动证书申请"></a>3.6、自动证书申请</h3><p>在启动 Caddy2 之前，如果目标域名(例如: <code>www.example.com</code>)已经解析到了本机，那么 Caddy2 启动后会尝试自动通过 ACME HTTP 挑战申请证书；如果期望使用 DNS 的方式申请证书则需要其他 DNS 插件支持，比如上面编译的 <code>--with github.com/caddy-dns/gandi</code> 为 gandi 服务商的 DNS 插件；关于使用 DNS 挑战的配置编写方式需要具体去看其插件文档，目前 gandi 的配置如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">tls &#123;<br>dns gandi &#123;env.GANDI_API_TOKEN&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成后 Caddy2 会通过 ACME DNS 挑战申请证书，<strong>值得注意的是即使通过 DNS 申请证书默认也不会申请泛域名证书，如果想要调整这种细节配置请使用 json 配置或管理 API。</strong></p><h3 id="3-7、完整模块化配置样例"><a href="#3-7、完整模块化配置样例" class="headerlink" title="3.7、完整模块化配置样例"></a>3.7、完整模块化配置样例</h3><p>了解了以上基础配置信息，我们就可以实际编写一个站点配置了；以下为本站的 Caddy 配置样例:</p><p>目录结构:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">caddy<br>├── Caddyfile<br>├── mritd.com.caddy<br>└── mritd.me.caddy<br></code></pre></td></tr></table></figure><h4 id="3-7-1、Caddyfile"><a href="#3-7-1、Caddyfile" class="headerlink" title="3.7.1、Caddyfile"></a>3.7.1、Caddyfile</h4><p><strong>Caddyfile 主要包含一些通用的配置，并将其抽到配置片段中，类似与 nginx 的 <code>nginx.conf</code> 主配置；在最后部分通过 <code>import</code> 关键字引入其他具体站点配置，类似 nginx 的 <code>vhost</code> 配置。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sh">(LOG) &#123;<br>    <span class="hljs-built_in">log</span> &#123;<br>        <span class="hljs-comment"># 日志格式参考 https://github.com/caddyserver/format-encoder 插件文档</span><br>        format formatted <span class="hljs-string">&quot;[&#123;ts&#125;] &#123;request&gt;remote_addr&#125; &#123;request&gt;proto&#125; &#123;request&gt;method&#125; &lt;- &#123;status&#125; -&gt; &#123;request&gt;host&#125; &#123;request&gt;uri&#125; &#123;request&gt;headers&gt;User-Agent&gt;[0]&#125;&quot;</span>  &#123;<br>            time_format <span class="hljs-string">&quot;iso8601&quot;</span><br>        &#125;<br>        output file <span class="hljs-string">&quot;&#123;args.0&#125;&quot;</span> &#123;<br>            roll_size 100mb<br>            roll_keep 3<br>            roll_keep_for 7d<br>        &#125;<br>    &#125;<br>&#125;<br><br>(TLS) &#123;<br>    <span class="hljs-comment"># TLS 配置采用 https://mozilla.github.io/server-side-tls/ssl-config-generator/ 生成，SSL Labs 评分 A+</span><br>    protocols tls1.2 tls1.3<br>    ciphers TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256<br>&#125;<br><br>(HSTS) &#123;<br>    <span class="hljs-comment"># HSTS (63072000 seconds)</span><br>    header / Strict-Transport-Security <span class="hljs-string">&quot;max-age=63072000&quot;</span><br>&#125;<br><br>(ACME_GANDI) &#123;<br>    <span class="hljs-comment"># 从环境变量获取 GANDI_API_TOKEN</span><br>    dns gandi &#123;<span class="hljs-variable">$GANDI_API_TOKEN</span>&#125;<br>&#125;<br><br><span class="hljs-comment"># 聚合上面的配置片段为新的片段</span><br>(COMMON_CONFIG) &#123;<br>    <span class="hljs-comment"># 压缩支持</span><br>    encode zstd gzip<br><br>    <span class="hljs-comment"># TLS 配置</span><br>    tls &#123;<br>        import TLS<br>        import ACME_GANDI<br>    &#125;<br><br>    <span class="hljs-comment"># HSTS</span><br>    import HSTS<br>&#125;<br><br><span class="hljs-comment"># 开启 HTTP3 实验性支持</span><br>&#123;<br>    servers :443 &#123;<br>        protocol &#123;<br>            experimental_http3<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 引入其他具体的站点配置</span><br>import /etc/caddy/*.caddy<br></code></pre></td></tr></table></figure><h4 id="3-7-2、mritd-com-caddy"><a href="#3-7-2、mritd-com-caddy" class="headerlink" title="3.7.2、mritd.com.caddy"></a>3.7.2、mritd.com.caddy</h4><p><strong><code>mritd.com.caddy</code> 为主站点配置，主站点配置内主要编写一些路由规则，TLS 等都从配置片段引入，这样可以保持统一。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">www.mritd.com &#123;<br>    <span class="hljs-comment"># 重定向到 mritd.com(默认 302)</span><br>    redir https://mritd.com&#123;uri&#125;<br><br>    <span class="hljs-comment"># 日志</span><br>    import LOG <span class="hljs-string">&quot;/data/logs/mritd.com.log&quot;</span><br><br>    <span class="hljs-comment"># TLS、HSTS、ACME 等通用配置</span><br>    import COMMON_CONFIG<br>&#125;<br><br>mritd.com &#123;<br>    <span class="hljs-comment"># 路由</span><br>    route /* &#123;<br>        reverse_proxy mritd_com:80<br>    &#125;<br><br>    <span class="hljs-comment"># 日志</span><br>    import LOG <span class="hljs-string">&quot;/data/logs/mritd.com.log&quot;</span><br><br>    <span class="hljs-comment"># TLS、HSTS、ACME 等通用配置</span><br>    import COMMON_CONFIG<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-3、mritd-me-caddy"><a href="#3-7-3、mritd-me-caddy" class="headerlink" title="3.7.3、mritd.me.caddy"></a>3.7.3、mritd.me.caddy</h4><p><strong><code>mritd.me.caddy</code> 为老站点配置，目前主要将其 301 到新站点即可。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">www.mritd.me &#123;<br>    <span class="hljs-comment"># 重定向到 mritd.com</span><br>    <span class="hljs-comment"># 最后的 &quot;code&quot; 支持三种参数</span><br>    <span class="hljs-comment"># temporary =&gt; 302</span><br>    <span class="hljs-comment"># permanent =&gt; 301</span><br>    <span class="hljs-comment"># html =&gt; HTML document redirect</span><br>    redir https://mritd.com&#123;uri&#125; permanent<br><br>    <span class="hljs-comment"># 日志</span><br>    import LOG <span class="hljs-string">&quot;/data/logs/mritd.com.log&quot;</span><br><br>    <span class="hljs-comment"># TLS、HSTS、ACME 等通用配置</span><br>    import COMMON_CONFIG<br>&#125;<br><br>mritd.me &#123;<br>    <span class="hljs-comment"># 重定向</span><br>    redir https://mritd.com&#123;uri&#125; permanent<br><br>    <span class="hljs-comment"># 日志</span><br>    import LOG <span class="hljs-string">&quot;/data/logs/mritd.com.log&quot;</span><br><br>    <span class="hljs-comment"># TLS、HSTS、ACME 等通用配置</span><br>    import COMMON_CONFIG<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、启动与重载"><a href="#四、启动与重载" class="headerlink" title="四、启动与重载"></a>四、启动与重载</h2><p>配置文件编写完成后，通过 <code>systemctl start caddy</code> 可启动 caddy 服务器；每次配置修改后可以通过 <code>systemctl reload caddy</code> 进行配置重载，重载期间 caddy 不会重启(实际上调用 <code>caddy reload</code> 命令)，<strong>当配置文件书写错误时，重载只会失败，不会影响正在运行的 caddy 服务器。</strong></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本文只是列举了一些简单的 Caddy 使用样例，在强大的插件配合下，Caddy 可以实现各种 “神奇” 的功能，这些功能依赖于复杂的 Caddy 配置，Caddy 配置需要仔细阅读<a href="https://caddyserver.com/docs/caddyfile/directives">官方文档</a>，关于 Caddyfile 的每个配置段在文档中都有详细的描述。</p><p>值得一提的是 Caddy 本身内置了丰富的插件，例如内置 “file_server”、内置各种负载均衡策略等，这些插件组合在一起可以实现一些复杂的功能；Caddy 是采用 go 编写的，官方也给出了详细的<a href="https://caddyserver.com/docs/extending-caddy">开发文档</a>，相较于 Nginx 来说通过 Lua 或者 C 来开发编写插件来说，Caddy 的插件开发上手要容易得多；Caddy 本身针对数据存储、动态后端、配置文件转换等都内置了扩展接口，这为有特定需求的扩展开发打下了良好基础。</p><p>最终总结，综合来看目前 Caddy2 的性能损失可接受的情况下，相较于 Nginx 绝对是个绝佳选择，各种新功能都能够满足现代化 Web 站点的需求，真香警告。</p>]]></content>
    
    
    <summary type="html">最近网站证书又过期了...... 终于痛下决心(以前太懒)切换到了 Caddy2，这里记录一下 Caddy2 简单使用方式，包括从零开始编译以及配置调整。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Caddy" scheme="https://mritd.com/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>Skywalking 初试</title>
    <link href="https://mritd.com/2020/11/27/how-to-deploy-skywalking-on-kubernetes/"/>
    <id>https://mritd.com/2020/11/27/how-to-deploy-skywalking-on-kubernetes/</id>
    <published>2020-11-27T07:50:32.000Z</published>
    <updated>2020-11-27T07:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 Skywalking 刚发布的时候就开始关注这个玩意了，一直没有时间去测试；最近正好新项目上线，顺手把 Skywalking 搞起来了，下面简单记录一下 Kubernetes 下的安装使用。</p></blockquote><h2 id="一、先决条件"><a href="#一、先决条件" class="headerlink" title="一、先决条件"></a>一、先决条件</h2><p>确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储；<strong>如果想把 ES 放到 Kubernetes 集群里那么还得确保集群配置了正确的存储，譬如默认的 StorageClass 可用等。</strong>本文为了方便起见(其实就是穷)采用外部 ES 存储且使用 docker-compose 单节点部署，所以不需要集群的分布式存储；最后确保你本地的 <code>kubectl</code> 能够正常运行。</p><h2 id="二、基本架构"><a href="#二、基本架构" class="headerlink" title="二、基本架构"></a>二、基本架构</h2><p>Skywalking 在大体上(不准确)分为四大部分:</p><ul><li>oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。</li><li>skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。</li><li>agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。</li><li>DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。</li></ul><h2 id="三、部署-Skywalking"><a href="#三、部署-Skywalking" class="headerlink" title="三、部署 Skywalking"></a>三、部署 Skywalking</h2><h3 id="3-1、部署-Elasticsearch"><a href="#3-1、部署-Elasticsearch" class="headerlink" title="3.1、部署 Elasticsearch"></a>3.1、部署 Elasticsearch</h3><p>Elasticsearch 当前使用 7.9.2 版本，由于只是初次尝试还处于测试阶段所以直接 docker-compose 启动一个单点:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 如果有需要可以进入 es 容器使用以下命令设置密码</span><br><span class="hljs-comment"># elasticsearch-setup-passwords interactive</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.9.2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data:/data/elasticsearch</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http.host=172.16.11.43</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">http.port=9200</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">transport.tcp.port=172.16.11.43</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">transport.tcp.port=9300</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cluster.name=skyes</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node.name=skyes</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.type=single-node</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xpack.security.enabled=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xpack.monitoring.enabled=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms4096m -Xmx7168m&quot;</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data:</span><br></code></pre></td></tr></table></figure><h3 id="3-2、安装-Helm"><a href="#3-2、安装-Helm" class="headerlink" title="3.2、安装 Helm"></a>3.2、安装 Helm</h3><p>由于 Skywalking 官方给出的 Kubernetes 安装方式为 Helm 安装，所以需要本地先安装 Helm；Helm 安装方式非常简单，根据官方文档<strong>在网络没问题的情况下</strong>直接执行以下命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash<br></code></pre></td></tr></table></figure><p>如果网络不是那么 OK 的情况下请参考<a href="https://helm.sh/docs/intro/install/">官方文档</a>的包管理器方式安装或直接下载二进制文件安装。</p><h3 id="3-3、克隆仓库初始化-Helm"><a href="#3-3、克隆仓库初始化-Helm" class="headerlink" title="3.3、克隆仓库初始化 Helm"></a>3.3、克隆仓库初始化 Helm</h3><p>Helm 部署之前按照<a href="https://github.com/apache/skywalking-kubernetes">官方文档</a>提示需要先初始化 Helm 仓库:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># clone helm 仓库</span><br>git <span class="hljs-built_in">clone</span> https://github.com/apache/skywalking-kubernetes<br><span class="hljs-built_in">cd</span> skywalking-kubernetes/chart<br><br><span class="hljs-comment"># 即使使用外部 ES 也要添加这个 repo，否则会导致依赖错误</span><br>helm repo add elastic https://helm.elastic.co<br>helm dep up skywalking<br><br><span class="hljs-comment"># change the release name according to your scenario</span><br><span class="hljs-built_in">export</span> SKYWALKING_RELEASE_NAME=skywalking<br><span class="hljs-comment"># 如果修改了 NAMESPACE，后续部署则需要先通过 kuebctl 创建该 NAMESPACE</span><br><span class="hljs-comment"># change the namespace according to your scenario</span><br><span class="hljs-built_in">export</span> SKYWALKING_RELEASE_NAMESPACE=default<br></code></pre></td></tr></table></figure><h3 id="3-4、安装-Skywalking"><a href="#3-4、安装-Skywalking" class="headerlink" title="3.4、安装 Skywalking"></a>3.4、安装 Skywalking</h3><p>Helm 初始化完成后需要自行调整配置文件，配置 oap-server 使用外部 ES</p><p><strong>values-my-es.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">oap:</span><br>  <span class="hljs-attr">image:</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-number">8.1</span><span class="hljs-number">.0</span><span class="hljs-string">-es7</span>      <span class="hljs-comment"># Set the right tag according to the existing Elasticsearch version</span><br>  <span class="hljs-attr">storageType:</span> <span class="hljs-string">elasticsearch7</span><br><br><span class="hljs-attr">ui:</span><br>  <span class="hljs-attr">image:</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-number">8.1</span><span class="hljs-number">.0</span><br><br><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">config:</span>               <span class="hljs-comment"># For users of an existing elasticsearch cluster,takes effect when `elasticsearch.enabled` is false</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.11</span><span class="hljs-number">.43</span><br>    <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">http:</span> <span class="hljs-number">9200</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">&quot;elastic&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;elastic&quot;</span><br></code></pre></td></tr></table></figure><p>调整好配置后只需要使用 Helm 安装即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">helm install <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> skywalking -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span> \<br>  -f ./skywalking/values-my-es.yaml --<span class="hljs-built_in">set</span> oap.image.tag=8.2.0-es7 --<span class="hljs-built_in">set</span> ui.image.tag=8.2.0<br></code></pre></td></tr></table></figure><p>如果安装出错或者其他问题可以使用以下命令进行卸载:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">helm uninstall <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SKYWALKING_RELEASE_NAME&#125;</span>&quot;</span> skywalking -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>安装成功后应该在 <code>$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</code> 下看到相关 Pod:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">k8s21 ➜  ~ kubectl get pod -o wide -n skywalking<br>NAME                              READY   STATUS      RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES<br>skywalking-es-init-xw6tx          0/1     Completed   0          32h   10.30.0.62     k8s21   &lt;none&gt;           &lt;none&gt;<br>skywalking-oap-64c65cc6bb-lnq82   1/1     Running     0          32h   10.30.0.61     k8s21   &lt;none&gt;           &lt;none&gt;<br>skywalking-oap-64c65cc6bb-q7zj8   1/1     Running     0          32h   10.30.32.103   k8s22   &lt;none&gt;           &lt;none&gt;<br>skywalking-ui-695ff9d69d-wqcm8    1/1     Running     0          32h   10.30.161.42   k8s25   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>在确认 Pod 都运行正常后可以通过 <code>kubectl port-forward</code> 命令来查看 UI 界面:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 执行以下命令，访问 127.0.0.1:8080 即可访问到 skywalking-ui</span><br>kubectl port-forward -n <span class="hljs-variable">$&#123;SKYWALKING_RELEASE_NAMESPACE&#125;</span> service/skywalking-ui 8080:80<br></code></pre></td></tr></table></figure><p><strong>在生产环境可能需要配置正确的 Ingress 或者 NodePort 等方式暴露 skywalking-ui 服务，具体取决于生产集群服务暴露方式，请自行调整。</strong></p><h2 id="四、Agent-配置"><a href="#四、Agent-配置" class="headerlink" title="四、Agent 配置"></a>四、Agent 配置</h2><blockquote><p>由于目前仅在 Java 项目上测试，所以以下 Agent 配置仅仅对 Java 项目有效。</p></blockquote><p>Skywalking 在简单使用时不需要侵入代码，对于 jar 包启动的项目只需要在启动时增加 <code>-javaagent</code> 选项即可。</p><h3 id="4-1、Agent-获取"><a href="#4-1、Agent-获取" class="headerlink" title="4.1、Agent 获取"></a>4.1、Agent 获取</h3><p><code>javaagent</code> 可以通过下载对应的 skywalking release 安装包获取，将此 <code>agent</code> 目录解压到任意位置，稍后将添加到 java 启动参数。</p><p><img src="https://cdn.oss.link/markdown/y1q3k.png" alt="agent_dir"></p><h3 id="4-2、Agent-配置"><a href="#4-2、Agent-配置" class="headerlink" title="4.2、Agent 配置"></a>4.2、Agent 配置</h3><p>Agent 主配置文件存放在 <code>config/agent.config</code> 配置文件中，配置文件内支持环境变量读取，可以自行添加其他配置和引用其他变量；通常这个配置文件在容器化时有两种选择，<strong>一种是创建 ConfigMap，然后通过 ConfigMap 挂载到容器里进行覆盖；另一种是在默认配置里引用各种变量，在容器启动时通过环境变量注入。</strong>这里暂时使用环境变量注入的方式:</p><p><strong>agent.config</strong></p><p><img src="https://cdn.oss.link/markdown/4t67x.png" alt="agent.config"></p><p><strong>deployment.yml</strong></p><p><img src="https://cdn.oss.link/markdown/q0uw7.png" alt="deployment.yml"></p><p>调整完成后，应用运行一段时间后应该能在 UI 中看到数据</p><p><img src="https://cdn.oss.link/markdown/86vmo.png" alt="skwalking-ui"></p><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ul><li><strong>默认情况下 Helm 相关命令执行缓慢，可能需要设置 <code>http(s)_proxy</code> <code>...( ＿ ＿)ノ｜壁</code>(自行体会这个表情)</strong></li><li><strong>Skywalking 镜像一般比较大，下载缓慢，推荐预先拉取好然后 load 到每个节点</strong></li><li><strong>ES 如果设置了密码，不要忘记在 Helm 安装时调整好密码配置</strong></li><li><strong>jar 包启动时 <code>-javaagent</code> 不能放在 <code>-jar</code> 选项之后，否则可能不生效</strong></li><li><strong>集群内连接 oap-server 推荐通过 <code>skywalking-oap.skywalking.svc.cluster.local</code> 域名服务发现方式寻址</strong></li></ul>]]></content>
    
    
    <summary type="html">在 Skywalking 刚发布的时候就开始关注这个玩意了，一直没有时间去测试；最近正好新项目上线，顺手把 Skywalking 搞起来了，下面简单记录一下 Kubernetes 下的安装使用。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Skywalking" scheme="https://mritd.com/tags/skywalking/"/>
    
  </entry>
  
  <entry>
    <title>利用 etcdhosts 插件搭建分布式 CoreDNS</title>
    <link href="https://mritd.com/2020/11/17/set-up-coredns-ha-clsuter-by-etcdhosts/"/>
    <id>https://mritd.com/2020/11/17/set-up-coredns-ha-clsuter-by-etcdhosts/</id>
    <published>2020-11-17T02:01:28.000Z</published>
    <updated>2020-11-17T02:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前宿主机上全部采用的 dnsmasq 作为 DNS 管理，其中有一个很大的问题是需要进行 DNS 冗余，dnsmasq 每次修改都要多台机器同步，所以自己写了一个插件配合 CoreDNS 实现分布式部署，如果想了解插件编写方式请参考 <a href="https://mritd.com/2019/11/05/writing-plugin-for-coredns/">Writing Plugin for Coredns</a>。 </p></blockquote><h2 id="一、etcdhosts-插件简介"><a href="#一、etcdhosts-插件简介" class="headerlink" title="一、etcdhosts 插件简介"></a>一、etcdhosts 插件简介</h2><p>etcdhosts 顾名思义，就是将 hosts 文件存储在 Etcd 中，然后多个 CoreDNS 共享一份 hosts 文件；得益于 Etcd 提供的 watch 功能，当 Etcd 中的 hosts 文件更新时，每台 CoreDNS 服务器都会接到推送，同时完成热重载；etcdhosts 基本架构如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">+-----------------------------------------------------------------------------+<br>|                                                                             |<br>|   +-----------+                                                             |<br>|   |           |                                                             |<br>|   |  CoreDNS  +---------------------+                                       |<br>|   |           |                     |                                       |<br>|   +-----------+                     |                +------------------+   |<br>|                                     |                |                  |   |<br>|                            +--------v---------+      |                  |   |<br>|   +-----------+            |                  |      |                  |   |<br>|   |           |            |                  |      | dnsctl or        |   |<br>|   |  CoreDNS  +------------&gt;   Etcd Cluster   &lt;------+ other etcd tool  |   |<br>|   |           |            |                  |      |                  |   |<br>|   +-----------+            |                  |      |                  |   |<br>|                            +---------^--------+      |                  |   |<br>|                                      |               |                  |   |<br>|   +-----------+                      |               +------------------+   |<br>|   |           |                      |                                      |<br>|   |  CoreDNS  +----------------------+                                      |<br>|   |           |                                                             |<br>|   +-----------+                                                             |<br>|                                                                             |<br>|                                                                             |<br>+-----------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><h2 id="二、编译-CoreDNS"><a href="#二、编译-CoreDNS" class="headerlink" title="二、编译 CoreDNS"></a>二、编译 CoreDNS</h2><blockquote><p>etcdhosts <a href="https://github.com/ytpay/etcdhosts/releases">release</a> 页已经提供部分版本的预编译文件，可以直接下载使用。</p></blockquote><p><a href="https://github.com/ytpay/etcdhosts">etcdhosts</a> 作为一个 CoreDNS 扩展插件采用直接偶合的方式编写(未采用 gRPC 是因为考虑性能影响)，这意味着需要重新编译 CoreDNS 来集成插件，以下为 CoreDNS 编译过程(使用 docker):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># clone source code</span><br>git <span class="hljs-built_in">clone</span> https://github.com/ytpay/etcdhosts.git<br><span class="hljs-comment"># build</span><br><span class="hljs-built_in">cd</span> etcdhosts &amp;&amp; ./build v1.8.0<br></code></pre></td></tr></table></figure><p>编译完成后将在 <code>build</code> 目录下生成各个平台的二进制文件压缩包。</p><h2 id="三、搭建-Etcd-集群"><a href="#三、搭建-Etcd-集群" class="headerlink" title="三、搭建 Etcd 集群"></a>三、搭建 Etcd 集群</h2><p>Etcd 集群搭建将直接采用 deb 安装包，具体细节这里不再阐述，本次搭建系统为 Ubuntu 20，以下为搭建步骤。</p><h3 id="2-1、安装软件包"><a href="#2-1、安装软件包" class="headerlink" title="2.1、安装软件包"></a>2.1、安装软件包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载 cfssl 安装包，用于签署证书</span><br>wget https://github.com/mritd/etcd-deb/releases/download/v3.4.13/cfssl_1.4.1_amd64.deb<br><span class="hljs-comment"># 下载 etcd 安装包</span><br>wget https://github.com/mritd/etcd-deb/releases/download/v3.4.13/etcd_3.4.13_amd64.deb<br><span class="hljs-comment"># 执行安装</span><br>dpkg -i cfssl_1.4.1_amd64.deb etcd_3.4.13_amd64.deb<br></code></pre></td></tr></table></figure><h3 id="2-2、创建证书"><a href="#2-2、创建证书" class="headerlink" title="2.2、创建证书"></a>2.2、创建证书</h3><p>创建证书需要先修改证书配置文件(<code>etcd-csr.json</code>)然后借助 cfssl 工具来创建证书</p><p><strong><code>/etc/etcd/cfssl/etcd-csr.json</code></strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs diff">&#123;<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;rsa&quot;,<br>        &quot;size&quot;: 2048<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;O&quot;: &quot;etcd&quot;,<br>            &quot;OU&quot;: &quot;etcd Security&quot;,<br>            &quot;L&quot;: &quot;Beijing&quot;,<br>            &quot;ST&quot;: &quot;Beijing&quot;,<br>            &quot;C&quot;: &quot;CN&quot;<br>        &#125;<br>    ],<br>    &quot;CN&quot;: &quot;etcd&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;127.0.0.1&quot;,<br>        &quot;localhost&quot;,<br>        &quot;*.etcd.node&quot;,<br>        &quot;*.kubernetes.node&quot;,<br><span class="hljs-addition">+       &quot;172.16.11.71&quot;,</span><br><span class="hljs-addition">+       &quot;172.16.11.72&quot;,</span><br><span class="hljs-addition">+       &quot;172.16.11.73&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>通过脚本创建证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/etcd/cfssl<br>./create.sh<br><span class="hljs-built_in">cp</span> *.pem /etc/etcd/ssl<br></code></pre></td></tr></table></figure><p><strong>证书创建完成后需要分发到其他两台机器上，保证三台节点的 <code>/etc/etcd/ssl</code> 目录证书相同。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制证书</span><br>scp /etc/etcd/ssl/*.pem root@NODE2:/etc/etcd/ssl<br>scp /etc/etcd/ssl/*.pem root@NODE3:/etc/etcd/ssl<br><span class="hljs-comment"># 修复权限(三台都要修复)</span><br><span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd/<br></code></pre></td></tr></table></figure><h3 id="2-3、调整集群配置"><a href="#2-3、调整集群配置" class="headerlink" title="2.3、调整集群配置"></a>2.3、调整集群配置</h3><p>证书签署完成后，简单的调整每台机器上的集群节点配置即可</p><p><strong><code>/etc/etcd/etcd.conf</code></strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs diff"># [member]<br><span class="hljs-addition">+ # 节点号自行修改，推荐格式: etcd+节点IP，例如 etcd21</span><br><span class="hljs-addition">+ ETCD_NAME=etcd1</span><br>ETCD_DATA_DIR=&quot;/var/lib/etcd/data&quot;<br>ETCD_WAL_DIR=&quot;/var/lib/etcd/wal&quot;<br>ETCD_SNAPSHOT_COUNT=&quot;100&quot;<br><span class="hljs-addition">+ # 修改为当前机器 IP</span><br><span class="hljs-addition">+ ETCD_LISTEN_PEER_URLS=&quot;https://172.16.11.71:2380&quot;</span><br><span class="hljs-addition">+ # 修改为当前机器 IP</span><br><span class="hljs-addition">+ ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.11.71:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_QUOTA_BACKEND_BYTES=&quot;8589934592&quot;<br>ETCD_MAX_REQUEST_BYTES=&quot;10485760&quot;<br><br># [cluster]<br><span class="hljs-addition">+ # 修改为当前机器 IP</span><br><span class="hljs-addition">+ ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.11.71:2380&quot;</span><br># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;<br><span class="hljs-addition">+ # 三台机器都要按照格式写好</span><br><span class="hljs-addition">+ ETCD_INITIAL_CLUSTER=&quot;etcd1=https://172.16.11.71:2380,etcd2=https://172.16.11.72:2380,etcd3=https://172.16.11.73:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;<br>ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;<br><span class="hljs-addition">+ # 修改为当前机器 IP</span><br><span class="hljs-addition">+ ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.11.71:2379&quot;</span><br><br>ETCD_AUTO_COMPACTION_MODE=&quot;revision&quot;<br>ETCD_AUTO_COMPACTION_RETENTION=&quot;16&quot;<br>ETCD_QUOTA_BACKEND_BYTES=&quot;5368709120&quot;<br><br># [security]<br>ETCD_CERT_FILE=&quot;/etc/etcd/ssl/etcd.pem&quot;<br>ETCD_KEY_FILE=&quot;/etc/etcd/ssl/etcd-key.pem&quot;<br>ETCD_TRUSTED_CA_FILE=&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;<br>ETCD_CLIENT_CERT_AUTH=&quot;true&quot;<br>ETCD_AUTO_TLS=&quot;true&quot;<br>ETCD_PEER_CERT_FILE=&quot;/etc/etcd/ssl/etcd.pem&quot;<br>ETCD_PEER_KEY_FILE=&quot;/etc/etcd/ssl/etcd-key.pem&quot;<br>ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;<br>ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;<br>ETCD_PEER_AUTO_TLS=&quot;true&quot;<br></code></pre></td></tr></table></figure><p>最后每台机器执行 <code>systemctl start etcd</code> 启动即可，验证集群是否健康可以使用如下命令测试:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">etcdctl endpoint health --cert /etc/etcd/ssl/etcd.pem --key /etc/etcd/ssl/etcd-key.pem --cacert /etc/etcd/ssl/etcd-root-ca.pem --endpoints https://172.16.11.71:2379,https://172.16.11.72:2379,https://172.16.11.73:2379<br><br>https://172.16.11.71:2379 is healthy: successfully committed proposal: took = 33.07493ms<br>https://172.16.11.72:2379 is healthy: successfully committed proposal: took = 32.132266ms<br>https://172.16.11.73:2379 is healthy: successfully committed proposal: took = 40.745291ms<br></code></pre></td></tr></table></figure><h2 id="三、搭建-CoreDNS-集群"><a href="#三、搭建-CoreDNS-集群" class="headerlink" title="三、搭建 CoreDNS 集群"></a>三、搭建 CoreDNS 集群</h2><h3 id="3-1、CoreDNS-安装"><a href="#3-1、CoreDNS-安装" class="headerlink" title="3.1、CoreDNS 安装"></a>3.1、CoreDNS 安装</h3><p>系统级 CoreDNS 安装推荐直接使用 systemd 管理，官方目前提供了 systemd 相关配置文件: <a href="https://github.com/coredns/deployment/tree/master/systemd">https://github.com/coredns/deployment/tree/master/systemd</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装二进制文件</span><br>tar -zxvf coredns_1.8.0_linux_amd64.tgz<br><span class="hljs-built_in">mv</span> coredns /usr/bin/coredns<br><br><span class="hljs-comment"># 安装 systemd 配置</span><br>wget https://raw.githubusercontent.com/coredns/deployment/master/systemd/coredns-sysusers.conf -O /usr/lib/sysusers.d/coredns-sysusers.conf<br>wget https://raw.githubusercontent.com/coredns/deployment/master/systemd/coredns-tmpfiles.conf -O /usr/lib/tmpfiles.d/coredns-tmpfiles.conf<br>wget https://raw.githubusercontent.com/coredns/deployment/master/systemd/coredns.service -O /usr/lib/systemd/system/coredns.service<br><br><span class="hljs-comment"># reload</span><br>systemctl daemon-reload<br><span class="hljs-comment"># 初始化用户</span><br>systemd-sysusers<br><span class="hljs-comment"># 初始化临时目录</span><br>systemd-tmpfiles --create<br><span class="hljs-comment"># 创建配置目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/coredns/ssl<br></code></pre></td></tr></table></figure><h3 id="3-2、etcdhosts-配置"><a href="#3-2、etcdhosts-配置" class="headerlink" title="3.2、etcdhosts 配置"></a>3.2、etcdhosts 配置</h3><p>etcdhosts 的配置类似官方的 etcd 插件，其配置格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">etcdhosts [ZONES...] &#123;<br>    [INLINE]<br>    ttl SECONDS<br>    no_reverse<br>    fallthrough [ZONES...]<br>    key ETCD_KEY<br>    endpoint ETCD_ENDPOINT...<br>    credentials ETCD_USERNAME ETCD_PASSWORD<br>    tls ETCD_CERT ETCD_KEY ETCD_CACERT<br>    <span class="hljs-built_in">timeout</span> ETCD_TIMEOUT<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是一个简单的可启动的样例配置:</p><p><strong><code>/etc/coredns/Corefile</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">. &#123;<br>    <span class="hljs-comment"># 绑定接口地址</span><br>    <span class="hljs-built_in">bind</span> 172.16.11.71<br><br>    <span class="hljs-comment"># cache</span><br>    cache 30 . &#123;<br>        success 4096<br>    &#125;<br><br>    <span class="hljs-comment"># etcdhosts 配置</span><br>    etcdhosts . &#123;<br>        fallthrough .<br>        key /etcdhosts<br>        <span class="hljs-built_in">timeout</span> 5s<br>        tls /etc/coredns/ssl/etcd.pem /etc/coredns/ssl/etcd-key.pem /etc/coredns/ssl/etcd-root-ca.pem<br>        endpoint https://172.16.11.71:2379 https://172.16.11.72:2379 https://172.16.11.73:2379<br>    &#125;<br><br>    <span class="hljs-comment"># 上游 DNS 配置</span><br>    forward . 114.114.114.114:53 &#123;<br>        max_fails 2<br>        expire 20s<br>        policy random<br>        health_check 0.2s<br>    &#125;<br><br>    <span class="hljs-comment"># 日志配置</span><br>    errors<br>    <span class="hljs-built_in">log</span> . <span class="hljs-string">&quot;&#123;remote&#125;:&#123;port&#125; - &#123;&gt;id&#125; \&quot;&#123;type&#125; &#123;class&#125; &#123;name&#125; &#123;proto&#125; &#123;size&#125; &#123;&gt;do&#125; &#123;&gt;bufsize&#125;\&quot; &#123;rcode&#125; &#123;&gt;rflags&#125; &#123;rsize&#125; &#123;duration&#125;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于 etcdhosts 插件需要连接 etcd 集群，所以需要将证书复制到 <code>Corefile</code> 指定的位置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 实际生产环境 coredns 与 etcd 一般不在一台机器上，请自行 scp</span><br><span class="hljs-built_in">cp</span> /etc/etcd/ssl/*.pem /etc/coredns/ssl<br><span class="hljs-comment"># 修复权限</span><br><span class="hljs-built_in">chown</span> -R coredns:coredns /etc/coredns<br></code></pre></td></tr></table></figure><p><strong>最后直接启动即可(首次启动会出现 <code>[ERROR] plugin/etcdhosts: invalid etcd response: 0</code> 错误，属于正常情况):</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start coredns<br><br><span class="hljs-comment"># 测试</span><br>dig @172.16.11.71 baidu.com<br><br>; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; @172.16.11.71 baidu.com<br>; (1 server found)<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- <span class="hljs-string">opcode: QUERY, status: NOERROR, id: 35323</span><br><span class="hljs-string">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; OPT PSEUDOSECTION:</span><br><span class="hljs-string">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="hljs-string">; COOKIE: 8e3137531ed0b57a (echoed)</span><br><span class="hljs-string">;; QUESTION SECTION:</span><br><span class="hljs-string">;baidu.com.                     IN      A</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; ANSWER SECTION:</span><br><span class="hljs-string">baidu.com.              30      IN      A       220.181.38.148</span><br><span class="hljs-string">baidu.com.              30      IN      A       39.156.69.79</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; Query time: 8 msec</span><br><span class="hljs-string">;; SERVER: 172.16.11.71#53(172.16.11.71)</span><br><span class="hljs-string">;; WHEN: Mon Nov 16 20:18:25 CST 2020</span><br><span class="hljs-string">;; MSG SIZE  rcvd: 100</span><br></code></pre></td></tr></table></figure><p><strong>最后在多台机器上通过同样的配置启动 CoreDNS 即可，此时所有 CoreDNS 服务器通过 Etcd 提供一致性的记录解析。</strong></p><h2 id="四、记录调整"><a href="#四、记录调整" class="headerlink" title="四、记录调整"></a>四、记录调整</h2><p>所有 CoreDNS 启动成功后，默认 etcdhosts 插件将会读取 Etcd 中的 <code>/etcdhosts</code> key 作为 hosts 文件载入；<strong>载入成功后将会在内存级进行 Cache，多次查询不会造成疯狂的 Etcd 请求，只有当触发 reload 时(包括 Etcd 更新)才会重新查询 Etcd。</strong>所以此时只需要向 Etcd 的 <code>/etcdhosts</code> key 写入一个 hosts 文件即可；写入 Etcd 可以使用 etcdctl 以及其他的开源工具，甚至自己开发都可以，<strong>记录更改只需要跟 Etcd 打交道，不需要理会 CoreDNS；</strong>由于本人实在是比较菜，前端页面写不出来，所以弄了一个命令行版本的工具: <a href="https://github.com/ytpay/dnsctl">dnsctl</a></p><p>dnsctl 只有一个可执行文件，<strong>默认情况下 dnsctl 读取 <code>$HOME/.dnsctl.yaml</code> 配置文件来沟通 Etcd，</strong>配置文件格式如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># etcd 中 etcdhosts 插件的 key</span><br><span class="hljs-attr">dnskey:</span> <span class="hljs-string">/etcdhosts</span><br><span class="hljs-comment"># etcd 集群配置</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">cert:</span> <span class="hljs-string">/etc/etcd/ssl/etcd.pem</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">/etc/etcd/ssl/etcd-key.pem</span><br>  <span class="hljs-attr">ca:</span> <span class="hljs-string">/etc/etcd/ssl/etcd-root-ca.pem</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://172.16.11.71:2379</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://172.16.11.72:2379</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://172.16.11.73:2379</span><br></code></pre></td></tr></table></figure><p>dnsctl 提供如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">dnsctl <span class="hljs-keyword">for</span> etcdhosts plugin<br><br>Usage:<br>  dnsctl [flags]<br>  dnsctl [<span class="hljs-built_in">command</span>]<br><br>Available Commands:<br>  config      show example config<br>  dump        dump hosts<br>  edit        edit hosts<br>  <span class="hljs-built_in">help</span>        Help about any <span class="hljs-built_in">command</span><br>  upload      upload hosts from file<br>  version     show hosts version<br><br>Flags:<br>      --config string   config file (default is <span class="hljs-variable">$HOME</span>/.dnsctl.yaml)<br>  -h, --<span class="hljs-built_in">help</span>            <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> dnsctl<br>  -v, --version         version <span class="hljs-keyword">for</span> dnsctl<br><br>Use <span class="hljs-string">&quot;dnsctl [command] --help&quot;</span> <span class="hljs-keyword">for</span> more information about a <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><p>其中 <code>edit</code> 命令将会打开系统默认编辑器(例如 vim)，然后编辑完保存后会自动上传到 Etcd 中，此后 CoreDNS 的 etcdhosts 插件将会立即重载；**<code>dump</code> 命令用于将 Etcd 中的 hosts 文件保存到本地用于备份，<code>upload</code> 命令可以将已有的 hosts 文件上传到 Etcd 用于恢复。**</p>]]></content>
    
    
    <summary type="html">目前宿主机上全部采用的 dnsmasq 作为 DNS 管理，其中有一个很大的问题是需要进行 DNS 冗余，dnsmasq 每次修改都要多台机器同步，所以自己写了一个插件配合 CoreDNS 实现分布式部署，如果想了解插件编写方式请参考 [Writing Plugin for Coredns](https://mritd.com/2019/11/05/writing-plugin-for-coredns/)。</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="CoreDNS" scheme="https://mritd.com/tags/coredns/"/>
    
    <category term="etcdhosts" scheme="https://mritd.com/tags/etcdhosts/"/>
    
  </entry>
  
  <entry>
    <title>GIGABYTE Z370 AORUS Gaming 5 关闭 CFG 锁</title>
    <link href="https://mritd.com/2020/10/16/gigabyte-z370-aorus-gaming-5-disable-cfg-lock/"/>
    <id>https://mritd.com/2020/10/16/gigabyte-z370-aorus-gaming-5-disable-cfg-lock/</id>
    <published>2020-10-15T18:51:00.000Z</published>
    <updated>2020-10-15T18:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、解锁原理"><a href="#一、解锁原理" class="headerlink" title="一、解锁原理"></a>一、解锁原理</h2><p>由于主板不支持设置 CFG Lock，所以只能借助第三方工具强行解锁；首要前提是需要知道 CFG Lock 的设置地址，不同型号主板甚至不同版本的 BIOS 都不一定相同，所以 CFG Lock 地址不要照搬；本次操作用到的工具如下:</p><ul><li>主板的 BIOS 文件(自行去官网下载，并且版本要和当前一致)</li><li><a href="https://github.com/LongSoft/UEFITool/releases">UEFITool</a>: 用于读取 BIOS 文件并搜索 CFG Lock 所在 Section</li><li><a href="https://github.com/LongSoft/Universal-IFR-Extractor/releases">ifrextract</a>: 用于将对应 Section 的 efi 文件转换为纯文本</li><li><a href="https://github.com/datasone/grub-mod-setup_var/releases">modGRUBShell.efi</a>: 修改版的 grub UEFI Shell 提供 <code>setup_var_3</code> 命令来修改 CFG Lock</li></ul><h2 id="二、获取-CFG-Lock-地址"><a href="#二、获取-CFG-Lock-地址" class="headerlink" title="二、获取 CFG Lock 地址"></a>二、获取 CFG Lock 地址</h2><h3 id="2-1、提取-BIOS-Section"><a href="#2-1、提取-BIOS-Section" class="headerlink" title="2.1、提取 BIOS Section"></a>2.1、提取 BIOS Section</h3><p>mac 下打开 UEFITool，选择 <code>File &gt; Open image file</code>，文件选择框点击选项按钮切换成 <code>All files</code> 模式否则由于文件扩展名不同可能无法选中，然后选择主板 BIOS 文件。</p><p><img src="https://cdn.oss.link/markdown/OVx3zw-1602786074-uLkuRk.png" alt="OVx3zw-1602786074-uLkuRk"></p><p><img src="https://cdn.oss.link/markdown/4OWosE-1602786158-wwWXdf.png" alt="4OWosE-1602786158-wwWXdf"></p><p>然后 <code>command + F</code> 切换到 <code>Text</code> 模式搜索 <code>CFG Lock</code>，接着双击下面的搜索结果会定位到对应的 Section。</p><p><img src="https://cdn.oss.link/markdown/miL7Qf-1602786270-thU0US.png" alt="miL7Qf-1602786270-thU0US"></p><p>接下来右键 <code>Extract body</code> 导出到桌面等任意文件夹既可。</p><p><img src="https://cdn.oss.link/markdown/qfbB5v-1602786419-Ys0a4P.png" alt="qfbB5v-1602786419-Ys0a4P"></p><h3 id="2-2、转换为-Text-文本"><a href="#2-2、转换为-Text-文本" class="headerlink" title="2.2、转换为 Text 文本"></a>2.2、转换为 Text 文本</h3><p>提取到 <code>[Section Name].efi</code> 文件后命令行执行 <code>ifrextract [Section Name].efi cfg.txt</code> 导出为文本。</p><p><img src="https://cdn.oss.link/markdown/TfPsbJ-1602786563-uLZS4A.png" alt="TfPsbJ-1602786563-uLZS4A"></p><h3 id="2-3、确定-CFG-Lock-位置"><a href="#2-3、确定-CFG-Lock-位置" class="headerlink" title="2.3、确定 CFG Lock 位置"></a>2.3、确定 CFG Lock 位置</h3><p>导出文本后通过编辑器搜索 <code>CFG Lock</code> 字符串，<strong>其中 <code>VarStoreInfo</code> 后面的地址就是 CFG Lock 设置地址，请记录这个地址(最好用手机拍照)。</strong></p><p><img src="https://cdn.oss.link/markdown/eCjJwX-1602786663-eyW0vz.png" alt="eCjJwX-1602786663-eyW0vz"></p><h2 id="三、关闭-CFG-Lock"><a href="#三、关闭-CFG-Lock" class="headerlink" title="三、关闭 CFG Lock"></a>三、关闭 CFG Lock</h2><p>得到了 CFG Lock 地址以后一切都简单了，创建一个启动 U 盘然后执行命令既可；首先将 U 盘格式化为 GUID 分区表，然后挂载 EFI 分区，<strong>将 <code>modGRUBShell.efi</code> 重命名为 <code>BOOTX64.efi</code> 并放入 <code>EFI/BOOT</code> 目录。</strong></p><p><img src="https://cdn.oss.link/markdown/YCHA7V-1602787150-1fqjYt.png" alt="YCHA7V-1602787150-1fqjYt"></p><p>最后重启系统 BIOS 选择使用 U 盘启动，并在 grub shell 内执行 <code>setup_var_3 0x529 0x0</code> 然后重启即完成解锁；<strong>注意: <code>0x529</code> 请替换为上面找到的实际地址，实际地址 <code>0x***</code> 后面的 <code>***</code> 如果有大写字母请保持大写；</strong>这部份就不上图了，懒得拍照。</p>]]></content>
    
    
    <summary type="html">最近在狂折腾黑苹果，从以前的 Clover 换成了 OC，迫于主板 CFG Lock 导致没法继续优化，折腾好久找到了解决方案。</summary>
    
    
    
    <category term="Hackintosh" scheme="https://mritd.com/categories/hackintosh/"/>
    
    
    <category term="CFG Lock" scheme="https://mritd.com/tags/cfg-lock/"/>
    
  </entry>
  
  <entry>
    <title>网站切换到 Hexo</title>
    <link href="https://mritd.com/2020/10/08/switch-jekyll-to-hexo/"/>
    <id>https://mritd.com/2020/10/08/switch-jekyll-to-hexo/</id>
    <published>2020-10-08T11:04:00.000Z</published>
    <updated>2020-10-08T11:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Hexo-安装"><a href="#一、Hexo-安装" class="headerlink" title="一、Hexo 安装"></a>一、Hexo 安装</h2><p>Hexo 安装根据官方文档直接操作即可，安装前提是需要先安装 Nodejs(这里不再阐述直接略过)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>Hexo 命令行工具安装完成后可以直接初始化一个样例项目，init 过程会 clone <code>https://github.com/hexojs/hexo-starter.git</code> 到本地，同时自动安装好相关依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mritd.com 为目录名，个人习惯直接使用网站域名作为目录名称</span><br>hexo init mritd.com<br></code></pre></td></tr></table></figure><p>进入目录启动样例站点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> mritd.com<br><span class="hljs-comment"># 启动本地服务器进行预览</span><br>hexo serve<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/1jb2q.png" alt="hexo_demo"></p><h2 id="二、主题设置"><a href="#二、主题设置" class="headerlink" title="二、主题设置"></a>二、主题设置</h2><p>基本的样例博客启动完成后就需要选择一个主题，主题实质上才决定博客功能，这里目前使用了 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题，这个主题目前兼具了个人博客所需的所有功能，而且作者提交比较活跃，文档也比较全面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载主题</span><br>git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br><span class="hljs-comment"># 切换到最新版本</span><br>(<span class="hljs-built_in">cd</span> themes/fluid &amp;&amp; git checkout -b v1.8.3 v1.8.3)<br></code></pre></td></tr></table></figure><p>接下来修改 <code>_config.yml</code> 配置切换主题即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>然后重新启动博客进行预览: <code>hexo cl &amp;&amp; hexo s</code></p><p><img src="https://cdn.oss.link/markdown/vlibl.png" alt="fluid_demo"></p><p><strong>关于主题其他配置可自行阅读 <a href="https://hexo.fluid-dev.com/docs/guide/">官方文档</a>，文档有时可能更新不及时，可同时参考仓库内的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml"><code>_config.yml</code></a> 配置。</strong></p><h2 id="三、文章导入"><a href="#三、文章导入" class="headerlink" title="三、文章导入"></a>三、文章导入</h2><p>关于 jekyll 博客的文章如何导入到 Hexo 中网上有很多脚本；但是实际上两个静态博客框架都是支持标准的 Markdown 语法书写的文章进行渲染，唯一区别就是每篇文章上的 “头”。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>catalog: true<br>categories:<br><span class="hljs-bullet">  -</span> [Kubernetes]<br><span class="hljs-bullet">  -</span> [Golang]<br>date: 2018-11-25 11:11:28<br>excerpt: 最近在看 kubeadm 的源码，不过有些东西光看代码还是没法太清楚，还是需要实际运行才能看到具体代码怎么跑的，还得打断点 debug；无奈的是本机是 mac，debug 得在 Linux 下，so 研究了一下 remote debug<br>keywords: kubeadm,debug<br>multilingual: false<br>tags:<br><span class="hljs-bullet">  -</span> Golang<br><span class="hljs-bullet">  -</span> Kubernetes<br>title: 远程 Debug kubeadm<br><span class="hljs-section">index<span class="hljs-emphasis">_img: img/remote_</span>debug.jpg</span><br><span class="hljs-section">---</span><br><br>具体文章内容......<br></code></pre></td></tr></table></figure><p>所以直接复制 jekyll 的 md 文件到 <code>source/_posts</code> 目录，并修改文档头部即可。</p><h2 id="四、自动更新"><a href="#四、自动更新" class="headerlink" title="四、自动更新"></a>四、自动更新</h2><p>目前博客部署在自己的 VPS 上，以前都是将博客生成的静态直接使用 nginx 发布出去的；但是面临的问题就是每次博客更新都要手动去 VPS 更新，虽然可以写一些 CI 脚本但是并不算智能；得益于 Golang 官方完善的标准库支持，这次直接几行代码写一个静态服务器，同时拦截特定 URL 来更新博客:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br><span class="hljs-string">&quot;path&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/&quot;</span>, fileServerWithCustom404(http.Dir(<span class="hljs-string">&quot;/data&quot;</span>)))<br>http.HandleFunc(<span class="hljs-string">&quot;/update&quot;</span>, update)<br><br>fmt.Println(<span class="hljs-string">&quot;Updating WebSite...&quot;</span>)<br>_, err := gitPull()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;WebSite update failed: %s&quot;</span>, err)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;HTTP Server Listen at [:8080]...&quot;</span>)<br>_ = http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">// POST 请求 /update 触发 git pull 更新博客</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">update</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.Method != http.MethodPost &#123;<br>w.WriteHeader(http.StatusBadRequest)<br>_, _ = w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;only support POST method.\n&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br>bs, err := gitPull()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>w.WriteHeader(http.StatusInternalServerError)<br>_, _ = w.Write([]<span class="hljs-type">byte</span>(err.Error()))<br><span class="hljs-keyword">return</span><br>&#125;<br>w.WriteHeader(http.StatusOK)<br>_, _ = w.Write(bs)<br>&#125;<br><br><span class="hljs-comment">// 包装一下 404 状态码，返回自定义的 404 页面</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fileServerWithCustom404</span><span class="hljs-params">(fs http.FileSystem)</span></span> http.Handler &#123;<br>fsh := http.FileServer(fs)<br><span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>_, err := fs.Open(path.Clean(r.URL.Path))<br><span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>r.URL.Path = <span class="hljs-string">&quot;/404.html&quot;</span><br>&#125;<br>fsh.ServeHTTP(w, r)<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gitPull</span><span class="hljs-params">()</span></span> (msg []<span class="hljs-type">byte</span>, err <span class="hljs-type">error</span>) &#123;<br>cmd := exec.Command(<span class="hljs-string">&quot;git&quot;</span>, <span class="hljs-string">&quot;pull&quot;</span>)<br>cmd.Dir = <span class="hljs-string">&quot;/data&quot;</span><br><span class="hljs-keyword">return</span> cmd.CombinedOutput()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、Docker-化"><a href="#五、Docker-化" class="headerlink" title="五、Docker 化"></a>五、Docker 化</h2><p>有了上面的静态服务器，写个 Dockerfile 将 Hexo 生成的静态文件打包即可:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> golang:<span class="hljs-number">1.15</span>-alpine3.<span class="hljs-number">12</span> AS builder<br><br><span class="hljs-keyword">ENV</span> GO111MODULE on<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> goserver /go/src/github.com/mritd/hexo/goserver</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /go/src/github.com/mritd/hexo/goserver</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">set</span> -e \</span><br><span class="language-bash">    &amp;&amp; go install</span><br><br><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.12</span> AS dist<br><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;mritd &lt;mritd@linux.com&gt;&quot;</span></span><br><br><span class="hljs-keyword">ENV</span> TZ Asia/Shanghai<br><span class="hljs-keyword">ENV</span> REPO https://github.com/mritd/mritd.com.git<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /go/bin/goserver /usr/local/bin/goserver</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">set</span> -e \</span><br><span class="language-bash">    &amp;&amp; apk upgrade \</span><br><span class="language-bash">    &amp;&amp; apk add bash tzdata git \</span><br><span class="language-bash">    &amp;&amp; git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$&#123;REPO&#125;</span> /data \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/<span class="hljs-variable">$&#123;TZ&#125;</span> /etc/localtime \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;TZ&#125;</span> &gt; /etc/timezone \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/cache/apk/*</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;goserver&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>镜像运行后将使用 <code>/data</code> 目录最为静态文件目录进行发布，Hexo 生成的静态文件(public 目录)也会完整的 clone 到当前目录，此后使用 POST 请求访问 <code>/update</code> 即可触发从 Github 更新博客内容。</p><h2 id="六、Travis-CI-集成"><a href="#六、Travis-CI-集成" class="headerlink" title="六、Travis CI 集成"></a>六、Travis CI 集成</h2><p>所有就绪以后在主仓库增加 <code>.travis.yml</code> 配置来联动 travis ci；由于每次 push 到 Github 的内容实际上已经是本地生成的 public 目录，所以 CI 只需要通知服务器更新即可；强迫症又加了一个 Telegram 通知，每次触发更新完成后 Telegram 再给自己推送一下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">go</span><br><br><span class="hljs-attr">git:</span><br>  <span class="hljs-attr">quiet:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-X</span> <span class="hljs-string">POST</span> <span class="hljs-string">$&#123;CALLBACK&#125;</span><br><br><span class="hljs-attr">after_script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-X</span> <span class="hljs-string">POST</span> <span class="hljs-string">https://api.telegram.org/bot$&#123;TELEGRAM_TOKEN&#125;/sendMessage</span> <span class="hljs-string">-d</span> <span class="hljs-string">chat_id=$&#123;TELEGRAM_CHAT_ID&#125;</span> <span class="hljs-string">-d</span> <span class="hljs-string">&quot;text=mritd.com deployed.&quot;</span><br></code></pre></td></tr></table></figure><h2 id="七、gulp-优化"><a href="#七、gulp-优化" class="headerlink" title="七、gulp 优化"></a>七、gulp 优化</h2><p>由于目前一些配图啥的还是存储在服务器本地，所以图片等比较大的静态文件仍然是访问瓶颈，这时候可以借助 gulp 来压缩并进行优化:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 gulp</span><br>npm install -g gulp<br><span class="hljs-comment"># 安装 gulp 插件</span><br>npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify-es gulp-imagemin --save<br><span class="hljs-comment"># 重新 link 一下</span><br>npm <span class="hljs-built_in">link</span> gulp<br></code></pre></td></tr></table></figure><p>接下来编写 <code>gulpfile.js</code> 指定相关的优化任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-minify-css&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify-es&#x27;</span>).<span class="hljs-property">default</span>;<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><br><span class="hljs-comment">// 压缩html</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlclean</span>())<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlmin</span>(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class="hljs-comment">// 压缩css</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/css/*.css&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">minifycss</span>(&#123;<br>            <span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;*&#x27;</span><br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/css&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩js</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/js/*.js&#x27;</span>, <span class="hljs-string">&#x27;!./public/js/*.min.js&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">uglify</span>())<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/js&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩图片</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/img/*.*&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>(<br>        [imagemin.<span class="hljs-title function_">gifsicle</span>(&#123;<span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">3</span>&#125;),<br>        imagemin.<span class="hljs-title function_">mozjpeg</span>(&#123;<span class="hljs-string">&#x27;progressive&#x27;</span>: <span class="hljs-literal">true</span>&#125;),<br>        imagemin.<span class="hljs-title function_">optipng</span>(&#123;<span class="hljs-string">&#x27;optimizationLevel&#x27;</span>: <span class="hljs-number">7</span>&#125;),<br>        imagemin.<span class="hljs-title function_">svgo</span>()],<br>        &#123;<span class="hljs-string">&#x27;verbose&#x27;</span>: <span class="hljs-literal">true</span>&#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/img&#x27;</span>))<br>&#125;);<br><br><span class="hljs-comment">// 默认任务</span><br><span class="hljs-comment">// 这里默认没有运行 minify-js，因为我发现 js 压缩以后 PageSpeed 评分</span><br><span class="hljs-comment">// 莫明其妙的降低了，目前只优先考虑桌面浏览器的性能，暂不考虑移动端</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.<span class="hljs-title function_">parallel</span>(<br>    <span class="hljs-string">&#x27;minify-html&#x27;</span>,<span class="hljs-string">&#x27;minify-css&#x27;</span>,<span class="hljs-string">&#x27;minify-images&#x27;</span><br>));<br></code></pre></td></tr></table></figure><p>最后在每次部署时执行一下 <code>gulp</code> 命令即可完成优化: <code>hexo cl &amp;&amp; hexo g &amp;&amp; gulp</code></p>]]></content>
    
    
    <summary type="html">坚持写博客大约有 5 年多的时间了，以前的博客一直采用 jekyll 框架，由于一直缺少搜索等功能，而自己又不会前端，最近干脆直接切换到 Hexo 了；这里记录一下折腾过程。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Hexo" scheme="https://mritd.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>编写一个动态准入控制来实现自动化</title>
    <link href="https://mritd.com/2020/08/19/write-a-dynamic-admission-control-webhook/"/>
    <id>https://mritd.com/2020/08/19/write-a-dynamic-admission-control-webhook/</id>
    <published>2020-08-19T06:35:00.000Z</published>
    <updated>2020-08-19T06:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、准入控制介绍"><a href="#一、准入控制介绍" class="headerlink" title="一、准入控制介绍"></a>一、准入控制介绍</h2><p>在 Kubernetes 整个请求链路中，请求通过认证和授权之后、对象被持久化之前需要通过一连串的 “准入控制拦截器”；这些准入控制器负载验证请求的合法性，必要情况下也可以对请求进行修改；默认准入控制器编写在 kube-apiserver 的代码中，针对于当前 kube-apiserver 默认启用的准入控制器你可以通过以下命令查看:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kube-apiserver -h | grep enable-admission-plugins<br></code></pre></td></tr></table></figure><p>具体每个准入控制器的作用可以通过 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/">Using Admission Controllers</a> 文档查看。在这些准入控制器中有两个特殊的准入控制器 <code>MutatingAdmissionWebhook</code> 和 <code>ValidatingAdmissionWebhook</code>。<strong>这两个准入控制器以 WebHook 的方式提供扩展能力，从而我们可以实现自定义的一些功能。当我们在集群中创建相关 WebHook 配置后，我们配置中描述的想要关注的资源在集群中创建、修改等都会触发 WebHook，我们再编写具体的应用来响应 WebHook 即可完成特定功能。</strong></p><h2 id="二、动态准入控制"><a href="#二、动态准入控制" class="headerlink" title="二、动态准入控制"></a>二、动态准入控制</h2><p>动态准入控制实际上指的就是上面所说的两个 WebHook，在使用动态准入控制时需要一些先决条件:</p><ul><li>确保 Kubernetes 集群版本至少为 v1.16 (以便使用 <code>admissionregistration.k8s.io/v1 API</code>)或者 v1.9 (以便使用 <code>admissionregistration.k8s.io/v1beta1</code> API)。</li><li>确保启用 MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook 控制器。 </li><li>确保启用 <code>admissionregistration.k8s.io/v1</code> 或 <code>admissionregistration.k8s.io/v1beta1</code> API。</li></ul><p>如果要使用 Mutating Admission Webhook，在满足先决条件后，需要在系统中 create 一个 MutatingWebhookConfiguration:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">admissionregistration.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">MutatingWebhookConfiguration</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;mutating-webhook.mritd.me&quot;</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-addons</span><br><span class="hljs-attr">webhooks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;mutating-webhook.mritd.me&quot;</span><br>    <span class="hljs-attr">rules:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span>   [<span class="hljs-string">&quot;&quot;</span>]<br>        <span class="hljs-attr">apiVersions:</span> [<span class="hljs-string">&quot;v1&quot;</span>]<br>        <span class="hljs-attr">operations:</span>  [<span class="hljs-string">&quot;CREATE&quot;</span>,<span class="hljs-string">&quot;UPDATE&quot;</span>]<br>        <span class="hljs-attr">resources:</span>   [<span class="hljs-string">&quot;pods&quot;</span>]<br>        <span class="hljs-attr">scope:</span>       <span class="hljs-string">&quot;Namespaced&quot;</span><br>    <span class="hljs-attr">clientConfig:</span><br>      <span class="hljs-attr">service:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;mutating-webhook&quot;</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;kube-addons&quot;</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/print</span><br>      <span class="hljs-attr">caBundle:</span> <span class="hljs-string">$&#123;CA_BUNDLE&#125;</span><br>    <span class="hljs-attr">admissionReviewVersions:</span> [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v1beta1&quot;</span>]<br>    <span class="hljs-attr">sideEffects:</span> <span class="hljs-string">None</span><br>    <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">failurePolicy:</span> <span class="hljs-string">Ignore</span><br>    <span class="hljs-attr">namespaceSelector:</span><br>      <span class="hljs-attr">matchLabels:</span><br>        <span class="hljs-attr">mutating-webhook.mritd.me:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>同样要使用 Validating Admission Webhook 也需要类似的配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">admissionregistration.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ValidatingWebhookConfiguration</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;validating-webhook.mritd.me&quot;</span><br><span class="hljs-attr">webhooks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;validating-webhook.mritd.me&quot;</span><br>    <span class="hljs-attr">rules:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span>   [<span class="hljs-string">&quot;&quot;</span>]<br>        <span class="hljs-attr">apiVersions:</span> [<span class="hljs-string">&quot;v1&quot;</span>]<br>        <span class="hljs-attr">operations:</span>  [<span class="hljs-string">&quot;CREATE&quot;</span>,<span class="hljs-string">&quot;UPDATE&quot;</span>]<br>        <span class="hljs-attr">resources:</span>   [<span class="hljs-string">&quot;pods&quot;</span>]<br>        <span class="hljs-attr">scope:</span>       <span class="hljs-string">&quot;Namespaced&quot;</span><br>    <span class="hljs-attr">clientConfig:</span><br>      <span class="hljs-attr">service:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;validating-webhook&quot;</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;kube-addons&quot;</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/print</span><br>      <span class="hljs-attr">caBundle:</span> <span class="hljs-string">$&#123;CA_BUNDLE&#125;</span><br>    <span class="hljs-attr">admissionReviewVersions:</span> [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v1beta1&quot;</span>]<br>    <span class="hljs-attr">sideEffects:</span> <span class="hljs-string">None</span><br>    <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">failurePolicy:</span> <span class="hljs-string">Ignore</span><br>    <span class="hljs-attr">namespaceSelector:</span><br>      <span class="hljs-attr">matchLabels:</span><br>        <span class="hljs-attr">validating-webhook.mritd.me:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>从配置文件中可以看到，<code>webhooks.rules</code> 段落中具体指定了我们想要关注的资源及其行为，<code>webhooks.clientConfig</code> 中指定了 webhook 触发后将其发送到那个地址以及证书配置等，这些具体字段的含义可以通过官方文档 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/">Dynamic Admission Control</a> 来查看。</p><p><strong>值得注意的是 Mutating Admission Webhook 会在 Validating Admission Webhook 之前触发；Mutating Admission Webhook 可以修改用户的请求，比如自动调整镜像名称、增加注解等，而 Validating Admission Webhook 只能做校验(true or false)，不可以进行修改操作。</strong></p><h2 id="三、编写一个-WebHook"><a href="#三、编写一个-WebHook" class="headerlink" title="三、编写一个 WebHook"></a>三、编写一个 WebHook</h2><blockquote><p><strong>郑重提示: 本部分文章请结合 <a href="https://github.com/mritd/goadmission">goadmission</a> 框架源码进行阅读。</strong></p></blockquote><h3 id="3-1、大体思路"><a href="#3-1、大体思路" class="headerlink" title="3.1、大体思路"></a>3.1、大体思路</h3><p>在编写之前一般我们先大体了解一下流程并制订方案再去实现，边写边思考适合在细节实现上，对于整体的把控需要提前作好预习。针对于这个准入控制的 WebHook 来说，根据其官方文档大致总结重点如下:</p><ul><li>WebHook 接收者就是一个标准的 HTTP Server，请求方式是 POST + JSON</li><li>请求响应都是一个 AdmissionReview 对象</li><li>响应时需要请求时的 UID(<code>request.uid</code>)</li><li>响应时 Mutating Admission Webhook 可以包含对请求的修改信息，格式为 JSONPatch</li></ul><p>有了以上信息以后便可以知道编写 WebHook 需要的东西，根据这些信息目前我作出的大体方案如下:</p><ul><li>最起码我们要有个 HTTP Server，考虑到后续可能会同时处理多种 WebHook，所以需要一个带有路径匹配的 HTTP 框架，Gin 什么的虽然不错但是太重，最终选择简单轻量的 <code>gorilla/mux</code>。</li><li>应该做好适当的抽象，因为对于响应需要包含的 UID 等限制在每个请求都有可以提取出来自动化完成。</li><li>针对于 Mutating Admission Webhook 响应的 JSONPatch 可以弄个结构体然后直接反序列化。</li></ul><h3 id="3-2、AdmissionReview-对象"><a href="#3-2、AdmissionReview-对象" class="headerlink" title="3.2、AdmissionReview 对象"></a>3.2、AdmissionReview 对象</h3><p>基于 3.1 部分的分析可以知道，WebHook 接收和响应都是一个 AdmissionReview 对象，在查看源码以后可以看到 AdmissionReview 结构如下:</p><p><img src="https://cdn.oss.link/markdown/jro62.png" alt="AdmissionReview"></p><p>从代码的命名中可以很清晰的看出，在请求发送到 WebHook 时我们只需要关注内部的 AdmissionRequest(实际入参)，在我们编写的 WebHook 处理完成后只需要返回包含有 AdmissionResponse(实际返回体) 的 AdmissionReview 对象即可；总的来说 <strong>AdmissionReview 对象是个套壳，请求是里面的 AdmissionRequest，响应是里面的 AdmissionResponse</strong>。</p><h3 id="3-3、Hello-World"><a href="#3-3、Hello-World" class="headerlink" title="3.3、Hello World"></a>3.3、Hello World</h3><p>有了上面的一些基础知识，我们就可以简单的实行一个什么也不干的 WebHook 方法(本地无法直接运行，重点在于思路):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// printRequest 接收 AdmissionRequest 对象并将其打印到到控制台，接着不做任何处理直接返回一个 AdmissionResponse 对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printRequest</span><span class="hljs-params">(request *admissionv1.AdmissionRequest)</span></span> (*admissionv1.AdmissionResponse, <span class="hljs-type">error</span>) &#123;<br>bs, err := jsoniter.MarshalIndent(request, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;    &quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>logger.Infof(<span class="hljs-string">&quot;print request: %s&quot;</span>, <span class="hljs-type">string</span>(bs))<br><br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">true</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusOK,<br>Message: <span class="hljs-string">&quot;Hello World&quot;</span>,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个 <code>printRequest</code> 方法最细粒度的控制到只面向我们的实际请求和响应；而对于 WebHook Server 来说其接到的是 http 请求，<strong>所以我们还需要在外面包装一下，将 http 请求转换为 AdmissionReview 并提取 AdmissionRequest 再调用上面的 <code>printRequest</code> 来处理，最后将返回结果重新包装为 AdmissionReview 重新返回；整体的代码如下</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 通用的错误返回方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">responseErr</span><span class="hljs-params">(handlePath, msg <span class="hljs-type">string</span>, httpCode <span class="hljs-type">int</span>, w http.ResponseWriter)</span></span> &#123;<br>logger.Errorf(<span class="hljs-string">&quot;handle func [%s] response err: %s&quot;</span>, handlePath, msg)<br>review := &amp;admissionv1.AdmissionReview&#123;<br>Response: &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">false</span>,<br>Result: &amp;metav1.Status&#123;<br>Message: msg,<br>&#125;,<br>&#125;,<br>&#125;<br>bs, err := jsoniter.Marshal(review)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger.Errorf(<span class="hljs-string">&quot;failed to marshal response: %v&quot;</span>, err)<br>w.WriteHeader(http.StatusInternalServerError)<br>_, _ = w.Write([]<span class="hljs-type">byte</span>(fmt.Sprintf(<span class="hljs-string">&quot;failed to marshal response: %s&quot;</span>, err)))<br>&#125;<br><br>w.WriteHeader(httpCode)<br>_, err = w.Write(bs)<br>logger.Debugf(<span class="hljs-string">&quot;write err response: %d: %v: %v&quot;</span>, httpCode, review, err)<br>&#125;<br><br><span class="hljs-comment">// printRequest 接收 AdmissionRequest 对象并将其打印到到控制台，接着不做任何处理直接返回一个 AdmissionResponse 对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printRequest</span><span class="hljs-params">(request *admissionv1.AdmissionRequest)</span></span> (*admissionv1.AdmissionResponse, <span class="hljs-type">error</span>) &#123;<br>bs, err := jsoniter.MarshalIndent(request, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;    &quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>logger.Infof(<span class="hljs-string">&quot;print request: %s&quot;</span>, <span class="hljs-type">string</span>(bs))<br><br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">true</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusOK,<br>Message: <span class="hljs-string">&quot;Hello World&quot;</span>,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// http server 的处理方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">headler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; _ = r.Body.Close() &#125;()<br>w.Header().Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br><br><span class="hljs-comment">// 读取 body，出错直接返回</span><br>reqBs, err := ioutil.ReadAll(r.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, err.Error(), http.StatusInternalServerError, w)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> reqBs == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(reqBs) == <span class="hljs-number">0</span> &#123;<br>responseErr(handlePath, <span class="hljs-string">&quot;request body is empty&quot;</span>, http.StatusBadRequest, w)<br><span class="hljs-keyword">return</span><br>&#125;<br>logger.Debugf(<span class="hljs-string">&quot;request body: %s&quot;</span>, <span class="hljs-type">string</span>(reqBs))<br><br><span class="hljs-comment">// 将 body 反序列化为 AdmissionReview</span><br>reqReview := admissionv1.AdmissionReview&#123;&#125;<br><span class="hljs-keyword">if</span> _, _, err := deserializer.Decode(reqBs, <span class="hljs-literal">nil</span>, &amp;reqReview); err != <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, fmt.Sprintf(<span class="hljs-string">&quot;failed to decode req: %s&quot;</span>, err), http.StatusInternalServerError, w)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> reqReview.Request == <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, <span class="hljs-string">&quot;admission review request is empty&quot;</span>, http.StatusBadRequest, w)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 提取 AdmissionRequest 并调用 printRequest 处理</span><br>resp, err := printRequest(reqReview.Request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, fmt.Sprintf(<span class="hljs-string">&quot;admission func response: %s&quot;</span>, err), http.StatusForbidden, w)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> resp == <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, <span class="hljs-string">&quot;admission func response is empty&quot;</span>, http.StatusInternalServerError, w)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 复制 AdmissionRequest 中的 UID 到 AdmissionResponse 中(必须进行，否则会导致响应无效)</span><br>resp.UID = reqReview.Request.UID<br><span class="hljs-comment">// 复制 reqReview.TypeMeta 到新的响应 AdmissionReview 中</span><br>respReview := admissionv1.AdmissionReview&#123;<br>TypeMeta: reqReview.TypeMeta,<br>Response: resp,<br>&#125;<br><br><span class="hljs-comment">// 重新序列化响应并返回</span><br>respBs, err := jsoniter.Marshal(respReview)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>responseErr(handlePath, fmt.Sprintf(<span class="hljs-string">&quot;failed to marshal response: %s&quot;</span>, err), http.StatusInternalServerError, w)<br>logger.Errorf(<span class="hljs-string">&quot;the expected response is: %v&quot;</span>, respReview)<br><span class="hljs-keyword">return</span><br>&#125;<br>w.WriteHeader(http.StatusOK)<br>_, err = w.Write(respBs)<br>logger.Debugf(<span class="hljs-string">&quot;write response: %d: %s: %v&quot;</span>, http.StatusOK, <span class="hljs-type">string</span>(respBs), err)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、抽象出框架"><a href="#3-4、抽象出框架" class="headerlink" title="3.4、抽象出框架"></a>3.4、抽象出框架</h3><p>编写了简单的 Hello World 以后可以看出，真正在编写时我们需要实现的都是处理 AdmissionRequest 并返回 AdmissionResponse 这部份(printRequest)；外部的包装为 AdmissionReview、复制 UID、复制 TypeMeta 等都是通用的方法，所以基于这一点我们可以进行适当的抽象:</p><h4 id="3-4-1、AdmissionFunc"><a href="#3-4-1、AdmissionFunc" class="headerlink" title="3.4.1、AdmissionFunc"></a>3.4.1、AdmissionFunc</h4><p>针对每一个贴合业务的 WebHook 来说，其大致有三大属性:</p><ul><li>WebHook 的类型(Mutating&#x2F;Validating)</li><li>WebHook 拦截的 URL 路径(&#x2F;print_request)</li><li>WebHook 核心的处理逻辑(处理 Request 和返回 Response)</li></ul><p>我们将其抽象为 AdmissionFunc 结构体以后如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WebHook 类型</span><br><span class="hljs-keyword">const</span> (<br>Mutating   AdmissionFuncType = <span class="hljs-string">&quot;Mutating&quot;</span><br>Validating AdmissionFuncType = <span class="hljs-string">&quot;Validating&quot;</span><br>)<br><br><span class="hljs-comment">// 每一个对应到我们业务的 WebHook 抽象的 struct</span><br><span class="hljs-keyword">type</span> AdmissionFunc <span class="hljs-keyword">struct</span> &#123;<br>Type AdmissionFuncType<br>Path <span class="hljs-type">string</span><br>Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(request *admissionv1.AdmissionRequest)</span></span> (*admissionv1.AdmissionResponse, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-2、HandleFunc"><a href="#3-4-2、HandleFunc" class="headerlink" title="3.4.2、HandleFunc"></a>3.4.2、HandleFunc</h4><p>我们知道 WebHook 是基于 HTTP 的，所以上面抽象出的 AdmissionFunc 还不能直接用在 HTTP 请求代码中；如果直接偶合到 HTTP 请求代码中，我们就没法为 HTTP 代码再增加其他拦截路径等等特殊的底层设置；<strong>所以站在 HTTP 层面来说还需要抽象一个 “更高层面的且包含 AdmissionFunc 全部能力的 HandleFunc” 来使用；HandleFunc 抽象 HTTP 层面的需求:</strong></p><ul><li>HTTP 请求方法</li><li>HTTP 请求路径</li><li>HTTP 处理方法</li></ul><p>以下为 HandleFunc 的抽象:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> HandleFunc <span class="hljs-keyword">struct</span> &#123;<br>Path   <span class="hljs-type">string</span><br>Method <span class="hljs-type">string</span><br>Func   <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5、goadmission-框架"><a href="#3-5、goadmission-框架" class="headerlink" title="3.5、goadmission 框架"></a>3.5、goadmission 框架</h3><p>有了以上两个角度的抽象，再结合 命令行参数解析、日志处理、配置文件读取等等，我揉合出了一个 <a href="https://github.com/mritd/goadmission">goadmission</a> 框架，以方便动态准入控制的快速开发。</p><h4 id="3-5-1、基本结构"><a href="#3-5-1、基本结构" class="headerlink" title="3.5.1、基本结构"></a>3.5.1、基本结构</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── main.go<br>└── pkg<br>    ├── adfunc<br>    │   ├── adfuncs.go<br>    │   ├── adfuncs_json.go<br>    │   ├── func_check_deploy_time.go<br>    │   ├── func_disable_service_links.go<br>    │   ├── func_image_rename.go<br>    │   └── func_print_request.go<br>    ├── conf<br>    │   └── conf.go<br>    ├── route<br>    │   ├── route_available.go<br>    │   ├── route_health.go<br>    │   └── router.go<br>    └── zaplogger<br>        ├── config.go<br>        └── logger.go<br><br>5 directories, 13 files<br></code></pre></td></tr></table></figure><ul><li>main.go 为程序运行入口，在此设置命令行 flag 参数等</li><li>pkg&#x2F;conf 为框架配置包，所有的配置读取只读取这个包即可</li><li>pkg&#x2F;zaplogger zap log 库的日志抽象和处理(copy 自 operator-sdk)</li><li>pkg&#x2F;route http 级别的路由抽象(HandleFunc)</li><li>pkg&#x2F;adfunc 动态准入控制 WebHook 级别的抽(AdmissionFunc)</li></ul><h4 id="3-5-2、增加动态准入控制"><a href="#3-5-2、增加动态准入控制" class="headerlink" title="3.5.2、增加动态准入控制"></a>3.5.2、增加动态准入控制</h4><p>由于框架已经作好了路由注册等相关抽象，所以只需要新建 go 文件，然后通过 init 方法注册到全局 WebHook 组中即可，新编写的 WebHook 对已有代码不会有任何侵入:</p><p><img src="https://cdn.oss.link/markdown/lg6zc.png" alt="add_adfunc"></p><p><strong>需要注意的是所有 validating 类型的 WebHook 会在 URL 路径前自动拼接 <code>/validating</code> 路径，mutating 类型的 WebHook 会在 URL 路径前自动拼接 <code>/mutating</code> 路径；</strong>这么做是为了避免在更高层级的 HTTP Route 上添加冲突的路由。</p><p><img src="https://cdn.oss.link/markdown/nd5ez.png" alt="auto_fix_url"></p><h4 id="3-5-3、实现-image-自动修改"><a href="#3-5-3、实现-image-自动修改" class="headerlink" title="3.5.3、实现 image 自动修改"></a>3.5.3、实现 image 自动修改</h4><p>所以一切准备就绪以后，就需要 “不忘初心”，撸一个自动修改镜像名称的 WebHook:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> adfunc<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/mritd/goadmission/pkg/conf&quot;</span><br><br>jsoniter <span class="hljs-string">&quot;github.com/json-iterator/go&quot;</span><br><br>corev1 <span class="hljs-string">&quot;k8s.io/api/core/v1&quot;</span><br>metav1 <span class="hljs-string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br><br><span class="hljs-string">&quot;github.com/mritd/goadmission/pkg/route&quot;</span><br>admissionv1 <span class="hljs-string">&quot;k8s.io/api/admission/v1&quot;</span><br>)<br><br><span class="hljs-comment">// 只初始化一次 renameMap</span><br><span class="hljs-keyword">var</span> renameOnce sync.Once<br><span class="hljs-comment">// renameMap 保存镜像名称的替换规则，目前粗略实现为纯文本替换</span><br><span class="hljs-keyword">var</span> renameMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>route.Register(route.AdmissionFunc&#123;<br>Type: route.Mutating,<br>Path: <span class="hljs-string">&quot;/rename&quot;</span>,<br>Func: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(request *admissionv1.AdmissionRequest)</span></span> (*admissionv1.AdmissionResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// init rename rules map</span><br>renameOnce.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>renameMap = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-number">10</span>)<br><span class="hljs-comment">// 将镜像重命名规则初始化到 renameMap 中，方便后续读取</span><br><span class="hljs-comment">// rename rule example: k8s.gcr.io/=gcrxio/k8s.gcr.io_</span><br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> conf.ImageRename &#123;<br>ss := strings.Split(s, <span class="hljs-string">&quot;=&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ss) != <span class="hljs-number">2</span> &#123;<br>logger.Fatalf(<span class="hljs-string">&quot;failed to parse image name rename rules: %s&quot;</span>, s)<br>&#125;<br>renameMap[ss[<span class="hljs-number">0</span>]] = ss[<span class="hljs-number">1</span>]<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// 这个准入控制的 WebHook 只针对 Pod 处理，非 Pod 类请求直接返回错误</span><br><span class="hljs-keyword">switch</span> request.Kind.Kind &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Pod&quot;</span>:<br><span class="hljs-comment">// 从 request 中反序列化出 Pod 实例</span><br><span class="hljs-keyword">var</span> pod corev1.Pod<br>err := jsoniter.Unmarshal(request.Object.Raw, &amp;pod)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>errMsg := fmt.Sprintf(<span class="hljs-string">&quot;[route.Mutating] /rename: failed to unmarshal object: %v&quot;</span>, err)<br>logger.Error(errMsg)<br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">false</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusBadRequest,<br>Message: errMsg,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 后来我发现带有下面这个注解的 Pod 是没法更改成功的，这种 Pod 是由 kubelet 直接</span><br><span class="hljs-comment">// 启动的 static pod，在 api server 中只能看到它的 &quot;mirror&quot;，不能改的</span><br><span class="hljs-comment">// skip static pod</span><br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> pod.Annotations &#123;<br><span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;kubernetes.io/config.mirror&quot;</span> &#123;<br>errMsg := fmt.Sprintf(<span class="hljs-string">&quot;[route.Mutating] /rename: pod %s has kubernetes.io/config.mirror annotation, skip image rename&quot;</span>, pod.Name)<br>logger.Warn(errMsg)<br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">true</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusOK,<br>Message: errMsg,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 遍历所有 Pod，然后生成 JSONPatch</span><br><span class="hljs-comment">// 注意: 返回结果必须是 JSONPatch，k8s api server 再将 JSONPatch 应用到 Pod 上 </span><br><br><span class="hljs-comment">// 由于有多个 Pod，所以最终会产生一个补丁数组</span><br><span class="hljs-keyword">var</span> patches []Patch<br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> pod.Spec.Containers &#123;<br><span class="hljs-keyword">for</span> s, t := <span class="hljs-keyword">range</span> renameMap &#123;<br><span class="hljs-keyword">if</span> strings.HasPrefix(c.Image, s) &#123;<br>patches = <span class="hljs-built_in">append</span>(patches, Patch&#123;<br><span class="hljs-comment">// 指定 JSONPatch 动作为 replace </span><br>Option: PatchOptionReplace,<br><span class="hljs-comment">// 打补丁的绝对位置</span><br>Path:   fmt.Sprintf(<span class="hljs-string">&quot;/spec/containers/%d/image&quot;</span>, i),<br><span class="hljs-comment">// replace 为处理过的镜像名</span><br>Value:  strings.Replace(c.Image, s, t, <span class="hljs-number">1</span>),<br>&#125;)<br><br><span class="hljs-comment">// 为了后期调试和留存历史，我们再为修改过的 Pod 加个注解</span><br>patches = <span class="hljs-built_in">append</span>(patches, Patch&#123;<br>Option: PatchOptionAdd,<br>Path:   <span class="hljs-string">&quot;/metadata/annotations&quot;</span>,<br>Value: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>fmt.Sprintf(<span class="hljs-string">&quot;rename-mutatingwebhook-%d.mritd.me&quot;</span>, time.Now().Unix()): fmt.Sprintf(<span class="hljs-string">&quot;%d-%s-%s&quot;</span>, i, strings.ReplaceAll(s, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>), strings.ReplaceAll(t, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)),<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 将所有 JSONPatch 序列化成 json，然后返回即可</span><br>patch, err := jsoniter.Marshal(patches)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>errMsg := fmt.Sprintf(<span class="hljs-string">&quot;[route.Mutating] /rename: failed to marshal patch: %v&quot;</span>, err)<br>logger.Error(errMsg)<br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">false</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusInternalServerError,<br>Message: errMsg,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br>logger.Infof(<span class="hljs-string">&quot;[route.Mutating] /rename: patches: %s&quot;</span>, <span class="hljs-type">string</span>(patch))<br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed:   <span class="hljs-literal">true</span>,<br>Patch:     patch,<br>PatchType: JSONPatch(),<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusOK,<br>Message: <span class="hljs-string">&quot;success&quot;</span>,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br>errMsg := fmt.Sprintf(<span class="hljs-string">&quot;[route.Mutating] /rename: received wrong kind request: %s, Only support Kind: Pod&quot;</span>, request.Kind.Kind)<br>logger.Error(errMsg)<br><span class="hljs-keyword">return</span> &amp;admissionv1.AdmissionResponse&#123;<br>Allowed: <span class="hljs-literal">false</span>,<br>Result: &amp;metav1.Status&#123;<br>Code:    http.StatusForbidden,<br>Message: errMsg,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;,<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>动态准入控制其实就是个 WebHook，我们弄个 HTTP Server 接收 AdmissionRequest 响应 AdmissionResponse 就行。</li><li>Request、Response 会包装到 AdmissionReview 中，我们还需要做一些边缘处理，比如复制 UID、TypeMeta 等</li><li>MutatingWebHook 想要修改东西时，要返回描述修改操作的 JSONPatch 补丁</li><li>单个 WebHook 很简单，写多个的时候要自己抽好框架，尽量优雅的作好复用和封装</li></ul>]]></content>
    
    
    <summary type="html">前段时间弄了一个 imgsync 的工具把 gcr.io 的镜像搬运到了 Docker Hub，但是即使这样我每次还是需要编辑 yaml 配置手动改镜像名称；所以我萌生了一个想法: 能不能自动化这个过程？</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Admission" scheme="https://mritd.com/tags/admission/"/>
    
  </entry>
  
  <entry>
    <title>使用 etcdadm 三分钟搭建 etcd 集群</title>
    <link href="https://mritd.com/2020/08/19/use-etcdadm-to-build-etcd-cluster-in-3-minutes/"/>
    <id>https://mritd.com/2020/08/19/use-etcdadm-to-build-etcd-cluster-in-3-minutes/</id>
    <published>2020-08-19T06:20:00.000Z</published>
    <updated>2020-08-19T06:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>在搭建 Kubernetes 集群的过程中首先要搞定 Etcd 集群，虽然说 kubeadm 工具已经提供了默认和 master 节点绑定的 Etcd 集群自动搭建方式，但是我个人一直是手动将 Etcd 集群搭建在宿主机；<strong>因为这个玩意太重要了，毫不夸张的说 kubernetes 所有组件崩溃我们都能在一定时间以后排查问题恢复，但是一旦 Etcd 集群没了那么 Kubernetes 集群也就真没了。</strong></p><p>在很久以前我创建了 <a href="https://github.com/Gozap/edep">edep</a> 工具来实现 Etcd 集群的辅助部署，再后来由于我们的底层系统偶合了 Ubuntu，所以创建了 <a href="https://github.com/mritd/etcd-deb">etcd-deb</a> 项目来自动打 deb 包来直接安装；最近逛了一下 Kubernetes 的相关项目，发现跟我的 edep 差不多的项目 <a href="https://github.com/kubernetes-sigs/etcdadm">etcdadm</a>，试了一下 “真香”。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><a href="https://github.com/kubernetes-sigs/etcdadm">etcdadm</a> 项目是使用 go 编写的，所以很明显只有一个二进制下载下来就能用:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/kubernetes-sigs/etcdadm/releases/download/v0.1.3/etcdadm-linux-amd64<br><span class="hljs-built_in">chmod</span> +x etcdadm-linux-amd64<br></code></pre></td></tr></table></figure><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="3-1、启动引导节点"><a href="#3-1、启动引导节点" class="headerlink" title="3.1、启动引导节点"></a>3.1、启动引导节点</h3><p>类似 kubeadm 一样，etcdadm 也是先启动第一个节点，然后后续节点直接 join 即可；第一个节点启动只需要执行 <code>etcdadm init</code> 命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">k1.node ➜  ~ ./etcdadm-linux-amd64 init<br>INFO[0000] [install] extracting etcd archive /var/cache/etcdadm/etcd/v3.3.8/etcd-v3.3.8-linux-amd64.tar.gz to /tmp/etcd664686683<br>INFO[0001] [install] verifying etcd 3.3.8 is installed <span class="hljs-keyword">in</span> /opt/bin/<br>INFO[0001] [certificates] creating PKI assets<br>INFO[0001] creating a self signed etcd CA certificate and key files<br>[certificates] Generated ca certificate and key.<br>INFO[0001] creating a new server certificate and key files <span class="hljs-keyword">for</span> etcd<br>[certificates] Generated server certificate and key.<br>[certificates] server serving cert is signed <span class="hljs-keyword">for</span> DNS names [k1.node] and IPs [127.0.0.1 172.16.10.21]<br>INFO[0002] creating a new certificate and key files <span class="hljs-keyword">for</span> etcd peering<br>[certificates] Generated peer certificate and key.<br>[certificates] peer serving cert is signed <span class="hljs-keyword">for</span> DNS names [k1.node] and IPs [172.16.10.21]<br>INFO[0002] creating a new client certificate <span class="hljs-keyword">for</span> the etcdctl<br>[certificates] Generated etcdctl-etcd-client certificate and key.<br>INFO[0002] creating a new client certificate <span class="hljs-keyword">for</span> the apiserver calling etcd<br>[certificates] Generated apiserver-etcd-client certificate and key.<br>[certificates] valid certificates and keys now exist <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/etc/etcd/pki&quot;</span><br>INFO[0006] [health] Checking <span class="hljs-built_in">local</span> etcd endpoint health<br>INFO[0006] [health] Local etcd endpoint is healthy<br>INFO[0006] To add another member to the cluster, copy the CA cert/key to its certificate <span class="hljs-built_in">dir</span> and run:<br>INFO[0006]      etcdadm <span class="hljs-built_in">join</span> https://172.16.10.21:2379<br></code></pre></td></tr></table></figure><p>从命令行输出可以看到不同阶段 etcdadm 的相关日志输出；在 <code>init</code> 命令时可以指定一些特定参数来覆盖默认行为，比如版本号、安装目录等:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">k1.node ➜  ~ ./etcdadm-linux-amd64 init --<span class="hljs-built_in">help</span><br>Initialize a new etcd cluster<br><br>Usage:<br>  etcdadm init [flags]<br><br>Flags:<br>      --certs-dir string                    certificates directory (default <span class="hljs-string">&quot;/etc/etcd/pki&quot;</span>)<br>      --disk-priorities stringArray         Setting etcd disk priority (default [Nice=-10,IOSchedulingClass=best-effort,IOSchedulingPriority=2])<br>      --download-connect-timeout duration   Maximum time <span class="hljs-keyword">in</span> seconds that you allow the connection to the server to take. (default 10s)<br>  -h, --<span class="hljs-built_in">help</span>                                <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> init<br>      --install-dir string                  install directory (default <span class="hljs-string">&quot;/opt/bin/&quot;</span>)<br>      --name string                         etcd member name<br>      --release-url string                  URL used to download etcd (default <span class="hljs-string">&quot;https://github.com/coreos/etcd/releases/download&quot;</span>)<br>      --server-cert-extra-sans strings      optional extra Subject Alternative Names <span class="hljs-keyword">for</span> the etcd server signing cert, can be multiple comma separated DNS names or IPs<br>      --skip-hash-check                     Ignore snapshot integrity <span class="hljs-built_in">hash</span> value (required <span class="hljs-keyword">if</span> copied from data directory)<br>      --snapshot string                     Etcd v3 snapshot file used to initialize member<br>      --version string                      etcd version (default <span class="hljs-string">&quot;3.3.8&quot;</span>)<br><br>Global Flags:<br>  -l, --log-level string   <span class="hljs-built_in">set</span> <span class="hljs-built_in">log</span> level <span class="hljs-keyword">for</span> output, permitted values debug, info, warn, error, fatal and panic (default <span class="hljs-string">&quot;info&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2、其他节点加入"><a href="#3-2、其他节点加入" class="headerlink" title="3.2、其他节点加入"></a>3.2、其他节点加入</h3><p>在首个节点启动完成后，将集群 ca 证书复制到其他节点然后执行 <code>etcdadm join ENDPOINT_ADDRESS</code> 即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制 ca 证书</span><br>k1.node ➜  ~ rsync -avR /etc/etcd/pki/ca.* 172.16.10.22:/<br>root@172.16.10.22<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">sending incremental file list</span><br><span class="hljs-string">/etc/etcd/</span><br><span class="hljs-string">/etc/etcd/pki/</span><br><span class="hljs-string">/etc/etcd/pki/ca.crt</span><br><span class="hljs-string">/etc/etcd/pki/ca.key</span><br><span class="hljs-string"></span><br><span class="hljs-string">sent 2,932 bytes  received 67 bytes  856.86 bytes/sec</span><br><span class="hljs-string">total size is 2,684  speedup is 0.89</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 执行 join</span><br><span class="hljs-string">k2.node ➜  ~ ./etcdadm-linux-amd64 join https://172.16.10.21:2379</span><br><span class="hljs-string">INFO[0000] [certificates] creating PKI assets</span><br><span class="hljs-string">INFO[0000] creating a self signed etcd CA certificate and key files</span><br><span class="hljs-string">[certificates] Using the existing ca certificate and key.</span><br><span class="hljs-string">INFO[0000] creating a new server certificate and key files for etcd</span><br><span class="hljs-string">[certificates] Generated server certificate and key.</span><br><span class="hljs-string">[certificates] server serving cert is signed for DNS names [k2.node] and IPs [172.16.10.22 127.0.0.1]</span><br><span class="hljs-string">INFO[0000] creating a new certificate and key files for etcd peering</span><br><span class="hljs-string">[certificates] Generated peer certificate and key.</span><br><span class="hljs-string">[certificates] peer serving cert is signed for DNS names [k2.node] and IPs [172.16.10.22]</span><br><span class="hljs-string">INFO[0000] creating a new client certificate for the etcdctl</span><br><span class="hljs-string">[certificates] Generated etcdctl-etcd-client certificate and key.</span><br><span class="hljs-string">INFO[0001] creating a new client certificate for the apiserver calling etcd</span><br><span class="hljs-string">[certificates] Generated apiserver-etcd-client certificate and key.</span><br><span class="hljs-string">[certificates] valid certificates and keys now exist in &quot;/etc/etcd/pki&quot;</span><br><span class="hljs-string">INFO[0001] [membership] Checking if this member was added</span><br><span class="hljs-string">INFO[0001] [membership] Member was not added</span><br><span class="hljs-string">INFO[0001] Removing existing data dir &quot;/var/lib/etcd&quot;</span><br><span class="hljs-string">INFO[0001] [membership] Adding member</span><br><span class="hljs-string">INFO[0001] [membership] Checking if member was started</span><br><span class="hljs-string">INFO[0001] [membership] Member was not started</span><br><span class="hljs-string">INFO[0001] [membership] Removing existing data dir &quot;/var/lib/etcd&quot;</span><br><span class="hljs-string">INFO[0001] [install] extracting etcd archive /var/cache/etcdadm/etcd/v3.3.8/etcd-v3.3.8-linux-amd64.tar.gz to /tmp/etcd315786364</span><br><span class="hljs-string">INFO[0003] [install] verifying etcd 3.3.8 is installed in /opt/bin/</span><br><span class="hljs-string">INFO[0006] [health] Checking local etcd endpoint health</span><br><span class="hljs-string">INFO[0006] [health] Local etcd endpoint is healthy</span><br></code></pre></td></tr></table></figure><h2 id="四、细节分析"><a href="#四、细节分析" class="headerlink" title="四、细节分析"></a>四、细节分析</h2><h3 id="4-1、默认配置"><a href="#4-1、默认配置" class="headerlink" title="4.1、默认配置"></a>4.1、默认配置</h3><p>在目前 etcdadm 尚未支持配置文件，目前所有默认配置存放在 <a href="https://github.com/kubernetes-sigs/etcdadm/blob/master/constants/constants.go#L22">constants.go</a> 中，这里面包含了默认安装位置、systemd 配置、环境变量配置等，限于篇幅请自行查看代码；下面简单介绍一些一些刚须的配置:</p><h4 id="4-1-1、etcdctl"><a href="#4-1-1、etcdctl" class="headerlink" title="4.1.1、etcdctl"></a>4.1.1、etcdctl</h4><p>etcdctl 默认安装在 <code>/opt/bin</code> 目录下，同时你会发现该目录下还存在一个 <code>etcdctl.sh</code> 脚本，<strong>这个脚本将会自动读取 etcdctl 配置文件(<code>/etc/etcd/etcdctl.env</code>)，所以推荐使用这个脚本来替代 etcdctl 命令。</strong></p><h4 id="4-1-2、数据目录"><a href="#4-1-2、数据目录" class="headerlink" title="4.1.2、数据目录"></a>4.1.2、数据目录</h4><p>默认的数据目录存储在 <code>/var/lib/etcd</code> 目录，目前 etcdadm 尚未提供任何可配置方式，当然你可以自己改源码。</p><h4 id="4-2-3、配置文件"><a href="#4-2-3、配置文件" class="headerlink" title="4.2.3、配置文件"></a>4.2.3、配置文件</h4><p>配置文件总共有两个，一个是 <code>/etc/etcd/etcdctl.env</code> 用于 <code>/opt/bin/etcdctl.sh</code> 读取；另一个是 <code>/etc/etcd/etcd.env</code> 用于 systemd 读取并启动 etcd server。</p><h3 id="4-2、Join-流程"><a href="#4-2、Join-流程" class="headerlink" title="4.2、Join 流程"></a>4.2、Join 流程</h3><blockquote><p>其实很久以前由于我自己部署方式导致了我一直以来理解的一个错误，我一直以为 etcd server 证书要包含所有 server 地址，当然这个想法是怎么来的我也不知道，但是当我看了以下 Join 操作源码以后突然意识到 “为什么要包含所有？包含当前 server 不就行了么。”；当然对于 HTTPS 证书的理解一直是明白的，但是很奇怪就是不知道怎么就产生了这个想法(哈哈，我自己都觉的不可思议)…</p></blockquote><ul><li>由于预先拷贝了 ca 证书，所以 join 开始前 etcdadm 使用这个 ca 证书会签发自己需要的所有证书。</li><li>接下来 etcdadmin 通过 etcdctl-etcd-client 证书创建 client，然后调用 <code>MemberAdd</code> 添加新集群</li><li>最后老套路下载安装+启动就完成了</li></ul><h3 id="4-3、目前不足"><a href="#4-3、目前不足" class="headerlink" title="4.3、目前不足"></a>4.3、目前不足</h3><p>目前 etcdadm 虽然已经基本生产可用，但是仍有些不足的地方:</p><ul><li>不支持配置文件，很多东西无法定制</li><li>join 加入集群是在内部 api 完成，并未持久化到物理配置文件，后续重建可能忘记节点 ip</li><li>集群证书目前不支持自动续期，默认证书为 1 年很容易过期</li><li>下载动作调用了系统命令(curl)依赖性有点强</li><li>日志格式有点不友好，比如 level 和日期</li></ul>]]></content>
    
    
    <summary type="html">本文介绍一下 etcd 宿主机部署的新玩具 etcdadm，类似 kubeadm 一样可以快速的在宿主机搭建 Etcd 集群。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="etcd" scheme="https://mritd.com/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>如何编写 CSI 插件</title>
    <link href="https://mritd.com/2020/08/19/how-to-write-a-csi-driver-for-kubernetes/"/>
    <id>https://mritd.com/2020/08/19/how-to-write-a-csi-driver-for-kubernetes/</id>
    <published>2020-08-19T06:10:00.000Z</published>
    <updated>2020-08-19T06:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么需要-CSI"><a href="#一、为什么需要-CSI" class="headerlink" title="一、为什么需要 CSI"></a>一、为什么需要 CSI</h2><p>在 Kubernetes 以前的版本中，其所有受官方支持的存储驱动全部在 Kubernetes 的主干代码中，其他第三方开发的自定义插件通过 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-storage/flexvolume.md">FlexVolume</a> 插件的形势提供服务；<strong>相对于 kubernetes 的源码树来说，内置的存储我们称之为 “树内存储”，外部第三方实现我们称之为 “树外存储”；</strong>在很长一段时间里树内存储和树外存储并行开发和使用，但是随着时间推移渐渐的就出现了很严重的问题:</p><ul><li>想要添加官方支持的存储必须在树内修改，这意味着需要 Kubernetes 发版</li><li>如果树内存储出现问题则也必须等待 Kubernetes 发版才能修复</li></ul><p>为了解决这种尴尬的问题，Kubernetes 必须抽象出一个合适的存储接口，并将所有存储驱动全部适配到这个接口上，存储驱动最好与 Kubernetes 之间进行 RPC 调用完成解耦，这样就造就了 CSI(Container Storage Interface)。</p><h2 id="二、CSI-基础知识"><a href="#二、CSI-基础知识" class="headerlink" title="二、CSI 基础知识"></a>二、CSI 基础知识</h2><h3 id="2-1、CSI-Sidecar-Containers"><a href="#2-1、CSI-Sidecar-Containers" class="headerlink" title="2.1、CSI Sidecar Containers"></a>2.1、CSI Sidecar Containers</h3><p>在开发 CSI 之前我们最好熟悉一下 CSI 开发中的一些常识；了解过 Kubernetes API 开发的朋友应该清楚，所有的资源定义(Deployment、Service…)在 Kubernetes 中其实就是一个 Object，此时可以将 Kubernetes 看作是一个 Database，无论是 Operator 还是 CSI 其核心本质都是不停的 Watch 特定的 Object，一但 kubectl 或者其他客户端 “动了” 这个 Object，我们的对应实现程序就 Watch 到变更然后作出相应的响应；<strong>对于 CSI 编写者来说，这些 Watch 动作已经不必自己实现 <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#custom-controllers">Custom Controller</a>，官方为我们提供了 <a href="https://kubernetes-csi.github.io/docs/sidecar-containers.html">CSI Sidecar Containers</a>；</strong>并且在新版本中这些 Sidecar Containers 实现极其完善，比如自动的多节点 HA(Etcd 选举)等。</p><p><strong>所以到迄今为止，所谓的 CSI 插件开发事实上并非面向 Kubernetes API 开发，而是面向 Sidecar Containers 的 gRPC 开发，Sidecar Containers 一般会和我们自己开发的 CSI 驱动程序在同一个 Pod 中启动，然后 Sidecar Containers Watch API 中 CSI 相关 Object 的变动，接着通过本地 unix 套接字调用我们编写的 CSI 驱动：</strong></p><p><img src="https://cdn.oss.link/markdown/10w5g.png" alt="CSI_Sidecar_Containers"></p><p>目前官方提供的 Sidecar Containers 如下:</p><ul><li><a href="https://kubernetes-csi.github.io/docs/external-provisioner.html">external-provisioner</a></li><li><a href="https://kubernetes-csi.github.io/docs/external-attacher.html">external-attacher</a></li><li><a href="https://kubernetes-csi.github.io/docs/external-snapshotter.html">external-snapshotter</a></li><li><a href="https://kubernetes-csi.github.io/docs/external-resizer.html">external-resizer</a></li><li><a href="https://kubernetes-csi.github.io/docs/node-driver-registrar.html">node-driver-registrar</a></li><li><a href="https://kubernetes-csi.github.io/docs/cluster-driver-registrar.html">cluster-driver-registrar (deprecated)</a></li><li><a href="https://kubernetes-csi.github.io/docs/livenessprobe.html">livenessprobe</a></li></ul><p>每个 Sidecar Container 的作用可以通过对应链接查看，需要注意的是 cluster-driver-registrar 已经停止维护，请改用 node-driver-registrar。</p><h3 id="2-2、CSI-处理阶段"><a href="#2-2、CSI-处理阶段" class="headerlink" title="2.2、CSI 处理阶段"></a>2.2、CSI 处理阶段</h3><blockquote><p>在理解了 CSI Sidecar Containers 以后，我们仍需要大致的了解 CSI 挂载过程中的大致流程，以此来针对性的实现每个阶段所需要的功能；CSI 整个流程实际上大致分为以下三大阶段:</p></blockquote><h4 id="2-2-1、Provisioning-and-Deleting"><a href="#2-2-1、Provisioning-and-Deleting" class="headerlink" title="2.2.1、Provisioning and Deleting"></a>2.2.1、Provisioning and Deleting</h4><p><a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#provisioning-and-deleting">Provisioning and Deleting</a> 阶段实现与外部存储供应商协调卷的创建&#x2F;删除处理，简单地说就是需要实现 CreateVolume 和 DeleteVolume；假设外部存储供应商为阿里云存储那么此阶段应该完成在阿里云存储商创建一个指定大小的块设备，或者在用户删除 volume 时完成在阿里云存储上删除这个块设备；除此之外此阶段还应当响应存储拓扑分布从而保证 volume 分布在正确的集群拓扑上(此处描述不算清晰，推荐查看设计文档)。</p><h4 id="2-2-2、Attaching-and-Detaching"><a href="#2-2-2、Attaching-and-Detaching" class="headerlink" title="2.2.2、Attaching and Detaching"></a>2.2.2、Attaching and Detaching</h4><p><a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#attaching-and-detaching">Attaching and Detaching</a> 阶段实现将外部存储供应商提供好的卷设备挂载到本地或者从本地卸载，简单地说就是实现 ControllerPublishVolume 和 ControllerUnpublishVolume；同样以外部存储供应商为阿里云存储为例，在 Provisioning 阶段创建好的卷的块设备，在此阶段应该实现将其挂载到服务器本地或从本地卸载，在必要的情况下还需要进行格式化等操作。</p><h4 id="2-2-3、Mount-and-Umount"><a href="#2-2-3、Mount-and-Umount" class="headerlink" title="2.2.3、Mount and Umount"></a>2.2.3、Mount and Umount</h4><p>这个阶段在 CSI 设计文档中没有做详细描述，在前两个阶段完成后，当一个目标 Pod 在某个 Node 节点上调度时，kubelet 会根据前两个阶段返回的结果来创建这个 Pod；同样以外部存储供应商为阿里云存储为例，此阶段将会把已经 Attaching 的本地块设备以目录形式挂载到 Pod 中或者从 Pod 中卸载这个块设备。</p><h3 id="2-3、CSI-gRPC-Server"><a href="#2-3、CSI-gRPC-Server" class="headerlink" title="2.3、CSI gRPC Server"></a>2.3、CSI gRPC Server</h3><p>CSI 的三大阶段实际上更细粒度的划分到 CSI Sidecar Containers 中，上面已经说过我们开发 CSI 实际上是面向 CSI Sidecar Containers 编程，针对于 CSI Sidecar Containers 我们主要需要实现以下三个 gRPC Server:</p><h4 id="2-3-1、Identity-Server"><a href="#2-3-1、Identity-Server" class="headerlink" title="2.3.1、Identity Server"></a>2.3.1、Identity Server</h4><p>在当前 CSI Spec v1.3.0 中 IdentityServer 定义如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// IdentityServer is the server API for Identity service.</span><br><span class="hljs-keyword">type</span> IdentityServer <span class="hljs-keyword">interface</span> &#123;<br>GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, <span class="hljs-type">error</span>)<br>GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, <span class="hljs-type">error</span>)<br>Probe(context.Context, *ProbeRequest) (*ProbeResponse, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码上可以看出 IdentityServer 主要负责像 Kubernetes 提供 CSI 插件名称可选功能等，所以此 Server 是必须实现的。</p><h4 id="2-3-2、Node-Server"><a href="#2-3-2、Node-Server" class="headerlink" title="2.3.2、Node Server"></a>2.3.2、Node Server</h4><p>同样当前 CSI v1.3.0 Spec 中 NodeServer 定义如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// NodeServer is the server API for Node service.</span><br><span class="hljs-keyword">type</span> NodeServer <span class="hljs-keyword">interface</span> &#123;<br>NodeStageVolume(context.Context, *NodeStageVolumeRequest) (*NodeStageVolumeResponse, <span class="hljs-type">error</span>)<br>NodeUnstageVolume(context.Context, *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, <span class="hljs-type">error</span>)<br>NodePublishVolume(context.Context, *NodePublishVolumeRequest) (*NodePublishVolumeResponse, <span class="hljs-type">error</span>)<br>NodeUnpublishVolume(context.Context, *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, <span class="hljs-type">error</span>)<br>NodeGetVolumeStats(context.Context, *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, <span class="hljs-type">error</span>)<br>NodeExpandVolume(context.Context, *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, <span class="hljs-type">error</span>)<br>NodeGetCapabilities(context.Context, *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, <span class="hljs-type">error</span>)<br>NodeGetInfo(context.Context, *NodeGetInfoRequest) (*NodeGetInfoResponse, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在最小化的实现中，NodeServer 中仅仅需要实现 <code>NodePublishVolume</code>、<code>NodeUnpublishVolume</code>、<code>NodeGetCapabilities</code> 三个方法，在 Mount 阶段 kubelet 会通过 <a href="https://kubernetes-csi.github.io/docs/node-driver-registrar.html">node-driver-registrar</a> 容器调用这三个方法。</p><h4 id="2-3-3、Controller-Server"><a href="#2-3-3、Controller-Server" class="headerlink" title="2.3.3、Controller Server"></a>2.3.3、Controller Server</h4><p>在当前 CSI Spec v1.3.0 ControllerServer 定义如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ControllerServer is the server API for Controller service.</span><br><span class="hljs-keyword">type</span> ControllerServer <span class="hljs-keyword">interface</span> &#123;<br>CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, <span class="hljs-type">error</span>)<br>DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, <span class="hljs-type">error</span>)<br>ControllerPublishVolume(context.Context, *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, <span class="hljs-type">error</span>)<br>ControllerUnpublishVolume(context.Context, *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, <span class="hljs-type">error</span>)<br>ValidateVolumeCapabilities(context.Context, *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, <span class="hljs-type">error</span>)<br>ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, <span class="hljs-type">error</span>)<br>GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, <span class="hljs-type">error</span>)<br>ControllerGetCapabilities(context.Context, *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, <span class="hljs-type">error</span>)<br>CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, <span class="hljs-type">error</span>)<br>DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, <span class="hljs-type">error</span>)<br>ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, <span class="hljs-type">error</span>)<br>ControllerExpandVolume(context.Context, *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, <span class="hljs-type">error</span>)<br>ControllerGetVolume(context.Context, *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, <span class="hljs-type">error</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>从这些方法上可以看出，大部分的核心逻辑应该在 ControllerServer 中实现，比如创建&#x2F;销毁 Volume，创建&#x2F;销毁 Snapshot 等；在一般情况下我们自己编写的 CSI 都会实现 <code>CreateVolume</code> 和 <code>DeleteVolume</code>，至于其他方法根据业务需求以及外部存储供应商实际情况来决定是否进行实现。</p><h4 id="2-3-4、整体部署加构图"><a href="#2-3-4、整体部署加构图" class="headerlink" title="2.3.4、整体部署加构图"></a>2.3.4、整体部署加构图</h4><p><img src="https://cdn.oss.link/markdown/vopox.jpg" alt="CSI Deploy Mechanism"></p><p><strong>从这个部署架构图上可以看出在实际上 CSI 部署时，Mount and Umount 阶段(对应 Node Server 实现)以 Daemonset 方式保证其部署到每个节点，当 Volume 创建完成后由其挂载到 Pod 中；其他阶段(Provisioning and Deleting 和 Attaching and Detaching) 只要部署多个实例保证 HA 即可(最新版本的 Sidecar Containers 已经实现了多节点自动选举)；每次 PV 创建时首先由其他两个阶段的 Sidecar Containers 做处理，处理完成后信息返回给 Kubernetes 再传递到 Node Driver(Node Server) 上，然后 Node Driver 将其 Mount 到 Pod 中。</strong></p><h2 id="三、编写一个-NFS-CSI-插件"><a href="#三、编写一个-NFS-CSI-插件" class="headerlink" title="三、编写一个 NFS CSI 插件"></a>三、编写一个 NFS CSI 插件</h2><h3 id="3-1、前置准备及分析"><a href="#3-1、前置准备及分析" class="headerlink" title="3.1、前置准备及分析"></a>3.1、前置准备及分析</h3><p>根据以上文档的描述，针对于需要编写一个 NFS CSI 插件这个需求，大致我们可以作出如下分析:</p><ul><li>三大阶段中我们只需要实现 Provisioning and Deleting 和 Mount and Umount；因为以 NFS 作为外部存储供应商来说我们并非是块设备，所以也不需要挂载到宿主机(Attaching and Detaching)。</li><li>Provisioning and Deleting 阶段我们需要实现 <code>CreateVolume</code> 和 <code>DeleteVolume</code> 逻辑，其核心逻辑应该是针对每个 PV 在 NFS Server 目录下执行 <code>mkdir</code>，并将生成的目录名称等信息返回给 Kubernetes。</li><li>Mount and Umount 阶段需要实现 Node Server 的 <code>NodePublishVolume</code> 和 <code>NodeUnpublishVolume</code> 方法，然后将上一阶段提供的目录名称等信息组合成挂载命令 Mount 到 Pod 即可。</li></ul><p>在明确了这个需求以后我们需要开始编写 gRPC Server，当然不能盲目的自己乱造轮子，<strong>因为这些 gRPC Server 需要是 <code>NonBlocking</code> 的，</strong>所以最佳实践就是参考官方给出的样例项目 <a href="https://github.com/kubernetes-csi/csi-driver-host-path">csi-driver-host-path</a>，这是一名合格的 CCE 必备的技能(CCE &#x3D; Ctrl C + Ctrl V + Engineer)。</p><h3 id="3-2、Hostpath-CSI-源码分析"><a href="#3-2、Hostpath-CSI-源码分析" class="headerlink" title="3.2、Hostpath CSI 源码分析"></a>3.2、Hostpath CSI 源码分析</h3><p>针对官方给出的 CSI 样例，首先把源码弄到本地，然后通过 IDE 打开；这里默认为读者熟悉 Go 语言相关语法以及 go mod 等依赖配置，开发 IDE 默认为 GoLand</p><p><img src="https://cdn.oss.link/markdown/jlsdg.png" alt="source tree"></p><p>从源码树上可以看到，hostpath 的 CSI 实现非常简单；首先是 <code>cmd</code> 包下的命令行部分，main 方法在这里定义，然后就是 <code>pkg/hostpath</code> 包的具体实现部分，CSI 需要实现的三大 gRPC Server 全部在此。</p><h4 id="3-2-1、命令行解析"><a href="#3-2-1、命令行解析" class="headerlink" title="3.2.1、命令行解析"></a>3.2.1、命令行解析</h4><p><code>cmd</code> 包下主要代码就是一些命令行解析，方便从外部传入一些参数供 CSI 使用；针对于 NFS CSI 我们需要从外部传入 NFS Server 地址、挂载目录等参数，如果外部存储供应商为其他云存储可能就需要从命令行传入 AccessKey、AccessToken 等参数。</p><p><img src="https://cdn.oss.link/markdown/t4mje.png" alt="flag_parse"></p><p>目前 go 原生的命令行解析非常弱鸡，所以更推荐使用 <a href="https://github.com/spf13/cobra">cobra</a> 命令行库完成解析。</p><h4 id="3-2-2、Hostpath-结构体"><a href="#3-2-2、Hostpath-结构体" class="headerlink" title="3.2.2、Hostpath 结构体"></a>3.2.2、Hostpath 结构体</h4><p>从上面命令行解析的图中可以看到，在完成命令行解析后交由 <code>handle</code> 方法处理；<code>handle</code> 方法很简单，通过命令行拿到的参数创建一个 <code>hostpath</code> 结构体指针，然后 <code>Run</code> 起来就行了，所以接下来要着重看一下这个结构体</p><p><img src="https://cdn.oss.link/markdown/0dc0j.png" alt="hostpath_struct"></p><p>从代码上可以看到，<code>hostpath</code> 结构体内有一系列的字段用来存储命令行传入的特定参数，然后还有三个 gRPC Server 的引用；命令行参数解析完成后通过 <code>NewHostPathDriver</code> 方法设置到 <code>hostpath</code> 结构体内，然后通过调用结构体的 <code>Run</code> 方法创建三个 gRPC Server 并运行</p><p><img src="https://cdn.oss.link/markdown/wt4ha.png" alt="hostpath_run"></p><h4 id="3-2-3、代码分布"><a href="#3-2-3、代码分布" class="headerlink" title="3.2.3、代码分布"></a>3.2.3、代码分布</h4><p>经过这么简单的一看，基本上一个最小化的 CSI 代码分布已经可以出来了:</p><ul><li>首先需要做命令行解析，一般放在 <code>cmd</code> 包</li><li>然后需要一个一般与 CSI 插件名称相同的结构体用来承载参数</li><li>结构体内持有三个 gRPC Server 引用，并通过适当的方法使用内部参数还初始化这个三个 gRPC Server</li><li>有了这些 gRPC Server 以后通过 <code>server.go</code> 中的 <code>NewNonBlockingGRPCServer</code> 方法将其启动(这里也可以看出 server.go 里面的方法我们后面可以 copy 直接用)</li></ul><h3 id="3-3、创建-CSI-插件骨架"><a href="#3-3、创建-CSI-插件骨架" class="headerlink" title="3.3、创建 CSI 插件骨架"></a>3.3、创建 CSI 插件骨架</h3><blockquote><p>项目骨架已经提交到 Github <a href="https://github.com/mritd/csi-archetype">mritd&#x2F;csi-archetype</a> 项目，可直接 clone 并使用。</p></blockquote><p>大致的研究完 Hostpath 的 CSI 源码，我们就可以根据其实现细节抽象出一个项目 CSI 骨架:</p><p><img src="https://cdn.oss.link/markdown/7y8qu.png" alt="csi_archetype"></p><p>在这个骨架中我们采用 <a href="https://github.com/spf13/cobra">corba</a> 完成命令行参数解析，同时使用 <a href="github.com/sirupsen/logrus">logrus</a> 作为日志输出库，这两个库都是 Kubernetes 以及 docker 比较常用的库；我们创建了一个叫 <code>archetype</code> 的结构体作为 CSI 的主承载类，这个结构体需要定义一些参数(parameter1…)方便后面初始化相关 gRPC Server 实现相关调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> archetype <span class="hljs-keyword">struct</span> &#123;<br>name     <span class="hljs-type">string</span><br>nodeID   <span class="hljs-type">string</span><br>version  <span class="hljs-type">string</span><br>endpoint <span class="hljs-type">string</span><br><br><span class="hljs-comment">// Add CSI plugin parameters here</span><br>parameter1 <span class="hljs-type">string</span><br>parameter2 <span class="hljs-type">int</span><br>parameter3 time.Duration<br><br><span class="hljs-built_in">cap</span>   []*csi.VolumeCapability_AccessMode<br>cscap []*csi.ControllerServiceCapability<br>&#125;<br></code></pre></td></tr></table></figure><p>与 Hostpath CSI 实现相同，我们创建一个 <code>NewCSIDriver</code> 方法来返回 <code>archetype</code> 结构体实例，在 <code>NewCSIDriver</code> 方法中将命令行解析得到的相关参数设置进结构体中并添加一些 <code>AccessModes</code> 和 <code>ServiceCapabilities</code> 方便后面 <code>Identity Server</code> 调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCSIDriver</span><span class="hljs-params">(version, nodeID, endpoint, parameter1 <span class="hljs-type">string</span>, parameter2 <span class="hljs-type">int</span>, parameter3 time.Duration)</span></span> *archetype &#123;<br>logrus.Infof(<span class="hljs-string">&quot;Driver: %s version: %s&quot;</span>, driverName, version)<br><br><span class="hljs-comment">// Add some check here</span><br><span class="hljs-keyword">if</span> parameter1 == <span class="hljs-string">&quot;&quot;</span> &#123;<br>logrus.Fatal(<span class="hljs-string">&quot;parameter1 is empty&quot;</span>)<br>&#125;<br><br>n := &amp;archetype&#123;<br>name:     driverName,<br>nodeID:   nodeID,<br>version:  version,<br>endpoint: endpoint,<br><br>parameter1: parameter1,<br>parameter2: parameter2,<br>parameter3: parameter3,<br>&#125;<br><br><span class="hljs-comment">// Add access modes for CSI here</span><br>n.AddVolumeCapabilityAccessModes([]csi.VolumeCapability_AccessMode_Mode&#123;<br>csi.VolumeCapability_AccessMode_MULTI_NODE_MULTI_WRITER,<br>&#125;)<br><br><span class="hljs-comment">// Add service capabilities for CSI here</span><br>n.AddControllerServiceCapabilities([]csi.ControllerServiceCapability_RPC_Type&#123;<br>csi.ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME,<br>csi.ControllerServiceCapability_RPC_CREATE_DELETE_SNAPSHOT,<br>&#125;)<br><br><span class="hljs-keyword">return</span> n<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>整个骨架源码树中，命令行解析自己重构使用一些更加方便的命令行解析、日志输出库；结构体部分参考 Hostpath 结构体自己调整，<code>server.go</code> 用来创建 <code>NonBlocking</code> 的 gRPC Server(直接从 Hotspath 样例项目 copy 即可)；然后就是三大 gRPC Server 的实现，由于是 “项目骨架” 所以相关方法我们都返回未实现，后续我们主要来实现这些方法就能让自己写的这个 CSI 插件 work。</strong></p><p><img src="https://cdn.oss.link/markdown/876sk.png" alt="Unimplemented_gRPC_Server"></p><h3 id="3-4、创建-NFS-CSI-插件骨架"><a href="#3-4、创建-NFS-CSI-插件骨架" class="headerlink" title="3.4、创建 NFS CSI 插件骨架"></a>3.4、创建 NFS CSI 插件骨架</h3><p>有了 CSI 的项目骨架以后，我们只需要简单地修改名字将其重命名为 NFS CSI 插件即可；由于这篇文章是先实现好了 NFS CSI(已经 work) 再来写的，所以 NFS CSI 的源码可以直接参考 <a href="https://github.com/Gozap/csi-nfs">Gozap&#x2F;csi-nfs</a> 即可，下面的部分主要介绍三大 gRPC Server 的实现</p><p><img src="https://cdn.oss.link/markdown/kk42j.png" alt="csi-nfs"></p><h3 id="3-5、实现-Identity-Server"><a href="#3-5、实现-Identity-Server" class="headerlink" title="3.5、实现 Identity Server"></a>3.5、实现 Identity Server</h3><p><img src="https://cdn.oss.link/markdown/r8etm.png" alt="Identity Server"></p><p>Identity Server 实现相对简单，总共就三个接口；<code>GetPluginInfo</code> 接口返回插件名称版本即可(注意版本号好像只能是 <code>1.1.1</code> 这种，<code>v1.1.1</code> 好像会报错)；<code>Probe</code> 接口用来做健康检测可以直接返回空 response 即可，当然最理想的情况应该是做一些业务逻辑判活；<code>GetPluginCapabilities</code> 接口看起来简单但是要清楚返回的 <code>Capabilities</code> 含义，由于我们的 NFS 插件必然需要响应 <code>CreateVolume</code> 等请求(实现 Controller Server)，所以 cap 必须给予 <code>PluginCapability_Service_CONTROLLER_SERVICE</code>，除此之外如果节点不支持均匀的创建外部存储供应商的 Volume，那么应当同时返回 <code>PluginCapability_Service_VOLUME_ACCESSIBILITY_CONSTRAINTS</code> 以表示 CSI 处理时需要根据集群拓扑作调整；具体的可以查看 gRPC 注释:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>PluginCapability_Service_UNKNOWN PluginCapability_Service_Type = <span class="hljs-number">0</span><br><span class="hljs-comment">// CONTROLLER_SERVICE indicates that the Plugin provides RPCs for</span><br><span class="hljs-comment">// the ControllerService. Plugins SHOULD provide this capability.</span><br><span class="hljs-comment">// In rare cases certain plugins MAY wish to omit the</span><br><span class="hljs-comment">// ControllerService entirely from their implementation, but such</span><br><span class="hljs-comment">// SHOULD NOT be the common case.</span><br><span class="hljs-comment">// The presence of this capability determines whether the CO will</span><br><span class="hljs-comment">// attempt to invoke the REQUIRED ControllerService RPCs, as well</span><br><span class="hljs-comment">// as specific RPCs as indicated by ControllerGetCapabilities.</span><br>PluginCapability_Service_CONTROLLER_SERVICE PluginCapability_Service_Type = <span class="hljs-number">1</span><br><span class="hljs-comment">// VOLUME_ACCESSIBILITY_CONSTRAINTS indicates that the volumes for</span><br><span class="hljs-comment">// this plugin MAY NOT be equally accessible by all nodes in the</span><br><span class="hljs-comment">// cluster. The CO MUST use the topology information returned by</span><br><span class="hljs-comment">// CreateVolumeRequest along with the topology information</span><br><span class="hljs-comment">// returned by NodeGetInfo to ensure that a given volume is</span><br><span class="hljs-comment">// accessible from a given node when scheduling workloads.</span><br>PluginCapability_Service_VOLUME_ACCESSIBILITY_CONSTRAINTS PluginCapability_Service_Type = <span class="hljs-number">2</span><br>)<br></code></pre></td></tr></table></figure><h3 id="3-6、实现-Controller-Server"><a href="#3-6、实现-Controller-Server" class="headerlink" title="3.6、实现 Controller Server"></a>3.6、实现 Controller Server</h3><p>Controller Server 实际上对应着 Provisioning and Deleting 阶段；换句话说核心的创建&#x2F;删除卷、快照等都应在此做实现，针对于本次编写的 NFS 插件仅做最小实现(创建&#x2F;删除卷)；需要注意的是除了核心的创建删除卷要实现以外还需要实现 <code>ControllerGetCapabilities</code> 方法，该方法返回 Controller Server 的 cap:</p><p><img src="https://cdn.oss.link/markdown/pl0n3.png" alt="ControllerGetCapabilities"></p><p><code>ControllerGetCapabilities</code> 返回的实际上是在创建驱动时设置的 cscap:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">n.AddControllerServiceCapabilities([]csi.ControllerServiceCapability_RPC_Type&#123;<br>csi.ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME,<br>csi.ControllerServiceCapability_RPC_CREATE_DELETE_SNAPSHOT,<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME</code> 表示这个 Controller Server 支持创建&#x2F;删除卷，<code>ControllerServiceCapability_RPC_CREATE_DELETE_SNAPSHOT</code> 表示支持创建&#x2F;删除快照(快照功能是后来闲的没事加的)；<strong>应该明确的是我们返回了特定的 cap 那就要针对特定方法做实现，因为你一旦声明了这些 cap Kubernetes 就认为有相应请求可以让你处理(你不能吹完牛逼然后关键时刻掉链子)。</strong>针对于可以返回哪些 cscap 可以通过这些 gRPC 常量来查看:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>ControllerServiceCapability_RPC_UNKNOWN                  ControllerServiceCapability_RPC_Type = <span class="hljs-number">0</span><br>ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME     ControllerServiceCapability_RPC_Type = <span class="hljs-number">1</span><br>ControllerServiceCapability_RPC_PUBLISH_UNPUBLISH_VOLUME ControllerServiceCapability_RPC_Type = <span class="hljs-number">2</span><br>ControllerServiceCapability_RPC_LIST_VOLUMES             ControllerServiceCapability_RPC_Type = <span class="hljs-number">3</span><br>ControllerServiceCapability_RPC_GET_CAPACITY             ControllerServiceCapability_RPC_Type = <span class="hljs-number">4</span><br><span class="hljs-comment">// Currently the only way to consume a snapshot is to create</span><br><span class="hljs-comment">// a volume from it. Therefore plugins supporting</span><br><span class="hljs-comment">// CREATE_DELETE_SNAPSHOT MUST support creating volume from</span><br><span class="hljs-comment">// snapshot.</span><br>ControllerServiceCapability_RPC_CREATE_DELETE_SNAPSHOT ControllerServiceCapability_RPC_Type = <span class="hljs-number">5</span><br>ControllerServiceCapability_RPC_LIST_SNAPSHOTS         ControllerServiceCapability_RPC_Type = <span class="hljs-number">6</span><br><span class="hljs-comment">// Plugins supporting volume cloning at the storage level MAY</span><br><span class="hljs-comment">// report this capability. The source volume MUST be managed by</span><br><span class="hljs-comment">// the same plugin. Not all volume sources and parameters</span><br><span class="hljs-comment">// combinations MAY work.</span><br>ControllerServiceCapability_RPC_CLONE_VOLUME ControllerServiceCapability_RPC_Type = <span class="hljs-number">7</span><br><span class="hljs-comment">// Indicates the SP supports ControllerPublishVolume.readonly</span><br><span class="hljs-comment">// field.</span><br>ControllerServiceCapability_RPC_PUBLISH_READONLY ControllerServiceCapability_RPC_Type = <span class="hljs-number">8</span><br><span class="hljs-comment">// See VolumeExpansion for details.</span><br>ControllerServiceCapability_RPC_EXPAND_VOLUME ControllerServiceCapability_RPC_Type = <span class="hljs-number">9</span><br><span class="hljs-comment">// Indicates the SP supports the</span><br><span class="hljs-comment">// ListVolumesResponse.entry.published_nodes field</span><br>ControllerServiceCapability_RPC_LIST_VOLUMES_PUBLISHED_NODES ControllerServiceCapability_RPC_Type = <span class="hljs-number">10</span><br><span class="hljs-comment">// Indicates that the Controller service can report volume</span><br><span class="hljs-comment">// conditions.</span><br><span class="hljs-comment">// An SP MAY implement `VolumeCondition` in only the Controller</span><br><span class="hljs-comment">// Plugin, only the Node Plugin, or both.</span><br><span class="hljs-comment">// If `VolumeCondition` is implemented in both the Controller and</span><br><span class="hljs-comment">// Node Plugins, it SHALL report from different perspectives.</span><br><span class="hljs-comment">// If for some reason Controller and Node Plugins report</span><br><span class="hljs-comment">// misaligned volume conditions, CO SHALL assume the worst case</span><br><span class="hljs-comment">// is the truth.</span><br><span class="hljs-comment">// Note that, for alpha, `VolumeCondition` is intended be</span><br><span class="hljs-comment">// informative for humans only, not for automation.</span><br>ControllerServiceCapability_RPC_VOLUME_CONDITION ControllerServiceCapability_RPC_Type = <span class="hljs-number">11</span><br><span class="hljs-comment">// Indicates the SP supports the ControllerGetVolume RPC.</span><br><span class="hljs-comment">// This enables COs to, for example, fetch per volume</span><br><span class="hljs-comment">// condition after a volume is provisioned.</span><br>ControllerServiceCapability_RPC_GET_VOLUME ControllerServiceCapability_RPC_Type = <span class="hljs-number">12</span><br>)<br></code></pre></td></tr></table></figure><p>当声明了 <code>ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME</code> 以后针对创建删除卷方法 <code>CreateVolume</code>、<code>DeleteVolume</code> 做实现即可；这两个方法实现就是常规的业务逻辑层面没什么技术含量，对于外部存储供应商是 NFS 来说无非就是接到一个 <code>CreateVolumeRequest</code> ，然后根据 request 给的 volume name 啥的信息自己执行一下在 NFS Server 上 <code>mkdir</code> ，删除卷处理就是反向的 <code>rm -rf dir</code>；在两个方法的处理中可能额外掺杂一些校验等其他的辅助实现。</p><p><img src="https://cdn.oss.link/markdown/jkhb6.png" alt="CreateVolume"></p><p><img src="https://cdn.oss.link/markdown/96ij8.png" alt="DeleteVolume"></p><p><strong>最后有几点需要注意的地方:</strong></p><ul><li><strong>幂等性: Kubernetes 可能由于一些其他原因会重复发出请求(比如超时重试)，此时一定要保证创建&#x2F;删除卷实现的幂等性，简单地说 Kubernetes 连续两次调用同一个卷创建 CSI 插件应当实现自动去重过滤，不能调用两次返回两个新卷。</strong></li><li><strong>数据回写: 要明白的是 Controller Server 是 Provisioning and Deleting 阶段，此时还没有真正挂载到 Pod，所以就本地使用 NFS 作为存储后端来说 <code>mkdir</code> 以后要把目录、NFS Server 地址等必要信息通过 VolumeContext 返回给 Kubernetes，Kubernetes 接下来会传递给 Node Driver(Mount&#x2F;Umount)用。</strong></li><li><strong>预挂载: 当然这个问题目前只存在在 NFS 作为存储后端中，问题核心在于在创建卷进行 <code>mkdir</code> 之前，NFS 应该已经确保 mount 到了 Controller Server 容器本地，所以目前的做法就是启动 Controller Server 时就执行 NFS 挂载；如果用其他的后端存储比如阿里云存储时也要考虑在创建卷之前相关的 API Client 是否可用。</strong></li></ul><h3 id="3-7、实现-Node-Server"><a href="#3-7、实现-Node-Server" class="headerlink" title="3.7、实现 Node Server"></a>3.7、实现 Node Server</h3><p>Node Server 实际上就是 Node Driver，简单地说当 Controller Server 完成一个卷的创建，并且已经 Attach 到 Node 以后(当然这里的 NFS 不需要 Attach)，Node Server 就需要实现根据给定的信息将卷 Mount 到 Pod 或者从 Pod Umount 掉卷；同样的 Node Server 也许要返回一些信息来告诉 Kubernetes 自己的详细情况，这部份由两个方法完成 <code>NodeGetInfo</code> 和 <code>NodeGetCapabilities</code></p><p><img src="https://cdn.oss.link/markdown/ts3l9.png" alt="NodeGetInfo_NodeGetCapabilities"></p><p><code>NodeGetInfo</code> 中返回节点的常规信息，比如 Node ID、最大允许的 Volume 数量、集群拓扑信息等；<code>NodeGetCapabilities</code> 返回这个 Node 的 cap，由于我们的 NFS 是真的啥也不支持，所以只好返回 <code>NodeServiceCapability_RPC_UNKNOWN</code>，至于其他的 cap 如下(含义自己看注释):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>NodeServiceCapability_RPC_UNKNOWN              NodeServiceCapability_RPC_Type = <span class="hljs-number">0</span><br>NodeServiceCapability_RPC_STAGE_UNSTAGE_VOLUME NodeServiceCapability_RPC_Type = <span class="hljs-number">1</span><br><span class="hljs-comment">// If Plugin implements GET_VOLUME_STATS capability</span><br><span class="hljs-comment">// then it MUST implement NodeGetVolumeStats RPC</span><br><span class="hljs-comment">// call for fetching volume statistics.</span><br>NodeServiceCapability_RPC_GET_VOLUME_STATS NodeServiceCapability_RPC_Type = <span class="hljs-number">2</span><br><span class="hljs-comment">// See VolumeExpansion for details.</span><br>NodeServiceCapability_RPC_EXPAND_VOLUME NodeServiceCapability_RPC_Type = <span class="hljs-number">3</span><br><span class="hljs-comment">// Indicates that the Node service can report volume conditions.</span><br><span class="hljs-comment">// An SP MAY implement `VolumeCondition` in only the Node</span><br><span class="hljs-comment">// Plugin, only the Controller Plugin, or both.</span><br><span class="hljs-comment">// If `VolumeCondition` is implemented in both the Node and</span><br><span class="hljs-comment">// Controller Plugins, it SHALL report from different</span><br><span class="hljs-comment">// perspectives.</span><br><span class="hljs-comment">// If for some reason Node and Controller Plugins report</span><br><span class="hljs-comment">// misaligned volume conditions, CO SHALL assume the worst case</span><br><span class="hljs-comment">// is the truth.</span><br><span class="hljs-comment">// Note that, for alpha, `VolumeCondition` is intended to be</span><br><span class="hljs-comment">// informative for humans only, not for automation.</span><br>NodeServiceCapability_RPC_VOLUME_CONDITION NodeServiceCapability_RPC_Type = <span class="hljs-number">4</span><br>)<br></code></pre></td></tr></table></figure><p>剩下的核心方法 <code>NodePublishVolume</code> 和 <code>NodeUnpublishVolume</code> 挂载&#x2F;卸载卷同 Controller Server 创建删除卷一样都是业务处理，没啥可说的，按步就班的调用一下 Mount 上就行；<strong>唯一需要注意的点就是这里也要保证幂等性，同时由于要操作 Pod 目录，所以要把宿主机的 <code>/var/lib/kubelet/pods</code> 目录挂载到 Node Server 容器里。</strong></p><h3 id="3-8、部署测试-NFS-插件"><a href="#3-8、部署测试-NFS-插件" class="headerlink" title="3.8、部署测试 NFS 插件"></a>3.8、部署测试 NFS 插件</h3><p>NFS 插件写完以后就可以实体环境做测试了，测试方法不同插件可能并不相同，本 NFS 插件可以直接使用源码项目的 <code>deploy</code> 目录创建相关容器做测试(需要根据自己的 NFS Server 修改一些参数)。针对于如何部署下面做一下简单说明:</p><p>三大阶段笼统的其实对应着三个 Sidecar Container:</p><ul><li>Provisioning and Deleting: external-provisioner</li><li>Attaching and Detaching: external-attacher</li><li>Mount and Umount: node-driver-registrar</li></ul><p><strong>我们的 NFS CSI 插件不需要 Attach，所以 external-attacher 也不需要部署；external-provisioner 只响应创建删除卷请求，所以通过 Deployment 部署足够多的复本保证 HA 就行；由于 Pod 不一定会落到那个节点上，理论上任意 Node 都可能有 Mount&#x2F;Umount 行为，所以 node-driver-registrar 要以 Daemonset 方式部署保证每个节点都有一个。</strong></p><h2 id="四、其他说明"><a href="#四、其他说明" class="headerlink" title="四、其他说明"></a>四、其他说明</h2><h3 id="4-1、前期调试"><a href="#4-1、前期调试" class="headerlink" title="4.1、前期调试"></a>4.1、前期调试</h3><p>在前期代码编写时一般都是 “盲狙”，就是按照自己的理解无脑实现，这时候可能离实际部署还很远，但是只是单纯的想知道某个 Request 里面到底是什么个东西，这时候你可以利用 <code>mritd/socket2tcp</code> 容器模拟监听 socket 文件，然后将请求转发到你的 IDE 监听端口上，然后再进行 Debug。</p><p>可能有人会问: “我直接在 Sidecar Containers 里写个 tcp 地址不就行了，还转发毛线，这不是脱裤子放屁多此一举么？”，但是这里我友情提醒一下，Sidecar Containers 指定 CSI 地址时填写非 socket 类型的地址是不好使的，会直接启动失败。</p><h3 id="4-2、后期调试"><a href="#4-2、后期调试" class="headerlink" title="4.2、后期调试"></a>4.2、后期调试</h3><p>等到代码编写到后期其实就开始 “真机” 调试了，这时候其实不必使用原始的打日志调试方法，NFS CSI 的项目源码中的 <code>Dockerfile.debug</code> 提供了使用 dlv 做远程调试的样例；具体怎么配合 IDE 做远程调试请自行 Google。</p><h3 id="4-3、其他功能实现"><a href="#4-3、其他功能实现" class="headerlink" title="4.3、其他功能实现"></a>4.3、其他功能实现</h3><p>其他功能根据需要可以自己酌情实现，比如创建&#x2F;删除快照功能；对于 NFS 插件来说 NFS Server 又没有 API，所以最简单最 low 的办法当然是 <code>tar -zcvf</code> 了(哈哈哈(超大声))，当然性能么就不要提了。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><strong>CSI 开发其实是针对 Kubernetes CSI Sidecar Containers 的 gRPC 开发，根据自己需求实现三大阶段中对应三大 gRPC Server 相应方法即可；相关功能要保证幂等性，cap 要看文档根据实际情况返回。</strong></p><h2 id="六、参考文档"><a href="#六、参考文档" class="headerlink" title="六、参考文档"></a>六、参考文档</h2><ul><li><a href="https://kubernetes-csi.github.io/docs/introduction.html">https://kubernetes-csi.github.io/docs/introduction.html</a></li><li><a href="https://github.com/container-storage-interface/spec">https://github.com/container-storage-interface/spec</a></li></ul>]]></content>
    
    
    <summary type="html">本篇文章详细介绍 CSI 插件，同时涉及到的源码比较多，主要倾向于使用 go 来开发 CSI 驱动。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="CSI" scheme="https://mritd.com/tags/csi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派4 Manjaro 系统定制</title>
    <link href="https://mritd.com/2020/08/19/make-a-custom-manjaro-image-for-rpi4/"/>
    <id>https://mritd.com/2020/08/19/make-a-custom-manjaro-image-for-rpi4/</id>
    <published>2020-08-19T06:05:00.000Z</published>
    <updated>2020-08-19T06:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、目前的系统现状"><a href="#一、目前的系统现状" class="headerlink" title="一、目前的系统现状"></a>一、目前的系统现状</h2><p>截止本文编写时间，树莓派4 官方系统仍然不支持 64bit；但是当我在 3b+ 上使用 arch 64bit 以后我发现 32bit 系统和 64bit 系统装在同一个树莓派上在使用时那就是两个完全不一样的树莓派…所以对于这个新的 rpi4 那么必需要用 64bit 的系统；而当前我大致查看到支持 64bit 的系统只有 Ubuntu20、Manjaro 两个，Ubuntu 对我来说太重了(虽然服务器上我一直是 Ubuntu，但是 rpi 上我选择说 “不”)，Manjaro 基于 Arch 这种非常轻量的系统非常适合树莓派这种开发板，所以最终我选择了 Manjaro。但是万万没想到的是 Manjaro 都是带 KDE 什么的图形化的，而我的树莓派只想仍在角落里跑东西，所以说图形化这东西对我来说也没啥用，最后迫于无奈只能自己通过 Manjaro 的工具自己定制了。</p><h2 id="二、manjaro-arm-tools"><a href="#二、manjaro-arm-tools" class="headerlink" title="二、manjaro-arm-tools"></a>二、manjaro-arm-tools</h2><p>经过几经查找各种 Google，发现了 Manjaro 官方提供了自定义创建 arm 镜像的工具 <a href="https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools">manjaro-arm-tools</a>，这个工具简单使用如下:</p><ul><li>首先准备一个 Manjaro 系统(虚拟机 x86 即可)</li><li>然后安装 manjaro-arm-tool 所需<a href="https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools#dependencies">依赖工具</a></li><li>添加 Manjaro 的<a href="https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools#git-version-from-manjaro-strit-repo">软件源</a></li><li>安装 manjaro-arm-tool <code>sudo pacman -Syyu manjaro-strit-keyring &amp;&amp; sudo pacman -S manjaro-arm-tools-git</code></li></ul><p>当工具都准备完成后，只需要执行 <code>sudo buildarmimg -d rpi4 -e minimal</code> 即可创建 manjaro 的 rpi4 最小镜像。</p><h2 id="三、系统定制"><a href="#三、系统定制" class="headerlink" title="三、系统定制"></a>三、系统定制</h2><p>在使用 manjaro-arm-tool 创建系统以后发现一些细微的东西需要自己调整，比如网络设置常用软件包等，而 manjaro-arm-tool 工具又没有提供太好的自定义处理的一些 hook，所以最后萌生了自己根据 manjaro-arm-tool 来创建自己的 rpi4 系统定制工具的想法。</p><h3 id="3-1、常用软件包安装"><a href="#3-1、常用软件包安装" class="headerlink" title="3.1、常用软件包安装"></a>3.1、常用软件包安装</h3><p>在查看了 manjaro-arm-tool 的源码后可以看到实际上软件安装就是利用 systemd-nspawn 进入到 arm 系统执行 pacman 安装，自己依葫芦画瓢增加一些常用的软件包安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemd-nspawn -q --resolv-conf=copy-host --timezone=off -D <span class="hljs-variable">$&#123;ROOTFS_DIR&#125;</span> pacman -Syyu zsh htop vim wget <span class="hljs-built_in">which</span> git make net-tools dnsutils inetutils iproute2 sysstat nload lsof --noconfirm<br></code></pre></td></tr></table></figure><h3 id="3-2、pacman-镜像"><a href="#3-2、pacman-镜像" class="headerlink" title="3.2、pacman 镜像"></a>3.2、pacman 镜像</h3><p>在安装软件包时发现安装速读奇慢，研究以后发现是没有使用国内的镜像源，故增加了国内镜像源的处理:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemd-nspawn -q --resolv-conf=copy-host --timezone=off -D <span class="hljs-variable">$&#123;ROOTFS_DIR&#125;</span> pacman-mirrors -c China<br></code></pre></td></tr></table></figure><h3 id="3-3、网络处理"><a href="#3-3、网络处理" class="headerlink" title="3.3、网络处理"></a>3.3、网络处理</h3><h4 id="3-3-1、有线连接"><a href="#3-3-1、有线连接" class="headerlink" title="3.3.1、有线连接"></a>3.3.1、有线连接</h4><p>默认的 manjaro-arm-tool 创建的系统网络部分采用 dhspcd 做 dhcp 处理，但是我个人感觉一切尽量精简统一还是比较好的；所以准备网络部分完全由 systemd 接管处理，即直接使用 systemd-networkd 和 systemd-resolved；systemd-networkd 处理相对简单，编写一个配置文件然后 enable systemd-networkd 服务即可:</p><p><strong>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;10-eth-dhcp.network</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Match]<br>Name=eth*<br><br>[Network]<br>DHCP=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p><strong>让 systemd-networkd 开机自启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemd-nspawn -q --resolv-conf=copy-host --timezone=off -D <span class="hljs-variable">$&#123;ROOTFS_DIR&#125;</span> systemctl <span class="hljs-built_in">enable</span> systemd-networkd.service<br></code></pre></td></tr></table></figure><p>一开始以为 systemd-resolved 同样 enable 一下就行，后来发现每次开机初始化以后 systemd-resolved 都会被莫明其妙的 disable 掉；经过几经寻找和开 issue 问作者，发现这个操作是被 manjaro-arm-oem-install 包下的脚本执行的，作者的回复意思是大部分带有图形化的版本网络管理工具都会与 systemd-resolved 冲突，所以默认关闭了，这时候我们就要针对 manjaro-arm-oem-install 单独处理一下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemd-nspawn -q --resolv-conf=copy-host --timezone=off -D <span class="hljs-variable">$&#123;ROOTFS_DIR&#125;</span> systemctl <span class="hljs-built_in">enable</span> systemd-resolved.service<br>sed -i <span class="hljs-string">&#x27;s@systemctl disable systemd-resolved.service 1&gt; /dev/null 2&gt;&amp;1@@g&#x27;</span> <span class="hljs-variable">$&#123;ROOTFS_DIR&#125;</span>/usr/share/manjaro-arm-oem-install/manjaro-arm-oem-install<br></code></pre></td></tr></table></figure><h4 id="3-3-2、无限连接"><a href="#3-3-2、无限连接" class="headerlink" title="3.3.2、无限连接"></a>3.3.2、无限连接</h4><p>有线连接只要 systemd-networkd 处理好就能很好的工作，而无线连接目前有很多方案，我一开始想用 <a href="https://wiki.archlinux.org/index.php/Netctl_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">netctl</a>，后来发现这东西虽然是 Arch 亲儿子，但是在系统定制时采用 systemd-nspawn 调用不兼容(因为里面调用了 systemd 的一些命令，这些命令一般只有在开机时才可用)，而且只用 netctl 来管理 wifi 还感觉怪怪的，后来我的想法是要么用就全都用，要么就纯手动不要用这些东西，所以最后的方案是 wpa_supplicant + systemd-networkd 一把梭:</p><p><strong>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;10-wlan-dhcp.network.example</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1. Generate wifi configuration (don&#x27;t modify the name of wpa_supplicant-wlan0.conf file)</span><br><span class="hljs-comment"># $ wpa_passphrase MyNetwork SuperSecretPassphrase &gt; /etc/wpa_supplicant/wpa_supplicant-wlan0.conf</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 2. Connect to wifi automatically after booting</span><br><span class="hljs-comment"># $ systemctl enable wpa_supplicant@wlan0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 3.Systemd automatically makes dhcp request</span><br><span class="hljs-comment"># $ cp /etc/systemd/network/10-wlan-dhcp.network.example /etc/systemd/network/10-wlan-dhcp.network</span><br><br>[Match]<br>Name=wlan*<br><br>[Network]<br>DHCP=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="3-4、内核调整"><a href="#3-4、内核调整" class="headerlink" title="3.4、内核调整"></a>3.4、内核调整</h3><p>在上面的一些调整完成后我就启动系统实体机测试了，测试过程中发现安装 docker 以后会有两个警告，大致意思就是不支持 swap limit 和 cpu limit；查询资料以后发现是内核有两个参数没开启(<code>CONFIG_MEMCG_SWAP</code>、<code>CONFIG_CFS_BANDWIDTH</code>)…当然我这种强迫症是不能忍的，没办法就自己在 rpi4 上重新编译了内核(后来我想想还不如用 arch 32bit 然后自己编译 64bit 内核了):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/mritd/linux-rpi4.git<br><span class="hljs-built_in">cd</span> linux-rpi4<br>MAKEFLAGS=<span class="hljs-string">&#x27;-j4&#x27;</span> makepkg<br></code></pre></td></tr></table></figure><h3 id="3-5、外壳驱动"><a href="#3-5、外壳驱动" class="headerlink" title="3.5、外壳驱动"></a>3.5、外壳驱动</h3><p>由于我的 rpi4 配的是 ARGON ONE 的外壳，所以电源按钮还有风扇需要驱动才能完美工作，没办法我又编译了 ARGON ONE 外壳的驱动:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/mritd/argonone.git<br><span class="hljs-built_in">cd</span> argonone<br>makepkg<br></code></pre></td></tr></table></figure><h2 id="四、定制脚本"><a href="#四、定制脚本" class="headerlink" title="四、定制脚本"></a>四、定制脚本</h2><p>综合以上的各种修改以后，我从 manjaro-arm-tool 提取出了定制化的 rpi4 的编译脚本，该脚本目前存放在 <a href="https://github.com/mritd/manjaro-rpi4">mritd&#x2F;manjaro-rpi4</a> 仓库中；目前使用此脚本编译的系统镜像默认进行了以下处理:</p><ul><li>调整 pacman mirror 为中国</li><li>安装常用软件包(zsh htop vim wget which…)</li><li>有线网络完全的 systemd-networkd 接管，resolv.conf 由 systemd-resolved 接管</li><li>无线网络由 wpa_supplicant 和 systemd-networkd 接管</li><li>安装自行编译的内核以消除 docker 警告(<strong>自编译内核不影响升级，升级&#x2F;覆盖安装后自动恢复</strong>)</li></ul><p>至于 ARGON ONE 的外壳驱动只在 resources 目录下提供了安装包，并未默认安装到系统。</p>]]></content>
    
    
    <summary type="html">最近入手了新玩具 &quot;吃灰派4&quot;，这一代性能提升真的很大，所以买回来是真的没办法 &quot;吃灰&quot; 了；但是由于目前 64bit 系统比较难产，所以只能自己定义一下 Manjaro 了。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Manjaro" scheme="https://mritd.com/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Filebeat 端进行日志处理</title>
    <link href="https://mritd.com/2020/08/19/how-to-modify-filebeat-source-code-to-processing-logs/"/>
    <id>https://mritd.com/2020/08/19/how-to-modify-filebeat-source-code-to-processing-logs/</id>
    <published>2020-08-19T06:01:00.000Z</published>
    <updated>2020-08-19T06:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>目前某项目组日志需要做切割处理，针对日志信息进行分割并提取 k&#x2F;v 放入 es 中方便查询。这种需求在传统 ELK 中应当由 logstash 组件完成，通过 <code>gork</code> 等操作对日志进行过滤、切割等处理。不过很尴尬的是我并不会 ruby，logstash pipeline 的一些配置我也是极其头疼，而且还不想学…更不凑巧的是我会写点 go，<strong>那么理所应当的此时的我对 filebeat 源码产生了一些想法，比如我直接在 filebeat 端完成日志处理，然后直接发 es&#x2F;logstash，这样似乎更方便，而且还能分摊 logstash 的压力，我感觉这个操作并不过分😂…</strong></p><h2 id="二、需求"><a href="#二、需求" class="headerlink" title="二、需求"></a>二、需求</h2><p>目前某项目组 java 日志格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">2020-04-30 21:56:30.117$<span class="hljs-variable">$api</span>-test-65c8c7cf7f-lng7h$<span class="hljs-variable">$http</span>-nio-8080-exec-3$$INFO$<span class="hljs-variable">$com</span>.example.api.common.filter.GlobalDataFilter$<span class="hljs-variable">$GlobalDataFilter</span>.java$$95$<span class="hljs-variable">$test</span><br>build commonData from header :&#123;<span class="hljs-string">&quot;romVersion&quot;</span>:<span class="hljs-string">&quot;W_V2.1.4&quot;</span>,<span class="hljs-string">&quot;softwareVersion&quot;</span>:<span class="hljs-string">&quot;15&quot;</span>,<span class="hljs-string">&quot;token&quot;</span>:<span class="hljs-string">&quot;aFxANNM3pnRYpohvLMSmENydgFSfsmFMgCbFWAosIE=&quot;</span>&#125;<br>$$$$<br></code></pre></td></tr></table></figure><p>目前开发约定格式为日志通过 <code>$$</code> 进行分割，日志格式比较简单，但是 logstash 共用(nginx 等各种日志都会往这个 logstash 输出)，不想去折腾 logstash 配置的情况下，只需要让 filebeat 能够直接切割并设置好 k&#x2F;v 对应既可。</p><h2 id="三、filebeat-module"><a href="#三、filebeat-module" class="headerlink" title="三、filebeat module"></a>三、filebeat module</h2><blockquote><p>module 部份只做简介，以为实际上依托 es 完成，意义不大。</p></blockquote><p>当然在考虑修改 filebeat 源码后，我第一想到的是 filebeat 的 module，这个 module 在官方文档中是个很神奇的东西；通过开启一个 module 就可以对某种日志直接做处理，这种东西似乎就是我想要的；比如我写一个 “项目名” module，然后 filebeat 直接开启这个 module，这个项目的日志就直接自动处理好(听起来就很 “上流”)…</p><p>针对于自定义 module，官方给出了文档: <a href="https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html">Creating a New Filebeat Module</a></p><p>按照文档操作如下(假设我们的项目名为 cdm):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 克隆源码</span><br>git <span class="hljs-built_in">clone</span> git@github.com:elastic/beats.git<br><span class="hljs-comment"># 切换到稳定分支</span><br><span class="hljs-built_in">cd</span> bests &amp;&amp; git checkout -b v7.6.2 v7.6.2-module<br><span class="hljs-comment"># 创建 module，GO111MODULE 需要设置为 off</span><br><span class="hljs-comment"># 在 7.6.2 版本官方尚未开始支持 go mod</span><br><span class="hljs-built_in">cd</span> filebeat<br>GO111MODULE=off make create-module MODULE=cdm<br></code></pre></td></tr></table></figure><p>创建完成后目录结构如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  filebeat git:(v7.6.2-module) ✗ tree module/cdm<br>module/cdm<br>├── _meta<br>│   ├── config.yml<br>│   ├── docs.asciidoc<br>│   └── fields.yml<br>└── module.yml<br><br>1 directory, 4 files<br></code></pre></td></tr></table></figure><p>这几个文件具体作用<a href="https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html">官方文档</a>都有详细的描述；但是根据文档描述光有这几个文件是不够的，<strong>module 只是一个处理集合的定义，尚未包含任何处理，针对真正的处理需要继续创建 fileset，fileset 简单的理解就是针对具体的一组文件集合的处理；</strong>例如官方 nginx module 中包含两个 fileset: <code>access</code> 和 <code>error</code>，这两个一个针对 access 日志处理一个针对 error 日志进行处理；在 fileset 中可以设置默认文件位置、处理方式。</p><p><strong>But… 我翻了 nginx module 的样例配置才发现，module 这个东西实质上只做定义和存储处理表达式，具体的切割处理实际上交由 es 的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html">Ingest Node</a> 处理；表达式里仍需要定义 <code>grok</code> 等操作，而且这东西最终会编译到 go 静态文件里；</strong>此时的我想说一句 “MMP”，本来我是不像写 grok 啥的才来折腾 filebeat，结果这个 module 折腾一圈还是要写 grok 啥的，而且这东西直接借助 es 完成导致压力回到了 es 同时每次修改还得重新编译 filebeat… 所以折腾到这我就放弃了，这已经违背了当初的目的，有兴趣的可以参考以下文档继续折腾:</p><ul><li><a href="https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html">Creating a New Filebeat Module</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html">Ingest nodeedit</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-apis.html">Ingest APIs</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-processors.html">Processors</a></li></ul><h2 id="四、filebeat-processors"><a href="#四、filebeat-processors" class="headerlink" title="四、filebeat processors"></a>四、filebeat processors</h2><p>经历了 module 的失望以后，我把目光对准了 processors；processors 是 filebeat 一个强大的功能，顾名思义它可以对 filbeat 收集到的日志进行一些处理；从官方 <a href="https://www.elastic.co/guide/en/beats/filebeat/current/filtering-and-enhancing-data.html">Processors</a> 页面可以看到其内置了大量的 processor；这些 processor 大部份都是直接对日志进行 “写” 操作，所以理论上我们自己写一个 processor 就可以 “为所欲为+为所欲为&#x3D;为所欲为”。</p><p>不过不幸的是关于 processor 的开发官方并未给出文档，官方认为这是一个 <code>high level</code> 的东西，不过也找到了一个 issue 对其做了相关回答: <a href="https://github.com/elastic/beats/issues/6760">How do I write a processor plugin by myself</a>；所以最好的办法就是直接看已有 processor 的源码抄一个。</p><p>理所应当的找了一个软柿子捏: <code>add_host_metadata</code>，add_host_metadata processor 顾名思义在每个日志事件(以下简称为 event)中加入宿主机的信息，比如 hostname 啥的；以下为 add_host_metadata processor 的文件结构(processors 代码存储在 <code>libbeat/processors</code> 目录下)。</p><p><img src="https://cdn.oss.link/markdown/axucc.jpg" alt="dir_tree"></p><p>通过阅读源码和 issue 的回答可以看出，我们自定义的 processor 只需要实现 <a href="https://godoc.org/github.com/elastic/beats/libbeat/processors#Processor">Processor interface</a> 既可，这个接口定义如下:</p><p><img src="https://cdn.oss.link/markdown/xuja6.png" alt="Processor interface"></p><p>通过查看 add_host_metadata 的源码，<code>String() string</code> 方法只需要返回这个 processor 名称既可(可以包含必要的配置信息)；<strong>而 <code>Run(event *beat.Event) (*beat.Event, error)</code> 方法表示在每一条日志被读取后都会转换为一个 event 对象，我们在方法内进行处理然后把 event 返回既可(其他 processor 可能也要处理)。</strong></p><p><img src="https://cdn.oss.link/markdown/jhtnx.png" alt="add_host_metadata source"></p><p>有了这些信息就简单得多了，毕竟作为<strong>一名合格的 CCE(Ctrl C + Ctrl V + Engineer)</strong> 抄这种操作还是很简单的，直接照猫画虎写一个就行了</p><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> cmd<br><br><span class="hljs-comment">// Config for cdm processor.</span><br><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;<br>Name           <span class="hljs-type">string</span>          <span class="hljs-string">`config:&quot;name&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">defaultConfig</span><span class="hljs-params">()</span></span> Config &#123;<br><span class="hljs-keyword">return</span> Config&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cdm.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> cmd<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;strings&quot;</span><br><br><span class="hljs-string">&quot;github.com/elastic/beats/libbeat/logp&quot;</span><br><span class="hljs-string">&quot;github.com/pkg/errors&quot;</span><br><br><span class="hljs-string">&quot;github.com/elastic/beats/libbeat/beat&quot;</span><br><span class="hljs-string">&quot;github.com/elastic/beats/libbeat/common&quot;</span><br><span class="hljs-string">&quot;github.com/elastic/beats/libbeat/processors&quot;</span><br>jsprocessor <span class="hljs-string">&quot;github.com/elastic/beats/libbeat/processors/script/javascript/module/processor&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>processors.RegisterPlugin(<span class="hljs-string">&quot;cdm&quot;</span>, New)<br>jsprocessor.RegisterPlugin(<span class="hljs-string">&quot;CDM&quot;</span>, New)<br>&#125;<br><br><span class="hljs-keyword">type</span> cdm <span class="hljs-keyword">struct</span> &#123;<br>config Config<br>fields []<span class="hljs-type">string</span><br>log    *logp.Logger<br>&#125;<br><br><span class="hljs-keyword">const</span> (<br>processorName = <span class="hljs-string">&quot;cdm&quot;</span><br>logName       = <span class="hljs-string">&quot;processor.cdm&quot;</span><br>)<br><br><span class="hljs-comment">// New constructs a new cdm processor.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(cfg *common.Config)</span></span> (processors.Processor, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 配置文件里就一个 Name 字段，结构体留着以后方便扩展</span><br>config := defaultConfig()<br><span class="hljs-keyword">if</span> err := cfg.Unpack(&amp;config); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrapf(err, <span class="hljs-string">&quot;fail to unpack the %v configuration&quot;</span>, processorName)<br>&#125;<br><br>p := &amp;cdm&#123;<br>config: config,<br><span class="hljs-comment">// 待分割的每段日志对应的 key</span><br>fields: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;hostname&quot;</span>, <span class="hljs-string">&quot;thread&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;logger&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;line&quot;</span>, <span class="hljs-string">&quot;serviceName&quot;</span>, <span class="hljs-string">&quot;traceId&quot;</span>, <span class="hljs-string">&quot;feTraceId&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;exception&quot;</span>&#125;,<br>log:    logp.NewLogger(logName),<br>&#125;<br><br><span class="hljs-keyword">return</span> p, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 真正的日志处理逻辑</span><br><span class="hljs-comment">// 为了保证后面的 processor 正常处理，这里面没有 return 任何 error，只是简单的打印</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *cdm)</span></span> Run(event *beat.Event) (*beat.Event, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 尝试获取 message，理论上这一步不应该出现问题</span><br>msg, err := event.GetValue(<span class="hljs-string">&quot;message&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>p.log.Error(err)<br><span class="hljs-keyword">return</span> event, <span class="hljs-literal">nil</span><br>&#125;<br><br>message, ok := msg.(<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> !ok &#123;<br>p.log.Error(<span class="hljs-string">&quot;failed to parse message&quot;</span>)<br><span class="hljs-keyword">return</span> event, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 分割日志</span><br>fieldsValue := strings.Split(message, <span class="hljs-string">&quot;$$&quot;</span>)<br>p.log.Debugf(<span class="hljs-string">&quot;message fields: %v&quot;</span>, fieldsVaule)<br><span class="hljs-comment">// 为了保证不会出现数组越界需要判断一下(万一弄出个格式不正常的日志过来保证不崩)</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(fieldsValue) &lt; <span class="hljs-built_in">len</span>(p.fields) &#123;<br>p.log.Errorf(<span class="hljs-string">&quot;incorrect field length: %d, expected length: %d&quot;</span>, <span class="hljs-built_in">len</span>(fieldsValue), <span class="hljs-built_in">len</span>(p.fields))<br><span class="hljs-keyword">return</span> event, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 这里遍历然后赛会到 event 既可</span><br>data := common.MapStr&#123;&#125;<br><span class="hljs-keyword">for</span> i, k := <span class="hljs-keyword">range</span> p.fields &#123;<br>_, _ = event.PutValue(k, strings.TrimSpace(fieldsValue[i]))<br>&#125;<br>event.Fields.DeepUpdate(data)<br><br><span class="hljs-keyword">return</span> event, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *cdm)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> processorName<br>&#125;<br></code></pre></td></tr></table></figure><p>写好代码以后就可以编译一个自己的 filebeat 了(开心ing)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> filebeat<br><span class="hljs-comment"># 如果想交叉编译 linux 需要增加 GOOS=linux 变量 </span><br>GO111MODULE=off make<br></code></pre></td></tr></table></figure><p>然后编写配置文件进行测试，日志相关字段已经成功塞到了 event 中，这样我直接发到 es 或者 logstash 就行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.inputs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/Users/natural/tmp/cdm.log</span><br>  <span class="hljs-attr">processors:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cdm:</span> <span class="hljs-string">~</span><br>  <span class="hljs-attr">multiline.pattern:</span> <span class="hljs-string">^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br>  <span class="hljs-attr">multiline.match:</span> <span class="hljs-string">after</span><br>  <span class="hljs-attr">multiline.negate:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">multiline.timeout:</span> <span class="hljs-string">5s</span><br></code></pre></td></tr></table></figure><h2 id="五、script-processor"><a href="#五、script-processor" class="headerlink" title="五、script processor"></a>五、script processor</h2><p>在我折腾完源码以后，反思一下其实这种方式需要自己编译 filebeat，而且每次规则修改也很不方便，唯一的好处真的就是用代码可以 “为所欲为”；反过来一想 “filebeat 有没有 processor 的扩展呢？脚本热加载那种？” 答案是使用 script processor，<strong>script processor 虽然名字上是个 processor，实际上其包含了完整的 ECMA 5.1 js 规范实现；结论就是我们可以写一些 js 脚本来处理日志，然后 filebeat 每次启动后加载这些脚本既可。</strong></p><p>script processor 的使用方式很简单，js 文件中只需要包含一个 <code>function process(event)</code> 方法既可，与自己用 go 实现的 processor 类似，每行日志也会形成一个 event 对象然后调用这个方法进行处理；目前 event 对象可用的 api 需要参考<a href="https://www.elastic.co/guide/en/beats/filebeat/current/processor-script.html#_event_api">官方文档</a>；<strong>需要注意的是 script processor 目前只支持 ECMA 5.1 语法规范，超过这个范围的语法是不被支持；</strong>实际上其根本是借助了 <a href="https://github.com/dop251/goja">https://github.com/dop251/goja</a> 这个库来实现的。同时为了方便开发调试，script processor 也增加了一些 nodejs 的兼容 module，比如 <code>console.log</code> 等方法是可用的；以下为 js 处理上面日志的逻辑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-variable language_">console</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;console&#x27;</span>);<br><span class="hljs-keyword">var</span> fileds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;hostname&quot;</span>, <span class="hljs-string">&quot;thread&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;logger&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;line&quot;</span>, <span class="hljs-string">&quot;serviceName&quot;</span>, <span class="hljs-string">&quot;traceId&quot;</span>, <span class="hljs-string">&quot;feTraceId&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;exception&quot;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">var</span> message = event.<span class="hljs-title class_">Get</span>(<span class="hljs-string">&quot;message&quot;</span>);<br>    <span class="hljs-keyword">if</span> (message == <span class="hljs-literal">null</span> || message == <span class="hljs-literal">undefined</span> || message == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;failed to get message&quot;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> fieldValues = message.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;$$&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fieldValues.<span class="hljs-property">length</span>&lt;fileds.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;incorrect field length&quot;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; fileds.<span class="hljs-property">length</span>; ++i) &#123;<br>        event.<span class="hljs-title class_">Put</span>(fileds[i],fieldValues[i].<span class="hljs-title function_">trim</span>())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好脚本后调整配置测试既可，如果 js 编写有问题，可以通过 <code>console.log</code> 来打印日志进行不断的调试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">filebeat.inputs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/Users/natural/tmp/cdm.log</span><br>  <span class="hljs-attr">processors:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">script:</span><br>        <span class="hljs-attr">lang:</span> <span class="hljs-string">js</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cdm</span><br>        <span class="hljs-attr">file:</span> <span class="hljs-string">cdm.js</span><br>  <span class="hljs-attr">multiline.pattern:</span> <span class="hljs-string">^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br>  <span class="hljs-attr">multiline.match:</span> <span class="hljs-string">after</span><br>  <span class="hljs-attr">multiline.negate:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">multiline.timeout:</span> <span class="hljs-string">5s</span><br></code></pre></td></tr></table></figure><p><strong>需要注意的是目前 <code>lang</code> 的值只能为 <code>javascript</code> 和 <code>js</code>(官方文档写的只能是 <code>javascript</code>)；根据代码来看后续 script processor 有可能支持其他脚本语言，个人认为主要取决于其他脚本语言有没有纯 go 实现的 runtime，如果有的话未来很有可能被整合到 script processor 中。</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gegg80j1gmj31nc0u0wpa.jpg" alt="script processor"></p><h2 id="六、其他-processor"><a href="#六、其他-processor" class="headerlink" title="六、其他 processor"></a>六、其他 processor</h2><p>研究完 script processor 后我顿时对其他 processor 也产生了兴趣，随着更多的查看processor 文档，我发现其实大部份过滤分割能力已经有很多 processor 进行了实现，<strong>其完善程度外加可扩展的 script processor 实际能力已经足矣替换掉 logstash 的日志分割过滤处理了。</strong>比如上面的日志切割其实使用 dissect processor 实现更加简单(这个配置并不完善，只是样例):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">processors:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">dissect:</span><br>      <span class="hljs-attr">field:</span> <span class="hljs-string">&quot;message&quot;</span><br>      <span class="hljs-attr">tokenizer:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">%&#123;timestamp&#125;</span>$$<span class="hljs-template-variable">%&#123;hostname&#125;</span>$$<span class="hljs-template-variable">%&#123;thread&#125;</span>$$<span class="hljs-template-variable">%&#123;level&#125;</span>$$<span class="hljs-template-variable">%&#123;logger&#125;</span>$$<span class="hljs-template-variable">%&#123;file&#125;</span>$$<span class="hljs-template-variable">%&#123;line&#125;</span>$$<span class="hljs-template-variable">%&#123;serviceName&#125;</span>$$<span class="hljs-template-variable">%&#123;traceId&#125;</span>$$<span class="hljs-template-variable">%&#123;feTraceId&#125;</span>$$<span class="hljs-template-variable">%&#123;msg&#125;</span>$$<span class="hljs-template-variable">%&#123;exception&#125;</span>$$&quot;</span><br></code></pre></td></tr></table></figure><p>除此之外还有很多 processor，例如 <code>drop_event</code>、<code>drop_fields</code>、<code>timestamp</code> 等等，感兴趣的可以自行研究。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>基本上折腾完以后做了一个总结:</p><ul><li><strong>filebeat module</strong>: 这就是个华而不实的东西，每次修改需要重新编译且扩展能力几近于零，最蛋疼的是实际逻辑通过 es 来完成；我能想到的是唯一应用场景就是官方给我们弄一些 demo 来炫耀用的，比如 nginx module；实际生产中 nginx 日志格式保持原封不动的人我相信少之又少。</li><li><strong>filebeat custom processor</strong>: 每次修改也需要重新编译且需要会 go 语言还有相关工具链，但是好处就是完全通过代码实现真正的为所欲为；扩展性取决于外部是否对特定位置做了可配置化，比如预留可以配置切割用正则表达式的变量等，最终取决于代码编写者(怎么为所欲为的问题)。</li><li><strong>filebeat script processor</strong>: 完整 ECMA 5.1 js 规范支持，代码化对日志进行为所欲为，修改不需要重新编译；普通用户我个人觉得是首选，当然同时会写 go 和 js 的就看你想用哪个了。</li><li><strong>filebeat other processor</strong>: 基本上实现了很多 logstash 的功能，简单用用很舒服，复杂场景还是得撸代码；但是一些特定的 processor 很实用，比如加入宿主机信息的 add_host_metadata processor 等。</li></ul>]]></content>
    
    
    <summary type="html">本文主要介绍在 ELK 日志系统中，日志切割处理直接在 filebeat 端实现的一些方式；其中包括 filebeat processor 的扩展以及 module 扩展等。</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>如何不通过 docker 下载 docker image</title>
    <link href="https://mritd.com/2020/03/31/how-to-download-docker-image-without-docker/"/>
    <id>https://mritd.com/2020/03/31/how-to-download-docker-image-without-docker/</id>
    <published>2020-03-31T15:52:38.000Z</published>
    <updated>2020-03-31T15:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个比较骚的动作，但是事实上确实有这个需求，折腾半天找工具看源码，这里记录一下(不想看源码分析啥的请直接跳转到第五部份)。</p></blockquote><h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>由于最近某个爬虫业务需要抓取微信公众号的一些文章，某开发小伙伴想到了通过启动安卓虚拟机然后抓包的方式实现；经过几番寻找最终我们选择采用 docker 的方式启动安卓虚拟机，docker 里安卓虚拟机比较成熟的项目我们找到了 <a href="https://github.com/budtmo/docker-android">https://github.com/budtmo/docker-android</a> 这个项目；但是由于众所周知的原因这个 2G+ 的镜像国内拉取是非常慢的，于是我想到了通过国外 VPS 拉取然后 scp 回来… 由于贫穷的原因，当我实际操作的时候遇到了比较尴尬的问题: **VPS 磁盘空间 25G，镜像拉取后解压接近 10G，我需要 <code>docker save</code> 成 tar 包再进行打包成 <code>tar.gz</code> 格式 scp 回来，这个时候空间不够用了…**所以我当时就在想有没有办法让 docker daemon 拉取镜像时不解压？或者说自己通过 HTTP 下载镜像直接存储为 tar？</p><h2 id="二、尝试造轮子"><a href="#二、尝试造轮子" class="headerlink" title="二、尝试造轮子"></a>二、尝试造轮子</h2><p>当出现了上面的问题后，我第一反应就是:</p><ul><li>1、docker 拆分为 moby</li><li>2、moby 模块化，大部份开源到 <a href="https://github.com/containers">containers</a></li><li>3、<a href="https://github.com/containers/image">containers&#x2F;image</a> 项目是镜像部份源码</li><li>4、看 <a href="https://github.com/containers/image">containers&#x2F;image</a> 源码造轮子</li><li>5、不确定是否需要 <a href="https://github.com/containers/storage">containers&#x2F;storage</a> 做存储</li></ul><h2 id="三、猜测源码"><a href="#三、猜测源码" class="headerlink" title="三、猜测源码"></a>三、猜测源码</h2><p>当我查看 <a href="https://github.com/containers/image">containers&#x2F;image</a> README 文档时发现其提到了 <a href="https://github.com/containers/skopeo">skopeo</a> 项目，并且很明确的说了</p><blockquote><p>The containers&#x2F;image project is only a library with no user interface; you can either incorporate it into your Go programs, or use the skopeo tool:<br>The skopeo tool uses the containers&#x2F;image library and takes advantage of many of its features, e.g. skopeo copy exposes the containers&#x2F;image&#x2F;copy.Image functionality.</p></blockquote><p>那么也就是说镜像下载这块很大可能应该调用 <code>containers/image/copy.Image</code> 完成，随即就看了下源码文档</p><p><img src="https://cdn.oss.link/markdown/tv7iy.png"></p><p>很明显，<code>types.ImageReference</code>、<code>Options</code> 里面的属性啥的我完全看不懂… 😂😂😂</p><h2 id="四、看-skopeo-源码"><a href="#四、看-skopeo-源码" class="headerlink" title="四、看 skopeo 源码"></a>四、看 skopeo 源码</h2><p>当 <a href="https://github.com/containers/image">containers&#x2F;image</a> 源码看不懂时，突然想到 <a href="https://github.com/containers/skopeo">skopeo</a> 调用的是这个玩意，那么依葫芦画瓢看 <a href="https://github.com/containers/skopeo">skopeo</a> 源码应该能行；接下来常规操作 clone skopeo 源码然后编译运行测试；编译后 skopeo 支持命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME:<br>   skopeo - Various operations with container images and container image registries<br><br>USAGE:<br>   skopeo [global options] <span class="hljs-built_in">command</span> [<span class="hljs-built_in">command</span> options] [arguments...]<br><br>VERSION:<br>   0.1.42-dev commit: 018a0108b103341526b41289c434b59d65783f6f<br><br>COMMANDS:<br>   copy               Copy an IMAGE-NAME from one location to another<br>   inspect            Inspect image IMAGE-NAME<br>   delete             Delete image IMAGE-NAME<br>   manifest-digest    Compute a manifest digest of a file<br>   <span class="hljs-built_in">sync</span>               Synchronize one or more images from one location to another<br>   standalone-sign    Create a signature using <span class="hljs-built_in">local</span> files<br>   standalone-verify  Verify a signature using <span class="hljs-built_in">local</span> files<br>   list-tags          List tags <span class="hljs-keyword">in</span> the transport/repository specified by the REPOSITORY-NAME<br>   <span class="hljs-built_in">help</span>, h            Shows a list of commands or <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> one <span class="hljs-built_in">command</span><br><br>GLOBAL OPTIONS:<br>   --debug                     <span class="hljs-built_in">enable</span> debug output<br>   --policy value              Path to a trust policy file<br>   --insecure-policy           run the tool without any policy check<br>   --registries.d DIR          use registry configuration files <span class="hljs-keyword">in</span> DIR (e.g. <span class="hljs-keyword">for</span> container signature storage)<br>   --override-arch ARCH        use ARCH instead of the architecture of the machine <span class="hljs-keyword">for</span> choosing images<br>   --override-os OS            use OS instead of the running OS <span class="hljs-keyword">for</span> choosing images<br>   --override-variant VARIANT  use VARIANT instead of the running architecture variant <span class="hljs-keyword">for</span> choosing images<br>   --command-timeout value     <span class="hljs-built_in">timeout</span> <span class="hljs-keyword">for</span> the <span class="hljs-built_in">command</span> execution (default: 0s)<br>   --<span class="hljs-built_in">help</span>, -h                  show <span class="hljs-built_in">help</span><br>   --version, -v               <span class="hljs-built_in">print</span> the version<br></code></pre></td></tr></table></figure><p><strong>我掐指一算调用 copy 命令应该是我要找的那个它</strong>，所以常规操作打开源码直接看</p><p><img src="https://cdn.oss.link/markdown/urn3l.png" alt="copy_cmd"></p><p>通过继续追踪 <code>alltransports.ParseImageName</code> 方法最终可以得知 copy 命令的 <code>SOURCE-IMAGE</code> 和 <code>DESTINATION-IMAGE</code> 都支持哪些写法</p><p><img src="https://cdn.oss.link/markdown/ush4t.png" alt="tp_register"></p><p><strong>每一个 Transport 的实现都提供了 Name 方法，其名称即为 src 或 dest 镜像名称的前缀，例如 <code>docker://nginx:1.17.6</code></strong></p><p><img src="https://cdn.oss.link/markdown/7fpap.png" alt="tp_docker"></p><p><strong>经过测试不同的 Transport 格式并不完全一致(具体看源码)，比如 <code>docker://nginx:1.17.6</code> 和 <code>dir:/tmp/nginx</code>；同时这些 Transport 并非完全都适用与 src 与 dest，比如 <code>tarball:/tmp/nginx.tar</code> 支持 src 而不支持 dest；</strong>其判断核心依据为 <code>ImageReference.NewImageSource</code> 和 <code>ImageReference.NewImageDestination</code> 方法实现是否返回 error</p><p><img src="https://cdn.oss.link/markdown/jb087.png" alt="NewImageDestination"></p><p>当我看了一会各种 Transport 源码后我发现一件事: <strong>这特么不就是我要造的轮子么！😱😱😱</strong></p><h2 id="五、skopeo-copy-使用"><a href="#五、skopeo-copy-使用" class="headerlink" title="五、skopeo copy 使用"></a>五、skopeo copy 使用</h2><h3 id="5-1、不借助-docker-下载镜像"><a href="#5-1、不借助-docker-下载镜像" class="headerlink" title="5.1、不借助 docker 下载镜像"></a>5.1、不借助 docker 下载镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">skopeo --insecure-policy copy docker://nginx:1.17.6 docker-archive:/tmp/nginx.tar<br></code></pre></td></tr></table></figure><p><code>--insecure-policy</code> 选项用于忽略安全策略配置文件，该命令将会直接通过 http 下载目标镜像并存储为 <code>/tmp/nginx.tar</code>，此文件可以直接通过 <code>docker load</code> 命令导入</p><h3 id="5-2、从-docker-daemon-导出镜像"><a href="#5-2、从-docker-daemon-导出镜像" class="headerlink" title="5.2、从 docker daemon 导出镜像"></a>5.2、从 docker daemon 导出镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">skopeo --insecure-policy copy docker-daemon:nginx:1.17.6 docker-archive:/tmp/nginx.tar<br></code></pre></td></tr></table></figure><p>该命令将会从 docker daemon 导出镜像到 <code>/tmp/nginx.tar</code>；为什么不用 <code>docker save</code>？因为我是偷懒 dest 也是 docker-archive，实际上 skopeo 可以导出为其他格式比如 <code>oci</code>、<code>oci-archive</code>、<code>ostree</code> 等</p><h3 id="5-3、其他命令"><a href="#5-3、其他命令" class="headerlink" title="5.3、其他命令"></a>5.3、其他命令</h3><p>skopeo 还有一些其他的实用命令，比如 <code>sync</code> 可以在两个位置之间同步镜像(😂早知道我还写个鸡儿 gcrsync)，<code>inspect</code> 可以查看镜像信息等，迫于本人太懒，剩下的请自行查阅文档、<code>--help</code> 以及源码(没错，整篇文章都没写 skopeo 怎么安装)。</p>]]></content>
    
    
    <summary type="html">这是一个比较骚的动作，但是事实上确实有这个需求，折腾半天找工具看源码，这里记录一下(不想看源码分析啥的请直接跳转到第五部份)。</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm 证书期限调整</title>
    <link href="https://mritd.com/2020/01/21/how-to-extend-the-validity-of-your-kubeadm-certificate/"/>
    <id>https://mritd.com/2020/01/21/how-to-extend-the-validity-of-your-kubeadm-certificate/</id>
    <published>2020-01-21T04:43:36.000Z</published>
    <updated>2020-01-21T04:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、证书管理"><a href="#一、证书管理" class="headerlink" title="一、证书管理"></a>一、证书管理</h2><p>kubeadm 集群安装完成后，证书管理上实际上大致是两大类型:</p><ul><li>自动滚动续期</li><li>手动定期续期</li></ul><p>自动滚动续期类型的证书目前从我所阅读文档和实际测试中目前只有 kubelet 的 client 证书；kubelet client 证书自动滚动涉及到了 <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/">TLS bootstrapping</a> 部份，<strong>其核心由两个 ClusterRole 完成(<code>system:certificates.k8s.io:certificatesigningrequests:nodeclient</code> 和 <code>system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</code>)，针对这两个 ClusterRole kubeadm 在引导期间创建了 <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#create-a-bootstrap-token">bootstrap token</a> 来完成引导期间证书签发(该 Token 24h 失效)，后续通过预先创建的 ClusterRoleBinding(<code>kubeadm:node-autoapprove-bootstrap</code> 和 <code>kubeadm:node-autoapprove-certificate-rotation</code>) 完成自动的 node 证书续期；</strong>kubelet client 证书续期部份涉及到 TLS bootstrapping 太多了，有兴趣的可以仔细查看(最后还是友情提醒: <strong>用 kubeadm 一定要看看 <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details">Implementation details</a></strong>)。</p><p>手动续期的证书目前需要在到期前使用 kubeadm 命令自行续期，这些证书目前可以通过以下命令列出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 不要在意我的证书过期时间是 10 年，下面会说</span><br>k1.node ➜ kubeadm alpha certs check-expiration<br>[check-expiration] Reading configuration from the cluster...<br>[check-expiration] FYI: You can look at this config file with <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><br>CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED<br>admin.conf                 Dec 06, 2029 20:58 UTC   9y                                      no<br>apiserver                  Dec 06, 2029 20:59 UTC   9y              ca                      no<br>apiserver-kubelet-client   Dec 06, 2029 20:59 UTC   9y              ca                      no<br>controller-manager.conf    Dec 06, 2029 20:59 UTC   9y                                      no<br>front-proxy-client         Dec 06, 2029 20:59 UTC   9y              front-proxy-ca          no<br>scheduler.conf             Dec 06, 2029 20:59 UTC   9y                                      no<br><br>CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED<br>ca                      Jan 13, 2030 08:45 UTC   9y              no<br>front-proxy-ca          Jan 13, 2030 08:45 UTC   9y              no<br></code></pre></td></tr></table></figure><h2 id="二、证书期限调整"><a href="#二、证书期限调整" class="headerlink" title="二、证书期限调整"></a>二、证书期限调整</h2><p>上面已经提到了，手动管理部份的证书需要自己用命令续签(<code>kubeadm alpha certs renew all</code>)，而且你会发现续签以后有效期还是 1 年；kubeadm 的初衷是 **”为快速创建 kubernetes 集群的最佳实践”**，当然最佳实践包含确保证书安全性，毕竟 Let’s Encrypt 的证书有效期只有 3 个月的情况下 kubeadm 有效期有 1 年已经很不错了；但是对于最佳实践来说，我们公司的集群安全性并不需要那么高，一年续期一次无疑在增加运维人员心智负担(它并不最佳)，所以我们迫切需要一种 “一劳永逸” 的解决方案；当然我目前能想到的就是找到证书签发时在哪设置的有效期，然后想办法改掉它。</p><h3 id="2-1、源码分析"><a href="#2-1、源码分析" class="headerlink" title="2.1、源码分析"></a>2.1、源码分析</h3><p>目前通过宏观角度看整个 kubeadm 集群搭建过程，其中涉及到证书签署大致有两大部份: init  阶段和后期 renew，下面开始分析两个阶段的源码</p><h4 id="2-1-1、init-阶段"><a href="#2-1-1、init-阶段" class="headerlink" title="2.1.1、init 阶段"></a>2.1.1、init 阶段</h4><p>由于 kubernetes 整个命令行都是通过 cobra 库构建的，那么根据这个库的习惯首先直接从 <code>cmd</code> 包开始翻，而 kubernetes 源码组织的又比较清晰进而直接定位到 kubeadm 命令包下面；接着打开 <code>app</code> 目录一眼就看到了 <code>phases</code>… <code>phases</code> 顾名思义啊，整个 init 都是通过不同的 <code>phases</code> 完成的，那么直接去 <code>phases</code> 包下面找证书阶段的源码既可</p><p><img src="https://cdn.oss.link/markdown/ssdo7.jpg" alt="init_source"></p><p>进入到这个 <code>certs.go</code> 里面，直接列出所有方法，go 的规范里只有首字母大写才会被暴露出去，那么我们直接查看这些方法名既可；从名字上很轻松的看到了这个方法…基本上就是它了</p><p><img src="https://cdn.oss.link/markdown/uoqx4.jpg" alt="certs.go"></p><p>通过这个方法的代码会发现最终还是调用了 <code>certSpec.CreateFromCA(cfg, caCert, caKey)</code>，那么接着看看这个方法</p><p><img src="https://cdn.oss.link/markdown/psrho.jpg" alt="pkiutil.NewCertAndKey"></p><p>通过这个方法继续往下翻发现调用了 <code>pkiutil.NewCertAndKey(caCert, caKey, cfg)</code>，这个方法里最终调用了 <code>NewSignedCert(config, key, caCert, caKey)</code></p><p><img src="https://cdn.oss.link/markdown/nel5u.jpg" alt="NewSignedCert"></p><p>从 <code>NewSignedCert</code> 方法里看到证书有效期实际上是个常量，<strong>那也就意味着我改了这个常量 init 阶段的证书有效期八九不离十的就变了，再通过包名看这个是个 <code>pkiutil</code>… <code>xxxxxutil</code> 明显是公共的，所以推测改了它 renew 阶段应该也会变</strong></p><p><img src="https://cdn.oss.link/markdown/t3amy.jpg" alt="CertificateValidity"></p><h4 id="2-1-2、renew-阶段"><a href="#2-1-2、renew-阶段" class="headerlink" title="2.1.2、renew 阶段"></a>2.1.2、renew 阶段</h4><p>renew 阶段也是老套路，不过稳妥点先从 cmd 找起来，所以先看 <code>alpha</code> 包下的 <code>certs.go</code>；这时候方法名语义清晰就很有好处，一下就能找到 <code>newCmdCertsRenewal</code> 方法</p><p><img src="https://cdn.oss.link/markdown/amupo.jpg" alt="alpha_certs.go"></p><p>而这个 <code>newCmdCertsRenewal</code> 方法实际上没啥实现，所以目测实现是从 <code>getRenewSubCommands</code> 实现的</p><p><img src="https://cdn.oss.link/markdown/8c38y.jpg" alt="getRenewSubCommands"></p><p>看了 <code>getRenewSubCommands</code> 以后发现上面全是命令行库、配置文件参数啥的处理，核心在 <code>renewCert</code> 上，从这个方法里发现还有意外收获: <strong>renew 时实际上分两种情况处理，一种是使用了 <code>--use-api</code> 选项，另一种是未使用</strong>；当然根据上面的命令来说我们没使用，那么看 else 部份就行了(没看源码之前我特么居然没看 <code>--help</code> 不知道有这个选项)</p><p><img src="https://cdn.oss.link/markdown/9zsgp.jpg" alt="renewCert"></p><p>else 部份源码最终还是调用了 <code>RenewUsingLocalCA</code> 方法，这个方法一直往下跟会有一个 <code>Renew</code> 方法</p><p><img src="https://cdn.oss.link/markdown/s3a5c.jpg" alt="Renew"></p><p>这个方法一点进去… <strong>我上面的想法是对的</strong></p><p><img src="https://cdn.oss.link/markdown/08cnb.jpg" alt="FileRenewer_Renew"></p><h4 id="2-1-3、其他推测"><a href="#2-1-3、其他推测" class="headerlink" title="2.1.3、其他推测"></a>2.1.3、其他推测</h4><p>根据刚刚查看代码可以看到在 renew 阶段判断了 <code>--use-api</code> 选项是否使用，通过跟踪源码发现最终会调用到 <code>RenewUsingCSRAPI</code> 方法上，<code>RenewUsingCSRAPI</code> 会调用集群 CSR Api 执行证书签署</p><p><img src="https://cdn.oss.link/markdown/xivs9.png" alt="RenewUsingCSRAPI"></p><p>有了这个发现后基本上可以推测出这一步通过集群完成，那么按理说是应该受到 <code>kube-controller-manager</code> 组件的 <code>--experimental-cluster-signing-duration</code> 影响。</p><h3 id="2-2、测试验证"><a href="#2-2、测试验证" class="headerlink" title="2.2、测试验证"></a>2.2、测试验证</h3><h4 id="2-2-1、验证修改源码"><a href="#2-2-1、验证修改源码" class="headerlink" title="2.2.1、验证修改源码"></a>2.2.1、验证修改源码</h4><p>想验证修改源码是否有效只需要修改源码重新 build 出 kubeadm 命令，然后使用这个特定版本的 kubeadm renew 证书测试既可，源码调整的位置如下</p><p><img src="https://cdn.oss.link/markdown/qaavr.png" alt="update_source"></p><p>然后命令行下执行 <code>make cross</code> 进行跨平台交叉编译(如果过你在 linux amd64 平台下则直接 <code>make</code> 既可)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  kubernetes git:(v1.17.4) ✗ make cross<br>grep: /proc/meminfo: No such file or directory<br>grep: /proc/meminfo: No such file or directory<br>+++ [0116 23:43:19] Multiple platforms requested and available 64G &gt;= threshold 40G, building platforms <span class="hljs-keyword">in</span> parallel<br>+++ [0116 23:43:19] Building go targets <span class="hljs-keyword">for</span> &#123;linux/amd64 linux/arm linux/arm64 linux/s390x linux/ppc64le&#125; <span class="hljs-keyword">in</span> parallel (output will appear <span class="hljs-keyword">in</span> a burst when complete):<br>    cmd/kube-proxy<br>    cmd/kube-apiserver<br>    cmd/kube-controller-manager<br>    cmd/kubelet<br>    cmd/kubeadm<br>    cmd/kube-scheduler<br>    vendor/k8s.io/apiextensions-apiserver<br>    cluster/gce/gci/mounter<br>+++ [0116 23:43:19] linux/amd64: build started<br>+++ [0116 23:47:24] linux/amd64: build finished<br>+++ [0116 23:43:19] linux/arm: build started<br>+++ [0116 23:47:23] linux/arm: build finished<br>+++ [0116 23:43:19] linux/arm64: build started<br>+++ [0116 23:47:23] linux/arm64: build finished<br>+++ [0116 23:43:19] linux/s390x: build started<br>+++ [0116 23:47:24] linux/s390x: build finished<br>+++ [0116 23:43:19] linux/ppc64le: build started<br>+++ [0116 23:47:24] linux/ppc64le: build finished<br>grep: /proc/meminfo: No such file or directory<br>grep: /proc/meminfo: No such file or directory<br>+++ [0116 23:47:52] Multiple platforms requested and available 64G &gt;= threshold 40G, building platforms <span class="hljs-keyword">in</span> parallel<br>+++ [0116 23:47:52] Building go targets <span class="hljs-keyword">for</span> &#123;linux/amd64 linux/arm<br><span class="hljs-comment"># ... 省略编译日志</span><br></code></pre></td></tr></table></figure><p>编译完成后能够在 <code>_output/local/bin/linux/amd64</code> 下找到刚刚编译成功的 <code>kubeadm</code> 文件，将编译好的 kubeadm scp 到已经存在集群上执行 renew，然后查看证书时间</p><p><img src="https://cdn.oss.link/markdown/i3laa.png" alt="kubeadm_renew"></p><p><strong>经过测试后确认源码修改方式有效</strong></p><h4 id="2-2-2、验证调整-CSR-API"><a href="#2-2-2、验证调整-CSR-API" class="headerlink" title="2.2.2、验证调整 CSR API"></a>2.2.2、验证调整 CSR API</h4><p>根据推测当使用 <code>--use-api</code> 会受到 <code>kube-controller-manager</code> 组件的 <code>--experimental-cluster-signing-duration</code> 影响，从而从集群中下发证书；所以首先在启动集群时需要将 <code>--experimental-cluster-signing-duration</code> 调整为 10 年，然后再进行测试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">controllerManager:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-attr">node-cidr-mask-size:</span> <span class="hljs-string">&quot;19&quot;</span><br>    <span class="hljs-attr">deployment-controller-sync-period:</span> <span class="hljs-string">&quot;10s&quot;</span><br>    <span class="hljs-comment"># 在 kubeadm 配置文件中设置证书有效期为 10 年</span><br>    <span class="hljs-attr">experimental-cluster-signing-duration:</span> <span class="hljs-string">&quot;86700h&quot;</span><br>    <span class="hljs-attr">node-monitor-grace-period:</span> <span class="hljs-string">&quot;20s&quot;</span><br>    <span class="hljs-attr">pod-eviction-timeout:</span> <span class="hljs-string">&quot;2m&quot;</span><br>    <span class="hljs-attr">terminated-pod-gc-threshold:</span> <span class="hljs-string">&quot;30&quot;</span><br></code></pre></td></tr></table></figure><p>然后使用 <code>--use-api</code> 选项进行 renew</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm alpha certs renew all --use-api<br></code></pre></td></tr></table></figure><p>此时会发现日志中打印出 <code>[certs] Certificate request &quot;kubeadm-cert-kubernetes-admin-648w4&quot; created</code> 字样，接下来从 <code>kube-system</code> 的 namespace 中能够看到相关 csr</p><p><img src="https://cdn.oss.link/markdown/54awl.png" alt="list_csr"></p><p>这时我们开始手动批准证书，每次批准完成一个 csr，紧接着 kubeadm 会创建另一个 csr</p><p><img src="https://cdn.oss.link/markdown/tdde7.png" alt="approve_csr"></p><p>当所有 csr 被批准后，再次查看集群证书发现证书期限确实被调整了</p><p><img src="https://cdn.oss.link/markdown/081qe.png" alt="success"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>总结一下，调整 kubeadm 证书期限有两种方案；第一种直接修改源码，耗时耗力还得会 go，最后还要跑跨平台编译(很耗时)；第二种在启动集群时调整 <code>kube-controller-manager</code> 组件的 <code>--experimental-cluster-signing-duration</code> 参数，集群创建好后手动 renew 一下并批准相关 csr。</p><p>两种方案各有利弊，修改源码方式意味着在 client 端签发处理，不会对集群产生永久性影响，也就是说哪天你想 “反悔了” 你不需要修改集群什么配置，直接用官方 kubeadm renew 一下就会变回一年期限的证书；改集群参数实现的方式意味着你不需要懂 go 代码，只需要常规的集群配置既可实现，同时你也不需要跑几十分钟的交叉编译，不需要为编译过程中的网络问题而烦恼；所以最后使用哪种方案因人因情况而定吧。</p>]]></content>
    
    
    <summary type="html">最近 kubeadm HA 的集群折腾完了，发现集群证书始终是 1 年有效期，然后自己还有点子担心；无奈只能研究一下源码一探究竟了...</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm 集群升级</title>
    <link href="https://mritd.com/2020/01/21/how-to-upgrade-kubeadm-cluster/"/>
    <id>https://mritd.com/2020/01/21/how-to-upgrade-kubeadm-cluster/</id>
    <published>2020-01-21T04:41:46.000Z</published>
    <updated>2020-01-21T04:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、升级前准备"><a href="#一、升级前准备" class="headerlink" title="一、升级前准备"></a>一、升级前准备</h2><ul><li>确保你的集群是 kubeadm 搭建的(等同于废话)</li><li>确保当前集群已经完成 HA(多个 master 节点)</li><li>确保在夜深人静的时候(无大量业务流量)</li><li>确保集群版本大于 v1.16.0</li><li>确保已经仔细阅读了目标版本 CHANGELOG</li><li>确保做好了完整地集群备份</li></ul><h2 id="二、升级注意事项"><a href="#二、升级注意事项" class="headerlink" title="二、升级注意事项"></a>二、升级注意事项</h2><ul><li>升级后所有集群组件 Pod 会重启(hash 变更)</li><li><strong>升级时 <code>kubeadm</code> 版本必须大于或等于目标版本</strong></li><li><strong>升级期间所有 <code>kube-proxy</code> 组件会有一次全节点滚动更新</strong></li><li><strong>升级只支持顺次进行，不支持跨版本升级(You only can upgrade from one MINOR version to the next MINOR version, or between PATCH versions of the same MINOR. That is, you cannot skip MINOR versions when you upgrade. For example, you can upgrade from 1.y to 1.y+1, but not from 1.y to 1.y+2.)</strong></li></ul><p>关于升级版本问题…虽然是这么说的，但是官方文档样例代码里是从 <code>v1.16.0</code> 升级到 <code>v1.17.0</code>；可能是我理解有误，跨大版本升级好像官方没提，具体啥后果不清楚…</p><h2 id="三、升级-Master"><a href="#三、升级-Master" class="headerlink" title="三、升级 Master"></a>三、升级 Master</h2><blockquote><p>事实上所有升级工作主要是针对 master 节点做的，所以整个升级流程中最重要的是如何把 master 升级好。</p></blockquote><h3 id="3-1、升级-kubeadm、kubectl"><a href="#3-1、升级-kubeadm、kubectl" class="headerlink" title="3.1、升级 kubeadm、kubectl"></a>3.1、升级 kubeadm、kubectl</h3><p>首先由于升级限制，必须先将 <code>kubeadm</code> 和 <code>kubectl</code> 升级到大于等于目标版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># replace x in 1.17.x-00 with the latest patch version</span><br>apt-mark unhold kubeadm kubectl<br>apt-get update<br>apt-get install -y kubeadm=1.17.x-00 kubectl=1.17.x-00<br>apt-mark hold kubeadm kubectl<br></code></pre></td></tr></table></figure><p>当然如果你之前没有 <code>hold</code> 住这几个软件包的版本，那么就不需要 <code>unhold</code>；我的做法可能比较极端…一般为了防止后面的误升级安装完成后我会直接 <code>rename</code> 掉相关软件包的 <code>apt source</code> 配置(从根本上防止手贱)。</p><h3 id="3-2、升级前准备"><a href="#3-2、升级前准备" class="headerlink" title="3.2、升级前准备"></a>3.2、升级前准备</h3><h4 id="3-2-1、配置修改"><a href="#3-2-1、配置修改" class="headerlink" title="3.2.1、配置修改"></a>3.2.1、配置修改</h4><p>对于高级玩家一般安装集群时都会自定义很多组件参数，此时不可避免的会采用配置文件；所以安装完新版本的 <code>kubeadm</code> 后就要着手修改配置文件中的 <code>kubernetesVersion</code> 字段为目标集群版本，当然有其他变更也可以一起修改。</p><h4 id="3-2-2、节点驱逐"><a href="#3-2-2、节点驱逐" class="headerlink" title="3.2.2、节点驱逐"></a>3.2.2、节点驱逐</h4><p>如果你的 master 节点也当作 node 在跑一些工作负载，则需要执行以下命令驱逐这些 pod 并使节点进入维护模式(禁止调度)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将 NODE_NAME 换成 Master 节点名称</span><br>kubectl drain NODE_NAME --ignore-daemonsets<br></code></pre></td></tr></table></figure><h4 id="3-2-3、查看升级计划"><a href="#3-2-3、查看升级计划" class="headerlink" title="3.2.3、查看升级计划"></a>3.2.3、查看升级计划</h4><p>完成节点驱逐以后，可以通过以下命令查看升级计划；<strong>升级计划中列出了升级期间要执行的所有步骤以及相关警告，一定要仔细查看。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">k8s16.node ➜  ~ kubeadm upgrade plan --config /etc/kubernetes/kubeadm.yaml<br>W0115 10:59:52.586204     983 validation.go:28] Cannot validate kube-proxy config - no validator is available<br>W0115 10:59:52.586241     983 validation.go:28] Cannot validate kubelet config - no validator is available<br>[upgrade/config] Making sure the configuration is correct:<br>W0115 10:59:52.605458     983 common.go:94] WARNING: Usage of the --config flag <span class="hljs-keyword">for</span> reconfiguring the cluster during upgrade is not recommended!<br>W0115 10:59:52.607258     983 validation.go:28] Cannot validate kube-proxy config - no validator is available<br>W0115 10:59:52.607274     983 validation.go:28] Cannot validate kubelet config - no validator is available<br>[preflight] Running pre-flight checks.<br>[upgrade] Making sure the cluster is healthy:<br>[upgrade] Fetching available versions to upgrade to<br>[upgrade/versions] Cluster version: v1.17.0<br>[upgrade/versions] kubeadm version: v1.17.1<br><br>External components that should be upgraded manually before you upgrade the control plane with <span class="hljs-string">&#x27;kubeadm upgrade apply&#x27;</span>:<br>COMPONENT   CURRENT   AVAILABLE<br>Etcd        3.3.18    3.4.3-0<br><br>Components that must be upgraded manually after you have upgraded the control plane with <span class="hljs-string">&#x27;kubeadm upgrade apply&#x27;</span>:<br>COMPONENT   CURRENT       AVAILABLE<br>Kubelet     5 x v1.17.0   v1.17.1<br><br>Upgrade to the latest version <span class="hljs-keyword">in</span> the v1.17 series:<br><br>COMPONENT            CURRENT   AVAILABLE<br>API Server           v1.17.0   v1.17.1<br>Controller Manager   v1.17.0   v1.17.1<br>Scheduler            v1.17.0   v1.17.1<br>Kube Proxy           v1.17.0   v1.17.1<br>CoreDNS              1.6.5     1.6.5<br><br>You can now apply the upgrade by executing the following <span class="hljs-built_in">command</span>:<br><br>        kubeadm upgrade apply v1.17.1<br><br>_____________________________________________________________________<br></code></pre></td></tr></table></figure><h3 id="3-3、执行升级"><a href="#3-3、执行升级" class="headerlink" title="3.3、执行升级"></a>3.3、执行升级</h3><p>确认好升级计划以后，只需要一条命令既可将当前 master 节点升级到目标版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm upgrade apply v1.17.1 --config /etc/kubernetes/kubeadm.yaml<br></code></pre></td></tr></table></figure><p>升级期间会打印很详细的日志，在日志中可以实时观察到升级流程，建议仔细关注升级流程；<strong>在最后一步会有一条日志 <code>[addons] Applied essential addon: kube-proxy</code>，这意味着集群开始更新 <code>kube-proxy</code> 组件，该组件目前是通过 <code>daemonset</code> 方式启动的；这会意味着此时会造成全节点的 <code>kube-proxy</code> 更新；</strong>理论上不会有很大影响，但是升级是还是需要注意一下这一步操作，在我的观察中似乎 <code>kube-proxy</code> 也是通过滚动更新完成的，所以问题应该不大。</p><h3 id="3-4、升级-kubelet"><a href="#3-4、升级-kubelet" class="headerlink" title="3.4、升级 kubelet"></a>3.4、升级 kubelet</h3><p>在单个 master 上升级完成后，<strong>只会升级本节点的 master 相关组件和全节点的 <code>kube-proxy</code> 组件；</strong>由于 kubelet 是在宿主机安装的，所以需要通过包管理器手动升级 kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># replace x in 1.17.x-00 with the latest patch version</span><br>apt-mark unhold kubelet<br>apt-get install -y kubelet=1.17.x-00<br>apt-mark hold kubelet<br></code></pre></td></tr></table></figure><p>更新完成后执行 <code>systemctl restart kubelet</code> 重启，并等待启动成功既可；最后不要忘记解除当前节点的维护模式(<code>uncordon</code>)。</p><h3 id="3-5、升级其他-Master"><a href="#3-5、升级其他-Master" class="headerlink" title="3.5、升级其他 Master"></a>3.5、升级其他 Master</h3><p>当其中一个 master 节点升级完成后，其他的 master 升级就会相对简单的多；<strong>首先国际惯例升级一下 <code>kubeadm</code> 和 <code>kubectl</code> 软件包，然后直接在其他 master 节点执行 <code>kubeadm upgrade node</code> 既可。</strong>由于 apiserver 等组件配置已经在升级第一个 master 时上传到了集群的 configMap 中，所以事实上其他 master 节点只是正常拉取然后重启相关组件既可；这一步同样会输出详细日志，可以仔细观察进度，<strong>最后不要忘记升级之前先进入维护模式，升级完成后重新安装 <code>kubelet</code> 并关闭节点维护模式。</strong></p><h2 id="四、升级-Node"><a href="#四、升级-Node" class="headerlink" title="四、升级 Node"></a>四、升级 Node</h2><p>node 节点的升级实际上在升级完 master 节点以后不需要什么特殊操作，node 节点唯一需要升级的就是 <code>kubelet</code> 组件；<strong>首先在 node 节点执行 <code>kubeadm upgrade node</code> 命令，该命令会拉取集群内的 <code>kubelet</code> 配置文件，然后重新安装 <code>kubelet</code> 重启既可；</strong>同样升级 node 节点时不要忘记开启维护模式。针对于 CNI 组件请按需手动升级，并且确认好 CNI 组件的兼容版本。</p><h2 id="五、验证集群"><a href="#五、验证集群" class="headerlink" title="五、验证集群"></a>五、验证集群</h2><p>所有组件升级完成后，可以通过 <code>kubectl describe POD_NAME</code> 的方式验证 master 组件是否都升级到了最新版本；通过 <code>kuebctl version</code> 命令验证 api 相关信息(HA rr 轮训模式下可以多执行几遍)；还有就是通过 <code>kubectl get node -o wide</code> 查看相关 node 的信息，确保 <code>kubelet</code> 都升级成功，同时全部节点维护模式都已经关闭，其他细节可以参考<a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade">官方文档</a>。</p>]]></content>
    
    
    <summary type="html">真是不巧，刚折腾完 kubeadm 搭建集群(v1.17.0)，第二天早上醒来特么的 v1.17.1 发布了；这我能忍么，肯定不能忍，然后就开始了集群升级之路...</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm 搭建 HA kubernetes 集群</title>
    <link href="https://mritd.com/2020/01/21/set-up-kubernetes-ha-cluster-by-kubeadm/"/>
    <id>https://mritd.com/2020/01/21/set-up-kubernetes-ha-cluster-by-kubeadm/</id>
    <published>2020-01-21T04:40:36.000Z</published>
    <updated>2020-01-21T04:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>搭建环境为 5 台虚拟机，每台虚拟机配置为 4 核心 8G 内存，虚拟机 IP 范围为 <code>172.16.10.21~25</code>，其他软件配置如下</p><ul><li>os version: ubuntu 18.04</li><li>kubeadm version: 1.17.0</li><li>kubernetes version: 1.17.0</li><li>etcd version: 3.3.18</li><li>docker version: 19.03.5</li></ul><h2 id="二、HA-方案"><a href="#二、HA-方案" class="headerlink" title="二、HA 方案"></a>二、HA 方案</h2><p>目前的 HA 方案与官方的不同，官方 HA 方案推荐使用类似 haproxy 等工具进行 4 层代理 apiserver，但是同样会有一个问题就是我们还需要对这个 haproxy 做 HA；由于目前我们实际生产环境都是多个独立的小集群，所以单独弄 2 台 haproxy + keeplived 去维持这个 apiserver LB 的 HA 有点不划算；所以还是准备延续老的 HA 方案，将外部 apiserver 的 4 层 LB 前置到每个 node 节点上；<strong>目前是采用在每个 node 节点上部署 nginx 4 层代理所有 apiserver，nginx 本身资源消耗低而且请求量不大，综合来说对宿主机影响很小；</strong>以下为 HA 的大致方案图</p><p><img src="https://cdn.oss.link/markdown/mktld.png" alt="ha"></p><h2 id="三、环境初始化"><a href="#三、环境初始化" class="headerlink" title="三、环境初始化"></a>三、环境初始化</h2><h3 id="3-1、系统环境"><a href="#3-1、系统环境" class="headerlink" title="3.1、系统环境"></a>3.1、系统环境</h3><p>由于个人操作习惯原因，目前已经将常用的初始化环境整理到一个小脚本里了，脚本具体参见 <a href="https://github.com/mritd/shell_scripts/blob/master/init_ubuntu.sh">mritd&#x2F;shell_scripts</a> 仓库，基本上常用的初始化内容为: </p><ul><li>设置 locale(en_US.UTF-8)</li><li>设置时区(Asia&#x2F;Shanghai)</li><li>更新所有系统软件包(system update)</li><li>配置 vim(vim8 + 常用插件、配色)</li><li>ohmyzsh(别跟我说不兼容 bash 脚本，我就是喜欢)</li><li>docker</li><li>ctop(一个 docker 的辅助工具)</li><li>docker-compose</li></ul><p><strong>在以上初始化中，实际对 kubernetes 安装产生影响的主要有三个地方:</strong></p><ul><li><strong>docker 的 cgroup driver 调整为 systemd，具体参考 <a href="https://github.com/mritd/config/blob/master/docker/docker.service">docker.service</a></strong></li><li><strong>docker 一定要限制 conatiner 日志大小，防止 apiserver 等日志大量输出导致磁盘占用过大</strong></li><li><strong>安装 <code>conntrack</code> 和 <code>ipvsadm</code>，后面可能需要借助其排查问题</strong></li></ul><h3 id="3-2、配置-ipvs"><a href="#3-2、配置-ipvs" class="headerlink" title="3.2、配置 ipvs"></a>3.2、配置 ipvs</h3><p>由于后面 kube-proxy 需要使用 ipvs 模式，所以需要对内核参数、模块做一些调整，调整命令如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">net.ipv4.ip_forward=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">ip_vs</span><br><span class="hljs-string">ip_vs_lc</span><br><span class="hljs-string">ip_vs_wlc</span><br><span class="hljs-string">ip_vs_rr</span><br><span class="hljs-string">ip_vs_wrr</span><br><span class="hljs-string">ip_vs_lblc</span><br><span class="hljs-string">ip_vs_lblcr</span><br><span class="hljs-string">ip_vs_dh</span><br><span class="hljs-string">ip_vs_sh</span><br><span class="hljs-string">ip_vs_fo</span><br><span class="hljs-string">ip_vs_nq</span><br><span class="hljs-string">ip_vs_sed</span><br><span class="hljs-string">ip_vs_ftp</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><strong>配置完成后切记需要重启，重启完成后使用 <code>lsmod | grep ip_vs</code> 验证相关 ipvs 模块加载是否正常，本文将主要使用 <code>ip_vs_wrr</code>，所以目前只关注这个模块既可。</strong></p><p><img src="https://cdn.oss.link/markdown/4irz1.png" alt="ipvs_mode"></p><h2 id="四、安装-Etcd"><a href="#四、安装-Etcd" class="headerlink" title="四、安装 Etcd"></a>四、安装 Etcd</h2><h3 id="4-1、方案选择"><a href="#4-1、方案选择" class="headerlink" title="4.1、方案选择"></a>4.1、方案选择</h3><p>官方对于集群 HA 给出了两种有关于 Etcd 的部署方案: </p><ul><li>一种是深度耦合到 <code>control plane</code> 上，即每个 <code>control plane</code> 一个 etcd</li><li>另一种是使用外部的 Etcd 集群，通过在配置中指定外部集群让 apiserver 等组件连接</li></ul><p>在测试深度耦合 <code>control plane</code> 方案后，发现一些比较恶心的问题；比如说开始创建第二个 <code>control plane</code> 时配置写错了需要重建，此时你一旦删除第二个 <code>control plane</code> 会导致第一个 <code>control plane</code> 也会失败，原因是<strong>创建第二个 <code>control plane</code> 时 kubeadm 已经自动完成了 etcd 的集群模式，当删除第二个 <code>control plane</code> 的时候由于集群可用原因会导致第一个 <code>control plane</code> 下的 etcd 发现节点失联从而也不提供服务；</strong>所以综合考虑到后续迁移、灾备等因素，这里选择了将 etcd 放置在外部集群中；同样也方便我以后各种折腾应对一些极端情况啥的。</p><h3 id="4-2、部署-Etcd"><a href="#4-2、部署-Etcd" class="headerlink" title="4.2、部署 Etcd"></a>4.2、部署 Etcd</h3><p>确定了需要在外部部署 etcd 集群后，只需要开干就完事了；查了一下 ubuntu 官方源已经有了 etcd 安装包，但是版本比较老，测试了一下 golang 的 build 版本是 1.10；所以我还是选择了从官方 release 下载最新的版本安装；当然最后还是因为懒，我自己打了一个 deb 包… deb 包可以从这个项目 <a href="https://github.com/mritd/etcd-deb/releases">mritd&#x2F;etcd-deb</a> 下载，担心安全性的可以利用项目脚本自己打包，以下是安装过程:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载软件包</span><br>wget https://github.com/mritd/etcd-deb/releases/download/v3.3.18/etcd_3.3.18_amd64.deb<br>wget https://github.com/mritd/etcd-deb/releases/download/v3.3.18/cfssl_1.4.1_amd64.deb<br><span class="hljs-comment"># 安装 etcd(至少在 3 台节点上执行)</span><br>dpkg -i etcd_3.3.18_amd64.deb cfssl_1.4.1_amd64.deb<br></code></pre></td></tr></table></figure><p><strong>既然自己部署 etcd，那么证书签署啥的还得自己来了，证书签署这里借助 cfssl 工具，cfssl 目前提供了 deb 的 make target，但是没找到 deb 包，所以也自己 build 了(担心安全性的可自行去官方下载)；</strong>接着编辑一下 <code>/etc/etcd/cfssl/etcd-csr.json</code> 文件，用 <code>/etc/etcd/cfssl/create.sh</code> 脚本创建证书，并将证书复制到指定目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建证书</span><br><span class="hljs-built_in">cd</span> /etc/etcd/cfssl &amp;&amp; ./create.sh<br><span class="hljs-comment"># 复制证书</span><br><span class="hljs-built_in">mv</span> /etc/etcd/cfssl/*.pem /etc/etcd/ssl<br></code></pre></td></tr></table></figure><p>最后在 3 台节点上修改配置，并将刚刚创建的证书同步到其他两台节点启动既可；下面是单台节点的配置样例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /etc/etcd/etcd.conf</span><br><span class="hljs-comment"># [member]</span><br>ETCD_NAME=etcd1<br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/data&quot;</span><br>ETCD_WAL_DIR=<span class="hljs-string">&quot;/var/lib/etcd/wal&quot;</span><br>ETCD_SNAPSHOT_COUNT=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_HEARTBEAT_INTERVAL=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_ELECTION_TIMEOUT=<span class="hljs-string">&quot;1000&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://172.16.10.21:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://172.16.10.21:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_MAX_SNAPSHOTS=<span class="hljs-string">&quot;5&quot;</span><br>ETCD_MAX_WALS=<span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment">#ETCD_CORS=&quot;&quot;</span><br><br><span class="hljs-comment"># [cluster]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://172.16.10.21:2380&quot;</span><br><span class="hljs-comment"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://172.16.10.21:2380,etcd2=https://172.16.10.22:2380,etcd3=https://172.16.10.23:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://172.16.10.21:2379&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</span><br>ETCD_AUTO_COMPACTION_RETENTION=<span class="hljs-string">&quot;24&quot;</span><br><br><span class="hljs-comment"># [proxy]</span><br><span class="hljs-comment">#ETCD_PROXY=&quot;off&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</span><br><br><span class="hljs-comment"># [security]</span><br>ETCD_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_PEER_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_PEER_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_PEER_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># [logging]</span><br><span class="hljs-comment">#ETCD_DEBUG=&quot;false&quot;</span><br><span class="hljs-comment"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</span><br><span class="hljs-comment">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</span><br><br><span class="hljs-comment"># [performance]</span><br>ETCD_QUOTA_BACKEND_BYTES=<span class="hljs-string">&quot;5368709120&quot;</span><br>ETCD_AUTO_COMPACTION_RETENTION=<span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意: 其他两台节点请调整 <code>ETCD_NAME</code> 为不重复的其他名称，调整 <code>ETCD_LISTEN_PEER_URLS</code>、<code>ETCD_LISTEN_CLIENT_URLS</code>、<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>、<code>ETCD_ADVERTISE_CLIENT_URLS</code> 为其他节点对应的 IP；同时生产环境请将 <code>ETCD_INITIAL_CLUSTER_TOKEN</code> 替换为复杂的 token</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 同步证书</span><br>scp -r /etc/etcd/ssl 172.16.10.22:/etc/etcd/ssl<br>scp -r /etc/etcd/ssl 172.16.10.23:/etc/etcd/ssl<br><span class="hljs-comment"># 修复权限(3台节点都要执行)</span><br><span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd<br><span class="hljs-comment"># 最后每个节点依次启动既可</span><br>systemctl start etcd<br></code></pre></td></tr></table></figure><p>启动完成后可以通过以下命令测试是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看集群成员</span><br>k1.node ➜ etcdctl member list<br><br>3cbbaf77904c6153, started, etcd2, https://172.16.10.22:2380, https://172.16.10.22:2379<br>8eb7652b6bd99c30, started, etcd1, https://172.16.10.21:2380, https://172.16.10.21:2379<br>91f4e10726460d8c, started, etcd3, https://172.16.10.23:2380, https://172.16.10.23:2379<br><br><span class="hljs-comment"># 检测集群健康状态</span><br>k1.node ➜ etcdctl endpoint health --cacert /etc/etcd/ssl/etcd-root-ca.pem --cert /etc/etcd/ssl/etcd.pem --key /etc/etcd/ssl/etcd-key.pem --endpoints https://172.16.10.21:2379,https://172.16.10.22:2379,https://172.16.10.23:2379<br><br>https://172.16.10.21:2379 is healthy: successfully committed proposal: took = 16.632246ms<br>https://172.16.10.23:2379 is healthy: successfully committed proposal: took = 21.122603ms<br>https://172.16.10.22:2379 is healthy: successfully committed proposal: took = 22.592005ms<br></code></pre></td></tr></table></figure><h2 id="五、部署-Kubernetes"><a href="#五、部署-Kubernetes" class="headerlink" title="五、部署 Kubernetes"></a>五、部署 Kubernetes</h2><h3 id="5-1、安装-kueadm"><a href="#5-1、安装-kueadm" class="headerlink" title="5.1、安装 kueadm"></a>5.1、安装 kueadm</h3><p>安装 kubeadm 没什么好说的，国内被墙用阿里的源既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -<br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="hljs-string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="hljs-string">EOF</span><br>apt update<br><br><span class="hljs-comment"># ebtables、ethtool kubelet 可能会用，具体忘了，反正从官方文档上看到的</span><br>apt install kubelet kubeadm kubectl ebtables ethtool -y<br></code></pre></td></tr></table></figure><h3 id="5-2、部署-Nginx"><a href="#5-2、部署-Nginx" class="headerlink" title="5.2、部署 Nginx"></a>5.2、部署 Nginx</h3><p>从上面的 HA 架构图上可以看到，为了维持 apiserver 的 HA，需要在每个机器上部署一个 nginx 做 4 层的 LB；为保证后续的 node 节点正常加入，需要首先行部署 nginx；nginx 安装同样喜欢偷懒，直接 docker 跑了…毕竟都开始 kubeadm 了，那么也没必要去纠结 docker 是否稳定的问题了；以下为 nginx 相关配置</p><p><strong>apiserver-proxy.conf</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">error_log stderr notice;<br><br>worker_processes auto;<br>events &#123;<br>multi_accept on;<br>use epoll;<br>worker_connections 1024;<br>&#125;<br><br>stream &#123;<br>    upstream kube_apiserver &#123;<br>        least_conn;<br>        <span class="hljs-comment"># 后端为三台 master 节点的 apiserver 地址</span><br>        server 172.16.10.21:5443;<br>        server 172.16.10.22:5443;<br>        server 172.16.10.23:5443;<br>    &#125;<br>    <br>    server &#123;<br>        listen        0.0.0.0:6443;<br>        proxy_pass    kube_apiserver;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>kube-apiserver-proxy.service</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=kubernetes apiserver docker wrapper<br>Wants=docker.socket<br>After=docker.service<br><br>[Service]<br>User=root<br>PermissionsStartOnly=<span class="hljs-literal">true</span><br>ExecStart=/usr/bin/docker run -p 6443:6443 \<br>                          -v /etc/kubernetes/apiserver-proxy.conf:/etc/nginx/nginx.conf \<br>                          --name kube-apiserver-proxy \<br>                          --net=host \<br>                          --restart=on-failure:5 \<br>                          --memory=512M \<br>                          nginx:1.17.6-alpine<br>ExecStartPre=-/usr/bin/docker <span class="hljs-built_in">rm</span> -f kube-apiserver-proxy<br>ExecStop=/usr/bin/docker <span class="hljs-built_in">rm</span> -rf kube-apiserver-proxy<br>Restart=always<br>RestartSec=15s<br>TimeoutStartSec=30s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>启动 nginx 代理(每台机器都要启动，包括 master 节点)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> apiserver-proxy.conf /etc/kubernetes<br><span class="hljs-built_in">cp</span> kube-apiserver-proxy.service /lib/systemd/system<br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver-proxy.service &amp;&amp; systemctl start kube-apiserver-proxy.service<br></code></pre></td></tr></table></figure><h3 id="5-3、启动-control-plane"><a href="#5-3、启动-control-plane" class="headerlink" title="5.3、启动 control plane"></a>5.3、启动 control plane</h3><h4 id="5-3-1、关于-Swap"><a href="#5-3-1、关于-Swap" class="headerlink" title="5.3.1、关于 Swap"></a>5.3.1、关于 Swap</h4><p>目前 kubelet 为了保证内存 limit，需要在每个节点上关闭 swap；但是说实话我看了这篇文章 <a href="https://chrisdown.name/2018/01/02/in-defence-of-swap.html">In defence of swap: common misconceptions</a> 以后还是不想关闭 swap；更确切的说其实我们生产环境比较 “富”，pod 都不 limit 内存，所以下面的部署我忽略了 swap 错误检测</p><h4 id="5-3-2、kubeadm-配置"><a href="#5-3-2、kubeadm-配置" class="headerlink" title="5.3.2、kubeadm 配置"></a>5.3.2、kubeadm 配置</h4><p>当前版本的 kubeadm 已经支持了完善的配置管理(当然细节部分还有待支持)，以下为我目前使用的配置，相关位置已经做了注释，更具体的配置自行查阅官方文档</p><p><strong>kubeadm.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-comment"># 第一个 master 节点 IP</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-string">&quot;172.16.10.21&quot;</span><br>  <span class="hljs-comment"># 6443 留给了 nginx，apiserver 换到 5443</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">5443</span><br><span class="hljs-comment"># 这个 token 使用以下命令生成</span><br><span class="hljs-comment"># kubeadm alpha certs certificate-key</span><br><span class="hljs-attr">certificateKey:</span> <span class="hljs-string">7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-comment"># 使用外部 etcd 配置</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">external:</span><br>    <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://172.16.10.21:2379&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://172.16.10.22:2379&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://172.16.10.23:2379&quot;</span><br>    <span class="hljs-attr">caFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>    <span class="hljs-attr">certFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>    <span class="hljs-attr">keyFile:</span> <span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br><span class="hljs-comment"># 网络配置</span><br><span class="hljs-attr">networking:</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-string">&quot;10.25.0.0/16&quot;</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-string">&quot;10.30.0.1/16&quot;</span><br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">&quot;cluster.local&quot;</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">&quot;v1.17.0&quot;</span><br><span class="hljs-comment"># 全局 apiserver LB 地址，由于采用了 nginx 负载，所以直接指向本地既可</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&quot;127.0.0.1:6443&quot;</span><br><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-comment"># apiserver 的自定义扩展参数</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-attr">alsologtostderr:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-comment"># 审计日志相关配置</span><br>    <span class="hljs-attr">audit-log-maxage:</span> <span class="hljs-string">&quot;20&quot;</span><br>    <span class="hljs-attr">audit-log-maxbackup:</span> <span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-attr">audit-log-maxsize:</span> <span class="hljs-string">&quot;100&quot;</span><br>    <span class="hljs-attr">audit-log-path:</span> <span class="hljs-string">&quot;/var/log/kube-audit/audit.log&quot;</span><br>    <span class="hljs-attr">audit-policy-file:</span> <span class="hljs-string">&quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br>    <span class="hljs-attr">authorization-mode:</span> <span class="hljs-string">&quot;Node,RBAC&quot;</span><br>    <span class="hljs-attr">event-ttl:</span> <span class="hljs-string">&quot;720h&quot;</span><br>    <span class="hljs-attr">runtime-config:</span> <span class="hljs-string">&quot;api/all=true&quot;</span><br>    <span class="hljs-attr">service-node-port-range:</span> <span class="hljs-string">&quot;30000-50000&quot;</span><br>    <span class="hljs-attr">service-cluster-ip-range:</span> <span class="hljs-string">&quot;10.25.0.0/16&quot;</span><br>  <span class="hljs-comment"># 由于自行定义了审计日志配置，所以需要将宿主机上的审计配置</span><br>  <span class="hljs-comment"># 挂载到 kube-apiserver 的 pod 容器中</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;audit-config&quot;</span><br>    <span class="hljs-attr">hostPath:</span> <span class="hljs-string">&quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/etc/kubernetes/audit-policy.yaml&quot;</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">pathType:</span> <span class="hljs-string">&quot;File&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;audit-log&quot;</span><br>    <span class="hljs-attr">hostPath:</span> <span class="hljs-string">&quot;/var/log/kube-audit&quot;</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/var/log/kube-audit&quot;</span><br>    <span class="hljs-attr">pathType:</span> <span class="hljs-string">&quot;DirectoryOrCreate&quot;</span><br>  <span class="hljs-comment"># 这里是 apiserver 的证书地址配置</span><br>  <span class="hljs-comment"># 为了防止以后出特殊情况，我增加了一个泛域名</span><br>  <span class="hljs-attr">certSANs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*.kubernetes.node&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;172.16.10.21&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;172.16.10.22&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;172.16.10.23&quot;</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">5m</span><br><span class="hljs-attr">controllerManager:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-comment"># 宿主机 ip 掩码</span><br>    <span class="hljs-attr">node-cidr-mask-size:</span> <span class="hljs-string">&quot;19&quot;</span><br>    <span class="hljs-attr">deployment-controller-sync-period:</span> <span class="hljs-string">&quot;10s&quot;</span><br>    <span class="hljs-attr">experimental-cluster-signing-duration:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-attr">node-monitor-grace-period:</span> <span class="hljs-string">&quot;20s&quot;</span><br>    <span class="hljs-attr">pod-eviction-timeout:</span> <span class="hljs-string">&quot;2m&quot;</span><br>    <span class="hljs-attr">terminated-pod-gc-threshold:</span> <span class="hljs-string">&quot;30&quot;</span><br><span class="hljs-attr">scheduler:</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">v:</span> <span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br><span class="hljs-comment"># gcr.io 被墙，换成微软的镜像地址</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">&quot;gcr.azk8s.cn/google_containers&quot;</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">&quot;kuberentes&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-comment"># kubelet specific options here</span><br><span class="hljs-comment"># 此配置保证了 kubelet 能在 swap 开启的情况下启动</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">nodeStatusUpdateFrequency:</span> <span class="hljs-string">5s</span><br><span class="hljs-comment"># 一些驱逐阀值，具体自行查文档修改</span><br><span class="hljs-attr">evictionSoft:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;15%&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;15%&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br><span class="hljs-attr">evictionSoftGracePeriod:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;3m&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;1m&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;3m&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;1m&quot;</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">&quot;imagefs.available&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br>  <span class="hljs-attr">&quot;memory.available&quot;:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.available&quot;:</span> <span class="hljs-string">&quot;10%&quot;</span><br>  <span class="hljs-attr">&quot;nodefs.inodesFree&quot;:</span> <span class="hljs-string">&quot;5%&quot;</span><br><span class="hljs-attr">evictionMaxPodGracePeriod:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">imageGCLowThresholdPercent:</span> <span class="hljs-number">70</span><br><span class="hljs-attr">imageGCHighThresholdPercent:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">kubeReserved:</span><br>  <span class="hljs-attr">&quot;cpu&quot;:</span> <span class="hljs-string">&quot;500m&quot;</span><br>  <span class="hljs-attr">&quot;memory&quot;:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>  <span class="hljs-attr">&quot;ephemeral-storage&quot;:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br><span class="hljs-attr">rotateCertificates:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-comment"># kube-proxy specific options here</span><br><span class="hljs-attr">clusterCIDR:</span> <span class="hljs-string">&quot;10.30.0.1/16&quot;</span><br><span class="hljs-comment"># 启用 ipvs 模式</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-comment"># ipvs 负载策略</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;wrr&quot;</span><br></code></pre></td></tr></table></figure><p><strong>关于这个配置配置文件的文档还是很不完善，对于不懂 golang 的人来说很难知道具体怎么配置，以下做一下简要说明(请确保你已经拉取了 kubernetes 源码和安装了 Goland)</strong></p><p><strong>kubeadm 配置中每个配置段都会有个 <code>kind</code> 字段，<code>kind</code> 实际上对应了 go 代码中的 <code>struct</code> 结构体；同时从 <code>apiVersion</code> 字段中能够看到具体的版本，比如 <code>v1alpha1</code> 等；有了这两个信息事实上你就可以直接在源码中去找到对应的结构体</strong></p><p><img src="https://cdn.oss.link/markdown/dwo5h.png" alt="struct_search"></p><p>在结构体中所有的配置便可以一目了然</p><p><img src="https://cdn.oss.link/markdown/0jc9b.png" alt="struct_detail"></p><p>关于数据类型，如果是 <code>string</code> 的类型，那么意味着你要在 yaml 里写 <code>&quot;xxxx&quot;</code> 带引号这种，当然有些时候不写能兼容，有些时候不行比如 <code>extraArgs</code> 字段是一个 <code>map[string]string</code> 如果 value 不带引号就报错；<strong>如果数据类型为 <code>metav1.Duration</code>(实际上就是 <code>time.Duration</code>)，那么你看着它是个 <code>int64</code> 但实际上你要写 <code>1h2m3s</code> 这种人类可读的格式，这是 go 的特色…</strong></p><p><strong>audit-policy.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Log all requests at the Metadata level.</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">audit.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Policy</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">level:</span> <span class="hljs-string">Metadata</span><br></code></pre></td></tr></table></figure><p>可能 <code>Metadata</code> 级别的审计日志比较多，想自行调整审计日志级别的可以参考<a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#audit-policy">官方文档</a></p><h4 id="5-3-3、拉起-control-plane"><a href="#5-3-3、拉起-control-plane" class="headerlink" title="5.3.3、拉起 control plane"></a>5.3.3、拉起 control plane</h4><p>有了完整的 <code>kubeadm.yaml</code> 和 <code>audit-policy.yaml</code> 配置后，直接一条命令拉起 control plane 既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 先将审计配置放到目标位置(3 台 master 都要执行)</span><br><span class="hljs-built_in">cp</span> audit-policy.yaml /etc/kubernetes<br><span class="hljs-comment"># 拉起 control plane</span><br>kubeadm init --config kubeadm.yaml --upload-certs --ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><p><strong>control plane 拉起以后注意要保存屏幕输出，方便后续添加其他集群节点</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as a regular user:<br><br>  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>  sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>  sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>You should now deploy a pod network to the cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>You can now <span class="hljs-built_in">join</span> any number of the control-plane node running the following <span class="hljs-built_in">command</span> on each as root:<br><br>  kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token r4t3l3.14mmuivm7xbtaeoj \<br>    --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d \<br>    --control-plane --certificate-key 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3<br><br>Please note that the certificate-key gives access to cluster sensitive data, keep it secret!<br>As a safeguard, uploaded-certs will be deleted <span class="hljs-keyword">in</span> two hours; If necessary, you can use<br><span class="hljs-string">&quot;kubeadm init phase upload-certs --upload-certs&quot;</span> to reload certs afterward.<br><br>Then you can <span class="hljs-built_in">join</span> any number of worker nodes by running the following on each as root:<br><br>kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token r4t3l3.14mmuivm7xbtaeoj \<br>    --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d<br></code></pre></td></tr></table></figure><p><strong>根据屏幕提示配置 kubectl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="5-4、部署-CNI"><a href="#5-4、部署-CNI" class="headerlink" title="5.4、部署 CNI"></a>5.4、部署 CNI</h3><p>关于网络插件的选择，以前一直喜欢 Calico，因为其性能确实好；到后来 flannel 出了 <code>host-gw</code> 以后现在两者性能也差不多了；但是 <strong>flannel 好处是一个工具通吃所有环境(云环境+裸机2层直通)，坏处是 flannel 缺乏比较好的策略管理(当然可以使用两者结合的 Canal)；</strong>后来思来想去其实我们生产倒是很少需要策略管理，所以这回怂回到 flannel 了(逃…)</p><p>Flannel 部署非常简单，根据官方文档下载配置，根据情况调整 <code>backend</code> 和 pod 的 CIDR，然后 apply 一下既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载配置文件</span><br>wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><br><span class="hljs-comment"># 调整 backend 为 host-gw(测试环境 2 层直连)</span><br>k1.node ➜  grep -A 35 ConfigMap kube-flannel.yml<br>kind: ConfigMap<br>apiVersion: v1<br>metadata:<br>  name: kube-flannel-cfg<br>  namespace: kube-system<br>  labels:<br>    tier: node<br>    app: flannel<br>data:<br>  cni-conf.json: |<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cbr0&quot;</span>,<br>      <span class="hljs-string">&quot;cniVersion&quot;</span>: <span class="hljs-string">&quot;0.3.1&quot;</span>,<br>      <span class="hljs-string">&quot;plugins&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;flannel&quot;</span>,<br>          <span class="hljs-string">&quot;delegate&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;hairpinMode&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;isDefaultGateway&quot;</span>: <span class="hljs-literal">true</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;portmap&quot;</span>,<br>          <span class="hljs-string">&quot;capabilities&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;portMappings&quot;</span>: <span class="hljs-literal">true</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  net-conf.json: |<br>    &#123;<br>      <span class="hljs-string">&quot;Network&quot;</span>: <span class="hljs-string">&quot;10.30.0.0/16&quot;</span>,<br>      <span class="hljs-string">&quot;Backend&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;host-gw&quot;</span><br>      &#125;<br>    &#125;<br><br><span class="hljs-comment"># 调整完成后 apply 一下</span><br>kubectl apply -f kube-flannel.yml<br></code></pre></td></tr></table></figure><h3 id="5-5、启动其他-control-plane"><a href="#5-5、启动其他-control-plane" class="headerlink" title="5.5、启动其他 control plane"></a>5.5、启动其他 control plane</h3><p>为了保证 HA 架构，还需要在另外两台 master 上启动 control plane；<strong>在启动之前请确保另外两台 master 节点节点上 <code>/etc/kubernetes/audit-policy.yaml</code> 审计配置已经分发完成，确保 <code>127.0.0.1:6443</code> 上监听的 4 层 LB 工作正常(可尝试使用 <code>curl -k https://127.0.0.1:6443</code> 测试)；</strong>根据第一个 control plane 终端输出，其他 control plane 加入命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token r4t3l3.14mmuivm7xbtaeoj \<br>    --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d \<br>    --control-plane --certificate-key 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3<br></code></pre></td></tr></table></figure><p><strong>由于在使用 <code>kubeadm join</code> 时相关选项(<code>--discovery-token-ca-cert-hash</code>、<code>--control-plane</code>)无法与 <code>--config</code> 一起使用，这也就意味着我们必须增加一些附加指令来提供 <code>kubeadm.yaml</code> 配置文件中的一些属性</strong>；最终完整的 control plane 加入命令如下，在其他 master 直接执行既可(<strong><code>--apiserver-advertise-address</code> 的 IP 地址是目标 master 的 IP</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token r4t3l3.14mmuivm7xbtaeoj \<br>    --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d \<br>    --control-plane --certificate-key 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3 \<br>    --apiserver-advertise-address 172.16.10.22 \<br>    --apiserver-bind-port 5443 \<br>    --ignore-preflight-errors=Swap <br></code></pre></td></tr></table></figure><p><strong>所有 control plane 启动完成后应当通过在每个节点上运行 <code>kubectl get cs</code> 验证各个组件运行状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">k2.node ➜ kubectl get cs<br>NAME                 STATUS    MESSAGE             ERROR<br>scheduler            Healthy   ok<br>controller-manager   Healthy   ok<br>etcd-1               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-0               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-2               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br><br>k2.node ➜ kubectl get node -o wide<br>NAME      STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME<br>k1.node   Ready    master   28m   v1.17.0   172.16.10.21   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k2.node   Ready    master   10m   v1.17.0   172.16.10.22   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k3.node   Ready    master   3m    v1.17.0   172.16.10.23   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br></code></pre></td></tr></table></figure><h3 id="5-6、启动-Node"><a href="#5-6、启动-Node" class="headerlink" title="5.6、启动 Node"></a>5.6、启动 Node</h3><p>node 节点的启动相较于 master 来说要简单得多，只需要增加一个防止 <code>swap</code> 开启拒绝启动的参数既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token r4t3l3.14mmuivm7xbtaeoj \<br>    --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d \<br>    --ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><p>启动成功后在 master 上可以看到所有 node 信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">k1.node ➜ kubectl get node -o wide<br>NAME      STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME<br>k1.node   Ready    master   32m     v1.17.0   172.16.10.21   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k2.node   Ready    master   14m     v1.17.0   172.16.10.22   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k3.node   Ready    master   6m35s   v1.17.0   172.16.10.23   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k4.node   Ready    &lt;none&gt;   72s     v1.17.0   172.16.10.24   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br>k5.node   Ready    &lt;none&gt;   66s     v1.17.0   172.16.10.25   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5<br></code></pre></td></tr></table></figure><h3 id="5-7、调整及测试"><a href="#5-7、调整及测试" class="headerlink" title="5.7、调整及测试"></a>5.7、调整及测试</h3><p>集群搭建好以后，如果想让 master 节点也参与调度任务，需要在任意一台 master 节点执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># node 节点报错属于正常情况</span><br>k1.node ➜ kubectl taint nodes --all node-role.kubernetes.io/master-<br>node/k1.node untainted<br>node/k2.node untainted<br>node/k3.node untainted<br>taint <span class="hljs-string">&quot;node-role.kubernetes.io/master&quot;</span> not found<br>taint <span class="hljs-string">&quot;node-role.kubernetes.io/master&quot;</span> not found<br></code></pre></td></tr></table></figure><p>最后创建一个 deployment 和一个 service，并在不同主机上 ping pod IP 测试网络联通性，在 pod 内直接 curl service 名称测试 dns 解析既可</p><p><strong>test-nginx.deploy.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test-nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.17.6-alpine</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><strong>test-nginx.svc.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test-nginx</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="六、后续处理"><a href="#六、后续处理" class="headerlink" title="六、后续处理"></a>六、后续处理</h2><blockquote><p>说实话使用 kubeadm 后，我更关注的是集群后续的扩展性调整是否能达到目标；搭建其实很简单，大部份时间都在测试后续调整上</p></blockquote><h3 id="6-1、Etcd-迁移"><a href="#6-1、Etcd-迁移" class="headerlink" title="6.1、Etcd 迁移"></a>6.1、Etcd 迁移</h3><p>由于我们采用的是外部的 Etcd，所以迁移起来比较简单怎么折腾都行；需要注意的是换 IP 的时候注意保证老的 3 个节点至少有一个可用，否则可能导致集群崩溃；调整完成后记得分发相关 Etcd 节点的证书，重启时顺序一个一个重启，不要并行操作</p><h3 id="6-2、Master-配置修改"><a href="#6-2、Master-配置修改" class="headerlink" title="6.2、Master 配置修改"></a>6.2、Master 配置修改</h3><p>如果需要修改 conrol plane 上 apiserver、scheduler 等配置，直接修改 <code>kubeadm.yaml</code> 配置文件(<strong>所以集群搭建好后务必保存好</strong>)，然后执行 <code>kubeadm upgrade apply --config kubeadm.yaml</code> 升级集群既可，升级前一定作好相关备份工作；我只在测试环境测试这个命令工作还可以，生产环境还是需要谨慎</p><h3 id="6-3、证书续期"><a href="#6-3、证书续期" class="headerlink" title="6.3、证书续期"></a>6.3、证书续期</h3><p>目前根据我测试的结果，controller manager 的 <strong>experimental-cluster-signing-duration</strong> 参数在 init 的签发证书阶段似乎并未生效；<strong>目前根据文档描述 <code>kubelet</code> client 的证书会自动滚动，其他证书默认 1 年有效期，需要自己使用命令续签；</strong>续签命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看证书过期时间</span><br>k1.node ➜ kubeadm alpha certs check-expiration<br>[check-expiration] Reading configuration from the cluster...<br>[check-expiration] FYI: You can look at this config file with <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><br>CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED<br>admin.conf                 Jan 11, 2021 10:06 UTC   364d                                    no<br>apiserver                  Jan 11, 2021 10:06 UTC   364d            ca                      no<br>apiserver-kubelet-client   Jan 11, 2021 10:06 UTC   364d            ca                      no<br>controller-manager.conf    Jan 11, 2021 10:06 UTC   364d                                    no<br>front-proxy-client         Jan 11, 2021 10:06 UTC   364d            front-proxy-ca          no<br>scheduler.conf             Jan 11, 2021 10:06 UTC   364d                                    no<br><br>CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED<br>ca                      Jan 09, 2030 10:06 UTC   9y              no<br>front-proxy-ca          Jan 09, 2030 10:06 UTC   9y              no<br><br><span class="hljs-comment"># 续签证书</span><br>k1.node ➜ kubeadm alpha certs renew all<br>[renew] Reading configuration from the cluster...<br>[renew] FYI: You can look at this config file with <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span><br><br>certificate embedded <span class="hljs-keyword">in</span> the kubeconfig file <span class="hljs-keyword">for</span> the admin to use and <span class="hljs-keyword">for</span> kubeadm itself renewed<br>certificate <span class="hljs-keyword">for</span> serving the Kubernetes API renewed<br>certificate <span class="hljs-keyword">for</span> the API server to connect to kubelet renewed<br>certificate embedded <span class="hljs-keyword">in</span> the kubeconfig file <span class="hljs-keyword">for</span> the controller manager to use renewed<br>certificate <span class="hljs-keyword">for</span> the front proxy client renewed<br>certificate embedded <span class="hljs-keyword">in</span> the kubeconfig file <span class="hljs-keyword">for</span> the scheduler manager to use renewed<br></code></pre></td></tr></table></figure><h3 id="6-4、Node-重加入"><a href="#6-4、Node-重加入" class="headerlink" title="6.4、Node 重加入"></a>6.4、Node 重加入</h3><p>默认的 bootstrap token 会在 24h 后失效，所以后续增加新节点需要重新创建 token，重新创建 token 可以通过以下命令完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出 token</span><br>k1.node ➜ kubeadm token list<br>TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS<br>r4t3l3.14mmuivm7xbtaeoj   22h         2020-01-13T18:06:54+08:00   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token<br>zady4i.57f9i2o6zl9vf9hy   45m         2020-01-12T20:06:53+08:00   &lt;none&gt;                   Proxy <span class="hljs-keyword">for</span> managing TTL <span class="hljs-keyword">for</span> the kubeadm-certs secret        &lt;none&gt;<br><br><span class="hljs-comment"># 创建新 token</span><br>k1.node ➜ kubeadm token create --print-join-command<br>W0112 19:21:15.174765   26626 validation.go:28] Cannot validate kube-proxy config - no validator is available<br>W0112 19:21:15.174836   26626 validation.go:28] Cannot validate kubelet config - no validator is available<br>kubeadm <span class="hljs-built_in">join</span> 127.0.0.1:6443 --token 2dz4dc.mobzgjbvu0bkxz7j     --discovery-token-ca-cert-hash sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d<br></code></pre></td></tr></table></figure><p>如果忘记了 certificate-key 可以通过一下命令重新 upload 并查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">k1.node ➜ kubeadm init --config kubeadm.yaml phase upload-certs --upload-certs<br>W0112 19:23:06.466711   28637 validation.go:28] Cannot validate kubelet config - no validator is available<br>W0112 19:23:06.466778   28637 validation.go:28] Cannot validate kube-proxy config - no validator is available<br>[upload-certs] Storing the certificates <span class="hljs-keyword">in</span> Secret <span class="hljs-string">&quot;kubeadm-certs&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br>[upload-certs] Using certificate key:<br>7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3<br></code></pre></td></tr></table></figure><h3 id="6-5、调整-kubelet"><a href="#6-5、调整-kubelet" class="headerlink" title="6.5、调整 kubelet"></a>6.5、调整 kubelet</h3><p>node 节点一旦启动完成后，kubelet 配置便不可再修改；如果想要修改 kubelet 配置，可以通过调整 <code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code> 配置文件完成</p><h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p>本文参考了许多官方文档，以下是一些个人认为比较有价值并且在使用 kubeadm 后应该阅读的文档</p><ul><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details">Implementation details</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/kubelet-integration/">Configuring each kubelet in your cluster using kubeadm</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/control-plane-flags/">Customizing control plane configuration with kubeadm</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/">Creating Highly Available clusters with kubeadm</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/">Certificate Management with kubeadm</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">Upgrading kubeadm clusters</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/">Reconfigure a Node’s Kubelet in a Live Cluster</a></li></ul>]]></content>
    
    
    <summary type="html">距离上一次折腾 kubeadm 大约已经一两年了(记不太清了)，在很久一段时间内一直采用二进制部署的方式来部署 kubernetes 集群，随着 kubeadm 的不断稳定，目前终于可以重新试试这个不错的工具了</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>云服务器下 Ubuntu 18 正确的 DNS 修改</title>
    <link href="https://mritd.com/2020/01/21/how-to-modify-dns-on-ubuntu18-server/"/>
    <id>https://mritd.com/2020/01/21/how-to-modify-dns-on-ubuntu18-server/</id>
    <published>2020-01-21T04:35:46.000Z</published>
    <updated>2020-01-21T04:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>Netflix DNS 分流实际上我目前的方案是通过 CoreDNS 作为主 DNS Server，然后在 CoreDNS 上针对 Netflix 全部域名解析 forward 到一台国外可以解锁 Netflix 机器上；如果直接将 CoreDNS 暴露在公网，那么无疑是在作死，为 DNS 反射 DDos 提供肉鸡；所以想到的方案是自己编写一个不可描述的工具，本地 Client 到 Server 端以后，Server 端再去设置到 CoreDNS 做分流；其中不可避免的需要调整 Server 端默认 DNS。</p><h2 id="二、已废弃修改方式"><a href="#二、已废弃修改方式" class="headerlink" title="二、已废弃修改方式"></a>二、已废弃修改方式</h2><p>目前大部份人还是习惯修改 <code>/etc/resolv.conf</code> 配置文件，这个配置文件上面已经明确标注了不要去修改它；<strong>因为自 Systemd 一统江山以后，系统 DNS 已经被 <code>systemd-resolved</code> 服务接管；一但修改了 <code>/etc/resolv.conf</code>，机器重启后就会被恢复；</strong>所以根源解决方案还是需要修改 <code>systemd-resolved</code> 的配置。</p><h2 id="三、netplan-的调整"><a href="#三、netplan-的调整" class="headerlink" title="三、netplan 的调整"></a>三、netplan 的调整</h2><p>在调整完 <code>systemd-resolved</code> 配置后其实有些地方仍然是不生效的；<strong>原因是 Ubuntu 18 开始网络已经被 netplan 接管，所以问题又回到了如何修改 netplan；</strong>由于云服务器初始化全部是由 cloud-init 完成的，netplan 配置里 IP 全部是由 DHCP 完成；那么直接修改 netplan 为 static IP 理论上可行，但是事实上还是不够优雅；后来研究了一下其实更优雅的方式是覆盖掉 DHCP 的某些配置，比如 DNS 配置；在阿里云上配置如下(<code>/etc/netplan/99-netcfg.yaml</code>)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">renderer:</span> <span class="hljs-string">networkd</span><br>  <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">eth0:</span><br>      <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">yes</span><br>      <span class="hljs-attr">dhcp4-overrides:</span><br>        <span class="hljs-attr">use-dns:</span> <span class="hljs-literal">no</span><br>      <span class="hljs-attr">dhcp6:</span> <span class="hljs-literal">no</span><br>      <span class="hljs-attr">nameservers:</span><br>        <span class="hljs-attr">search:</span> [<span class="hljs-string">local</span>,<span class="hljs-string">node</span>]<br>        <span class="hljs-comment"># 我自己的 CoreDNS 服务器</span><br>        <span class="hljs-attr">addresses:</span> [<span class="hljs-number">172.17</span><span class="hljs-number">.3</span><span class="hljs-number">.17</span>]<br></code></pre></td></tr></table></figure><p>修改完成后执行 <code>netplan try</code> 等待几秒钟，如果屏幕的读秒倒计时一直在动，说明修改没问题，接着回车既可(尽量不要 <code>netplan apply</code>，一旦修改错误你就再也连不上了…)</p><h2 id="四、DNS-分流"><a href="#四、DNS-分流" class="headerlink" title="四、DNS 分流"></a>四、DNS 分流</h2><p>顺便贴一下 CoreDNS 配置吧，可能有些人也需要；第一部分的域名是目前我整理的 Netflix 全部访问域名，针对这些域名的流量转发到自己其他可解锁 Netflix 的机器既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh">netflix.com nflxext.com nflximg.net nflxso.net nflxvideo.net &#123;<br>    <span class="hljs-built_in">bind</span> 172.17.3.17<br><br>    cache 30 . &#123;<br>        success 4096<br>    &#125;<br><br>    forward . 158.1.1.1 &#123;<br>        max_fails 2<br>        prefer_udp<br>        expire 20s<br>        policy random<br>        health_check 0.2s<br>    &#125;<br><br>    errors<br>    <span class="hljs-built_in">log</span> . <span class="hljs-string">&quot;&#123;remote&#125;:&#123;port&#125; - &#123;&gt;id&#125; \&quot;&#123;type&#125; &#123;class&#125; &#123;name&#125; &#123;proto&#125; &#123;size&#125; &#123;&gt;do&#125; &#123;&gt;bufsize&#125;\&quot; &#123;rcode&#125; &#123;&gt;rflags&#125; &#123;rsize&#125; &#123;duration&#125;&quot;</span><br>&#125;<br><br>.:53 &#123;<br>    <span class="hljs-built_in">bind</span> 172.17.3.17<br><br>    cache 30 . &#123;<br>        success 4096<br>    &#125;<br><br>    forward . 8.8.8.8 1.1.1.1 &#123;<br>        except netflix.com nflxext.com nflximg.net nflxso.net nflxvideo.net<br>        max_fails 2<br>        expire 20s<br>        policy random<br>        health_check 0.2s<br>    &#125;<br><br>    errors<br>    <span class="hljs-built_in">log</span> . <span class="hljs-string">&quot;&#123;remote&#125;:&#123;port&#125; - &#123;&gt;id&#125; \&quot;&#123;type&#125; &#123;class&#125; &#123;name&#125; &#123;proto&#125; &#123;size&#125; &#123;&gt;do&#125; &#123;&gt;bufsize&#125;\&quot; &#123;rcode&#125; &#123;&gt;rflags&#125; &#123;rsize&#125; &#123;duration&#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="五、关于-docker"><a href="#五、关于-docker" class="headerlink" title="五、关于 docker"></a>五、关于 docker</h2><p>当 netplan 修改完成后，只需要重启 docker 既可保证 docker 内所有容器 DNS 请求全部发送到自己定义的 DNS 服务器上；<strong>请不要尝试将自己的 CoreDNS 监听到 <code>127.*</code> 或者 <code>::1</code> 上，这两个地址会导致 docker 中的 DNS 无效</strong>，因为在 <a href="https://github.com/docker/libnetwork/blob/fec6476dfa21380bf8ee4d74048515d968c1ee63/resolvconf/resolvconf.go#L148">libnetwork</a> 中针对这两个地址做了过滤，并且 <code>FilterResolvDNS</code> 方法在剔除这两种地址时不会给予任何警告日志</p>]]></content>
    
    
    <summary type="html">博客服务器换成了阿里云香港，个人还偶尔看美剧，所以做了一下 Netflix 分流；分流过程主要是做 DNS 解析 SNI 代理，调了半天记录一下</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Percona MySQL 搭建</title>
    <link href="https://mritd.com/2020/01/20/set-up-percona-server/"/>
    <id>https://mritd.com/2020/01/20/set-up-percona-server/</id>
    <published>2020-01-20T11:45:46.000Z</published>
    <updated>2020-01-20T11:45:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、版本信息"><a href="#一、版本信息" class="headerlink" title="一、版本信息"></a>一、版本信息</h2><p>目前采用 MySQL fork 版本 Percona Server 5.7.28，监控方面选择 Percona Monitoring and Management 2.1.0，对应监控 Client 版本为 2.1.0</p><h2 id="二、Percona-Server-安装"><a href="#二、Percona-Server-安装" class="headerlink" title="二、Percona Server 安装"></a>二、Percona Server 安装</h2><p>为保证兼容以及稳定性，MySQL 宿主机系统选择 CentOS 7，Percona Server 安装方式为 rpm 包，安装后由 Systemd 守护</p><h3 id="2-1、下载安装包"><a href="#2-1、下载安装包" class="headerlink" title="2.1、下载安装包"></a>2.1、下载安装包</h3><p>安装包下载地址为 <a href="https://www.percona.com/downloads/Percona-Server-5.7/LATEST/">https://www.percona.com/downloads/Percona-Server-5.7/LATEST/</a>，下载时选择 <code>Download All Packages Together</code>，下载后是所有组件全量的压缩 tar 包。</p><h3 id="2-2、安装前准备"><a href="#2-2、安装前准备" class="headerlink" title="2.2、安装前准备"></a>2.2、安装前准备</h3><p>针对 CentOS 7 系统，安装前升级所有系统组件库，执行 <code>yum update</code> 既可；大部份 <strong>CentOS 7 安装后可能会附带 <code>mariadb-libs</code> 包，这个包会默认创建一些配置文件，导致后面的 Percona Server 无法覆盖它(例如 <code>/etc/my.cnf</code>)，所以安装 Percona Server 之前需要卸载它 <code>yum remove mariadb-libs</code></strong></p><p>针对于数据存储硬盘，目前统一为 SSD 硬盘，挂载点为 <code>/data</code>，挂载方式可以采用 <code>fstab</code>、<code>systemd-mount</code>，分区格式目前采用 <code>xfs</code> 格式。</p><p><strong>SSD 优化有待补充…</strong></p><h3 id="2-3、安装-Percona-Server"><a href="#2-3、安装-Percona-Server" class="headerlink" title="2.3、安装 Percona Server"></a>2.3、安装 Percona Server</h3><p>Percona Server tar 包解压后会有 9 个 rpm 包，实际安装时只需要安装其中 4 个既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install Percona-Server-client-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-server-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-shared-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-shared-compat-57-5.7.28-31.1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="2-4、安装后调整"><a href="#2-4、安装后调整" class="headerlink" title="2.4、安装后调整"></a>2.4、安装后调整</h3><h4 id="2-4-1、硬盘调整"><a href="#2-4-1、硬盘调整" class="headerlink" title="2.4.1、硬盘调整"></a>2.4.1、硬盘调整</h4><p>目前 MySQL 数据会统一存放到 <code>/data</code> 目录下，所以需要将单独的数据盘挂载到 <code>/data</code> 目录；<strong>如果是 SSD 硬盘还需要调整系统 I&#x2F;O 调度器等其他优化。</strong></p><h4 id="2-4-2、目录预创建"><a href="#2-4-2、目录预创建" class="headerlink" title="2.4.2、目录预创建"></a>2.4.2、目录预创建</h4><p>Percona Server 安装完成后，由于配置调整原因，还会用到一些其他的数据目录，这些目录可以预先创建并授权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /var/log/mysql /data/mysql_tmp<br><span class="hljs-built_in">chown</span> -R mysql:mysql /var/log/mysql /data/mysql_tmp<br></code></pre></td></tr></table></figure><p><code>/var/log/mysql</code> 目录用来存放 MySQL 相关的日志(不包括 binlog)，<code>/data/mysql_tmp</code> 用来存放 MySQL 运行时产生的缓存文件。</p><h4 id="2-4-3、文件描述符调整"><a href="#2-4-3、文件描述符调整" class="headerlink" title="2.4.3、文件描述符调整"></a>2.4.3、文件描述符调整</h4><p>由于 rpm 安装的 Percona Server 会采用 Systemd 守护，所以如果想修改文件描述符配置应当调整 Systemd 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/lib/systemd/system/mysqld.service<br><br><span class="hljs-comment"># Sets open_files_limit</span><br><span class="hljs-comment"># 注意 infinity = 65536</span><br>LimitCORE = infinity<br>LimitNOFILE = infinity<br>LimitNPROC = infinity<br></code></pre></td></tr></table></figure><p>然后执行 <code>systemctl daemon-reload</code> 重载既可。</p><h4 id="2-4-4、配置文件调整"><a href="#2-4-4、配置文件调整" class="headerlink" title="2.4.4、配置文件调整"></a>2.4.4、配置文件调整</h4><p>Percona Server 安装完成后也会生成 <code>/etc/my.cnf</code> 配置文件，不过不建议直接修改该文件；修改配置文件需要进入到 <code>/etc/percona-server.conf.d/</code> 目录调整相应配置；以下为配置样例(<strong>生产环境 mysqld 配置需要优化调整</strong>)</p><p><strong>mysql.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br>auto-rehash<br><span class="hljs-attr">default_character_set</span>=utf8mb4<br></code></pre></td></tr></table></figure><p><strong>mysqld.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Percona Server template configuration</span><br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="hljs-comment"># changes to the binary log between backups.</span><br><span class="hljs-comment"># log_bin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-comment"># join_buffer_size = 128M</span><br><span class="hljs-comment"># sort_buffer_size = 2M</span><br><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">datadir</span>=/data/mysql<br><span class="hljs-attr">socket</span>=/data/mysql/mysql.sock<br><span class="hljs-attr">pid_file</span>=/data/mysql/mysqld.pid<br><br><span class="hljs-comment"># 服务端编码</span><br><span class="hljs-attr">character_set_server</span>=utf8mb4<br><span class="hljs-comment"># 服务端排序</span><br><span class="hljs-attr">collation_server</span>=utf8mb4_general_ci<br><span class="hljs-comment"># 强制使用 utf8mb4 编码集，忽略客户端设置</span><br><span class="hljs-attr">skip_character_set_client_handshake</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 日志输出到文件</span><br><span class="hljs-attr">log_output</span>=FILE<br><span class="hljs-comment"># 开启常规日志输出</span><br><span class="hljs-attr">general_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 常规日志输出文件位置</span><br><span class="hljs-attr">general_log_file</span>=/var/log/mysql/mysqld.log<br><span class="hljs-comment"># 错误日志位置</span><br><span class="hljs-attr">log_error</span>=/var/log/mysql/mysqld-error.log<br><span class="hljs-comment"># 记录慢查询</span><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 慢查询时间(大于 1s 被视为慢查询)</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 慢查询日志文件位置</span><br><span class="hljs-attr">slow_query_log_file</span>=/var/log/mysql/mysqld-slow.log<br><span class="hljs-comment"># 临时文件位置</span><br><span class="hljs-attr">tmpdir</span>=/data/mysql_tmp<br><span class="hljs-comment"># 线程池缓存(refs https://my.oschina.net/realfighter/blog/363853)</span><br><span class="hljs-attr">thread_cache_size</span>=<span class="hljs-number">30</span><br><span class="hljs-comment"># The number of open tables for all threads.(refs https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache)</span><br><span class="hljs-attr">table_open_cache</span>=<span class="hljs-number">16384</span><br><span class="hljs-comment"># 文件描述符(此处修改不生效，请修改 systemd service 配置) </span><br><span class="hljs-comment"># refs https://www.percona.com/blog/2017/10/12/open_files_limit-mystery/</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/wxxjianchi/p/10370419.html</span><br><span class="hljs-comment">#open_files_limit=65535</span><br><span class="hljs-comment"># 表定义缓存(5.7 以后自动调整)</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_definition_cache</span><br><span class="hljs-comment"># refs http://mysql.taobao.org/monthly/2015/08/10/</span><br><span class="hljs-comment">#table_definition_cache=16384</span><br><span class="hljs-attr">sort_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-attr">join_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">read_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-attr">read_rnd_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">key_buffer_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">bulk_insert_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-comment"># myisam_sort_buffer_size 与 sort_buffer_size 区别请参考(https://stackoverflow.com/questions/7871027/myisam-sort-buffer-size-vs-sort-buffer-size)</span><br><span class="hljs-attr">myisam_sort_buffer_size</span>=<span class="hljs-number">64</span>M<br><span class="hljs-comment"># 内部内存临时表大小</span><br><span class="hljs-attr">tmp_table_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># 用户创建的 MEMORY 表最大大小(tmp_table_size 受此值影响)</span><br><span class="hljs-attr">max_heap_table_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># 开启查询缓存</span><br><span class="hljs-attr">query_cache_type</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 查询缓存大小</span><br><span class="hljs-attr">query_cache_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># sql mode</span><br><span class="hljs-attr">sql_mode</span>=<span class="hljs-string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span><br><br><span class="hljs-comment">########### Network ###########</span><br><span class="hljs-comment"># 最大连接数(该参数受到最大文件描述符影响，如果不生效请检查最大文件描述符设置)</span><br><span class="hljs-comment"># refs https://stackoverflow.com/questions/39976756/the-max-connections-in-mysql-5-7</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">1500</span><br><span class="hljs-comment"># mysql 堆栈内暂存的链接数量</span><br><span class="hljs-comment"># 当短时间内链接数量超过 max_connections 时，部分链接会存储在堆栈内，存储数量受此参数控制</span><br><span class="hljs-attr">back_log</span>=<span class="hljs-number">256</span><br><span class="hljs-comment"># 最大链接错误，针对于 client 主机，超过此数量的链接错误将会导致 mysql server 针对此主机执行锁定(禁止链接 ERROR 1129 )</span><br><span class="hljs-comment"># 此错误计数仅在 mysql 链接握手失败才会计算，一般出现问题时都是网络故障</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/kerrycode/p/8405862.html</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">100000</span><br><span class="hljs-comment"># mysql server 允许的最大数据包大小</span><br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">64</span>M<br><span class="hljs-comment"># 交互式客户端链接超时(30分钟自动断开)</span><br><span class="hljs-attr">interactive_timeout</span>=<span class="hljs-number">1800</span><br><span class="hljs-comment"># 非交互式链接超时时间(10分钟)</span><br><span class="hljs-comment"># 如果客户端有连接池，则需要协商此参数(refs https://database.51cto.com/art/201909/603519.htm)</span><br><span class="hljs-attr">wait_timeout</span>=<span class="hljs-number">600</span><br><span class="hljs-comment"># 跳过外部文件系统锁定</span><br><span class="hljs-comment"># If you run multiple servers that use the same database directory (not recommended), </span><br><span class="hljs-comment"># each server must have external locking enabled.</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/external-locking.html</span><br><span class="hljs-attr">skip_external_locking</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 跳过链接的域名解析(开启此选项后 mysql 用户授权的 host 方式失效)</span><br><span class="hljs-attr">skip_name_resolve</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># 禁用主机名缓存，每次都会走 DNS</span><br><span class="hljs-attr">host_cache_size</span>=<span class="hljs-number">0</span><br><br><span class="hljs-comment">########### REPL ###########</span><br><span class="hljs-comment"># 开启 binlog</span><br><span class="hljs-attr">log_bin</span>=mysql-bin<br><span class="hljs-comment"># 作为从库时，同步信息依然写入 binlog，方便此从库再作为其他从库的主库</span><br><span class="hljs-attr">log_slave_updates</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># server id，默认为 ipv4 地址去除第一段</span><br><span class="hljs-comment"># eg: 172.16.10.11 =&gt; 161011</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">161011</span><br><span class="hljs-comment"># 每次次事务 binlog 刷新到磁盘</span><br><span class="hljs-comment"># refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/</span><br><span class="hljs-attr">sync_binlog</span>=<span class="hljs-number">100</span><br><span class="hljs-comment"># binlog 格式(refs https://zhuanlan.zhihu.com/p/33504555)</span><br><span class="hljs-attr">binlog_format</span>=row<br><span class="hljs-comment"># binlog 自动清理时间</span><br><span class="hljs-attr">expire_logs_days</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 开启 relay-log，一般作为 slave 时开启</span><br><span class="hljs-attr">relay_log</span>=mysql-replay<br><span class="hljs-comment"># 主从复制时跳过 test 库</span><br><span class="hljs-attr">replicate_ignore_db</span>=test<br><span class="hljs-comment"># 每个 session binlog 缓存</span><br><span class="hljs-attr">binlog_cache_size</span>=<span class="hljs-number">4</span>M<br><span class="hljs-comment"># binlog 滚动大小</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">1024</span>M<br><span class="hljs-comment"># GTID 相关(refs https://keithlan.github.io/2016/06/23/gtid/)</span><br><span class="hljs-comment">#gtid_mode=1</span><br><span class="hljs-comment">#enforce_gtid_consistency=1</span><br><br><span class="hljs-comment">########### InnoDB ###########</span><br><span class="hljs-comment"># 永久表默认存储引擎</span><br><span class="hljs-attr">default_storage_engine</span>=InnoDB<br><span class="hljs-comment"># 系统表空间数据文件大小(初始化为 1G，并且自动增长)</span><br><span class="hljs-attr">innodb_data_file_path</span>=ibdata1:<span class="hljs-number">1</span>G:autoextend<br><span class="hljs-comment"># InnoDB 缓存池大小</span><br><span class="hljs-comment"># innodb_buffer_pool_size 必须等于 innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances，或者是其整数倍</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool-resize.html</span><br><span class="hljs-comment"># refs https://zhuanlan.zhihu.com/p/60089484</span><br><span class="hljs-attr">innodb_buffer_pool_size</span>=<span class="hljs-number">7680</span>M<br><span class="hljs-attr">innodb_buffer_pool_instances</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">innodb_buffer_pool_chunk_size</span>=<span class="hljs-number">128</span>M<br><span class="hljs-comment"># InnoDB 强制恢复(refs https://www.askmaclean.com/archives/mysql-innodb-innodb_force_recovery.html)</span><br><span class="hljs-attr">innodb_force_recovery</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># InnoDB buffer 预热(refs http://www.dbhelp.net/2017/01/12/mysql-innodb-buffer-pool-warmup.html)</span><br><span class="hljs-attr">innodb_buffer_pool_dump_at_shutdown</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">innodb_buffer_pool_load_at_startup</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># InnoDB 日志组中的日志文件数</span><br><span class="hljs-attr">innodb_log_files_in_group</span>=<span class="hljs-number">2</span><br><span class="hljs-comment"># InnoDB redo 日志大小</span><br><span class="hljs-comment"># refs https://www.percona.com/blog/2017/10/18/chose-mysql-innodb_log_file_size/</span><br><span class="hljs-attr">innodb_log_file_size</span>=<span class="hljs-number">256</span>MB<br><span class="hljs-comment"># 缓存还未提交的事务的缓冲区大小</span><br><span class="hljs-attr">innodb_log_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-comment"># InnoDB 在事务提交后的日志写入频率</span><br><span class="hljs-comment"># refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/</span><br><span class="hljs-attr">innodb_flush_log_at_trx_commit</span>=<span class="hljs-number">2</span><br><span class="hljs-comment"># InnoDB DML 操作行级锁等待时间</span><br><span class="hljs-comment"># 超时返回 ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="hljs-comment"># refs https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/</span><br><span class="hljs-attr">innodb_lock_wait_timeout</span>=<span class="hljs-number">30</span><br><span class="hljs-comment"># InnoDB 行级锁超时是否回滚整个事务，默认为 OFF 仅回滚上一条语句</span><br><span class="hljs-comment"># 此时应用程序可以接受到错误后选择是否继续提交事务(并没有违反 ACID 原子性)</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/hustcat/archive/2012/11/18/2775487.html</span><br><span class="hljs-comment">#innodb_rollback_on_timeout=ON</span><br><span class="hljs-comment"># InnoDB 数据写入磁盘的方式，具体见博客文章</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/gomysql/p/3595806.html</span><br><span class="hljs-attr">innodb_flush_method</span>=O_DIRECT<br><span class="hljs-comment"># InnoDB 缓冲池脏页刷新百分比</span><br><span class="hljs-comment"># refs https://dbarobin.com/2015/08/29/mysql-optimization-under-ssd</span><br><span class="hljs-attr">innodb_max_dirty_pages_pct</span>=<span class="hljs-number">50</span><br><span class="hljs-comment"># InnoDB 每秒执行的写IO量</span><br><span class="hljs-comment"># refs https://www.centos.bz/2016/11/mysql-performance-tuning-15-config-item/#10.INNODB_IO_CAPACITY,%20INNODB_IO_CAPACITY_MAX</span><br><span class="hljs-attr">innodb_io_capacity</span>=<span class="hljs-number">500</span><br><span class="hljs-attr">innodb_io_capacity_max</span>=<span class="hljs-number">1000</span><br><span class="hljs-comment"># 请求并发 InnoDB 线程数</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/xinysu/p/6439715.html#_lab2_1_0</span><br><span class="hljs-attr">innodb_thread_concurrency</span>=<span class="hljs-number">60</span><br><span class="hljs-comment"># 再使用多个 InnoDB 表空间时，允许打开的最大 &quot;.ibd&quot; 文件个数，不设置默认 300，</span><br><span class="hljs-comment"># 并且取与 table_open_cache 相比较大的一个，此选项独立于 open_files_limit</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_open_files</span><br><span class="hljs-attr">innodb_open_files</span>=<span class="hljs-number">65535</span><br><span class="hljs-comment"># 每个 InnoDB 表都存储在独立的表空间(.ibd)中</span><br><span class="hljs-attr">innodb_file_per_table</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 事务级别(可重复读，会出幻读)</span><br><span class="hljs-attr">transaction_isolation</span>=REPEATABLE-READ<br><span class="hljs-comment"># 是否在搜索和索引扫描中使用间隙锁(gap locking)，不建议使用未来将删除</span><br><span class="hljs-attr">innodb_locks_unsafe_for_binlog</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># InnoDB 后台清理线程数，更大的值有助于 DML 执行性能，&gt;= 5.7.8 默认为 4</span><br><span class="hljs-attr">innodb_purge_threads</span>=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>mysqld_safe.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#</span><br><span class="hljs-comment"># The Percona Server 5.7 configuration file.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># One can use all long options that the program supports.</span><br><span class="hljs-comment"># Run program with --help to get a list of available options and with</span><br><span class="hljs-comment"># --print-defaults to see which it would actually understand and use.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For explanations see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><br><span class="hljs-section">[mysqld_safe]</span><br><span class="hljs-attr">pid-file</span> = /var/run/mysqld/mysqld.pid<br><span class="hljs-attr">socket</span>   = /var/run/mysqld/mysqld.sock<br><span class="hljs-attr">nice</span>     = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>mysqldump.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqldump]</span><br>quick<br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">256</span>M<br></code></pre></td></tr></table></figure><h3 id="2-5、启动"><a href="#2-5、启动" class="headerlink" title="2.5、启动"></a>2.5、启动</h3><p>配置文件调整完成后启动既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start mysqld<br></code></pre></td></tr></table></figure><p>启动完成后默认 root 密码会自动生成，通过 <code>grep &#39;temporary password&#39; /var/log/mysql/*</code> 查看默认密码；获得默认密码后可以通过 <code>mysqladmin -S /data/mysql/mysql.sock -u root -p password</code> 修改 root 密码。</p><h2 id="三、Percona-Monitoring-and-Management"><a href="#三、Percona-Monitoring-and-Management" class="headerlink" title="三、Percona Monitoring and Management"></a>三、Percona Monitoring and Management</h2><p>数据库创建成功后需要增加 pmm 监控，后续将会通过监控信息来调优数据库，所以数据库监控必不可少。</p><h3 id="3-1、安装前准备"><a href="#3-1、安装前准备" class="headerlink" title="3.1、安装前准备"></a>3.1、安装前准备</h3><p>pmm 监控需要使用特定用户来监控数据信息，所以需要预先为 pmm 创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE mysql;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;pmm&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;pmm12345&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h3 id="3-2、安装-PMM-Server"><a href="#3-2、安装-PMM-Server" class="headerlink" title="3.2、安装 PMM Server"></a>3.2、安装 PMM Server</h3><p>pmm server 端推荐直接使用 docker 启动，以下为样例 docker compose</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">pmm:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">percona/pmm-server:2.1.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">pmm</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data:/srv</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data:</span><br></code></pre></td></tr></table></figure><p><strong>如果想要自定义证书，请将证书复制到 volume 内的 nginx 目录下，自定义证书需要以下证书文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">pmmserver.node ➜ tree<br>.<br>├── ca-certs.pem<br>├── certificate.conf  <span class="hljs-comment"># 此文件是 pmm 默认生成自签证书的配置文件，不需要关注</span><br>├── certificate.crt<br>├── certificate.key<br>└── dhparam.pem<br></code></pre></td></tr></table></figure><p><strong>pmm server 启动后访问 <code>http(s)://IP_ADDRESS</code> 既可进入 granafa 面板，默认账户名和密码都是 <code>admin</code></strong></p><h3 id="3-3、安装-PMM-Client"><a href="#3-3、安装-PMM-Client" class="headerlink" title="3.3、安装 PMM Client"></a>3.3、安装 PMM Client</h3><p>PMM Client 同样采用 rpm 安装，下载地址 <a href="https://www.percona.com/downloads/pmm2/">https://www.percona.com/downloads/pmm2/</a>，当前采用最新的 2.1.0 版本；rpm 下载完成后直接 <code>yum install</code> 既可。</p><p>rpm 安装完成后使用 <code>pmm-admin</code> 命令配置服务端地址，并添加当前 mysql 实例监控</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置服务端地址</span><br>pmm-admin config --server-url https://admin:admin@pmm.mysql.node 172.16.0.11 generic mysql<br><span class="hljs-comment"># 配置当前 mysql 实例</span><br>pmm-admin add mysql --username=pmm --password=pmm12345 mysql 172.16.0.11:3306<br></code></pre></td></tr></table></figure><p>完成后稍等片刻既可在 pmm server 端的 granafa 中看到相关数据。</p><h2 id="四、数据导入"><a href="#四、数据导入" class="headerlink" title="四、数据导入"></a>四、数据导入</h2><p>从原始数据库 dump 相关库，并导入到新数据库既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># dump</span><br>mysqldump -h 172.16.1.10 -u root -p --master-data=2 --routines --triggers --single_transaction --databases DATABASE_NAME &gt; dump.sql<br><span class="hljs-comment"># load</span><br>mysql -S /data/mysql/mysql.sock -u root -p &lt; dump.sql<br></code></pre></td></tr></table></figure><p>数据导入后重建业务用户既可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE mysql;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;test_user&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;test_user&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h2 id="五、数据备份"><a href="#五、数据备份" class="headerlink" title="五、数据备份"></a>五、数据备份</h2><h3 id="5-1、安装-xtrabackup"><a href="#5-1、安装-xtrabackup" class="headerlink" title="5.1、安装 xtrabackup"></a>5.1、安装 xtrabackup</h3><p>目前数据备份采用 Perconra xtrabackup 工具，xtrabackup 可以实现高速、压缩带增量的备份；xtrabackup 安装同样采用 rpm 方式，下载地址为 <a href="https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/">https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/</a>，下载完成后执行 <code>yum install</code> 既可</p><h3 id="5-2、备份工具"><a href="#5-2、备份工具" class="headerlink" title="5.2、备份工具"></a>5.2、备份工具</h3><p>目前备份工具开源在 <a href="https://github.com/gozap/mybak">GitHub</a> 上，每次全量备份会写入 <code>.full-backup</code> 文件，增量备份会写入 <code>.inc-backup</code> 文件</p><h3 id="5-3、配置-systemd"><a href="#5-3、配置-systemd" class="headerlink" title="5.3、配置 systemd"></a>5.3、配置 systemd</h3><p>为了使备份自动运行，目前将定时任务配置到 systemd 中，由 systemd 调度并执行；以下为相关 systemd 配置文件</p><p><strong>mysql-backup-full.service</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql full backup<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=on-failure<br>ExecStart=/usr/local/bin/mybak --backup-dir /data/mysql_backup --prefix mysql full<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>mysql-backup-inc.service</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql incremental backup<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=on-failure<br>ExecStart=/usr/local/bin/mybak --backup-dir /data/mysql_backup --prefix mysql inc<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>mysql-backup-compress.service</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql backup compress<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=on-failure<br>ExecStart=/usr/local/bin/mybak --backup-dir /data/mysql_backup --prefix mysql compress --clean<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>mysql-backup-full.timer</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql weekly full backup<br><span class="hljs-comment"># 备份之前依赖相关目录的挂载</span><br>After=data.mount<br>After=data-mysql_backup.mount<br><br>[Timer]<br><span class="hljs-comment"># 目前每周日一个全量备份</span><br>OnCalendar=Sun *-*-* 3:00<br>Persistent=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=timers.target<br></code></pre></td></tr></table></figure><p><strong>mysql-backup-inc.timer</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql weekly full backup<br>After=data.mount<br>After=data-mysql_backup.mount<br><br>[Timer]<br><span class="hljs-comment"># 每天三个增量备份</span><br>OnCalendar=*-*-* 9:00<br>OnCalendar=*-*-* 13:00<br>OnCalendar=*-*-* 18:00<br>Persistent=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=timers.target<br></code></pre></td></tr></table></figure><p><strong>mysql-backup-compress.timer</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=mysql weekly backup compress<br><span class="hljs-comment"># 备份之前依赖相关目录的挂载</span><br>After=data.mount<br>After=data-mysql_backup.mount<br><br>[Timer]<br><span class="hljs-comment"># 目前每周日一个全量备份，自动压缩后同时完成清理</span><br>OnCalendar=Sun *-*-* 5:00<br>Persistent=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=timers.target<br></code></pre></td></tr></table></figure><p>创建好相关文件后启动相关定时器既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> *.timer *.service /lib/systemd/system<br>systemctl daemon-reload<br>systemctl start mysql-backup-full.timer mysql-backup-inc.timer mysql-backup-compress.timer<br>systemctl <span class="hljs-built_in">enable</span> mysql-backup-full.timer mysql-backup-inc.timer mysql-backup-compress.timer<br></code></pre></td></tr></table></figure><h2 id="六、数据恢复"><a href="#六、数据恢复" class="headerlink" title="六、数据恢复"></a>六、数据恢复</h2><h3 id="6-1、全量备份恢复"><a href="#6-1、全量备份恢复" class="headerlink" title="6.1、全量备份恢复"></a>6.1、全量备份恢复</h3><p>针对于全量备份，只需要按照官方文档的还原顺序进行还原既可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 由于备份时进行了压缩，所以先解压备份文件</span><br>xtrabackup --decompress --parallel 4 --target-dir /data/mysql_backup/mysql-20191205230502<br><span class="hljs-comment"># 执行预处理</span><br>xtrabackup --prepare --target-dir /data/mysql_backup/mysql-20191205230502<br><span class="hljs-comment"># 执行恢复(恢复时自动根据 my.cnf 将数据覆盖到 data 数据目录)</span><br>xtrabackup --copy-back --target-dir /data/mysql_backup/mysql-20191205230502<br><span class="hljs-comment"># 修复数据目录权限</span><br><span class="hljs-built_in">chown</span> -R mysql:mysql /data/mysql<br><span class="hljs-comment"># 启动 mysql</span><br>systemctl start mysqld<br></code></pre></td></tr></table></figure><h3 id="6-2、增量备份恢复"><a href="#6-2、增量备份恢复" class="headerlink" title="6.2、增量备份恢复"></a>6.2、增量备份恢复</h3><p>对于增量备份恢复，其与全量备份恢复的根本区别在于: <strong>对于非最后一个增量文件的预处理必须使用 <code>--apply-log-only</code> 选项防止运行回滚阶段的处理</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 对所有备份文件进行解压处理</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`; <span class="hljs-keyword">do</span> xtrabackup --decompress --parallel 4 --target-dir <span class="hljs-variable">$dir</span>; <span class="hljs-keyword">done</span><br><span class="hljs-comment"># 对全量备份文件执行预处理(注意增加 --apply-log-only 选项)</span><br>xtrabackup --prepare --apply-log-only --target-dir /data/mysql_backup/mysql-20191205230502<br><span class="hljs-comment"># 对非最后一个增量备份执行预处理</span><br>xtrabackup --prepare --apply-log-only --target-dir /data/mysql_backup/mysql-20191205230502 --incremental-dir /data/mysql_backup/mysql-inc-20191206230802<br><span class="hljs-comment"># 对最后一个增量备份执行预处理(不需要 --apply-log-only)</span><br>xtrabackup --prepare --target-dir /data/mysql_backup/mysql-20191205230502 --incremental-dir /data/mysql_backup/mysql-inc-20191207031005<br><span class="hljs-comment"># 执行恢复(恢复时自动根据 my.cnf 将数据覆盖到 data 数据目录)</span><br>xtrabackup --copy-back --target-dir /data/mysql_backup/mysql-20191205230502<br><span class="hljs-comment"># 修复数据目录权限</span><br><span class="hljs-built_in">chown</span> -R mysql:mysql /data/mysql<br><span class="hljs-comment"># 启动 mysql</span><br>systemctl start mysqld<br></code></pre></td></tr></table></figure><h3 id="6-3、创建-slave"><a href="#6-3、创建-slave" class="headerlink" title="6.3、创建 slave"></a>6.3、创建 slave</h3><p>针对 xtrabackup 备份的数据可以直接恢复成 slave 节点，具体步骤如下:</p><p>首先将备份文件复制到目标机器，然后执行解压(默认备份工具采用 lz4 压缩)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xtrabackup --decompress --target-dir=xxxxxx<br></code></pre></td></tr></table></figure><p>解压完成后执行预处理操作(<strong>在执行预处理之前请确保 slave 机器上相关配置文件与 master 相同，并且处理好数据目录存放等</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xtrabackup --user=root --password=xxxxxxx --prepare --target-dir=xxxx<br></code></pre></td></tr></table></figure><p>预处理成功后便可执行恢复，以下命令将自动读取 <code>my.cnf</code> 配置，自动识别数据目录位置并将数据文件移动到该位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">xtrabackup --move-back --target-dir=xxxxx<br></code></pre></td></tr></table></figure><p>所由准备就绪后需要进行权限修复</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R mysql:mysql MYSQL_DATA_DIR<br></code></pre></td></tr></table></figure><p>最后在 mysql 内启动 slave 既可，slave 信息可通过从数据备份目录的 <code>xtrabackup_binlog_info</code> 中获取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取备份 POS 信息</span><br><span class="hljs-built_in">cat</span> xxxxxx/xtrabackup_binlog_info<br><br><span class="hljs-comment"># 创建 slave 节点</span><br>CHANGE MASTER TO<br>    MASTER_HOST=<span class="hljs-string">&#x27;192.168.2.48&#x27;</span>,<br>    MASTER_USER=<span class="hljs-string">&#x27;repl&#x27;</span>,<br>    MASTER_PASSWORD=<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>,<br>    MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000005&#x27;</span>,<br>    MASTER_LOG_POS=52500595;<br><br><span class="hljs-comment"># 启动 slave</span><br>start slave;<br>show slave status \G;<br></code></pre></td></tr></table></figure><h2 id="七、生产处理"><a href="#七、生产处理" class="headerlink" title="七、生产处理"></a>七、生产处理</h2><h3 id="7-1、数据目录"><a href="#7-1、数据目录" class="headerlink" title="7.1、数据目录"></a>7.1、数据目录</h3><p>目前生产环境数据目录位置调整到 <code>/home/mysql</code>，所以目录权限处理也要做对应调整</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p /var/log/mysql /home/mysql_tmp<br><span class="hljs-built_in">chown</span> -R mysql:mysql /var/log/mysql /home/mysql_tmp<br></code></pre></td></tr></table></figure><h3 id="7-2、配置文件"><a href="#7-2、配置文件" class="headerlink" title="7.2、配置文件"></a>7.2、配置文件</h3><p>生产环境目前节点配置如下</p><ul><li>CPU: <code>Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz</code></li><li>RAM: <code>128G</code></li></ul><p>所以配置文件也需要做相应的优化调整</p><p><strong>mysql.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br>auto-rehash<br><span class="hljs-attr">default_character_set</span>=utf8mb4<br></code></pre></td></tr></table></figure><p><strong>mysqld.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Percona Server template configuration</span><br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="hljs-comment"># changes to the binary log between backups.</span><br><span class="hljs-comment"># log_bin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-comment"># join_buffer_size = 128M</span><br><span class="hljs-comment"># sort_buffer_size = 2M</span><br><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">datadir</span>=/home/mysql/mysql<br><span class="hljs-attr">socket</span>=/home/mysql/mysql/mysql.sock<br><span class="hljs-attr">pid_file</span>=/home/mysql/mysql/mysqld.pid<br><br><span class="hljs-comment"># 服务端编码</span><br><span class="hljs-attr">character_set_server</span>=utf8mb4<br><span class="hljs-comment"># 服务端排序</span><br><span class="hljs-attr">collation_server</span>=utf8mb4_general_ci<br><span class="hljs-comment"># 强制使用 utf8mb4 编码集，忽略客户端设置</span><br><span class="hljs-attr">skip_character_set_client_handshake</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 日志输出到文件</span><br><span class="hljs-attr">log_output</span>=FILE<br><span class="hljs-comment"># 开启常规日志输出</span><br><span class="hljs-attr">general_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 常规日志输出文件位置</span><br><span class="hljs-attr">general_log_file</span>=/var/log/mysql/mysqld.log<br><span class="hljs-comment"># 错误日志位置</span><br><span class="hljs-attr">log_error</span>=/var/log/mysql/mysqld-error.log<br><span class="hljs-comment"># 记录慢查询</span><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 慢查询时间(大于 1s 被视为慢查询)</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 慢查询日志文件位置</span><br><span class="hljs-attr">slow_query_log_file</span>=/var/log/mysql/mysqld-slow.log<br><span class="hljs-comment"># 临时文件位置</span><br><span class="hljs-attr">tmpdir</span>=/home/mysql/mysql_tmp<br><span class="hljs-comment"># The number of open tables for all threads.(refs https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache)</span><br><span class="hljs-attr">table_open_cache</span>=<span class="hljs-number">16384</span><br><span class="hljs-comment"># 文件描述符(此处修改不生效，请修改 systemd service 配置) </span><br><span class="hljs-comment"># refs https://www.percona.com/blog/2017/10/12/open_files_limit-mystery/</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/wxxjianchi/p/10370419.html</span><br><span class="hljs-comment">#open_files_limit=65535</span><br><span class="hljs-comment"># 表定义缓存(5.7 以后自动调整)</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_definition_cache</span><br><span class="hljs-comment"># refs http://mysql.taobao.org/monthly/2015/08/10/</span><br><span class="hljs-comment">#table_definition_cache=16384</span><br><span class="hljs-attr">sort_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-attr">join_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">read_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-attr">read_rnd_buffer_size</span>=<span class="hljs-number">1</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">key_buffer_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># MyiSAM 引擎专用(内部临时磁盘表可能会用)</span><br><span class="hljs-attr">bulk_insert_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-comment"># myisam_sort_buffer_size 与 sort_buffer_size 区别请参考(https://stackoverflow.com/questions/7871027/myisam-sort-buffer-size-vs-sort-buffer-size)</span><br><span class="hljs-attr">myisam_sort_buffer_size</span>=<span class="hljs-number">64</span>M<br><span class="hljs-comment"># 内部内存临时表大小</span><br><span class="hljs-attr">tmp_table_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># 用户创建的 MEMORY 表最大大小(tmp_table_size 受此值影响)</span><br><span class="hljs-attr">max_heap_table_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># 开启查询缓存</span><br><span class="hljs-attr">query_cache_type</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 查询缓存大小</span><br><span class="hljs-attr">query_cache_size</span>=<span class="hljs-number">32</span>M<br><span class="hljs-comment"># sql mode</span><br><span class="hljs-attr">sql_mode</span>=<span class="hljs-string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span><br><br><span class="hljs-comment">########### Network ###########</span><br><span class="hljs-comment"># 最大连接数(该参数受到最大文件描述符影响，如果不生效请检查最大文件描述符设置)</span><br><span class="hljs-comment"># refs https://stackoverflow.com/questions/39976756/the-max-connections-in-mysql-5-7</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">1500</span><br><span class="hljs-comment"># mysql 堆栈内暂存的链接数量</span><br><span class="hljs-comment"># 当短时间内链接数量超过 max_connections 时，部分链接会存储在堆栈内，存储数量受此参数控制</span><br><span class="hljs-attr">back_log</span>=<span class="hljs-number">256</span><br><span class="hljs-comment"># 最大链接错误，针对于 client 主机，超过此数量的链接错误将会导致 mysql server 针对此主机执行锁定(禁止链接 ERROR 1129 )</span><br><span class="hljs-comment"># 此错误计数仅在 mysql 链接握手失败才会计算，一般出现问题时都是网络故障</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/kerrycode/p/8405862.html</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">100000</span><br><span class="hljs-comment"># mysql server 允许的最大数据包大小</span><br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">64</span>M<br><span class="hljs-comment"># 交互式客户端链接超时(30分钟自动断开)</span><br><span class="hljs-attr">interactive_timeout</span>=<span class="hljs-number">1800</span><br><span class="hljs-comment"># 非交互式链接超时时间(10分钟)</span><br><span class="hljs-comment"># 如果客户端有连接池，则需要协商此参数(refs https://database.51cto.com/art/201909/603519.htm)</span><br><span class="hljs-attr">wait_timeout</span>=<span class="hljs-number">28800</span><br><span class="hljs-comment"># 跳过外部文件系统锁定</span><br><span class="hljs-comment"># If you run multiple servers that use the same database directory (not recommended), </span><br><span class="hljs-comment"># each server must have external locking enabled.</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/external-locking.html</span><br><span class="hljs-attr">skip_external_locking</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 跳过链接的域名解析(开启此选项后 mysql 用户授权的 host 方式失效)</span><br><span class="hljs-attr">skip_name_resolve</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># 禁用主机名缓存，每次都会走 DNS</span><br><span class="hljs-attr">host_cache_size</span>=<span class="hljs-number">0</span><br><br><span class="hljs-comment">########### REPL ###########</span><br><span class="hljs-comment"># 开启 binlog</span><br><span class="hljs-attr">log_bin</span>=mysql-bin<br><span class="hljs-comment"># 作为从库时，同步信息依然写入 binlog，方便此从库再作为其他从库的主库</span><br><span class="hljs-attr">log_slave_updates</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># server id，默认为 ipv4 地址去除第一段</span><br><span class="hljs-comment"># eg: 192.168.2.48 =&gt; 168248</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">168248</span><br><span class="hljs-comment"># 每 n 次事务 binlog 刷新到磁盘</span><br><span class="hljs-comment"># refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/</span><br><span class="hljs-attr">sync_binlog</span>=<span class="hljs-number">100</span><br><span class="hljs-comment"># binlog 格式(refs https://zhuanlan.zhihu.com/p/33504555)</span><br><span class="hljs-attr">binlog_format</span>=row<br><span class="hljs-comment"># binlog 自动清理时间</span><br><span class="hljs-attr">expire_logs_days</span>=<span class="hljs-number">20</span><br><span class="hljs-comment"># 开启 relay-log，一般作为 slave 时开启</span><br><span class="hljs-attr">relay_log</span>=mysql-replay<br><span class="hljs-comment"># 主从复制时跳过 test 库</span><br><span class="hljs-attr">replicate_ignore_db</span>=test<br><span class="hljs-comment"># 每个 session binlog 缓存</span><br><span class="hljs-attr">binlog_cache_size</span>=<span class="hljs-number">4</span>M<br><span class="hljs-comment"># binlog 滚动大小</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">1024</span>M<br><span class="hljs-comment"># GTID 相关(refs https://keithlan.github.io/2016/06/23/gtid/)</span><br><span class="hljs-comment">#gtid_mode=1</span><br><span class="hljs-comment">#enforce_gtid_consistency=1</span><br><br><span class="hljs-comment">########### InnoDB ###########</span><br><span class="hljs-comment"># 永久表默认存储引擎</span><br><span class="hljs-attr">default_storage_engine</span>=InnoDB<br><span class="hljs-comment"># 系统表空间数据文件大小(初始化为 1G，并且自动增长)</span><br><span class="hljs-attr">innodb_data_file_path</span>=ibdata1:<span class="hljs-number">1</span>G:autoextend<br><span class="hljs-comment"># InnoDB 缓存池大小(资源充足，为所欲为)</span><br><span class="hljs-comment"># innodb_buffer_pool_size 必须等于 innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances，或者是其整数倍</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool-resize.html</span><br><span class="hljs-comment"># refs https://zhuanlan.zhihu.com/p/60089484</span><br><span class="hljs-attr">innodb_buffer_pool_size</span>=<span class="hljs-number">61440</span>M<br><span class="hljs-attr">innodb_buffer_pool_instances</span>=<span class="hljs-number">16</span><br><span class="hljs-comment"># 默认 128M</span><br><span class="hljs-attr">innodb_buffer_pool_chunk_size</span>=<span class="hljs-number">128</span>M<br><span class="hljs-comment"># InnoDB 强制恢复(refs https://www.askmaclean.com/archives/mysql-innodb-innodb_force_recovery.html)</span><br><span class="hljs-attr">innodb_force_recovery</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># InnoDB buffer 预热(refs http://www.dbhelp.net/2017/01/12/mysql-innodb-buffer-pool-warmup.html)</span><br><span class="hljs-attr">innodb_buffer_pool_dump_at_shutdown</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">innodb_buffer_pool_load_at_startup</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># InnoDB 日志组中的日志文件数</span><br><span class="hljs-attr">innodb_log_files_in_group</span>=<span class="hljs-number">2</span><br><span class="hljs-comment"># InnoDB redo 日志大小</span><br><span class="hljs-comment"># refs https://www.percona.com/blog/2017/10/18/chose-mysql-innodb_log_file_size/</span><br><span class="hljs-attr">innodb_log_file_size</span>=<span class="hljs-number">256</span>MB<br><span class="hljs-comment"># 缓存还未提交的事务的缓冲区大小</span><br><span class="hljs-attr">innodb_log_buffer_size</span>=<span class="hljs-number">16</span>M<br><span class="hljs-comment"># InnoDB 在事务提交后的日志写入频率</span><br><span class="hljs-comment"># refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/</span><br><span class="hljs-attr">innodb_flush_log_at_trx_commit</span>=<span class="hljs-number">2</span><br><span class="hljs-comment"># InnoDB DML 操作行级锁等待时间</span><br><span class="hljs-comment"># 超时返回 ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="hljs-comment"># refs https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/</span><br><span class="hljs-attr">innodb_lock_wait_timeout</span>=<span class="hljs-number">30</span><br><span class="hljs-comment"># InnoDB 行级锁超时是否回滚整个事务，默认为 OFF 仅回滚上一条语句</span><br><span class="hljs-comment"># 此时应用程序可以接受到错误后选择是否继续提交事务(并没有违反 ACID 原子性)</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/hustcat/archive/2012/11/18/2775487.html</span><br><span class="hljs-comment">#innodb_rollback_on_timeout=ON</span><br><span class="hljs-comment"># InnoDB 数据写入磁盘的方式，具体见博客文章</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/gomysql/p/3595806.html</span><br><span class="hljs-attr">innodb_flush_method</span>=O_DIRECT<br><span class="hljs-comment"># InnoDB 缓冲池脏页刷新百分比</span><br><span class="hljs-comment"># refs https://dbarobin.com/2015/08/29/mysql-optimization-under-ssd</span><br><span class="hljs-attr">innodb_max_dirty_pages_pct</span>=<span class="hljs-number">50</span><br><span class="hljs-comment"># InnoDB 每秒执行的写IO量</span><br><span class="hljs-comment"># refs https://www.centos.bz/2016/11/mysql-performance-tuning-15-config-item/#10.INNODB_IO_CAPACITY,%20INNODB_IO_CAPACITY_MAX</span><br><span class="hljs-comment"># refs https://www.alibabacloud.com/blog/testing-io-performance-with-sysbench_594709</span><br><span class="hljs-attr">innodb_io_capacity</span>=<span class="hljs-number">8000</span><br><span class="hljs-attr">innodb_io_capacity_max</span>=<span class="hljs-number">16000</span><br><span class="hljs-comment"># 请求并发 InnoDB 线程数</span><br><span class="hljs-comment"># refs https://www.cnblogs.com/xinysu/p/6439715.html#_lab2_1_0</span><br><span class="hljs-attr">innodb_thread_concurrency</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># 再使用多个 InnoDB 表空间时，允许打开的最大 &quot;.ibd&quot; 文件个数，不设置默认 300，</span><br><span class="hljs-comment"># 并且取与 table_open_cache 相比较大的一个，此选项独立于 open_files_limit</span><br><span class="hljs-comment"># refs https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_open_files</span><br><span class="hljs-attr">innodb_open_files</span>=<span class="hljs-number">65535</span><br><span class="hljs-comment"># 每个 InnoDB 表都存储在独立的表空间(.ibd)中</span><br><span class="hljs-attr">innodb_file_per_table</span>=<span class="hljs-number">1</span><br><span class="hljs-comment"># 事务级别(可重复读，会出幻读)</span><br><span class="hljs-attr">transaction_isolation</span>=REPEATABLE-READ<br><span class="hljs-comment"># 是否在搜索和索引扫描中使用间隙锁(gap locking)，不建议使用未来将删除</span><br><span class="hljs-attr">innodb_locks_unsafe_for_binlog</span>=<span class="hljs-number">0</span><br><span class="hljs-comment"># InnoDB 后台清理线程数，更大的值有助于 DML 执行性能，&gt;= 5.7.8 默认为 4</span><br><span class="hljs-attr">innodb_purge_threads</span>=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>mysqld_safe.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#</span><br><span class="hljs-comment"># The Percona Server 5.7 configuration file.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># One can use all long options that the program supports.</span><br><span class="hljs-comment"># Run program with --help to get a list of available options and with</span><br><span class="hljs-comment"># --print-defaults to see which it would actually understand and use.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For explanations see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><br><span class="hljs-section">[mysqld_safe]</span><br><span class="hljs-attr">pid-file</span> = /var/run/mysqld/mysqld.pid<br><span class="hljs-attr">socket</span>   = /var/run/mysqld/mysqld.sock<br><span class="hljs-attr">nice</span>     = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>mysqldump.cnf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqldump]</span><br>quick<br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">256</span>M<br></code></pre></td></tr></table></figure><h2 id="八、常用诊断"><a href="#八、常用诊断" class="headerlink" title="八、常用诊断"></a>八、常用诊断</h2><h3 id="8-1、动态配置-diff"><a href="#8-1、动态配置-diff" class="headerlink" title="8.1、动态配置 diff"></a>8.1、动态配置 diff</h3><p>mysql 默认允许在实例运行后使用 <code>set global VARIABLES=VALUE</code> 的方式动态调整一些配置，这可能导致在运行一段时间后(运维动态修改)实例运行配置和配置文件中配置不一致；所以<strong>建议定期 diff 运行时配置与配置文件配置差异，防制特殊情况下 mysql 重启后运行期配置丢失</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-config-diff /etc/percona-server.conf.d/mysqld.cnf h=127.0.0.1 --user root --ask-pass --report-width 100<br>Enter MySQL password:<br>2 config differences<br>Variable                  /etc/percona-server.conf.d/mysqld.cnf mysql47.test.com<br>========================= ===================================== ==================<br>innodb_max_dirty_pages... 50                                    50.000000<br>skip_name_resolve         0                                     ON<br></code></pre></td></tr></table></figure><h3 id="8-2、配置优化建议"><a href="#8-2、配置优化建议" class="headerlink" title="8.2、配置优化建议"></a>8.2、配置优化建议</h3><p>Percona Toolkit 提供了一个诊断工具，用于对 mysql 内的配置进行扫描并给出优化建议，在初始化时可以使用此工具评估 mysql 当前配置的具体情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-variable-advisor 127.0.0.1 --user root --ask-pass | grep -v <span class="hljs-string">&#x27;^$&#x27;</span><br>Enter password: <br><br><span class="hljs-comment"># WARN delay_key_write: MyISAM index blocks are never flushed until necessary.</span><br><span class="hljs-comment"># WARN innodb_flush_log_at_trx_commit-1: InnoDB is not configured in strictly ACID mode.</span><br><span class="hljs-comment"># NOTE innodb_max_dirty_pages_pct: The innodb_max_dirty_pages_pct is lower than the default.</span><br><span class="hljs-comment"># WARN max_connections: If the server ever really has more than a thousand threads running, then the system is likely to spend more time scheduling threads than really doing useful work.</span><br><span class="hljs-comment"># NOTE read_buffer_size-1: The read_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.</span><br><span class="hljs-comment"># NOTE read_rnd_buffer_size-1: The read_rnd_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.</span><br><span class="hljs-comment"># NOTE sort_buffer_size-1: The sort_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.</span><br><span class="hljs-comment"># NOTE innodb_data_file_path: Auto-extending InnoDB files can consume a lot of disk space that is very difficult to reclaim later.</span><br><span class="hljs-comment"># WARN myisam_recover_options: myisam_recover_options should be set to some value such as BACKUP,FORCE to ensure that table corruption is noticed.</span><br><span class="hljs-comment"># WARN sync_binlog: Binary logging is enabled, but sync_binlog isn&#x27;t configured so that every transaction is flushed to the binary log for durability.</span><br></code></pre></td></tr></table></figure><h3 id="8-3、死锁诊断"><a href="#8-3、死锁诊断" class="headerlink" title="8.3、死锁诊断"></a>8.3、死锁诊断</h3><p>使用 pt-deadlock-logger 工具可以诊断当前的死锁状态，以下为对死锁检测的测试</p><p>首先创建测试数据库和表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建测试库<br><span class="hljs-keyword">CREATE</span> DATABASE dbatest <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci;<br># 切换到测试库并建立测试表<br>USE dbatest;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> test (id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-keyword">value</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>), createtime <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>) ENGINE<span class="hljs-operator">=</span>INNODB;<br></code></pre></td></tr></table></figure><p>在一个其他终端上开启 pt-deadlock-logger 检测</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-deadlock-logger 127.0.0.1 --user root --ask-pass --tab<br></code></pre></td></tr></table></figure><p>检测开启后进行死锁测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 插入两条测试数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;test1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test(<span class="hljs-keyword">value</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;test2&#x27;</span>);<br># 在两个终端下进行交叉事务<br><br># 统一关闭自动提交<br>terminal_1 # <span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>terminal_2 # <span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br># 交叉事务，终端 <span class="hljs-number">1</span> 先更新第一条数据，终端 <span class="hljs-number">2</span> 先更新第二条数据<br>terminal_1 # <span class="hljs-keyword">BEGIN</span>;<br>terminal_1 # <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;x1&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>terminal_2 # <span class="hljs-keyword">BEGIN</span>;<br>terminal_2 # <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;x2&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><br># 此后终端 <span class="hljs-number">1</span> 再尝试更新第二条数据，终端 <span class="hljs-number">2</span> 再尝试更新第一条数据；造成等待互向释放锁的死锁<br>terminal_1 # <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;lock2&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br>terminal_2 # <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;lock1&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br># 此时由于开启了 mysql innodb 的死锁自动检测机制，会导致终端 <span class="hljs-number">2</span> 弹出错误<br>ERROR <span class="hljs-number">1213</span> (<span class="hljs-number">40001</span>): Deadlock found <span class="hljs-keyword">when</span> trying <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> lock; try restarting transaction<br><br># 同时 pt<span class="hljs-operator">-</span>deadlock<span class="hljs-operator">-</span>logger 有日志输出<br>server  ts      thread  txn_id  txn_time        <span class="hljs-keyword">user</span>    hostname    ip      db      tbl     idx     lock_type       lock_mode       wait_hold       victim  query<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       <span class="hljs-number">2019</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>T14:<span class="hljs-number">57</span>:<span class="hljs-number">10</span>     <span class="hljs-number">87</span>      <span class="hljs-number">0</span>       <span class="hljs-number">52</span>      root            <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       dbatest test    <span class="hljs-keyword">PRIMARY</span> RECORD  X       w       <span class="hljs-number">0</span>       <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;lock2&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       <span class="hljs-number">2019</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>T14:<span class="hljs-number">57</span>:<span class="hljs-number">10</span>     <span class="hljs-number">89</span>      <span class="hljs-number">0</span>       <span class="hljs-number">41</span>      root            <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       dbatest test    <span class="hljs-keyword">PRIMARY</span> RECORD  X       w       <span class="hljs-number">1</span>       <span class="hljs-keyword">UPDATE</span> test <span class="hljs-keyword">set</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;lock1&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="8-4、查看-IO-详情"><a href="#8-4、查看-IO-详情" class="headerlink" title="8.4、查看 IO 详情"></a>8.4、查看 IO 详情</h3><p>不同于 <code>iostat</code>，<code>pt-diskstats</code> 提供了更加详细的 IO 详情统计，并且据有交互式处理，执行一下命令将会实时检测 IO 状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-diskstats --show-timestamps<br></code></pre></td></tr></table></figure><p>其中几个关键值含义如下(更详细的请参考官方文档 <a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-diskstats.html#output">https://www.percona.com/doc/percona-toolkit/LATEST/pt-diskstats.html#output</a>)</p><ul><li>rd_s: 每秒平均读取次数。这是发送到基础设备的 IO 请求数。通常，此数量少于应用程序发出的逻辑IO请求的数量。更多请求可能已排队到块设备，但是其中一些请求通常在发送到磁盘之前先进行合并。</li><li>rd_avkb: 读取的平均大小，以千字节为单位。</li><li>rd_mb_s: 每秒读取的平均兆字节数。</li><li>rd_mrg: 在发送到物理设备之前在队列调度程序中合并在一起的读取请求的百分比。</li><li>rd_rt: 读取操作的平均响应时间(以毫秒为单位)；这是端到端响应时间，包括在队列中花费的时间。这是发出 IO 请求的应用程序看到的响应时间，而不是块设备下的物理磁盘的响应时间。</li><li>busy: 设备至少有一个请求 wall-clock 时间的比例；等同于 <code>iostat</code> 的 <code>％util</code>。</li><li>in_prg: 正在进行的请求数。与读写并发是从可靠数字中生成的平均值不同，该数字是一个时样本，您可以看到它可能表示请求峰值，而不是真正的长期平均值。如果此数字很大，则从本质上讲意味着设备高负载运行。</li><li>ios_s: 物理设备的平均吞吐量，以每秒 IO 操作(IOPS)为单位。此列显示基础设备正在处理的总 IOPS；它是 rd_s 和 wr_s 的总和。</li><li>qtime: 平均排队时间；也就是说，请求在发送到物理设备之前在设备调度程序队列中花费的时间。</li><li>stime: 平均服务时间；也就是说，请求完成在队列中的等待之后，物理设备处理请求的时间。</li></ul><h3 id="8-5、重复索引优化"><a href="#8-5、重复索引优化" class="headerlink" title="8.5、重复索引优化"></a>8.5、重复索引优化</h3><p>pt-duplicate-key-checker 工具提供了对数据库重复索引和外键的自动查找功能，工具使用如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-duplicate-key-checker 127.0.0.1 --user root --ask-pass<br>Enter password:<br><br><span class="hljs-comment"># A software update is available:</span><br><span class="hljs-comment"># ########################################################################</span><br><span class="hljs-comment"># aaaaaa.aaaaaa_audit</span><br><span class="hljs-comment"># ########################################################################</span><br><br><span class="hljs-comment"># index_linkId is a duplicate of unique_linkId</span><br><span class="hljs-comment"># Key definitions:</span><br><span class="hljs-comment">#   KEY `index_linkId` (`link_id`)</span><br><span class="hljs-comment">#   UNIQUE KEY `unique_linkId` (`link_id`),</span><br><span class="hljs-comment"># Column types:</span><br><span class="hljs-comment">#         `link_id` bigint(20) not null comment &#x27;bdid&#x27;</span><br><span class="hljs-comment"># To remove this duplicate index, execute:</span><br>ALTER TABLE `aaaaaa.aaaaaa_audit` DROP INDEX `index_linkId`;<br><br><span class="hljs-comment"># ########################################################################</span><br><span class="hljs-comment"># Summary of indexes</span><br><span class="hljs-comment"># ########################################################################</span><br><br><span class="hljs-comment"># Size Duplicate Indexes   927420</span><br><span class="hljs-comment"># Total Duplicate Indexes  3</span><br><span class="hljs-comment"># Total Indexes            847</span><br></code></pre></td></tr></table></figure><h3 id="8-6、表统计"><a href="#8-6、表统计" class="headerlink" title="8.6、表统计"></a>8.6、表统计</h3><p>pt-find 是一个很方便的表查找统计工具，默认的一些选项可以实现批量查找符合条件的表，甚至执行一些 SQL 处理命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 批量查找大于 5G 的表，并排序</span><br>pt-find --host 127.0.0.1 --user root --ask-pass --tablesize +5G | <span class="hljs-built_in">sort</span> -rn<br>Enter password: <br><br>`rss_service`.`test_feed_news`<br>`db_log_history`.`test_mobile_click_201912`<br>`db_log_history`.`test_mobile_click_201911`<br>`db_log_history`.`test_mobile_click_201910`<br>`test_dix`.`test_user_messages`<br>`test_dix`.`test_user_link_history`<br>`test_dix`.`test_mobile_click`<br>`test_dix`.`test_message`<br>`test_dix`.`test_link_votes`<br>`test_dix`.`test_links_mobile_content`<br>`test_dix`.`test_links`<br>`test_dix`.`test_comment_votes`<br>`test_dix`.`test_comments`<br></code></pre></td></tr></table></figure><p>如果想要定制输出可以采用 <code>--printf</code> 选项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">pt-find --host 127.0.0.1 --user root --ask-pass --tablesize +5G --<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%T\t%D.%N\n&quot;</span> | <span class="hljs-built_in">sort</span> -rn<br>Enter password: <br><br>13918404608     `test_dix`.`test_links_mobile_content`<br>13735231488     `test_dix`.`test_comment_votes`<br>12633227264     `test_dix`.`test_user_messages`<br>12610174976     `test_dix`.`test_user_link_history`<br>10506305536     `test_dix`.`test_links`<br>9686745088      `test_dix`.`test_message`<br>9603907584      `rss_service`.`test_feed_news`<br>9004122112      `db_log_history`.`test_mobile_click_201910`<br>8919007232      `test_dix`.`test_comments`<br>8045707264      `db_log_history`.`test_mobile_click_201912`<br>7855915008      `db_log_history`.`test_mobile_click_201911`<br>6099566592      `test_dix`.`test_mobile_click`<br>5892898816      `test_dix`.`test_link_votes`<br></code></pre></td></tr></table></figure><p><strong>遗憾的是目前 <code>printf</code> 格式来源与 Perl 的 <code>sprintf</code> 函数，所以支持格式有限，不过简单的格式定制已经基本实现，复杂的建议通过 awk 处理</strong>；其他的可选参数具体参考官方文档 <a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-find.html">https://www.percona.com/doc/percona-toolkit/LATEST/pt-find.html</a></p><h3 id="8-7、其他命令"><a href="#8-7、其他命令" class="headerlink" title="8.7、其他命令"></a>8.7、其他命令</h3><p>迫于篇幅，其他更多的高级命令请自行查阅官方文档 <a href="https://www.percona.com/doc/percona-toolkit/LATEST/index.html">https://www.percona.com/doc/percona-toolkit/LATEST/index.html</a></p>]]></content>
    
    
    <summary type="html">最近被拉去折腾 MySQL 了，Kuberntes 相关的文章停更了好久... MySQL 折腾完了顺便记录一下折腾过程，值得注意的是本篇文章从实际生产环境文档中摘录，部分日志和数据库敏感信息已被胡乱替换，所以不要盲目复制粘贴。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    <category term="Database" scheme="https://mritd.com/categories/linux/database/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="MySQL" scheme="https://mritd.com/tags/mysql/"/>
    
    <category term="Percona" scheme="https://mritd.com/tags/percona/"/>
    
  </entry>
  
  <entry>
    <title>Writing Plugin for Coredns</title>
    <link href="https://mritd.com/2019/11/05/writing-plugin-for-coredns/"/>
    <id>https://mritd.com/2019/11/05/writing-plugin-for-coredns/</id>
    <published>2019-11-05T12:57:41.000Z</published>
    <updated>2019-11-05T12:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前测试环境中有很多个 DNS 服务器，不同项目组使用的 DNS 服务器不同，但是不可避免的他们会访问一些公共域名；老的 DNS 服务器都是 dnsmasq，改起来很麻烦，最近研究了一下 CoreDNS，通过编写插件的方式可以实现让多个 CoreDNS 实例实现分布式的统一控制，以下记录了插件编写过程</p></blockquote><h2 id="一、CoreDNS-简介"><a href="#一、CoreDNS-简介" class="headerlink" title="一、CoreDNS 简介"></a>一、CoreDNS 简介</h2><p>CoreDNS 目前是 CNCF 旗下的项目(已毕业)，为 Kubernetes 等云原生环境提供可靠的 DNS 服务发现等功能；官网的描述只有一句话: <strong>CoreDNS: DNS and Service Discovery</strong>，而实际上分析源码以后发现 CoreDNS 实际上是基于 Caddy (一个现代化的负载均衡器)而开发的，通过插件式注入，并监听 TCP&#x2F;UDP 端口提供 DNS 服务；<strong>得益于 Caddy 的插件机制，CoreDNS 支持自行编写插件，拦截 DNS 请求然后处理，</strong>通过这个插件机制你可以在 CoreDNS 上实现各种功能，比如构建分布式一致性的 DNS 集群、动态的 DNS 负载均衡等等</p><h2 id="二、CoreDNS-插件规范"><a href="#二、CoreDNS-插件规范" class="headerlink" title="二、CoreDNS 插件规范"></a>二、CoreDNS 插件规范</h2><h3 id="2-1、插件模式"><a href="#2-1、插件模式" class="headerlink" title="2.1、插件模式"></a>2.1、插件模式</h3><p>CoreDNS 插件编写目前有两种方式:</p><ul><li>深度耦合 CoreDNS，使用 Go 编写插件，直接编译进 CoreDNS 二进制文件</li><li>通过 GRPC 解耦，任意语言编写 GRPC 接口实现，CoreDNS 通过 GRPC 与插件交互</li></ul><p>由于 GRPC 链接实际上借助于 CoreDNS 的 GRPC 插件，同时 GRPC 会有网络开销，TCP 链接不稳定可能造成 DNS 响应过慢等问题，所以本文只介绍如何使用 Go 编写 CoreDNS 的插件，这种插件将直接编译进 CoreDNS 二进制文件中</p><h3 id="2-2、插件注册"><a href="#2-2、插件注册" class="headerlink" title="2.2、插件注册"></a>2.2、插件注册</h3><p>在通常情况下，插件中应当包含一个 <code>setup.go</code> 文件，这个文件的 <code>init</code> 方法调用插件注册，类似这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123; <br>    plugin.Register(<span class="hljs-string">&quot;gdns&quot;</span>, setup) <br>&#125;<br></code></pre></td></tr></table></figure><p>注册方法的第一个参数是插件名称，第二个是一个 func，func 签名如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SetupFunc is used to set up a plugin, or in other words,</span><br><span class="hljs-comment">// execute a directive. It will be called once per key for</span><br><span class="hljs-comment">// each server block it appears in.</span><br><span class="hljs-keyword">type</span> SetupFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *Controller)</span></span> <span class="hljs-type">error</span><br></code></pre></td></tr></table></figure><p><strong>在这个 SetupFunc 中，插件编写者应当通过 <code>*Controller</code> 拿到 CoreDNS 的配置并解析它，从而完成自己插件的初始化配置；</strong>比如你的插件需要连接 Etcd，那么在这个方法里你要通过 <code>*Controller</code> 遍历配置，拿到 Etcd 的地址、证书、用户名密码配置等信息；</p><p>如果配置信息没有问题，该插件应当初始化完成；如果有问题就报错退出，然后整个 CoreDNS 启动失败；如果插件初始化完成，最后不要忘记将自己的插件加入到整个插件链路中(CoreDNS 根据情况逐个调用)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setup</span><span class="hljs-params">(c *caddy.Controller)</span></span> <span class="hljs-type">error</span> &#123;<br>e, err := etcdParse(c)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> plugin.Error(<span class="hljs-string">&quot;gdns&quot;</span>, err)<br>&#125;<br><br>dnsserver.GetConfig(c).AddPlugin(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(next plugin.Handler)</span></span> plugin.Handler &#123;<br>e.Next = next<br><span class="hljs-keyword">return</span> e<br>&#125;)<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、插件结构体"><a href="#2-3、插件结构体" class="headerlink" title="2.3、插件结构体"></a>2.3、插件结构体</h3><p>一般来说，每一个插件都会定义一个结构体，<strong>结构体中包含必要的 CoreDNS 内置属性，以及当前插件特性的相关配置；</strong>一个样例的插件结构体如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GDNS <span class="hljs-keyword">struct</span> &#123;<br>  <span class="hljs-comment">// Next 属性在 Setup 之后会被设置到下一个插件的引用，以便在本插件解析失败后可以交由下面的插件继续解析</span><br>Next       plugin.Handler<br><span class="hljs-comment">// Fall 列表用来控制哪些域名的请求解析失败后可以继续穿透到下一个插件重新处理</span><br>Fall       fall.F<br><span class="hljs-comment">// Zones 表示当前插件应该 case 哪些域名的 DNS 请求</span><br>Zones      []<span class="hljs-type">string</span><br><br><span class="hljs-comment">// PathPrefix 和 Client 就是插件本身的业务属性了，由于插件要连 Etcd</span><br><span class="hljs-comment">// PathPrefix 就是 Etcd 目录前缀，Client 是一个 Etcd 的 client</span><br><span class="hljs-comment">// endpoints 是 Etcd api 端点的地址</span><br>PathPrefix <span class="hljs-type">string</span><br>Client     *etcdcv3.Client<br>endpoints []<span class="hljs-type">string</span> <span class="hljs-comment">// Stored here as well, to aid in testing.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4、插件接口"><a href="#2-4、插件接口" class="headerlink" title="2.4、插件接口"></a>2.4、插件接口</h3><p>一个 Go 编写的 CoreDNS 插件实际上只需要实现一个 <code>Handler</code> 接口既可，接口定义如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Handler is like dns.Handler except ServeDNS may return an rcode</span><br><span class="hljs-comment">// and/or error.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If ServeDNS writes to the response body, it should return a status</span><br><span class="hljs-comment">// code. CoreDNS assumes *no* reply has yet been written if the status</span><br><span class="hljs-comment">// code is one of the following:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// * SERVFAIL (dns.RcodeServerFailure)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// * REFUSED (dns.RecodeRefused)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// * FORMERR (dns.RcodeFormatError)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// * NOTIMP (dns.RcodeNotImplemented)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// All other response codes signal other handlers above it that the</span><br><span class="hljs-comment">// response message is already written, and that they should not write</span><br><span class="hljs-comment">// to it also.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If ServeDNS encounters an error, it should return the error value</span><br><span class="hljs-comment">// so it can be logged by designated error-handling plugin.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If writing a response after calling another ServeDNS method, the</span><br><span class="hljs-comment">// returned rcode SHOULD be used when writing the response.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If handling errors after calling another ServeDNS method, the</span><br><span class="hljs-comment">// returned error value SHOULD be logged or handled accordingly.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Otherwise, return values should be propagated down the plugin</span><br><span class="hljs-comment">// chain by returning them unchanged.</span><br>Handler <span class="hljs-keyword">interface</span> &#123;<br>ServeDNS(context.Context, dns.ResponseWriter, *dns.Msg) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>)<br>Name() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>ServeDNS</code> 方法是插件需要实现的主要逻辑方法，DNS 请求接受后会从这个方法传入，插件编写者需要实现查询并返回结果</li><li><code>Name</code> 方法只返回一个插件名称标识，具体作用记不太清楚，好像是为了判断插件命名唯一性然后做链式顺序调用的，原则只要你不跟系统插件重名就行</li></ul><p><strong>基本逻辑就是在 setup 阶段通过配置文件创建你的插件结构体对象；然后插件结构体实现这个 <code>Handler</code> 接口，运行期 CoreDNS 会调用接口的 <code>ServeDNS</code> 方法来向插件查询 DNS 请求</strong></p><h3 id="2-5、ServeDNS-方法"><a href="#2-5、ServeDNS-方法" class="headerlink" title="2.5、ServeDNS 方法"></a>2.5、ServeDNS 方法</h3><p>ServeDNS 方法入参有 3 个:</p><ul><li><code>context.Context</code> 用来控制超时等情况的 context</li><li><code>dns.ResponseWriter</code> 插件通过这个对象写入对 Client DNS 请求的响应结果</li><li><code>*dns.Msg</code> 这个是 Client 发起的 DNS 请求，插件负责处理它，比如当你发现请求类型是 <code>AAAA</code> 而你的插件又不想去支持时要如何返回结果</li></ul><p>对于返回结果，插件编写者应当通过 <code>dns.ResponseWriter.WriteMsg</code> 方法写入返回结果，基本代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ServeDNS implements the plugin.Handler interface.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gDNS *GDNS)</span></span> ServeDNS(ctx context.Context, w dns.ResponseWriter, r *dns.Msg) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><br><span class="hljs-comment">// ...... 这里应当实现你的业务逻辑，查找相应的 DNS 记录</span><br><br><span class="hljs-comment">// 最后通过 new 一个 dns.Msg 作为返回结果</span><br>resp := <span class="hljs-built_in">new</span>(dns.Msg)<br>resp.SetReply(r)<br>resp.Authoritative = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// records 是真正的记录结果，应当在业务逻辑区准备好</span><br>resp.Answer = <span class="hljs-built_in">append</span>(resp.Answer, records...)<br><br><span class="hljs-comment">// 返回结果</span><br>err = w.WriteMsg(resp)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Error(err)<br>&#125;<br><br>   <span class="hljs-comment">// 告诉 CoreDNS 是否处理成功</span><br><span class="hljs-keyword">return</span> dns.RcodeSuccess, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需要注意的是，无论根据业务逻辑是否查询到 DNS 记录，都要返回响应结果(没有就返回空)，错误或者未返回将会导致 Client 端查询 DNS 超时，然后不断重试，最终可能导致 Client 端服务故障</strong></p><h3 id="2-6、Name-方法"><a href="#2-6、Name-方法" class="headerlink" title="2.6、Name 方法"></a>2.6、Name 方法</h3><p><code>Name</code> 方法非常简单，只需要返回当前插件名称既可；该方法的作用是为了其他插件判断本插件是否加载等情况</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Name implements the Handler interface.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gDNS *GDNS)</span></span> Name() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gdns&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="三、CoreDNS-插件处理"><a href="#三、CoreDNS-插件处理" class="headerlink" title="三、CoreDNS 插件处理"></a>三、CoreDNS 插件处理</h2><p>对于实际的业务处理，可以通过 <code>case</code> 请求 <code>QType</code> 来做具体的业务实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ServeDNS implements the plugin.Handler interface.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gDNS *GDNS)</span></span> ServeDNS(ctx context.Context, w dns.ResponseWriter, r *dns.Msg) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>state := request.Request&#123;W: w, Req: r&#125;<br>zone := plugin.Zones(gDNS.Zones).Matches(state.Name())<br><span class="hljs-keyword">if</span> zone == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> plugin.NextOrFailure(gDNS.Name(), gDNS.Next, ctx, w, r)<br>&#125;<br><br><span class="hljs-comment">// ...业务处理</span><br><span class="hljs-keyword">switch</span> state.QType() &#123;<br><span class="hljs-keyword">case</span> dns.TypeA:<br><span class="hljs-comment">// A 记录查询业务逻辑</span><br><span class="hljs-keyword">case</span> dns.TypeAAAA:<br><span class="hljs-comment">// AAAA 记录查询业务逻辑</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>resp := <span class="hljs-built_in">new</span>(dns.Msg)<br>resp.SetReply(r)<br>resp.Authoritative = <span class="hljs-literal">true</span><br>resp.Answer = <span class="hljs-built_in">append</span>(resp.Answer, records...)<br>err = w.WriteMsg(resp)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Error(err)<br>&#125;<br><br><span class="hljs-keyword">return</span> dns.RcodeSuccess, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、插件编译及测试"><a href="#四、插件编译及测试" class="headerlink" title="四、插件编译及测试"></a>四、插件编译及测试</h2><h3 id="4-1、官方标准操作"><a href="#4-1、官方标准操作" class="headerlink" title="4.1、官方标准操作"></a>4.1、官方标准操作</h3><p>根据官方文档的描述，当你编写好插件以后，<strong>你的插件应当提交到一个 Git 仓库中，可以使 Github 等(保证可以 <code>go get</code> 拉取就行)，然后修改 <code>plugin.cfg</code>，最后执行 <code>make</code> 既可</strong>；具体修改如下所示</p><p><img src="https://cdn.oss.link/markdown/vey4u.png" alt="plugin.cfg"></p><p><strong>值得注意的是: 插件配置在 <code>plugin.cfg</code> 内的顺序决定了插件的执行顺序；通俗的讲，如果 Client 的一个 DNS 请求进来，CoreDNS 根据你在 <code>plugin.cfg</code> 内书写的顺序依次调用，而并非 <code>Corefile</code> 内的配置顺序</strong></p><p>配置好以后直接执行 <code>make</code> 既可编译成功一个包含自定义插件的 CoreDNS 二进制文件(编译过程的 <code>go mod</code> 下载加速问题不在本文讨论范围内)；你可以直接通过这个二进制测试插件的处理情况，当然这种测试不够直观，而且频繁修改由于 <code>go mod</code> 缓存等原因并不一定能保证每次编译的都包含最新插件代码，所以另一种方式请看下一章节</p><h3 id="4-2、经验性的操作"><a href="#4-2、经验性的操作" class="headerlink" title="4.2、经验性的操作"></a>4.2、经验性的操作</h3><p>根据个人测试以及对源码的分析，在修改 <code>plugin.cfg</code> 然后执行 <code>make</code> 命令后，实际上是进行了代码生成；当你通过 git 命令查看相关修改文件时，整个插件加载体系便没什么秘密可言了；<strong>在整个插件体系中，插件加载是通过 <code>init</code> 方法注册的，那么既然用 go 写插件，那么应该清楚 <code>init</code> 方法只有在包引用之后才会执行，所以整个插件体系实际上是这样事儿的:</strong></p><p>首先 <code>make</code> 以后会修改 <code>core/plugin/zplugin.go</code> 文件，这个文件啥也不干，就是 <code>import</code> 来实现调用对应包的 <code>init</code> 方法</p><p><img src="https://cdn.oss.link/markdown/ny1rz.png" alt="zplugin.go"></p><p>当 <code>init</code> 执行后你去追源码，实际上就是 Caddy 维护了一个 <code>map[string]Plugin</code>，<code>init</code> 会把你的插件 func 塞进去然后后面再调用，实现一个懒加载或者说延迟初始化</p><p><img src="https://cdn.oss.link/markdown/idno4.png" alt="caddy_plugin"></p><p>接着修改了一下 <code>core/dnsserver/zdirectives.go</code>，这个里面也没啥，就是一个 <code>[]string</code>，<strong>但是 <code>[]string</code> 这玩意有顺序啊，这就是为什么你在 <code>plugin.cfg</code> 里写的顺序决定了插件处理顺序的原因(因为生成的这个切片有顺序)</strong></p><p><img src="https://cdn.oss.link/markdown/bixos.png" alt="zdirectives.go"></p><p>综上所述，实际上 <code>make</code> 命令一共修改了两个文件，如果想在 IDE 内直接 debug CoreDNS + Plugin 源码，那么只需要这样做:</p><p>复制自己编写的插件目录到 <code>plugin</code> 目录，类似这样</p><p><img src="https://cdn.oss.link/markdown/whwuy.png" alt="gdns"></p><p>手动修改 <code>core/plugin/zplugin.go</code>，加入自己插件的 <code>import</code>(此时你直接复制系统其他插件，改一下目录名既可)</p><p><img src="https://cdn.oss.link/markdown/g7wp0.png" alt="update_zplugin"></p><p>手动修改 <code>core/dnsserver/zdirectives.go</code> 把自己插件名称写进去(自己控制顺序)，然后 debug 启动 <code>coredns.go</code> 里面的 main 方法测试既可</p><p><img src="https://cdn.oss.link/markdown/4ucqg.png" alt="coredns.go"></p><h2 id="五、本文参考"><a href="#五、本文参考" class="headerlink" title="五、本文参考"></a>五、本文参考</h2><ul><li>Writing Plugins for CoreDNS: <a href="https://coredns.io/2016/12/19/writing-plugins-for-coredns">https://coredns.io/2016/12/19/writing-plugins-for-coredns</a></li><li>how-to-add-plugins.md: <a href="https://github.com/coredns/coredns.io/blob/master/content/blog/how-to-add-plugins.md">https://github.com/coredns/coredns.io/blob/master/content/blog/how-to-add-plugins.md</a></li><li>example plugin: <a href="https://github.com/coredns/example">https://github.com/coredns/example</a></li></ul>]]></content>
    
    
    <summary type="html">目前测试环境中有很多个 DNS 服务器，不同项目组使用的 DNS 服务器不同，但是不可避免的他们会访问一些公共域名；老的 DNS 服务器都是 dnsmasq，改起来很麻烦，最近研究了一下 CoreDNS，通过编写插件的方式可以实现让多个 CoreDNS 实例实现分布式的统一控制，以下记录了插件编写过程</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
    <category term="CoreDNS" scheme="https://mritd.com/tags/coredns/"/>
    
  </entry>
  
  <entry>
    <title>Golang Etcd Client Example</title>
    <link href="https://mritd.com/2019/10/15/golang-etcd-client-example/"/>
    <id>https://mritd.com/2019/10/15/golang-etcd-client-example/</id>
    <published>2019-10-15T04:21:07.000Z</published>
    <updated>2019-10-15T04:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>准备开发点东西，需要用到 Etcd，由于生产 Etcd 全部开启了 TLS 加密，所以客户端需要相应修改，以下为 Golang 链接 Etcd 并且使用客户端证书验证的样例代码</p></blockquote><h2 id="API-V2"><a href="#API-V2" class="headerlink" title="API V2"></a>API V2</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;crypto/tls&quot;</span><br><span class="hljs-string">&quot;crypto/x509&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;go.etcd.io/etcd/client&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 为了保证 HTTPS 链接可信，需要预先加载目标证书签发机构的 CA 根证书</span><br>etcdCA, err := ioutil.ReadFile(<span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd-root-ca.pem&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// etcd 启用了双向 TLS 认证，所以客户端证书同样需要加载</span><br>etcdClientCert, err := tls.LoadX509KeyPair(<span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd.pem&quot;</span>, <span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd-key.pem&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// 创建一个空的 CA Pool</span><br><span class="hljs-comment">// 因为后续只会链接 Etcd 的 api 端点，所以此处选择使用空的 CA Pool，然后只加入 Etcd CA 既可</span><br><span class="hljs-comment">// 如果期望链接其他 TLS 端点，那么最好使用 x509.SystemCertPool() 方法先 copy 一份系统根 CA</span><br><span class="hljs-comment">// 然后再向这个 Pool 中添加自定义 CA</span><br>rootCertPool := x509.NewCertPool()<br>rootCertPool.AppendCertsFromPEM(etcdCA)<br><br>cfg := client.Config&#123;<br><span class="hljs-comment">// Etcd HTTPS api 端点</span><br>Endpoints: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;https://172.16.14.114:2379&quot;</span>&#125;,<br><span class="hljs-comment">// 自定义 Transport 实现自签 CA 加载以及 Client Cert 加载</span><br><span class="hljs-comment">// 其他参数最好从 client.DefaultTranspor copy，以保证与默认 client 相同的行为</span><br>Transport: &amp;http.Transport&#123;<br>Proxy: http.ProxyFromEnvironment,<br><span class="hljs-comment">// Dial 方法已被启用，采用新的 DialContext 设置超时</span><br>DialContext: (&amp;net.Dialer&#123;<br>KeepAlive: <span class="hljs-number">30</span> * time.Second,<br>Timeout:   <span class="hljs-number">30</span> * time.Second,<br>&#125;).DialContext,<br><span class="hljs-comment">// 自定义 CA 及 Client Cert 配置</span><br>TLSClientConfig: &amp;tls.Config&#123;<br>RootCAs:      rootCertPool,<br>Certificates: []tls.Certificate&#123;etcdClientCert&#125;,<br>&#125;,<br>TLSHandshakeTimeout: <span class="hljs-number">10</span> * time.Second,<br>&#125;,<br><span class="hljs-comment">// set timeout per request to fail fast when the target endpoint is unavailable</span><br>HeaderTimeoutPerRequest: time.Second,<br>&#125;<br>c, err := client.New(cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>kapi := client.NewKeysAPI(c)<br><span class="hljs-comment">// set &quot;/foo&quot; key with &quot;bar&quot; value</span><br>log.Print(<span class="hljs-string">&quot;Setting &#x27;/foo&#x27; key with &#x27;bar&#x27; value&quot;</span>)<br>resp, err := kapi.Set(context.Background(), <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// print common key info</span><br>log.Printf(<span class="hljs-string">&quot;Set is done. Metadata is %q\n&quot;</span>, resp)<br>&#125;<br><span class="hljs-comment">// get &quot;/foo&quot; key&#x27;s value</span><br>log.Print(<span class="hljs-string">&quot;Getting &#x27;/foo&#x27; key value&quot;</span>)<br>resp, err = kapi.Get(context.Background(), <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// print common key info</span><br>log.Printf(<span class="hljs-string">&quot;Get is done. Metadata is %q\n&quot;</span>, resp)<br><span class="hljs-comment">// print value</span><br>log.Printf(<span class="hljs-string">&quot;%q key has %q value\n&quot;</span>, resp.Node.Key, resp.Node.Value)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="API-V3"><a href="#API-V3" class="headerlink" title="API V3"></a>API V3</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;crypto/tls&quot;</span><br><span class="hljs-string">&quot;crypto/x509&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;go.etcd.io/etcd/clientv3&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 为了保证 HTTPS 链接可信，需要预先加载目标证书签发机构的 CA 根证书</span><br>etcdCA, err := ioutil.ReadFile(<span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd-root-ca.pem&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// etcd 启用了双向 TLS 认证，所以客户端证书同样需要加载</span><br>etcdClientCert, err := tls.LoadX509KeyPair(<span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd.pem&quot;</span>, <span class="hljs-string">&quot;/Users/mritd/tmp/etcd_ssl/etcd-key.pem&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br><span class="hljs-comment">// 创建一个空的 CA Pool</span><br><span class="hljs-comment">// 因为后续只会链接 Etcd 的 api 端点，所以此处选择使用空的 CA Pool，然后只加入 Etcd CA 既可</span><br><span class="hljs-comment">// 如果期望链接其他 TLS 端点，那么最好使用 x509.SystemCertPool() 方法先 copy 一份系统根 CA</span><br><span class="hljs-comment">// 然后再向这个 Pool 中添加自定义 CA</span><br>rootCertPool := x509.NewCertPool()<br>rootCertPool.AppendCertsFromPEM(etcdCA)<br><br><span class="hljs-comment">// 创建 api v3 的 client</span><br>cli, err := clientv3.New(clientv3.Config&#123;<br><span class="hljs-comment">// etcd https api 端点</span><br>Endpoints:   []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;https://172.16.14.114:2379&quot;</span>&#125;,<br>DialTimeout: <span class="hljs-number">5</span> * time.Second,<br><span class="hljs-comment">// 自定义 CA 及 Client Cert 配置</span><br>TLS: &amp;tls.Config&#123;<br>RootCAs:      rootCertPool,<br>Certificates: []tls.Certificate&#123;etcdClientCert&#125;,<br>&#125;,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; _ = cli.Close() &#125;()<br><br>ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">3</span>*time.Second)<br>putResp, err := cli.Put(ctx, <span class="hljs-string">&quot;sample_key&quot;</span>, <span class="hljs-string">&quot;sample_value&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Println(putResp)<br>&#125;<br>cancel()<br><br>ctx, cancel = context.WithTimeout(context.Background(), <span class="hljs-number">3</span>*time.Second)<br>delResp, err := cli.Delete(ctx, <span class="hljs-string">&quot;sample_key&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Println(delResp)<br>&#125;<br>cancel()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">准备开发点东西，需要用到 Etcd，由于生产 Etcd 全部开启了 TLS 加密，所以客户端需要相应修改，以下为 Golang 链接 Etcd 并且使用客户端证书验证的样例代码</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
    <category term="etcd" scheme="https://mritd.com/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Podman 初试 - 容器发展史</title>
    <link href="https://mritd.com/2019/06/26/podman-history-of-container/"/>
    <id>https://mritd.com/2019/06/26/podman-history-of-container/</id>
    <published>2019-06-26T15:22:49.000Z</published>
    <updated>2019-06-26T15:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇纯介绍性文章，本文不包含任何技术层面的操作，本文仅作为后续 Podman 文章铺垫；本文细节部份并未阐述，很多地方并不详实(一家只谈，不可轻信)。</p></blockquote><h2 id="一、缘起"><a href="#一、缘起" class="headerlink" title="一、缘起"></a>一、缘起</h2><h3 id="1-1、鸿蒙"><a href="#1-1、鸿蒙" class="headerlink" title="1.1、鸿蒙"></a>1.1、鸿蒙</h3><p>在上古时期，天地初开，一群称之为 “运维” 的人们每天在一种叫作 “服务器” 的神秘盒子中创造属于他们的世界；他们在这个世界中每日劳作，一遍又一遍的写入他们的历史，比如搭建一个 nginx、布署一个 java web 应用…</p><p>大多数人其实并没有那么聪明，他们所 “创造” 的事实上可能是有人已经创造过的东西，他们可能每天都在做着重复的劳动；久而久之，一些人厌倦了、疲惫了…又过了一段时间，一些功力深厚的老前辈创造了一些批量布署工具来帮助人们做一些重复性的劳动，这些工具被起名为 “Asible”、”Chef”、”Puppet” 等等…</p><p>而随着时代的发展，”世界” 变得越来越复杂，运维们需要处理的事情越来越多，比如各种网络、磁盘环境的隔离，各种应用服务的高可用…在时代的洪流下，运维们急需要一种简单高效的布署工具，既能有一定的隔离性，又能方便使用，并且最大程度降低重复劳动来提升效率。</p><h3 id="1-2、创世"><a href="#1-2、创世" class="headerlink" title="1.2、创世"></a>1.2、创世</h3><p>在时代洪流的冲击下，一位名为 “Solomon Hykes” 的人异军突起，他创造了一个称之为 Docker 的工具，Docker 被创造以后就以灭世之威向运维们展示了它的强大；一个战斗力只有 5 的运维只需要学习 Docker 很短时间就可以完成资深运维们才能完成的事情，在某些情况下以前需要 1 天才能完成的工作使用 Docker 后几分钟就可以完成；此时运维们已经意识到 “新的时代” 开启了，接下来 Docker 开源并被整个运维界人们使用，Docker 也不断地完善增加各种各样的功能，此后世界正式进入 “容器纪元”。</p><h2 id="二、纷争"><a href="#二、纷争" class="headerlink" title="二、纷争"></a>二、纷争</h2><h3 id="2-1、发展"><a href="#2-1、发展" class="headerlink" title="2.1、发展"></a>2.1、发展</h3><p>随着 Docker 的日益成熟，一些人开始在 Docker 之上创造更加强大的工具，一些人开始在 Docker 之下为其提供更稳定的运行环境…</p><p>其中一个叫作 Google 的公司在 Docker 之上创建了名为 “Kubernetes” 的工具，Kubernetes 操纵 Docker 完成更加复杂的任务；Kubernetes 的出现更加印证了 Docker 的强大，以及 “容器纪元” 的发展正确性。</p><h3 id="2-2、野心"><a href="#2-2、野心" class="headerlink" title="2.2、野心"></a>2.2、野心</h3><p>当然这是一个充满利益的世界，Google 公司创造 Kubernetes 是可以为他们带来利益的，比如他们可以让 Kubernetes 深度适配他们的云平台，以此来增加云平台的销量等；此时 Docker 创始人也成立了一个公司，提供 Docker 的付费服务以及深度定制等；不过值得一提的是 Docker 公司提供的付费服务始终没有 Kubernetes 为 Google 公司带来的利益高，所以在利益的驱使下，Docker 公司开始动起了歪心思: <strong>创造一个 Kubernetes 的替代品，利用用户粘度复制 Kubernetes 的成功，从 Google 嘴里抢下这块蛋糕！</strong>此时 Docker 公司只想把蛋糕抢过来，但是他们根本没有在意到暗中一群人创造了一个叫 “rkt” 的东西也在妄图夺走他们嘴里的蛋糕。</p><h3 id="2-3、冲突"><a href="#2-3、冲突" class="headerlink" title="2.3、冲突"></a>2.3、冲突</h3><p>在一段时间的沉默后，Docker 公司又创造了 “Swarm” 这个工具，妄图夺走 Google 公司利用 Kubernetes 赢来的蛋糕；当然，Google 这个公司极其庞大，人数众多，而且在这个社会有很大的影响地位…</p><p>终于，巨人苏醒了，Google 联合了 Redhat、Microsoft、IBM、Intel、Cisco 等公司决定对这个爱动歪脑筋的 Docker 公司进行制裁；当然制裁的手段不能过于暴力，那样会让别人落下把柄，成为别人的笑料，被人所不耻；<strong>最总他们决定制订规范，成立组织，明确规定 Docker 的角色，以及它应当拥有的能力，这些规范包括但不限于 <code>CRI</code>、<code>CNI</code> 等；自此之后各大公司宣布他们容器相关的工具只兼容 CRI 等相关标准，无论是 Docker 还是 rkt 等工具，只要实现了这些标准，就可以配合这些容器工具进行使用</strong>。</p><h2 id="三、成败"><a href="#三、成败" class="headerlink" title="三、成败"></a>三、成败</h2><p>自此之后，Docker 跌下神坛，各路大神纷纷创造满足 CRI 等规范的工具用来取代 Docker，Docker 丢失了往日一家独大的场面，最终为了顺应时代发展，拆分自己成为模块化组件；这些模块化组件被放置在 <a href="https://mobyproject.org/">mobyproject</a> 中方便其他人重复利用。</p><p>时至今日，虽然 Docker 已经不负以前，但是仍然是容器化首选工具，因为 Docker 是一个完整的产品，它可以提供除了满足 CRI 等标准以外更加方便的功能；但是制裁并非没有结果，Google 公司借此创造了 cri-o 用来满足 CRI 标准，其他公司也相应创建了对应的 CRI 实现；<strong>为了进一步分化 Docker 势力，一个叫作 Podman 的工具被创建，它以 cri-o 为基础，兼容大部份 Docker 命令的方式开始抢夺 Dcoker 用户</strong>；到目前为止 Podman 已经可以在大部份功能上替代 Docker。</p>]]></content>
    
    
    <summary type="html">这是一篇纯介绍性文章，本文不包含任何技术层面的操作，本文仅作为后续 Podman 文章铺垫；本文细节部份并未阐述，很多地方并不详实(一家只谈，不可轻信)。</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Podman" scheme="https://mritd.com/tags/podman/"/>
    
  </entry>
  
  <entry>
    <title>Calico 3.6 转发外部流量到集群 Pod</title>
    <link href="https://mritd.com/2019/06/18/calico-3.6-forward-network-traffic/"/>
    <id>https://mritd.com/2019/06/18/calico-3.6-forward-network-traffic/</id>
    <published>2019-06-18T14:20:54.000Z</published>
    <updated>2019-06-18T14:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于开发有部份服务使用 GRPC 进行通讯，同时采用 Consul 进行服务发现；在微服务架构下可能会导致一些访问问题，目前解决方案就是打通开发环境网络与测试环境 Kubernetes 内部 Pod 网络；翻了好多资料发现都是 2.x 的，而目前测试集群 Calico 版本为 3.6.3，很多文档都不适用只能自己折腾，目前折腾完了这里记录一下</p></blockquote><p><strong>本文默认为读者已经存在一个运行正常的 Kubernetes 集群，并且采用 Calico 作为 CNI 组件，且 Calico 工作正常；同时应当在某个节点完成了 calicoctl 命令行工具的配置</strong></p><h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>在微服务架构下，由于服务组件很多，开发在本地机器想测试应用需要启动整套服务，这对开发机器的性能确实是个考验；但如果直接连接测试环境的服务，由于服务发现问题最终得到的具体服务 IP 是 Kubernetes Pod IP，此 IP 由集群内部 Calico 维护与分配，外部不可访问；最终目标为打通开发环境与集群内部网络，实现开发网络下直连 Pod IP，这或许在以后对生产服务暴露负载均衡有一定帮助意义；目前网络环境如下:</p><p>开发网段: <code>10.10.0.0/24</code><br>测试网段: <code>172.16.0.0/24</code><br>Kubernetes Pod 网段: <code>10.20.0.0/16</code></p><h2 id="二、打通网络"><a href="#二、打通网络" class="headerlink" title="二、打通网络"></a>二、打通网络</h2><p>首先面临的第一个问题是 Calico 处理，因为<strong>如果想要让数据包能从开发网络到达 Pod 网络，那么必然需要测试环境宿主机上的 Calico Node 帮忙转发</strong>；因为 Pod 网络由 Calico 维护，只要 Calico Node 帮忙转发那么数据一定可以到达 Pod IP 上；</p><p>一开始我很天真的认为这就是个 <code>ip route add 10.20.0.0/16 via 172.16.0.13</code> 的问题… 后来发现</p><p><img src="https://cdn.oss.link/markdown/hwp9s.jpg" alt="没那么简单"></p><p>经过翻文档、issue、blog 等最终发现需要进行以下步骤</p><h3 id="2-1、关闭全互联模式"><a href="#2-1、关闭全互联模式" class="headerlink" title="2.1、关闭全互联模式"></a>2.1、关闭全互联模式</h3><p><strong>注意: 关闭全互联时可能导致网络暂时中断，请在夜深人静时操作</strong></p><p>首先执行以下命令查看是否存在默认的 BGP 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl get bgpconfig default<br></code></pre></td></tr></table></figure><p>如果存在则将其保存为配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl get bgpconfig default -o yaml &gt; bgp.yaml<br></code></pre></td></tr></table></figure><p>修改其中的 <code>spec.nodeToNodeMeshEnabled</code> 为 <code>false</code>，然后进行替换</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl apply -f bgp.yaml<br></code></pre></td></tr></table></figure><p>如果不存在则手动创建一个配置，然后应用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"> <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | calicoctl create -f -</span><br><span class="hljs-string"> apiVersion: projectcalico.org/v3</span><br><span class="hljs-string"> kind: BGPConfiguration</span><br><span class="hljs-string"> metadata:</span><br><span class="hljs-string">   name: default</span><br><span class="hljs-string"> spec:</span><br><span class="hljs-string">   logSeverityScreen: Info</span><br><span class="hljs-string">   nodeToNodeMeshEnabled: false</span><br><span class="hljs-string">   asNumber: 63400</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>本部分参考: </p><ul><li><a href="https://docs.projectcalico.org/v3.6/networking/bgp">Disabling the full node-to-node BGP mesh</a></li></ul><h3 id="2-2、开启集群内-RR-模式"><a href="#2-2、开启集群内-RR-模式" class="headerlink" title="2.2、开启集群内 RR 模式"></a>2.2、开启集群内 RR 模式</h3><p>在 Calico 3.3 后支持了集群内节点的 RR 模式，即将某个集群内的 Calico Node 转变为 RR 节点；将某个节点设置为 RR 节点只需要增加 <code>routeReflectorClusterID</code> 既可，为了后面方便配置同时增加了一个 lable 字段 <code>route-reflector: &quot;true&quot;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl get node CALICO_NODE_NAME -o yaml &gt; node.yaml<br></code></pre></td></tr></table></figure><p>然后增加 <code>routeReflectorClusterID</code> 字段，样例如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">projectcalico.org/kube-labels:</span> <span class="hljs-string">&#x27;&#123;&quot;beta.kubernetes.io/arch&quot;:&quot;amd64&quot;,&quot;beta.kubernetes.io/os&quot;:&quot;linux&quot;,&quot;kubernetes.io/hostname&quot;:&quot;d13.node&quot;,&quot;node-role.kubernetes.io/k8s-master&quot;:&quot;true&quot;&#125;&#x27;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2019-06-17T13:55:44Z</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">beta.kubernetes.io/arch:</span> <span class="hljs-string">amd64</span><br>    <span class="hljs-attr">beta.kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-string">d13.node</span><br>    <span class="hljs-attr">node-role.kubernetes.io/k8s-master:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">route-reflector:</span> <span class="hljs-string">&quot;true&quot;</span>  <span class="hljs-comment"># 增加 lable</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">d13.node</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;61822269&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">9a1897e0-9107-11e9-bc1c-90b11c53d1e3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">bgp:</span><br>    <span class="hljs-attr">ipv4Address:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><span class="hljs-string">/19</span><br>    <span class="hljs-attr">ipv4IPIPTunnelAddr:</span> <span class="hljs-number">10.20</span><span class="hljs-number">.73</span><span class="hljs-number">.82</span><br>    <span class="hljs-attr">routeReflectorClusterID:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.20</span><span class="hljs-number">.1</span> <span class="hljs-comment"># 添加集群 ID</span><br>  <span class="hljs-attr">orchRefs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">nodeName:</span> <span class="hljs-string">d13.node</span><br>    <span class="hljs-attr">orchestrator:</span> <span class="hljs-string">k8s</span><br></code></pre></td></tr></table></figure><p><strong>事实上我们应当导出多个 Calico Node 的配置，并将其配置为 RR 节点以进行冗余；对于 <code>routeReflectorClusterID</code> 目前测试只是作为一个 ID(至少在本文是这样的)，所以理论上可以是任何 IP，个人猜测最好在同一集群网络下采用相同的 IP，由于这是真正的测试环境我没有对 ID 做过多的测试(怕玩挂)</strong></p><p>修改完成后只需要应用一下就行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl apply -f node.yaml<br></code></pre></td></tr></table></figure><p>接下来需要创建对等规则，规则文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">BGPPeer</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">peer-to-rrs</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">&quot;!has(route-reflector)&quot;</span><br>  <span class="hljs-attr">peerSelector:</span> <span class="hljs-string">has(route-reflector)</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">BGPPeer</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rr-mesh</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">has(route-reflector)</span><br>  <span class="hljs-attr">peerSelector:</span> <span class="hljs-string">has(route-reflector)</span><br></code></pre></td></tr></table></figure><p>假定规则文件名称为 <code>rr.yaml</code>，则创建命令为 <code>calicoctl create -f rr.yaml</code>；此时在 RR 节点上使用 <code>calicoctl node status</code> 应该能看到类似如下输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">Calico process is running.<br><br>IPv4 BGP status<br>+--------------+---------------+-------+----------+-------------+<br>| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |<br>+--------------+---------------+-------+----------+-------------+<br>| 172.16.0.19  | node specific | up    | 05:43:51 | Established |<br>| 172.16.0.16  | node specific | up    | 05:43:51 | Established |<br>| 172.16.0.17  | node specific | up    | 05:43:51 | Established |<br>| 172.16.0.13  | node specific | up    | 13:01:17 | Established |<br>+--------------+---------------+-------+----------+-------------+<br><br>IPv6 BGP status<br>No IPv6 peers found.<br></code></pre></td></tr></table></figure><p><strong><code>PEER ADDRESS</code> 应当包含所有非 RR 节点 IP(由于真实测试环境，以上输出已人为修改)</strong></p><p>同时在非 RR 节点上使用 <code>calicoctl node status</code> 应该能看到以下输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">Calico process is running.<br><br>IPv4 BGP status<br>+--------------+---------------+-------+----------+-------------+<br>| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |<br>+--------------+---------------+-------+----------+-------------+<br>| 172.16.0.10  | node specific | up    | 05:43:51 | Established |<br>| 172.16.0.13  | node specific | up    | 13:01:20 | Established |<br>+--------------+---------------+-------+----------+-------------+<br><br>IPv6 BGP status<br>No IPv6 peers found.<br></code></pre></td></tr></table></figure><p><strong><code>PEER ADDRESS</code> 应当包含所有 RR 节点 IP，此时原本的 Pod 网络连接应当已经恢复</strong></p><p>本部分参考:</p><ul><li><a href="https://www.projectcalico.org/how-does-in-cluster-route-reflection-work/">In-cluster Route Reflection</a></li><li><a href="https://docs.projectcalico.org/v3.6/networking/bgp">Configuring in-cluster route reflectors</a></li></ul><h3 id="2-3、调整-IPIP-规则"><a href="#2-3、调整-IPIP-规则" class="headerlink" title="2.3、调整 IPIP 规则"></a>2.3、调整 IPIP 规则</h3><p>先说一下 Calico IPIP 模式的三个可选项:</p><ul><li><code>Always</code>: 永远进行 IPIP 封装(默认)</li><li><code>CrossSubnet</code>: 只在跨网段时才进行 IPIP 封装，适合有 Kubernetes 节点在其他网段的情况，属于中肯友好方案</li><li><code>Never</code>: 从不进行 IPIP 封装，适合确认所有 Kubernetes 节点都在同一个网段下的情况</li></ul><p>在默认情况下，默认的 ipPool 启用了 IPIP 封装(至少通过官方安装文档安装的 Calico 是这样)，并且封装模式为 <code>Always</code>；这也就意味着任何时候都会在原报文上封装新 IP 地址，<strong>在这种情况下将外部流量路由到 RR 节点，RR 节点再转发进行 IPIP 封装时，可能出现网络无法联通的情况(没仔细追查，网络渣，猜测是 Pod 那边得到的源 IP 不对导致的)；</strong>此时我们应当调整 IPIP 封装策略为 <code>CrossSubnet</code></p><p>导出 ipPool 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">calicoctl get ippool default-ipv4-ippool -o yaml &gt; ippool.yaml<br></code></pre></td></tr></table></figure><p>修改 <code>ipipMode</code> 值为 <code>CrossSubnet</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IPPool</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2019-06-17T13:55:44Z</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default-ipv4-ippool</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;61858741&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">99a82055-9107-11e9-815b-b82a72dffa9f</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">blockSize:</span> <span class="hljs-number">26</span><br>  <span class="hljs-attr">cidr:</span> <span class="hljs-number">10.20</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>  <span class="hljs-attr">ipipMode:</span> <span class="hljs-string">CrossSubnet</span><br>  <span class="hljs-attr">natOutgoing:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">all()</span><br></code></pre></td></tr></table></figure><p>重新使用 <code>calicoctl apply -f ippool.yaml</code> 应用既可</p><p>本部分参考:</p><ul><li><a href="https://docs.projectcalico.org/v3.6/networking/ip-in-ip">Configuring IP-in-IP</a></li><li><a href="https://docs.projectcalico.org/v3.6/reference/calicoctl/resources/ippool">IP pool resource</a></li></ul><h3 id="2-4、增加路由联通网络"><a href="#2-4、增加路由联通网络" class="headerlink" title="2.4、增加路由联通网络"></a>2.4、增加路由联通网络</h3><p>万事俱备只欠东风，最后只需要在开发机器添加路由既可</p><p>将 Pod IP <code>10.20.0.0/16</code> 和 Service IP <code>10.254.0.0/16</code> 路由到 RR 节点 <code>172.16.0.13</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Pod IP</span><br>ip route add 10.20.0.0/16 via 172.16.0.13<br><span class="hljs-comment"># Service IP</span><br>ip route add 10.254.0.0/16 via 172.16.0.13<br></code></pre></td></tr></table></figure><p>当然最方便的肯定是将这一步在开发网络的路由上做，设置完成后开发网络就可以直连集群内的 Pod IP 和 Service IP 了；至于想直接访问 Service Name 只需要调整上游 DNS 解析既可</p>]]></content>
    
    
    <summary type="html">由于开发有部份服务使用 GRPC 进行通讯，同时采用 Consul 进行服务发现；在微服务架构下可能会导致一些访问问题，目前解决方案就是打通开发环境网络与测试环境 Kubernetes 内部 Pod 网络；翻了好多资料发现都是 2.x 的，而目前测试集群 Calico 版本为 3.6.3，很多文档都不适用只能自己折腾，目前折腾完了这里记录一下</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 目前可扩展的语法</title>
    <link href="https://mritd.com/2019/05/13/dockerfile-extended-syntax/"/>
    <id>https://mritd.com/2019/05/13/dockerfile-extended-syntax/</id>
    <published>2019-05-13T14:57:07.000Z</published>
    <updated>2019-05-13T14:57:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在调整公司项目的 CI，目前主要使用 GitLab CI，在尝试多阶段构建中踩了点坑，然后发现了一些有意思的玩意</p></blockquote><p>本文参考:</p><ul><li><a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md">Dockerfile frontend experimental syntaxes</a></li><li><a href="https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae">Advanced multi-stage build patterns</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/build/">docker build Document</a></li></ul><h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>公司目前主要使用 GitLab CI 作为主力 CI 构建工具，而且由于机器有限，我们对一些包管理器的本地 cache 直接持久化到了本机；比如 maven 的 <code>.m2</code> 目录，nodejs 的 <code>.npm</code> 目录等；虽然我们创建了对应的私服，但是在 build 时毕竟会下载，所以当时索性调整 GitLab Runner 在每个由 GitLab Runner 启动的容器中挂载这些缓存目录(GitLab CI 在 build 时会新启动容器运行 build 任务)；今天调整 nodejs 项目浪了一下，直接采用 Dockerfile 的 multi-stage build 功能进行 “Build &#x3D;&gt; Package(docker image)” 的实现，基本 Dockerfile 如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM gozap/build as builder<br><br>COPY . /xxxx<br><br>WORKDIR /xxxx<br><br>RUN <span class="hljs-built_in">source</span> ~/.bashrc \<br>    &amp;&amp; cnpm install \<br>    &amp;&amp; cnpm run build<br><br>FROM gozap/nginx-react:v1.0.0<br><br>LABEL maintainer=<span class="hljs-string">&quot;mritd &lt;mritd@linux.com&gt;&quot;</span><br><br>COPY --from=builder /xxxx/public /usr/share/nginx/html<br><br>EXPOSE 80<br><br>STOPSIGNAL SIGTERM<br><br>CMD [<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]<br></code></pre></td></tr></table></figure><p>本来这个 <code>cnpm</code> 命令是带有 cache 的(<a href="https://github.com/Gozap/dockerfile/blob/master/build/cnpm">见这里</a>)，不过运行完 build 以后发现很慢，检查宿主机 cache 目录发现根本没有 cache…然后突然感觉</p><p><img src="https://cdn.oss.link/markdown/6ieh4.jpg" alt="事情并没有这么简单"></p><p>仔细想想，情况应该是这样事儿的…</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">+------------+                +-------------+            +----------------+<br>|            |                |             |            |                |<br>|            |                |    build    |            |   Multi-stage  |<br>|   Runner   +---------------&gt;+  conatiner  +-----------&gt;+     Build      |<br>|            |                |             |            |                |<br>|            |                |             |            |                |<br>+------------+                +------+------+            +----------------+<br>                                     ^<br>                                     |<br>                                     |<br>                                     |<br>                                     |<br>                              +------+------+<br>                              |             |<br>                              |    Cache    |<br>                              |             |<br>                              +-------------+<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/9ov8m.jpg" alt="挂载不管用"></p><p>后来经过查阅文档，发现 Dockerfile 是有扩展语法的(当然最终我还是没用)，具体请见<del>下篇文章</del>(我怕被打死)下面，<strong>先说好，下面的内容无法完美的解决上面的问题，目前只是支持了一部分功能，当然未来很可能支持类似 <code>IF ELSE</code> 语法、直接挂载宿主机目录等功能</strong></p><h2 id="二、开启-Dockerfile-扩展语法"><a href="#二、开启-Dockerfile-扩展语法" class="headerlink" title="二、开启 Dockerfile 扩展语法"></a>二、开启 Dockerfile 扩展语法</h2><h3 id="2-1、开启实验性功能"><a href="#2-1、开启实验性功能" class="headerlink" title="2.1、开启实验性功能"></a>2.1、开启实验性功能</h3><p>目前这个扩展语法还处于实验性功能，所以需要配置 dockerd 守护进程，修改如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">ExecStart=/usr/bin/dockerd  -H unix:// \<br>                            --init \<br>                            --live-restore \<br>                            --data-root=/data/docker \<br>                            --experimental \<br>                            --log-driver json-file \<br>                            --log-opt max-size=30m \<br>                            --log-opt max-file=3<br></code></pre></td></tr></table></figure><p>主要是 <code>--experimental</code> 参数，参考<a href="https://docs.docker.com/engine/reference/commandline/dockerd/#description">官方文档</a>；<strong>同时在 build 前声明 <code>export DOCKER_BUILDKIT=1</code> 变量</strong></p><h3 id="2-2、修改-Dockerfile"><a href="#2-2、修改-Dockerfile" class="headerlink" title="2.2、修改 Dockerfile"></a>2.2、修改 Dockerfile</h3><p>开启实验性功能后，只需要在 Dockerfile 头部增加 <code># syntax=docker/dockerfile:experimental</code> 既可；为了保证稳定性，你也可以指定具体的版本号，类似这样</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># syntax=docker/dockerfile:1.1.1-experimental</span><br>FROM tomcat<br></code></pre></td></tr></table></figure><h3 id="2-3、可用的扩展语法"><a href="#2-3、可用的扩展语法" class="headerlink" title="2.3、可用的扩展语法"></a>2.3、可用的扩展语法</h3><ul><li><code>RUN --mount=type=bind</code></li></ul><p>这个是默认的挂载模式，这个允许将上下文或者镜像以可都可写&#x2F;只读模式挂载到 build 容器中，可选参数如下(不翻译了)</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>target</code> (required)</td><td>Mount path.</td></tr><tr><td><code>source</code></td><td>Source path in the <code>from</code>. Defaults to the root of the <code>from</code>.</td></tr><tr><td><code>from</code></td><td>Build stage or image name for the root of the source. Defaults to the build context.</td></tr><tr><td><code>rw</code>,<code>readwrite</code></td><td>Allow writes on the mount. Written data will be discarded.</td></tr></tbody></table><ul><li><code>RUN --mount=type=cache</code></li></ul><p>专用于作为 cache 的挂载位置，一般用于 cache 包管理器的下载等</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>id</code></td><td>Optional ID to identify separate&#x2F;different caches</td></tr><tr><td><code>target</code> (required)</td><td>Mount path.</td></tr><tr><td><code>ro</code>,<code>readonly</code></td><td>Read-only if set.</td></tr><tr><td><code>sharing</code></td><td>One of <code>shared</code>, <code>private</code>, or <code>locked</code>. Defaults to <code>shared</code>. A <code>shared</code> cache mount can be used concurrently by multiple writers. <code>private</code> creates a new mount if there are multiple writers. <code>locked</code> pauses the second writer until the first one releases the mount.</td></tr><tr><td><code>from</code></td><td>Build stage to use as a base of the cache mount. Defaults to empty directory.</td></tr><tr><td><code>source</code></td><td>Subpath in the <code>from</code> to mount. Defaults to the root of the <code>from</code>.</td></tr></tbody></table><p><strong>Example: cache Go packages</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># syntax = docker/dockerfile:experimental</span><br>FROM golang<br>...<br>RUN --mount=<span class="hljs-built_in">type</span>=cache,target=/root/.cache/go-build go build ...<br></code></pre></td></tr></table></figure><p><strong>Example: cache apt packages</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># syntax = docker/dockerfile:experimental</span><br>FROM ubuntu<br>RUN <span class="hljs-built_in">rm</span> -f /etc/apt/apt.conf.d/docker-clean; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Binary::apt::APT::Keep-Downloaded-Packages &quot;true&quot;;&#x27;</span> &gt; /etc/apt/apt.conf.d/keep-cache<br>RUN --mount=<span class="hljs-built_in">type</span>=cache,target=/var/cache/apt --mount=<span class="hljs-built_in">type</span>=cache,target=/var/lib/apt \<br>  apt update &amp;&amp; apt install -y gcc<br></code></pre></td></tr></table></figure><ul><li><code>RUN --mount=type=tmpfs</code></li></ul><p>专用于挂载 tmpfs 的选项</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>target</code> (required)</td><td>Mount path.</td></tr></tbody></table><ul><li><code>RUN --mount=type=secret</code></li></ul><p>这个类似 k8s 的 secret，用来挂载一些不想打入镜像，但是构建时想使用的密钥等，例如 docker 的 <code>config.json</code>，S3 的 <code>credentials</code></p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>id</code></td><td>ID of the secret. Defaults to basename of the target path.</td></tr><tr><td><code>target</code></td><td>Mount path. Defaults to <code>/run/secrets/</code> + <code>id</code>.</td></tr><tr><td><code>required</code></td><td>If set to <code>true</code>, the instruction errors out when the secret is unavailable. Defaults to <code>false</code>.</td></tr><tr><td><code>mode</code></td><td>File mode for secret file in octal. Default 0400.</td></tr><tr><td><code>uid</code></td><td>User ID for secret file. Default 0.</td></tr><tr><td><code>gid</code></td><td>Group ID for secret file. Default 0.</td></tr></tbody></table><p><strong>Example: access to S3</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># syntax = docker/dockerfile:experimental</span><br>FROM python:3<br>RUN pip install awscli<br>RUN --mount=<span class="hljs-built_in">type</span>=secret,<span class="hljs-built_in">id</span>=aws,target=/root/.aws/credentials aws s3 <span class="hljs-built_in">cp</span> s3://... ...<br></code></pre></td></tr></table></figure><p><strong>注意: <code>buildctl</code> 是 BuildKit 的命令，你要测试的话自己换成 <code>docker build</code> 相关参数</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">buildctl build --frontend=dockerfile.v0 --<span class="hljs-built_in">local</span> context=. --<span class="hljs-built_in">local</span> dockerfile=. \</span><br><span class="language-bash">  --secret <span class="hljs-built_in">id</span>=aws,src=<span class="hljs-variable">$HOME</span>/.aws/credentials</span><br></code></pre></td></tr></table></figure><ul><li><code>RUN --mount=type=ssh</code></li></ul><p>允许 build 容器通过 SSH agent 访问 SSH key，并且支持 <code>passphrases</code></p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>id</code></td><td>ID of SSH agent socket or key. Defaults to “default”.</td></tr><tr><td><code>target</code></td><td>SSH agent socket path. Defaults to <code>/run/buildkit/ssh_agent.$&#123;N&#125;</code>.</td></tr><tr><td><code>required</code></td><td>If set to <code>true</code>, the instruction errors out when the key is unavailable. Defaults to <code>false</code>.</td></tr><tr><td><code>mode</code></td><td>File mode for socket in octal. Default 0600.</td></tr><tr><td><code>uid</code></td><td>User ID for socket. Default 0.</td></tr><tr><td><code>gid</code></td><td>Group ID for socket. Default 0.</td></tr></tbody></table><p><strong>Example: access to Gitlab</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># syntax = docker/dockerfile:experimental</span><br>FROM alpine<br>RUN apk add --no-cache openssh-client<br>RUN <span class="hljs-built_in">mkdir</span> -p -m 0700 ~/.ssh &amp;&amp; ssh-keyscan gitlab.com &gt;&gt; ~/.ssh/known_hosts<br>RUN --mount=<span class="hljs-built_in">type</span>=ssh ssh -q -T git@gitlab.com 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> /hello<br><span class="hljs-comment"># &quot;Welcome to GitLab, @GITLAB_USERNAME_ASSOCIATED_WITH_SSHKEY&quot; should be printed here</span><br><span class="hljs-comment"># with the type of build progress is defined as `plain`.</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">eval</span> $(ssh-agent)<br>$ ssh-add ~/.ssh/id_rsa<br>(Input your passphrase here)<br>$ buildctl build --frontend=dockerfile.v0 --<span class="hljs-built_in">local</span> context=. --<span class="hljs-built_in">local</span> dockerfile=. \<br>  --ssh default=<span class="hljs-variable">$SSH_AUTH_SOCK</span><br></code></pre></td></tr></table></figure><p>你也可以直接使用宿主机目录的 pem 文件，但是带有密码的 pem 目前不支持</p><p><strong>目前根据文档测试，当前的挂载类型比如 <code>cache</code> 类型，仅用于 multi-stage 内的挂载，比如你有 2+ 个构建步骤，<code>cache</code> 挂载类型能帮你在各个阶段内共享文件；但是它目前无法解决直接将宿主机目录挂载到 multi-stage 的问题(可以采取些曲线救国方案，但是很不优雅)；但是未来还是很有展望的，可以关注一下</strong></p>]]></content>
    
    
    <summary type="html">最近在调整公司项目的 CI，目前主要使用 GitLab CI，在尝试多阶段构建中踩了点坑，然后发现了一些有意思的玩意</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下调校 Rime</title>
    <link href="https://mritd.com/2019/03/23/oh-my-rime/"/>
    <id>https://mritd.com/2019/03/23/oh-my-rime/</id>
    <published>2019-03-23T13:03:43.000Z</published>
    <updated>2019-03-23T13:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于对国内输入法隐私问题的担忧，决定放弃搜狗等输入法；为了更加 Geek 一些，最终决定了折腾 Rime(鼠须管) 输入法，以下为一些折腾的过程</p></blockquote><p><strong>国际惯例先放点图压压惊</strong></p><p><img src="https://cdn.oss.link/markdown/t3otb.jpg" alt="example1"><br><img src="https://cdn.oss.link/markdown/ep8sl.jpg" alt="example2"><br><img src="https://cdn.oss.link/markdown/wth6n.jpg" alt="example3"><br><img src="https://cdn.oss.link/markdown/5b85o.jpg" alt="example4"></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>安装 Rime 没啥好说的，直接从<a href="https://rime.im/">官网</a>下载最新版本的安装包既可；安装完成后配置文件位于 <code>~/Library/Rime</code> 位置；在进行后续折腾之前我建议还是先 <code>cp -r ~/Library/Rime ~/Library/Rime.bak</code> 备份一下配置文件，以防制后续折腾挂了还可以还原；安装完成以后按 <code>⌘ + 反引号(~)</code> 切换到 <code>朙月拼音-简化字</code> 既可开启简体中文输入</p><h2 id="二、乱码解决"><a href="#二、乱码解决" class="headerlink" title="二、乱码解决"></a>二、乱码解决</h2><p>安装完成后在打字时可能出现乱码情况(俗称豆腐块)，这是由于 Rime 默认 UTF-8 字符集比较大，预选词内会出现生僻字，而 mac 字体内又不包含这些字体，从而导致乱码；解决方案很简单，下载 <a href="https://github.com/mritd/rime/tree/master/fonts">花园明朝</a> A、B 两款字体安装既可，安装后重启一下就不会出现乱码了</p><p><img src="https://cdn.oss.link/markdown/yfbis.png" alt="fonts"></p><h2 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h2><p>官方并不建议直接修改原始的配置文件，因为输入法更新时会重新覆盖默认配置，可能导致某些自定义配置丢失；推荐作法是创建一系列的 patch 配置，通过类似打补丁替换这种方式来实现无感的增加自定义配置；</p><p>由于使用的是 <code>朙月拼音-简化字</code> 输入方案，所以需要创建 <code>luna_pinyin_simp.custom.yaml</code> 等配置文件，后面就是查文档 + 各种 Google 一顿魔改了；目前我将我自己用的配置放在了 <a href="https://github.com/mritd/rime">Github</a> 上，有需要的可以直接 clone 下来，用里面的配置文件直接覆盖 <code>~/Library/Rime</code> 下的文件，然后重新部署既可，关于具体配置细节在下面写</p><h2 id="四、自定义配色"><a href="#四、自定义配色" class="headerlink" title="四、自定义配色"></a>四、自定义配色</h2><p>皮肤配色配置方案位于 <code>squirrel.custom.yaml</code> 配置文件中，我的配置目前是参考搜狗输入法皮肤自己调试的；官方也提供了一些皮肤外观配置，详见 <a href="https://gist.github.com/lotem/2290714">Gist</a>；想要切换皮肤配色只需要修改 <code>style/color_scheme</code> 为相应的皮肤配色名称既可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">patch:</span><br>  <span class="hljs-attr">show_notifications_when:</span> <span class="hljs-string">appropriate</span>          <span class="hljs-comment"># 状态通知，适当，也可设为全开（always）全关（never）</span><br><br>  <span class="hljs-attr">style/color_scheme:</span> <span class="hljs-string">mritd_dark</span>                <span class="hljs-comment"># 方案命名，不能有空格</span><br>  <span class="hljs-attr">preset_color_schemes:</span><br>    <span class="hljs-attr">mritd_dark:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">漠然／mritd</span> <span class="hljs-string">dark</span><br>      <span class="hljs-attr">author:</span> <span class="hljs-string">mritd</span> <span class="hljs-string">&lt;mritd1234@gmail.com&gt;</span><br>      <span class="hljs-attr">horizontal:</span> <span class="hljs-literal">true</span>                          <span class="hljs-comment"># 水平排列</span><br>      <span class="hljs-attr">inline_preedit:</span> <span class="hljs-literal">true</span>                      <span class="hljs-comment"># 单行显示，false双行显示</span><br>      <span class="hljs-attr">candidate_format:</span> <span class="hljs-string">&quot;%c\u2005%@&quot;</span>            <span class="hljs-comment"># 用 1/6 em 空格 U+2005 来控制编号 %c 和候选词 %@ 前后的空间。</span><br>      <span class="hljs-attr">corner_radius:</span> <span class="hljs-number">5</span>                          <span class="hljs-comment"># 候选条圆角</span><br>      <span class="hljs-attr">hilited_corner_radius:</span> <span class="hljs-number">3</span>                  <span class="hljs-comment"># 高亮圆角</span><br>      <span class="hljs-attr">border_height:</span> <span class="hljs-number">6</span>                          <span class="hljs-comment"># 窗口边界高度，大于圆角半径才生效</span><br>      <span class="hljs-attr">border_width:</span> <span class="hljs-number">6</span>                           <span class="hljs-comment"># 窗口边界宽度，大于圆角半径才生效</span><br>      <span class="hljs-attr">border_color_width:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment">#font_face: &quot;PingFangSC&quot;                   # 候选词字体</span><br>      <span class="hljs-attr">font_point:</span> <span class="hljs-number">16</span>                            <span class="hljs-comment"># 候选字词大小</span><br>      <span class="hljs-attr">label_font_point:</span> <span class="hljs-number">14</span>                      <span class="hljs-comment"># 候选编号大小</span><br><br>      <span class="hljs-attr">text_color:</span> <span class="hljs-number">0xdedddd</span>                      <span class="hljs-comment"># 拼音行文字颜色，24位色值，16进制，BGR顺序</span><br>      <span class="hljs-attr">back_color:</span> <span class="hljs-number">0x4b4b4b</span>                      <span class="hljs-comment"># 候选条背景色</span><br>      <span class="hljs-attr">label_color:</span> <span class="hljs-number">0x888785</span>                     <span class="hljs-comment"># 预选栏编号颜色</span><br>      <span class="hljs-attr">border_color:</span> <span class="hljs-number">0x4b4b4b</span>                    <span class="hljs-comment"># 边框色</span><br>      <span class="hljs-attr">candidate_text_color:</span> <span class="hljs-number">0xffffff</span>            <span class="hljs-comment"># 预选项文字颜色</span><br>      <span class="hljs-attr">hilited_text_color:</span> <span class="hljs-number">0xdedddd</span>              <span class="hljs-comment"># 高亮拼音 (需要开启内嵌编码)</span><br>      <span class="hljs-attr">hilited_back_color:</span> <span class="hljs-number">0x252320</span>              <span class="hljs-comment"># 高亮拼音 (需要开启内嵌编码)</span><br>      <span class="hljs-attr">hilited_candidate_text_color:</span> <span class="hljs-number">0xFFE696</span>    <span class="hljs-comment"># 第一候选项文字颜色</span><br>      <span class="hljs-attr">hilited_candidate_back_color:</span> <span class="hljs-number">0x4b4b4b</span>    <span class="hljs-comment"># 第一候选项背景背景色</span><br>      <span class="hljs-attr">hilited_candidate_label_color:</span> <span class="hljs-number">0xffffff</span>   <span class="hljs-comment"># 第一候选项编号颜色</span><br>      <span class="hljs-attr">comment_text_color:</span> <span class="hljs-number">0xdedddd</span>              <span class="hljs-comment"># 拼音等提示文字颜色</span><br></code></pre></td></tr></table></figure><h2 id="五、增加自定义快捷字符"><a href="#五、增加自定义快捷字符" class="headerlink" title="五、增加自定义快捷字符"></a>五、增加自定义快捷字符</h2><p>快捷字符例如在中文输入法状态下可以直接输入 <code>/dn</code> 来调出特殊符号输入；这些配置位于 <code>luna_pinyin_simp.custom.yaml</code> 的 <code>punctuator</code> 配置中，我目前自行定义了一些，有需要的可以依葫芦画瓢直接修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">punctuator:</span><br>    <span class="hljs-attr">import_preset:</span> <span class="hljs-string">symbols</span><br>    <span class="hljs-attr">symbols:</span><br>      <span class="hljs-string">&quot;/fs&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">½</span>,<span class="hljs-string">‰</span>,<span class="hljs-string">¼</span>,<span class="hljs-string">⅓</span>,<span class="hljs-string">⅔</span>,<span class="hljs-string">¾</span>,<span class="hljs-string">⅒</span>]<br>      <span class="hljs-string">&quot;/dq&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">🌍</span>,<span class="hljs-string">🌎</span>,<span class="hljs-string">🌏</span>,<span class="hljs-string">🌐</span>,<span class="hljs-string">🌑</span>,<span class="hljs-string">🌒</span>,<span class="hljs-string">🌓</span>,<span class="hljs-string">🌔</span>,<span class="hljs-string">🌕</span>,<span class="hljs-string">🌖</span>,<span class="hljs-string">🌗</span>,<span class="hljs-string">🌘</span>,<span class="hljs-string">🌙</span>,<span class="hljs-string">🌚</span>,<span class="hljs-string">🌛</span>,<span class="hljs-string">🌜</span>,<span class="hljs-string">🌝</span>,<span class="hljs-string">🌞</span>,<span class="hljs-string">⭐</span>,<span class="hljs-string">🌟</span>,<span class="hljs-string">🌠</span>,<span class="hljs-string">⛅</span>,<span class="hljs-string">⚡</span>,<span class="hljs-string">❄</span>,<span class="hljs-string">🔥</span>,<span class="hljs-string">💧</span>,<span class="hljs-string">🌊</span>]<br>      <span class="hljs-string">&quot;/jt&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">⬆</span>,<span class="hljs-string">↗</span>,<span class="hljs-string">➡</span>,<span class="hljs-string">↘</span>,<span class="hljs-string">⬇</span>,<span class="hljs-string">↙</span>,<span class="hljs-string">⬅</span>,<span class="hljs-string">↖</span>,<span class="hljs-string">↕</span>,<span class="hljs-string">↔</span>,<span class="hljs-string">↩</span>,<span class="hljs-string">↪</span>,<span class="hljs-string">⤴</span>,<span class="hljs-string">⤵</span>,<span class="hljs-string">🔃</span>,<span class="hljs-string">🔄</span>,<span class="hljs-string">🔙</span>,<span class="hljs-string">🔚</span>,<span class="hljs-string">🔛</span>,<span class="hljs-string">🔜</span>,<span class="hljs-string">🔝</span>]<br>      <span class="hljs-string">&quot;/sg&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">🍇</span>,<span class="hljs-string">🍈</span>,<span class="hljs-string">🍉</span>,<span class="hljs-string">🍊</span>,<span class="hljs-string">🍋</span>,<span class="hljs-string">🍌</span>,<span class="hljs-string">🍍</span>,<span class="hljs-string">🍎</span>,<span class="hljs-string">🍏</span>,<span class="hljs-string">🍐</span>,<span class="hljs-string">🍑</span>,<span class="hljs-string">🍒</span>,<span class="hljs-string">🍓</span>,<span class="hljs-string">🍅</span>,<span class="hljs-string">🍆</span>,<span class="hljs-string">🌽</span>,<span class="hljs-string">🍄</span>,<span class="hljs-string">🌰</span>,<span class="hljs-string">🍞</span>,<span class="hljs-string">🍖</span>,<span class="hljs-string">🍗</span>,<span class="hljs-string">🍔</span>,<span class="hljs-string">🍟</span>,<span class="hljs-string">🍕</span>,<span class="hljs-string">🍳</span>,<span class="hljs-string">🍲</span>,<span class="hljs-string">🍱</span>,<span class="hljs-string">🍘</span>,<span class="hljs-string">🍙</span>,<span class="hljs-string">🍚</span>,<span class="hljs-string">🍛</span>,<span class="hljs-string">🍜</span>,<span class="hljs-string">🍝</span>,<span class="hljs-string">🍠</span>,<span class="hljs-string">🍢</span>,<span class="hljs-string">🍣</span>,<span class="hljs-string">🍤</span>,<span class="hljs-string">🍥</span>,<span class="hljs-string">🍡</span>,<span class="hljs-string">🍦</span>,<span class="hljs-string">🍧</span>,<span class="hljs-string">🍨</span>,<span class="hljs-string">🍩</span>,<span class="hljs-string">🍪</span>,<span class="hljs-string">🎂</span>,<span class="hljs-string">🍰</span>,<span class="hljs-string">🍫</span>,<span class="hljs-string">🍬</span>,<span class="hljs-string">🍭</span>,<span class="hljs-string">🍮</span>,<span class="hljs-string">🍯</span>,<span class="hljs-string">🍼</span>,<span class="hljs-string">🍵</span>,<span class="hljs-string">🍶</span>,<span class="hljs-string">🍷</span>,<span class="hljs-string">🍸</span>,<span class="hljs-string">🍹</span>,<span class="hljs-string">🍺</span>,<span class="hljs-string">🍻</span>,<span class="hljs-string">🍴</span>]<br>      <span class="hljs-string">&quot;/dw&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">🙈</span>,<span class="hljs-string">🙉</span>,<span class="hljs-string">🙊</span>,<span class="hljs-string">🐵</span>,<span class="hljs-string">🐒</span>,<span class="hljs-string">🐶</span>,<span class="hljs-string">🐕</span>,<span class="hljs-string">🐩</span>,<span class="hljs-string">🐺</span>,<span class="hljs-string">🐱</span>,<span class="hljs-string">😺</span>,<span class="hljs-string">😸</span>,<span class="hljs-string">😹</span>,<span class="hljs-string">😻</span>,<span class="hljs-string">😼</span>,<span class="hljs-string">😽</span>,<span class="hljs-string">🙀</span>,<span class="hljs-string">😿</span>,<span class="hljs-string">😾</span>,<span class="hljs-string">🐈</span>,<span class="hljs-string">🐯</span>,<span class="hljs-string">🐅</span>,<span class="hljs-string">🐆</span>,<span class="hljs-string">🐴</span>,<span class="hljs-string">🐎</span>,<span class="hljs-string">🐮</span>,<span class="hljs-string">🐂</span>,<span class="hljs-string">🐃</span>,<span class="hljs-string">🐄</span>,<span class="hljs-string">🐷</span>,<span class="hljs-string">🐖</span>,<span class="hljs-string">🐗</span>,<span class="hljs-string">🐽</span>,<span class="hljs-string">🐏</span>,<span class="hljs-string">🐑</span>,<span class="hljs-string">🐐</span>,<span class="hljs-string">🐪</span>,<span class="hljs-string">🐫</span>,<span class="hljs-string">🐘</span>,<span class="hljs-string">🐭</span>,<span class="hljs-string">🐁</span>,<span class="hljs-string">🐀</span>,<span class="hljs-string">🐹</span>,<span class="hljs-string">🐰</span>,<span class="hljs-string">🐇</span>,<span class="hljs-string">🐻</span>,<span class="hljs-string">🐨</span>,<span class="hljs-string">🐼</span>,<span class="hljs-string">🐾</span>,<span class="hljs-string">🐔</span>,<span class="hljs-string">🐓</span>,<span class="hljs-string">🐣</span>,<span class="hljs-string">🐤</span>,<span class="hljs-string">🐥</span>,<span class="hljs-string">🐦</span>,<span class="hljs-string">🐧</span>,<span class="hljs-string">🐸</span>,<span class="hljs-string">🐊</span>,<span class="hljs-string">🐢</span>,<span class="hljs-string">🐍</span>,<span class="hljs-string">🐲</span>,<span class="hljs-string">🐉</span>,<span class="hljs-string">🐳</span>,<span class="hljs-string">🐋</span>,<span class="hljs-string">🐬</span>,<span class="hljs-string">🐟</span>,<span class="hljs-string">🐠</span>,<span class="hljs-string">🐡</span>,<span class="hljs-string">🐙</span>,<span class="hljs-string">🐚</span>,<span class="hljs-string">🐌</span>,<span class="hljs-string">🐛</span>,<span class="hljs-string">🐜</span>,<span class="hljs-string">🐝</span>,<span class="hljs-string">🐞</span>,<span class="hljs-string">🦋</span>]<br>      <span class="hljs-string">&quot;/bq&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">😀</span>,<span class="hljs-string">😁</span>,<span class="hljs-string">😂</span>,<span class="hljs-string">😃</span>,<span class="hljs-string">😄</span>,<span class="hljs-string">😅</span>,<span class="hljs-string">😆</span>,<span class="hljs-string">😉</span>,<span class="hljs-string">😊</span>,<span class="hljs-string">😋</span>,<span class="hljs-string">😎</span>,<span class="hljs-string">😍</span>,<span class="hljs-string">😘</span>,<span class="hljs-string">😗</span>,<span class="hljs-string">😙</span>,<span class="hljs-string">😚</span>,<span class="hljs-string">😇</span>,<span class="hljs-string">😐</span>,<span class="hljs-string">😑</span>,<span class="hljs-string">😶</span>,<span class="hljs-string">😏</span>,<span class="hljs-string">😣</span>,<span class="hljs-string">😥</span>,<span class="hljs-string">😮</span>,<span class="hljs-string">😯</span>,<span class="hljs-string">😪</span>,<span class="hljs-string">😫</span>,<span class="hljs-string">😴</span>,<span class="hljs-string">😌</span>,<span class="hljs-string">😛</span>,<span class="hljs-string">😜</span>,<span class="hljs-string">😝</span>,<span class="hljs-string">😒</span>,<span class="hljs-string">😓</span>,<span class="hljs-string">😔</span>,<span class="hljs-string">😕</span>,<span class="hljs-string">😲</span>,<span class="hljs-string">😷</span>,<span class="hljs-string">😖</span>,<span class="hljs-string">😞</span>,<span class="hljs-string">😟</span>,<span class="hljs-string">😤</span>,<span class="hljs-string">😢</span>,<span class="hljs-string">😭</span>,<span class="hljs-string">😦</span>,<span class="hljs-string">😧</span>,<span class="hljs-string">😨</span>,<span class="hljs-string">😬</span>,<span class="hljs-string">😰</span>,<span class="hljs-string">😱</span>,<span class="hljs-string">😳</span>,<span class="hljs-string">😵</span>,<span class="hljs-string">😡</span>,<span class="hljs-string">😠</span>]<br>      <span class="hljs-string">&quot;/ss&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">💪</span>,<span class="hljs-string">👈</span>,<span class="hljs-string">👉</span>,<span class="hljs-string">👆</span>,<span class="hljs-string">👇</span>,<span class="hljs-string">✋</span>,<span class="hljs-string">👌</span>,<span class="hljs-string">👍</span>,<span class="hljs-string">👎</span>,<span class="hljs-string">✊</span>,<span class="hljs-string">👊</span>,<span class="hljs-string">👋</span>,<span class="hljs-string">👏</span>,<span class="hljs-string">👐</span>]<br>      <span class="hljs-string">&quot;/dn&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">⌘</span>, <span class="hljs-string">⌥</span>, <span class="hljs-string">⇧</span>, <span class="hljs-string">⌃</span>, <span class="hljs-string">⎋</span>, <span class="hljs-string">⇪</span>, <span class="hljs-string"></span>, <span class="hljs-string">⌫</span>, <span class="hljs-string">⌦</span>, <span class="hljs-string">↩︎</span>, <span class="hljs-string">⏎</span>, <span class="hljs-string">↑</span>, <span class="hljs-string">↓</span>, <span class="hljs-string">←</span>, <span class="hljs-string">→</span>, <span class="hljs-string">↖</span>, <span class="hljs-string">↘</span>, <span class="hljs-string">⇟</span>, <span class="hljs-string">⇞</span>]<br>      <span class="hljs-string">&quot;/fh&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">©</span>,<span class="hljs-string">®</span>,<span class="hljs-string">℗</span>,<span class="hljs-string">ⓘ</span>,<span class="hljs-string">℠</span>,<span class="hljs-string">™</span>,<span class="hljs-string">℡</span>,<span class="hljs-string">␡</span>,<span class="hljs-string">♂</span>,<span class="hljs-string">♀</span>,<span class="hljs-string">☉</span>,<span class="hljs-string">☊</span>,<span class="hljs-string">☋</span>,<span class="hljs-string">☌</span>,<span class="hljs-string">☍</span>,<span class="hljs-string">☑︎</span>,<span class="hljs-string">☒</span>,<span class="hljs-string">☜</span>,<span class="hljs-string">☝</span>,<span class="hljs-string">☞</span>,<span class="hljs-string">☟</span>,<span class="hljs-string">✎</span>,<span class="hljs-string">✄</span>,<span class="hljs-string">♻</span>,<span class="hljs-string">⚐</span>,<span class="hljs-string">⚑</span>,<span class="hljs-string">⚠</span>]<br>      <span class="hljs-string">&quot;/xh&quot;</span><span class="hljs-string">:</span> [<span class="hljs-string">＊</span>,<span class="hljs-string">×</span>,<span class="hljs-string">✱</span>,<span class="hljs-string">★</span>,<span class="hljs-string">☆</span>,<span class="hljs-string">✩</span>,<span class="hljs-string">✧</span>,<span class="hljs-string">❋</span>,<span class="hljs-string">❊</span>,<span class="hljs-string">❉</span>,<span class="hljs-string">❈</span>,<span class="hljs-string">❅</span>,<span class="hljs-string">✿</span>,<span class="hljs-string">✲</span>]<br></code></pre></td></tr></table></figure><h2 id="六、设置输入方案"><a href="#六、设置输入方案" class="headerlink" title="六、设置输入方案"></a>六、设置输入方案</h2><p>在第一次按 <code>⌘ + 反引号(~)</code> 设置输入法时实际上我们可以看到很多的输入方案，而事实上很多方案我们根本用不上；想要删除和修改方案可以调整 <code>default.custom.yaml</code> 中的 <code>schema_list</code> 字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">patch:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-attr">page_size:</span> <span class="hljs-number">8</span><br>  <span class="hljs-attr">schema_list:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">schema:</span> <span class="hljs-string">luna_pinyin_simp</span>      <span class="hljs-comment"># 朙月拼音 简化字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">schema:</span> <span class="hljs-string">luna_pinyin</span>           <span class="hljs-comment"># 朙月拼音</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">schema:</span> <span class="hljs-string">luna_pinyin_fluency</span>   <span class="hljs-comment"># 语句流</span><br><span class="hljs-comment">#  - schema: double_pinyin         # 自然碼雙拼</span><br><span class="hljs-comment">#  - schema: double_pinyin_flypy   # 小鹤雙拼</span><br><span class="hljs-comment">#  - schema: double_pinyin_pyjj    # 拼音加加双拼</span><br><span class="hljs-comment">#  - schema: wubi_pinyin           # 五笔拼音混合輸入</span><br></code></pre></td></tr></table></figure><p><strong>实际上我只能用上第一个…毕竟写了好几年代码还得看键盘的人也只能这样了…</strong></p><h2 id="七、调整特殊键行为"><a href="#七、调整特殊键行为" class="headerlink" title="七、调整特殊键行为"></a>七、调整特殊键行为</h2><p>在刚安装完以后发现在中文输入法状态下输入英文，按 <code>shift</code> 键后字符上屏，然后还得回车一下，这就很让我难受…最后找到了这篇 <a href="https://gist.github.com/lotem/2981316">Gist</a>，目前将大写锁定、<code>shift</code> 键调整为了跟搜狗一致的配置，有需要调整的可以自行编辑 <code>default.custom.yaml</code> 中的 <code>ascii_composer/switch_key</code> 部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># capslock 键切换英文并输出大写</span><br><span class="hljs-attr">ascii_composer/good_old_caps_lock:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 输入法中英文状态快捷键</span><br><span class="hljs-attr">ascii_composer/switch_key:</span><br>  <span class="hljs-attr">Caps_Lock:</span> <span class="hljs-string">commit_code</span><br>  <span class="hljs-attr">Control_L:</span> <span class="hljs-string">noop</span><br>  <span class="hljs-attr">Control_R:</span> <span class="hljs-string">noop</span><br>  <span class="hljs-comment"># 按下左 shift 英文字符直接上屏，不需要再次回车，输入法保持英文状态</span><br>  <span class="hljs-attr">Shift_L:</span> <span class="hljs-string">commit_code</span><br>  <span class="hljs-attr">Shift_R:</span> <span class="hljs-string">noop</span><br></code></pre></td></tr></table></figure><h2 id="八、自定义词库"><a href="#八、自定义词库" class="headerlink" title="八、自定义词库"></a>八、自定义词库</h2><p>Rime 默认的词库稍为有点弱，我们可以下载一些搜狗词库来进行扩展；不过搜狗词库格式默认是无法解析的，好在有人开发了工具可以方便的将搜狗细胞词库转化为 Rime 的格式(工具<a href="https://github.com/studyzy/imewlconverter/releases">点击这里</a>下载)；目前该工具只支持 Windows(也有些别人写的 py 脚本啥的，但是我没用)，所以词库转换这种操作还得需要一个 Windows 虚拟机；</p><p>转换过程很简单，先从<a href="https://pinyin.sogou.com/dict/">搜狗词库</a>下载一系列的 <code>scel</code> 文件，然后批量选中，接着调整一下输入和输出格式点击转换，最后保存成一个 <code>txt</code> 文本</p><p><img src="https://cdn.oss.link/markdown/jtv97.png" alt="input-setting"></p><p><img src="https://cdn.oss.link/markdown/p7qha.png" alt="convert"></p><p>光有这个文本还不够，我们要将它塞到词库的 <code>yaml</code> 配置里，所以新建一个词库配置文件 <code>luna_pinyin.sougou.dict.yaml</code>，然后写上头部说明(<strong>注意最后三个点后面加一个换行</strong>)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Rime dictionary</span><br><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-comment"># 搜狗词库 目前包含如下:</span><br><span class="hljs-comment"># IT计算机 实用IT词汇 亲戚称呼 化学品名 数字时间 数学词汇 淘宝词库 编程语言 软件专业 颜色名称 程序猿词库 开发专用词库 搜狗标准词库</span><br><span class="hljs-comment"># 摄影专业名词 计算机专业词库 计算机词汇大全 保险词汇 最详细的全国地名大全 饮食大全 常见花卉名称 房地产词汇大全 中国传统节日大全 财经金融词汇大全</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">luna_pinyin.sougou</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;1.0&quot;</span><br><span class="hljs-attr">sort:</span> <span class="hljs-string">by_weight</span><br><span class="hljs-attr">use_preset_vocabulary:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">...</span><br><br></code></pre></td></tr></table></figure><p>接着只需要把生成好的词库 <code>txt</code> 文件内容粘贴到三个点下面既可；但是词库太多的话你会发现这个文本有好几十 M，一般编辑器打开都会卡死，解决这种情况只需要用命令行 <code>cat</code> 一下就行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> sougou.txt &gt;&gt; luna_pinyin.sougou.dict.yaml<br></code></pre></td></tr></table></figure><p>最后修改 <code>luna_pinyin.extended.dict.yaml</code> 中的 <code>import_tables</code> 字段，加入刚刚新建的词库既可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">luna_pinyin.extended</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2016.06.26&quot;</span><br><span class="hljs-attr">sort:</span> <span class="hljs-string">by_weight</span>  <span class="hljs-comment">#字典初始排序，可選original或by_weight</span><br><span class="hljs-attr">use_preset_vocabulary:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#此處爲明月拼音擴充詞庫（基本）默認鏈接載入的詞庫，有朙月拼音官方詞庫、明月拼音擴充詞庫（漢語大詞典）、明月拼音擴充詞庫（詩詞）、明月拼音擴充詞庫（含西文的詞彙）。如果不需要加載某个詞庫請將其用「#」註釋掉。</span><br><span class="hljs-comment">#雙拼不支持 luna_pinyin.cn_en 詞庫，請用戶手動禁用。</span><br><br><span class="hljs-attr">import_tables:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">luna_pinyin</span><br>  <span class="hljs-comment"># 加入搜狗词库</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">luna_pinyin.sougou</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">luna_pinyin.poetry</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">luna_pinyin.cn_en</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">luna_pinyin.kaomoji</span><br></code></pre></td></tr></table></figure><h2 id="九、定制特殊单词"><a href="#九、定制特殊单词" class="headerlink" title="九、定制特殊单词"></a>九、定制特殊单词</h2><p>由于长期撸码，24 小时离不开命令行，偶尔在中文输入法下输入了一些命令导致汉字直接出现在 terminal 上就很尴尬…这时候我们可以在 <code>luna_pinyin.cn_en.dict.yaml</code> 加入一些我们自己的专属词库，比如这样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">luna_pinyin.cn_en</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2017.9.13&quot;</span><br><span class="hljs-attr">sort:</span> <span class="hljs-string">by_weight</span><br><span class="hljs-attr">use_preset_vocabulary:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">...</span><br><br><span class="hljs-string">git</span><span class="hljs-string">git</span><br><span class="hljs-string">ls</span><span class="hljs-string">ls</span><br><span class="hljs-string">cd</span><span class="hljs-string">cd</span><br><span class="hljs-string">pwd</span><span class="hljs-string">pwd</span><br><span class="hljs-string">git</span> <span class="hljs-string">ps</span><span class="hljs-string">gitps</span><br><span class="hljs-string">kubernetes</span><span class="hljs-string">kubernetes</span><br><span class="hljs-string">kubernetes</span><span class="hljs-string">kuber</span><br><span class="hljs-string">kubectl</span><span class="hljs-string">kubectl</span><br><span class="hljs-string">kubectl</span><span class="hljs-string">kubec</span><br><span class="hljs-string">docker</span><span class="hljs-string">docker</span><br><span class="hljs-string">docker</span><span class="hljs-string">dock</span><br><span class="hljs-string">ipvs</span><span class="hljs-string">ipvs</span><br><span class="hljs-string">ps</span><span class="hljs-string">ps</span><br><span class="hljs-string">bash</span><span class="hljs-string">bash</span><br><span class="hljs-string">source</span><span class="hljs-string">source</span><br><span class="hljs-string">source</span><span class="hljs-string">sou</span><br><span class="hljs-string">rm</span><span class="hljs-string">rm</span><br></code></pre></td></tr></table></figure><p>配置后如果我在中文输入法下输入 git 则会自动匹配 git 这个单词，避免错误的键入中文字符；<strong>需要注意的是第一列代表上屏的字符，第二列代表输入的单词，即 “当输入第二列时候选词为第一列”；两列之间要用 tag 制表符隔开，记住不是空格</strong></p>]]></content>
    
    
    <summary type="html">由于对国内输入法隐私问题的担忧，决定放弃搜狗等输入法；为了更加 Geek 一些，最终决定了折腾 Rime(鼠须管) 输入法，以下为一些折腾的过程</summary>
    
    
    
    <category term="Mac" scheme="https://mritd.com/categories/mac/"/>
    
    
    <category term="Mac" scheme="https://mritd.com/tags/mac/"/>
    
    <category term="Rime" scheme="https://mritd.com/tags/rime/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 设置多个源</title>
    <link href="https://mritd.com/2019/03/19/how-to-set-multiple-apt-mirrors-for-ubuntu/"/>
    <id>https://mritd.com/2019/03/19/how-to-set-multiple-apt-mirrors-for-ubuntu/</id>
    <published>2019-03-19T13:43:23.000Z</published>
    <updated>2019-03-19T13:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、源起"><a href="#一、源起" class="headerlink" title="一、源起"></a>一、源起</h2><p>使用 Ubuntu 作为生产容器系统好久了，但是 apt 源问题一致有点困扰: **由于众所周知的原因，官方源执行 <code>apt update</code> 等命令会非常慢；而国内有很多镜像服务，但是某些偶尔也会抽风(比如清华大源)，最后的结果就是日常修改 apt 源…**Google 查了了好久发现事实上 apt 源是支持 <code>mirror</code> 协议的，从而自动选择可用的一个</p><h2 id="二、使用-mirror-协议"><a href="#二、使用-mirror-协议" class="headerlink" title="二、使用 mirror 协议"></a>二、使用 mirror 协议</h2><p>废话不说多直接上代码，编辑 <code>/etc/apt/sources.list</code>，替换为如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#------------------------------------------------------------------------------#</span><br><span class="hljs-comment">#                            OFFICIAL UBUNTU REPOS                             #</span><br><span class="hljs-comment">#------------------------------------------------------------------------------#</span><br><br><br><span class="hljs-comment">###### Ubuntu Main Repos</span><br>deb mirror://mirrors.ubuntu.com/mirrors.txt bionic main restricted universe multiverse<br>deb-src mirror://mirrors.ubuntu.com/mirrors.txt bionic main restricted universe multiverse<br><br><span class="hljs-comment">###### Ubuntu Update Repos</span><br>deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-security main restricted universe multiverse<br>deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-updates main restricted universe multiverse<br>deb mirror://mirrors.ubuntu.com/mirrors.txt bionic-backports main restricted universe multiverse<br>deb-src mirror://mirrors.ubuntu.com/mirrors.txt bionic-security main restricted universe multiverse<br>deb-src mirror://mirrors.ubuntu.com/mirrors.txt bionic-updates main restricted universe multiverse<br>deb-src mirror://mirrors.ubuntu.com/mirrors.txt bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>当使用 <code>mirror</code> 协议后，执行 <code>apt update</code> 时会首先<strong>通过 http 访问</strong> <code>mirrors.ubuntu.com/mirrors.txt</code> 文本；文本内容实际上就是当前可用的镜像源列表，如下所示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">http://ftp.sjtu.edu.cn/ubuntu/<br>http://mirrors.nju.edu.cn/ubuntu/<br>http://mirrors.nwafu.edu.cn/ubuntu/<br>http://mirrors.sohu.com/ubuntu/<br>http://mirrors.aliyun.com/ubuntu/<br>http://mirrors.shu.edu.cn/ubuntu/<br>http://mirrors.cqu.edu.cn/ubuntu/<br>http://mirrors.huaweicloud.com/repository/ubuntu/<br>http://mirrors.cn99.com/ubuntu/<br>http://mirrors.yun-idc.com/ubuntu/<br>http://mirrors.tuna.tsinghua.edu.cn/ubuntu/<br>http://mirrors.ustc.edu.cn/ubuntu/<br>http://mirrors.njupt.edu.cn/ubuntu/<br>http://mirror.lzu.edu.cn/ubuntu/<br>http://archive.ubuntu.com/ubuntu/<br></code></pre></td></tr></table></figure><p>得到列表后 apt 会自动选择一个(选择规则暂不清楚，国外有文章说是选择最快的，但是不清楚这个最快是延迟还是网速)进行下载；**同时根据地区不通，官方也提供指定国家的 <code>mirror.txt</code>**，比如中国的实际上可以设置为 <code>mirrors.ubuntu.com/CN.txt</code>(我测试跟官方一样，推测可能是使用了类似 DNS 选优的策略)</p><h2 id="三、自定义-mirror-地址"><a href="#三、自定义-mirror-地址" class="headerlink" title="三、自定义 mirror 地址"></a>三、自定义 mirror 地址</h2><p>现在已经解决了能同时使用多个源的问题，但是有些时候你会发现源的可用性检测并不是很精准，比如某个源只有 40k 的下载速度…不巧你某个下载还命中了，这就很尴尬；<strong>所以有时候我们可能需要自定义 <code>mirror.txt</code> 这个源列表</strong>，经过测试证明**只需要开启一个标准的 <code>http server</code> 能返回一个文本即可，不过需要注意只能是 <code>http</code>，而不是 <code>https</code>**；所以我们首先下载一下这个文本，把不想要的删掉；然后弄个 nginx，甚至 <code>python -m http.server</code> 把文本文件暴露出去就可以；我比较懒…扔 CDN 上了: <a href="http://oss.link/config/apt-mirrors.txt">http://oss.link/config/apt-mirrors.txt</a></p><p>关于源的精简，我建议将一些 <code>edu</code> 的删掉，因为敏感时期他们很不稳定；优选阿里云、网易、华为这种大公司的，比较有名的清华大的什么的可以留着，其他的可以考虑都删掉</p>]]></content>
    
    
    <summary type="html">介绍通过 mirror 方式来设置 Ubuntu 源，从而实现自动切换 apt 源下载</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.13.4 搭建</title>
    <link href="https://mritd.com/2019/03/16/set-up-kubernetes-1.13.4-cluster/"/>
    <id>https://mritd.com/2019/03/16/set-up-kubernetes-1.13.4-cluster/</id>
    <published>2019-03-16T09:36:52.000Z</published>
    <updated>2019-03-16T09:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年后回来有点懒，也有点忙；1.13 出来好久了，周末还是决定折腾一下吧</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>老样子，安装环境为 5 台 Ubuntu 18.04.2 LTS 虚拟机，其他详细信息如下</p><table><thead><tr><th>System OS</th><th>IP Address</th><th>Docker</th><th>Kernel</th><th>Application</th></tr></thead><tbody><tr><td>Ubuntu 18.04.2 LTS</td><td>192.168.1.51</td><td>18.09.2</td><td>4.15.0-46-generic</td><td>k8s-master、etcd</td></tr><tr><td>Ubuntu 18.04.2 LTS</td><td>192.168.1.52</td><td>18.09.2</td><td>4.15.0-46-generic</td><td>k8s-master、etcd</td></tr><tr><td>Ubuntu 18.04.2 LTS</td><td>192.168.1.53</td><td>18.09.2</td><td>4.15.0-46-generic</td><td>k8s-master、etcd</td></tr><tr><td>Ubuntu 18.04.2 LTS</td><td>192.168.1.54</td><td>18.09.2</td><td>4.15.0-46-generic</td><td>k8s-node</td></tr><tr><td>Ubuntu 18.04.2 LTS</td><td>192.168.1.55</td><td>18.09.2</td><td>4.15.0-46-generic</td><td>k8s-node</td></tr></tbody></table><p><strong>所有配置生成将在第一个节点上完成，第一个节点与其他节点 root 用户免密码登录，用于分发文件；为了方便搭建弄了一点小脚本，仓库地址 <a href="https://github.com/mritd/ktool">ktool</a>，本文后续所有脚本、配置都可以在此仓库找到；关于 <a href="https://github.com/cloudflare/cfssl">cfssl</a> 等基本工具使用，本文不再阐述</strong></p><h2 id="二、安装-Etcd"><a href="#二、安装-Etcd" class="headerlink" title="二、安装 Etcd"></a>二、安装 Etcd</h2><h3 id="2-1、生成证书"><a href="#2-1、生成证书" class="headerlink" title="2.1、生成证书"></a>2.1、生成证书</h3><p>Etcd 仍然开启 TLS 认证，所以先使用 cfssl 生成相关证书</p><ul><li>etcd-root-ca-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd-root-ca&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ca&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>etcd-gencert.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>etcd-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.51&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.52&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.53&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接下来执行生成即可；<strong>我建议在生产环境在证书内预留几个 IP，已防止意外故障迁移时还需要重新生成证书；证书默认期限为 10 年(包括 CA 证书)，有需要加强安全性的可以适当减小</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca<br>cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd<br></code></pre></td></tr></table></figure><h3 id="2-2、安装-Etcd"><a href="#2-2、安装-Etcd" class="headerlink" title="2.2、安装 Etcd"></a>2.2、安装 Etcd</h3><h4 id="2-2-1、安装脚本"><a href="#2-2-1、安装脚本" class="headerlink" title="2.2.1、安装脚本"></a>2.2.1、安装脚本</h4><p>安装 Etcd 只需要将二进制文件放在可执行目录下，然后修改配置增加 systemd service 配置文件即可；为了安全性起见最好使用单独的用户启动 Etcd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br>ETCD_DEFAULT_VERSION=<span class="hljs-string">&quot;3.3.12&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>  ETCD_VERSION=<span class="hljs-variable">$1</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[33mWARNING: ETCD_VERSION is blank,use default version: <span class="hljs-variable">$&#123;ETCD_DEFAULT_VERSION&#125;</span>\033[0m&quot;</span><br>  ETCD_VERSION=<span class="hljs-variable">$&#123;ETCD_DEFAULT_VERSION&#125;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 下载 Etcd 二进制文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">download</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz&quot;</span> ]; <span class="hljs-keyword">then</span><br>        wget https://github.com/coreos/etcd/releases/download/v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>/etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>        tar -zxvf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 为 Etcd 创建单独的用户</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">preinstall</span></span>()&#123;<br>getent group etcd &gt;/dev/null || groupadd -r etcd<br>getent passwd etcd &gt;/dev/null || useradd -r -g etcd -d /var/lib/etcd -s /sbin/nologin -c <span class="hljs-string">&quot;etcd user&quot;</span> etcd<br>&#125;<br><br><span class="hljs-comment"># 安装(复制文件)</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install</span></span>()&#123;<br><br>    <span class="hljs-comment"># 释放 Etcd 二进制文件</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd...\033[0m&quot;</span><br>    tar -zxvf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>    <span class="hljs-built_in">cp</span> etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64/etcd* /usr/local/bin<br>    <span class="hljs-built_in">rm</span> -rf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64<br><br>    <span class="hljs-comment"># 复制 配置文件 到 /etc/etcd(目录内文件结构在下面)</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> -r conf /etc/etcd<br>    <span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd<br>    <span class="hljs-built_in">chmod</span> -R 755 /etc/etcd/ssl<br><br>    <span class="hljs-comment"># 复制 systemd service 配置</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd systemd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> systemd/*.service /lib/systemd/system<br>    systemctl daemon-reload<br>&#125;<br><br><span class="hljs-comment"># 创建 Etcd 存储目录(如需要更改，请求改 /etc/etcd/etcd.conf 配置文件)</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">postinstall</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/lib/etcd&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/lib/etcd<br>        <span class="hljs-built_in">chown</span> -R etcd:etcd /var/lib/etcd<br>    <span class="hljs-keyword">fi</span><br><br>&#125;<br><br><span class="hljs-comment"># 依次执行</span><br>download<br>preinstall<br>install<br>postinstall<br></code></pre></td></tr></table></figure><h4 id="2-2-2、配置文件"><a href="#2-2-2、配置文件" class="headerlink" title="2.2.2、配置文件"></a>2.2.2、配置文件</h4><p><strong>关于配置文件目录结构如下(请自行复制证书)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">conf<br>├── etcd.conf<br>├── etcd.conf.cluster.example<br>├── etcd.conf.single.example<br>└── ssl<br>    ├── etcd-key.pem<br>    ├── etcd.pem<br>    ├── etcd-root-ca-key.pem<br>    └── etcd-root-ca.pem<br><br>1 directory, 7 files<br></code></pre></td></tr></table></figure><ul><li>etcd.conf</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># [member]</span><br>ETCD_NAME=etcd1<br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/data&quot;</span><br>ETCD_WAL_DIR=<span class="hljs-string">&quot;/var/lib/etcd/wal&quot;</span><br>ETCD_SNAPSHOT_COUNT=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_HEARTBEAT_INTERVAL=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_ELECTION_TIMEOUT=<span class="hljs-string">&quot;1000&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.51:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.51:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_MAX_SNAPSHOTS=<span class="hljs-string">&quot;5&quot;</span><br>ETCD_MAX_WALS=<span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment">#ETCD_CORS=&quot;&quot;</span><br><br><span class="hljs-comment"># [cluster]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.51:2380&quot;</span><br><span class="hljs-comment"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.1.51:2380,etcd2=https://192.168.1.52:2380,etcd3=https://192.168.1.53:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.51:2379&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</span><br><span class="hljs-comment">#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;</span><br><br><span class="hljs-comment"># [proxy]</span><br><span class="hljs-comment">#ETCD_PROXY=&quot;off&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</span><br><br><span class="hljs-comment"># [security]</span><br>ETCD_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_PEER_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_PEER_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_PEER_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># [logging]</span><br><span class="hljs-comment">#ETCD_DEBUG=&quot;false&quot;</span><br><span class="hljs-comment"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</span><br><span class="hljs-comment">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>etcd.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/var/lib/etcd/<br>EnvironmentFile=-/etc/etcd/etcd.conf<br>User=etcd<br><span class="hljs-comment"># set GOMAXPROCS to number of processors</span><br>ExecStart=/bin/bash -c <span class="hljs-string">&quot;GOMAXPROCS=<span class="hljs-subst">$(nproc)</span> /usr/local/bin/etcd --name=\&quot;<span class="hljs-variable">$&#123;ETCD_NAME&#125;</span>\&quot; --data-dir=\&quot;<span class="hljs-variable">$&#123;ETCD_DATA_DIR&#125;</span>\&quot; --listen-client-urls=\&quot;<span class="hljs-variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>\&quot;&quot;</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>最后三台机器依次修改 <code>IP</code>、<code>ETCD_NAME</code> 然后启动即可，**生产环境请不要忘记修改集群 Token 为真实随机字符串 (<code>ETCD_INITIAL_CLUSTER_TOKEN</code> 变量)**启动后可以通过以下命令测试集群联通性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ <span class="hljs-built_in">export</span> ETCDCTL_API=3<br>docker1.node ➜  ~ etcdctl member list<br>238b72cdd26e304f, started, etcd2, https://192.168.1.52:2380, https://192.168.1.52:2379<br>8034142cf01c5d1c, started, etcd3, https://192.168.1.53:2380, https://192.168.1.53:2379<br>8da171dbef9ded69, started, etcd1, https://192.168.1.51:2380, https://192.168.1.51:2379<br></code></pre></td></tr></table></figure><h2 id="三、安装-Kubernetes"><a href="#三、安装-Kubernetes" class="headerlink" title="三、安装 Kubernetes"></a>三、安装 Kubernetes</h2><h3 id="3-1、生成证书及配置"><a href="#3-1、生成证书及配置" class="headerlink" title="3.1、生成证书及配置"></a>3.1、生成证书及配置</h3><h4 id="3-1-1、生成证书"><a href="#3-1-1、生成证书" class="headerlink" title="3.1.1、生成证书"></a>3.1.1、生成证书</h4><p>新版本已经越来越趋近全面 TLS + RBAC 配置，<strong>所以本次安装将会启动大部分 TLS + RBAC 配置，包括 <code>kube-controler-manager</code>、<code>kube-scheduler</code> 组件不再连接本地 <code>kube-apiserver</code> 的 8080 非认证端口，<code>kubelet</code> 等组件 API 端点关闭匿名访问，启动 RBAC 认证等</strong>；为了满足这些认证，需要签署以下证书</p><ul><li>k8s-root-ca-csr.json 集群 CA 根证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ca&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>k8s-gencert.json 用于生成其他证书的标准配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;kubernetes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;client auth&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kube-apiserver-csr.json apiserver TLS 认证端口需要的证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.254.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;*.master.kubernetes.node&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kube-controller-manager-csr.json controller manager 连接 apiserver 需要使用的证书，同时本身 <code>10257</code> 端口也会使用此证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.master.kubernetes.node&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kube-scheduler-csr.json scheduler 连接 apiserver 需要使用的证书，同时本身 <code>10259</code> 端口也会使用此证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-scheduler&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.master.kubernetes.node&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-scheduler&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kube-proxy-csr.json proxy 组件连接 apiserver 需要使用的证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kubelet-api-admin-csr.json apiserver 反向连接 kubelet 组件 <code>10250</code> 端口需要使用的证书(例如执行 <code>kubectl logs</code>)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kubelet-api-admin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kubelet-api-admin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>admin-csr.json 集群管理员(kubectl)连接 apiserver 需要使用的证书</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意: 请不要修改证书配置的 <code>CN</code>、<code>O</code> 字段，这两个字段名称比较特殊，大多数为 <code>system:</code> 开头，实际上是为了匹配 RBAC 规则，具体请参考 <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#default-roles-and-role-bindings">Default Roles and Role Bindings</a></strong></p><p>最后使用如下命令生成即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca<br><br><span class="hljs-keyword">for</span> targetName <span class="hljs-keyword">in</span> kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet-api-admin admin; <span class="hljs-keyword">do</span><br>    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes <span class="hljs-variable">$targetName</span>-csr.json | cfssljson --<br>bare <span class="hljs-variable">$targetName</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2、生成配置文件"><a href="#3-1-2、生成配置文件" class="headerlink" title="3.1.2、生成配置文件"></a>3.1.2、生成配置文件</h4><p>集群搭建需要预先生成一系列配置文件，生成配置需要预先安装 <code>kubectl</code> 命令，请自行根据文档安装 <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-using-curl">Install kubectl binary using curl</a>；其中配置文件及其作用如下:</p><ul><li><code>bootstrap.kubeconfig</code> kubelet TLS Bootstarp 引导阶段需要使用的配置文件</li><li><code>kube-controller-manager.kubeconfig</code> controller manager 组件开启安全端口及 RBAC 认证所需配置</li><li><code>kube-scheduler.kubeconfig</code> scheduler 组件开启安全端口及 RBAC 认证所需配置</li><li><code>kube-proxy.kubeconfig</code> proxy 组件连接 apiserver 所需配置文件</li><li><code>audit-policy.yaml</code> apiserver RBAC 审计日志配置文件</li><li><code>bootstrap.secret.yaml</code> kubelet TLS Bootstarp 引导阶段使用 Bootstrap Token 方式引导，需要预先创建此 Token</li></ul><p>生成这些配置文件的脚本如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 指定 apiserver 地址</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://127.0.0.1:6443&quot;</span><br><br><span class="hljs-comment"># 生成 Bootstrap Token</span><br>BOOTSTRAP_TOKEN_ID=$(<span class="hljs-built_in">head</span> -c 6 /dev/urandom | <span class="hljs-built_in">md5sum</span> | <span class="hljs-built_in">head</span> -c 6)<br>BOOTSTRAP_TOKEN_SECRET=$(<span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">md5sum</span> | <span class="hljs-built_in">head</span> -c 16)<br>BOOTSTRAP_TOKEN=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span>.<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN_SECRET&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Bootstrap Tokne: <span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 生成 kubelet tls bootstrap 配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kubelet bootstrapping kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config set-credentials <span class="hljs-string">&quot;system:bootstrap:<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span>&quot;</span> \<br>  --token=<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=<span class="hljs-string">&quot;system:bootstrap:<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span>&quot;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config use-context default --kubeconfig=bootstrap.kubeconfig<br><br><span class="hljs-comment"># 生成 kube-controller-manager 配置文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kube-controller-manager kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-controller-manager.kubeconfig<br>kubectl config set-credentials <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span> \<br>  --client-certificate=kube-controller-manager.pem \<br>  --client-key=kube-controller-manager-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-controller-manager.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=system:kube-controller-manager \<br>  --kubeconfig=kube-controller-manager.kubeconfig<br>kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig <br><br><span class="hljs-comment"># 生成 kube-scheduler 配置文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kube-scheduler kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-scheduler.kubeconfig<br>kubectl config set-credentials <span class="hljs-string">&quot;system:kube-scheduler&quot;</span> \<br>  --client-certificate=kube-scheduler.pem \<br>  --client-key=kube-scheduler-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-scheduler.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=system:kube-scheduler \<br>  --kubeconfig=kube-scheduler.kubeconfig<br>kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig <br><br><span class="hljs-comment"># 生成 kube-proxy 配置文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kube-proxy kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-credentials <span class="hljs-string">&quot;system:kube-proxy&quot;</span> \<br>  --client-certificate=kube-proxy.pem \<br>  --client-key=kube-proxy-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=system:kube-proxy \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig <br><br><span class="hljs-comment"># 生成 apiserver RBAC 审计配置文件 </span><br><span class="hljs-built_in">cat</span> &gt;&gt; audit-policy.yaml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"># Log all requests at the Metadata level.</span><br><span class="hljs-string">apiVersion: audit.k8s.io/v1</span><br><span class="hljs-string">kind: Policy</span><br><span class="hljs-string">rules:</span><br><span class="hljs-string">- level: Metadata</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 生成 tls bootstrap token secret 配置文件</span><br><span class="hljs-built_in">cat</span> &gt;&gt; bootstrap.secret.yaml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">apiVersion: v1</span><br><span class="hljs-string">kind: Secret</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  # Name MUST be of form &quot;bootstrap-token-&lt;token id&gt;&quot;</span><br><span class="hljs-string">  name: bootstrap-token-$&#123;BOOTSTRAP_TOKEN_ID&#125;</span><br><span class="hljs-string">  namespace: kube-system</span><br><span class="hljs-string"># Type MUST be &#x27;bootstrap.kubernetes.io/token&#x27;</span><br><span class="hljs-string">type: bootstrap.kubernetes.io/token</span><br><span class="hljs-string">stringData:</span><br><span class="hljs-string">  # Human readable description. Optional.</span><br><span class="hljs-string">  description: &quot;The default bootstrap token.&quot;</span><br><span class="hljs-string">  # Token ID and secret. Required.</span><br><span class="hljs-string">  token-id: $&#123;BOOTSTRAP_TOKEN_ID&#125;</span><br><span class="hljs-string">  token-secret: $&#123;BOOTSTRAP_TOKEN_SECRET&#125;</span><br><span class="hljs-string">  # Expiration. Optional.</span><br><span class="hljs-string">  expiration: $(date -d&#x27;+2 day&#x27; -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;)</span><br><span class="hljs-string">  # Allowed usages.</span><br><span class="hljs-string">  usage-bootstrap-authentication: &quot;true&quot;</span><br><span class="hljs-string">  usage-bootstrap-signing: &quot;true&quot;</span><br><span class="hljs-string">  # Extra groups to authenticate the token as. Must start with &quot;system:bootstrappers:&quot;</span><br><span class="hljs-string">#  auth-extra-groups: system:bootstrappers:worker,system:bootstrappers:ingress</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="3-2、处理-ipvs-及依赖"><a href="#3-2、处理-ipvs-及依赖" class="headerlink" title="3.2、处理 ipvs 及依赖"></a>3.2、处理 ipvs 及依赖</h3><p>新版本目前 <code>kube-proxy</code> 组件全部采用 ipvs 方式负载，所以为了 <code>kube-proxy</code> 能正常工作需要预先处理一下 ipvs 配置以及相关依赖(每台 node 都要处理)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">net.ipv4.ip_forward=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables=1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">ip_vs</span><br><span class="hljs-string">ip_vs_lc</span><br><span class="hljs-string">ip_vs_wlc</span><br><span class="hljs-string">ip_vs_rr</span><br><span class="hljs-string">ip_vs_wrr</span><br><span class="hljs-string">ip_vs_lblc</span><br><span class="hljs-string">ip_vs_lblcr</span><br><span class="hljs-string">ip_vs_dh</span><br><span class="hljs-string">ip_vs_sh</span><br><span class="hljs-string">ip_vs_fo</span><br><span class="hljs-string">ip_vs_nq</span><br><span class="hljs-string">ip_vs_sed</span><br><span class="hljs-string">ip_vs_ftp</span><br><span class="hljs-string">EOF</span><br><br>apt install -y conntrack ipvsadm<br></code></pre></td></tr></table></figure><h3 id="3-3、部署-Master"><a href="#3-3、部署-Master" class="headerlink" title="3.3、部署 Master"></a>3.3、部署 Master</h3><h4 id="3-3-1、安装脚本"><a href="#3-3-1、安装脚本" class="headerlink" title="3.3.1、安装脚本"></a>3.3.1、安装脚本</h4><p>master 节点上需要三个组件: <code>kube-apiserver</code>、<code>kube-controller-manager</code>、<code>kube-scheduler</code></p><p><strong>安装流程整体为以下几步</strong></p><ul><li><strong>创建单独的 <code>kube</code> 用户</strong></li><li><strong>复制相关二进制文件到 <code>/usr/bin</code>，可以采用 <code>all in one</code> 的 <code>hyperkube</code></strong></li><li><strong>复制配置文件到 <code>/etc/kubernetes</code></strong></li><li><strong>复制证书文件到 <code>/etc/kubernetes/ssl</code></strong></li><li><strong>修改配置并启动</strong></li></ul><p>安装脚本如下所示:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBE_DEFAULT_VERSION=<span class="hljs-string">&quot;1.13.4&quot;</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>  KUBE_VERSION=<span class="hljs-variable">$1</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[33mWARNING: KUBE_VERSION is blank,use default version: <span class="hljs-variable">$&#123;KUBE_DEFAULT_VERSION&#125;</span>\033[0m&quot;</span><br>  KUBE_VERSION=<span class="hljs-variable">$&#123;KUBE_DEFAULT_VERSION&#125;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 下载 hyperkube</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">download_k8s</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;hyperkube_v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        wget https://storage.googleapis.com/kubernetes-release/release/v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span>/bin/linux/amd64/hyperkube -O hyperkube_v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span><br>        <span class="hljs-built_in">chmod</span> +x hyperkube_v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 创建专用用户 kube</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">preinstall</span></span>()&#123;<br>    getent group kube &gt;/dev/null || groupadd -r kube<br>    getent passwd kube &gt;/dev/null || useradd -r -g kube -d / -s /sbin/nologin -c <span class="hljs-string">&quot;Kubernetes user&quot;</span> kube<br>&#125;<br><br><span class="hljs-comment"># 复制可执行文件和配置以及证书</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_k8s</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy hyperkube...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> hyperkube_v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span> /usr/bin/hyperkube<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Create symbolic link...\033[0m&quot;</span><br>    (<span class="hljs-built_in">cd</span> /usr/bin &amp;&amp; hyperkube --make-symlinks)<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy kubernetes config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> -r conf /etc/kubernetes<br>    <span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;/etc/kubernetes/ssl&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy kubernetes systemd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> systemd/*.service /lib/systemd/system<br>    systemctl daemon-reload<br>&#125;<br><br><span class="hljs-comment"># 创建必要的目录并修改权限</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">postinstall</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/log/kube-audit&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/log/kube-audit<br>    <span class="hljs-keyword">fi</span><br>    <br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/lib/kubelet&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/lib/kubelet<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/usr/libexec&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /usr/libexec<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes /var/log/kube-audit /var/lib/kubelet /usr/libexec<br>&#125;<br><br><span class="hljs-comment"># 执行</span><br>download_k8s<br>preinstall<br>install_k8s<br>postinstall<br></code></pre></td></tr></table></figure><p><strong>hyperkube 是一个多合一的可执行文件，通过 <code>--make-symlinks</code> 会在当前目录生成 kubernetes 各个组件的软连接</strong></p><p>被复制的 conf 目录结构如下(最终被复制到 <code>/etc/kubernetes</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── apiserver<br>├── audit-policy.yaml<br>├── bootstrap.kubeconfig<br>├── bootstrap.secret.yaml<br>├── controller-manager<br>├── kube-controller-manager.kubeconfig<br>├── kubelet<br>├── kube-proxy.kubeconfig<br>├── kube-scheduler.kubeconfig<br>├── proxy<br>├── scheduler<br>└── ssl<br>    ├── admin-key.pem<br>    ├── admin.pem<br>    ├── k8s-root-ca-key.pem<br>    ├── k8s-root-ca.pem<br>    ├── kube-apiserver-key.pem<br>    ├── kube-apiserver.pem<br>    ├── kube-controller-manager-key.pem<br>    ├── kube-controller-manager.pem<br>    ├── kubelet-api-admin-key.pem<br>    ├── kubelet-api-admin.pem<br>    ├── kube-proxy-key.pem<br>    ├── kube-proxy.pem<br>    ├── kube-scheduler-key.pem<br>    └── kube-scheduler.pem<br><br>1 directory, 25 files<br></code></pre></td></tr></table></figure><h4 id="3-3-2、配置文件"><a href="#3-3-2、配置文件" class="headerlink" title="3.3.2、配置文件"></a>3.3.2、配置文件</h4><p>以下为相关配置文件内容</p><p><strong>systemd 配置如下</strong></p><ul><li>kube-apiserver.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes API Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=network.target<br>After=etcd.service<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/apiserver<br>User=kube<br>ExecStart=/usr/bin/kube-apiserver \<br>    <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>    <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>    <span class="hljs-variable">$KUBE_ETCD_SERVERS</span> \<br>    <span class="hljs-variable">$KUBE_API_ADDRESS</span> \<br>    <span class="hljs-variable">$KUBE_API_PORT</span> \<br>    <span class="hljs-variable">$KUBELET_PORT</span> \<br>    <span class="hljs-variable">$KUBE_ALLOW_PRIV</span> \<br>    <span class="hljs-variable">$KUBE_SERVICE_ADDRESSES</span> \<br>    <span class="hljs-variable">$KUBE_ADMISSION_CONTROL</span> \<br>    <span class="hljs-variable">$KUBE_API_ARGS</span><br>Restart=on-failure<br>Type=notify<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ul><li>kube-controller-manager.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/controller-manager<br>User=kube<br>ExecStart=/usr/bin/kube-controller-manager \<br>    <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>    <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>    <span class="hljs-variable">$KUBE_MASTER</span> \<br>    <span class="hljs-variable">$KUBE_CONTROLLER_MANAGER_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ul><li>kube-scheduler.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Scheduler Plugin<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/scheduler<br>User=kube<br>ExecStart=/usr/bin/kube-scheduler \<br>    <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>    <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>    <span class="hljs-variable">$KUBE_MASTER</span> \<br>    <span class="hljs-variable">$KUBE_SCHEDULER_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>核心配置文件</strong></p><ul><li>apiserver</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure the kube-apiserver</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># The address on the local server to listen to.</span><br>KUBE_API_ADDRESS=<span class="hljs-string">&quot;--advertise-address=192.168.1.51 --bind-address=0.0.0.0&quot;</span><br><br><span class="hljs-comment"># The port on the local server to listen on.</span><br>KUBE_API_PORT=<span class="hljs-string">&quot;--secure-port=6443&quot;</span><br><br><span class="hljs-comment"># Port minions listen on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><br><span class="hljs-comment"># Comma separated list of nodes in the etcd cluster</span><br>KUBE_ETCD_SERVERS=<span class="hljs-string">&quot;--etcd-servers=https://192.168.1.51:2379,https://192.168.1.52:2379,https://192.168.1.53:2379&quot;</span><br><br><span class="hljs-comment"># Address range to use for services</span><br>KUBE_SERVICE_ADDRESSES=<span class="hljs-string">&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</span><br><br><span class="hljs-comment"># default admission control policies</span><br>KUBE_ADMISSION_CONTROL=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_API_ARGS=<span class="hljs-string">&quot; --allow-privileged=true \</span><br><span class="hljs-string">                --anonymous-auth=false \</span><br><span class="hljs-string">                --alsologtostderr \</span><br><span class="hljs-string">                --apiserver-count=3 \</span><br><span class="hljs-string">                --audit-log-maxage=30 \</span><br><span class="hljs-string">                --audit-log-maxbackup=3 \</span><br><span class="hljs-string">                --audit-log-maxsize=100 \</span><br><span class="hljs-string">                --audit-log-path=/var/log/kube-audit/audit.log \</span><br><span class="hljs-string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><br><span class="hljs-string">                --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">                --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --enable-bootstrap-token-auth \</span><br><span class="hljs-string">                --enable-garbage-collector \</span><br><span class="hljs-string">                --enable-logs-handler \</span><br><span class="hljs-string">                --endpoint-reconciler-type=lease \</span><br><span class="hljs-string">                --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem \</span><br><span class="hljs-string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">                --etcd-compaction-interval=0s \</span><br><span class="hljs-string">                --event-ttl=168h0m0s \</span><br><span class="hljs-string">                --kubelet-https=true \</span><br><span class="hljs-string">                --kubelet-certificate-authority=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --kubelet-client-certificate=/etc/kubernetes/ssl/kubelet-api-admin.pem \</span><br><span class="hljs-string">                --kubelet-client-key=/etc/kubernetes/ssl/kubelet-api-admin-key.pem \</span><br><span class="hljs-string">                --kubelet-timeout=3s \</span><br><span class="hljs-string">                --runtime-config=api/all=true \</span><br><span class="hljs-string">                --service-node-port-range=30000-50000 \</span><br><span class="hljs-string">                --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">                --v=2&quot;</span><br></code></pre></td></tr></table></figure><p>配置解释:</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>--client-ca-file</code></td><td>定义客户端 CA</td></tr><tr><td><code>--endpoint-reconciler-type</code></td><td>master endpoint 策略</td></tr><tr><td><code>--kubelet-client-certificate</code>、<code>--kubelet-client-key</code></td><td>master 反向连接 kubelet 使用的证书</td></tr><tr><td><code>--service-account-key-file</code></td><td>service account 签名 key(用于有效性验证)</td></tr><tr><td><code>--tls-cert-file</code>、<code>--tls-private-key-file</code></td><td>master apiserver <code>6443</code> 端口证书</td></tr></tbody></table><ul><li>controller-manager</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># The following values are used to configure the kubernetes controller-manager</span><br><br><span class="hljs-comment"># defaults from config and apiserver should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;  --address=127.0.0.1 \</span><br><span class="hljs-string">                                --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="hljs-string">                                --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="hljs-string">                                --bind-address=0.0.0.0 \</span><br><span class="hljs-string">                                --cluster-name=kubernetes \</span><br><span class="hljs-string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="hljs-string">                                --deployment-controller-sync-period=10s \</span><br><span class="hljs-string">                                --experimental-cluster-signing-duration=87600h0m0s \</span><br><span class="hljs-string">                                --enable-garbage-collector=true \</span><br><span class="hljs-string">                                --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="hljs-string">                                --leader-elect=true \</span><br><span class="hljs-string">                                --node-monitor-grace-period=20s \</span><br><span class="hljs-string">                                --node-monitor-period=5s \</span><br><span class="hljs-string">                                --port=10252 \</span><br><span class="hljs-string">                                --pod-eviction-timeout=2m0s \</span><br><span class="hljs-string">                                --requestheader-client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --terminated-pod-gc-threshold=50 \</span><br><span class="hljs-string">                                --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="hljs-string">                                --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="hljs-string">                                --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --secure-port=10257 \</span><br><span class="hljs-string">                                --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                                --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --use-service-account-credentials=true \</span><br><span class="hljs-string">                                --v=2&quot;</span><br></code></pre></td></tr></table></figure><p>controller manager 将不安全端口 <code>10252</code> 绑定到 127.0.0.1 确保 <code>kuebctl get cs</code> 有正确返回；将安全端口 <code>10257</code> 绑定到 0.0.0.0 公开，提供服务调用；<strong>由于 controller manager 开始连接 apiserver 的 <code>6443</code> 认证端口，所以需要 <code>--use-service-account-credentials</code> 选项来让 controller manager 创建单独的 service account(默认 <code>system:kube-controller-manager</code> 用户没有那么高权限)</strong></p><ul><li>scheduler</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes scheduler config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_SCHEDULER_ARGS=<span class="hljs-string">&quot;   --address=127.0.0.1 \</span><br><span class="hljs-string">                        --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="hljs-string">                        --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="hljs-string">                        --bind-address=0.0.0.0 \</span><br><span class="hljs-string">                        --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                        --kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="hljs-string">                        --requestheader-client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                        --secure-port=10259 \</span><br><span class="hljs-string">                        --leader-elect=true \</span><br><span class="hljs-string">                        --port=10251 \</span><br><span class="hljs-string">                        --tls-cert-file=/etc/kubernetes/ssl/kube-scheduler.pem \</span><br><span class="hljs-string">                        --tls-private-key-file=/etc/kubernetes/ssl/kube-scheduler-key.pem \</span><br><span class="hljs-string">                        --v=2&quot;</span><br></code></pre></td></tr></table></figure><p>shceduler 同  controller manager 一样将不安全端口绑定在本地，安全端口对外公开</p><p><strong>最后在三台节点上调整一下 IP 配置，启动即可</strong></p><h3 id="3-4、部署-Node"><a href="#3-4、部署-Node" class="headerlink" title="3.4、部署 Node"></a>3.4、部署 Node</h3><h4 id="3-4-1、安装脚本"><a href="#3-4-1、安装脚本" class="headerlink" title="3.4.1、安装脚本"></a>3.4.1、安装脚本</h4><p>node 安装与 master 安装过程一致，这里不再阐述</p><h4 id="3-4-2、配置文件"><a href="#3-4-2、配置文件" class="headerlink" title="3.4.2、配置文件"></a>3.4.2、配置文件</h4><p><strong>systemd 配置文件</strong></p><ul><li>kubelet.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Kubelet Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=docker.service<br>Requires=docker.service<br><br>[Service]<br>WorkingDirectory=/var/lib/kubelet<br>EnvironmentFile=-/etc/kubernetes/kubelet<br>ExecStart=/usr/bin/kubelet \<br>    <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>    <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>    <span class="hljs-variable">$KUBELET_API_SERVER</span> \<br>    <span class="hljs-variable">$KUBELET_ADDRESS</span> \<br>    <span class="hljs-variable">$KUBELET_PORT</span> \<br>    <span class="hljs-variable">$KUBELET_HOSTNAME</span> \<br>    <span class="hljs-variable">$KUBE_ALLOW_PRIV</span> \<br>    <span class="hljs-variable">$KUBELET_ARGS</span><br>Restart=on-failure<br>KillMode=process<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ul><li>kube-proxy.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Kube-Proxy Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=network.target<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/proxy<br>ExecStart=/usr/bin/kube-proxy \<br>    <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>    <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>    <span class="hljs-variable">$KUBE_MASTER</span> \<br>    <span class="hljs-variable">$KUBE_PROXY_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>核心配置文件</strong></p><ul><li>kubelet</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--node-ip=192.168.1.54&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=docker4.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;  --address=0.0.0.0 \</span><br><span class="hljs-string">                --allow-privileged \</span><br><span class="hljs-string">                --anonymous-auth=false \</span><br><span class="hljs-string">                --authorization-mode=Webhook \</span><br><span class="hljs-string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">                --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --network-plugin=cni \</span><br><span class="hljs-string">                --cgroup-driver=cgroupfs \</span><br><span class="hljs-string">                --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">                --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">                --cluster-domain=cluster.local \</span><br><span class="hljs-string">                --cni-conf-dir=/etc/cni/net.d \</span><br><span class="hljs-string">                --eviction-soft=imagefs.available&lt;15%,memory.available&lt;512Mi,nodefs.available&lt;15%,nodefs.inodesFree&lt;10% \</span><br><span class="hljs-string">                --eviction-soft-grace-period=imagefs.available=3m,memory.available=1m,nodefs.available=3m,nodefs.inodesFree=1m \</span><br><span class="hljs-string">                --eviction-hard=imagefs.available&lt;10%,memory.available&lt;256Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% \</span><br><span class="hljs-string">                --eviction-max-pod-grace-period=30 \</span><br><span class="hljs-string">                --image-gc-high-threshold=80 \</span><br><span class="hljs-string">                --image-gc-low-threshold=70 \</span><br><span class="hljs-string">                --image-pull-progress-deadline=30s \</span><br><span class="hljs-string">                --kube-reserved=cpu=500m,memory=512Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">                --max-pods=100 \</span><br><span class="hljs-string">                --minimum-image-ttl-duration=720h0m0s \</span><br><span class="hljs-string">                --node-labels=node.kubernetes.io/k8s-node=true \</span><br><span class="hljs-string">                --pod-infra-container-image=gcr.azk8s.cn/google_containers/pause-amd64:3.1 \</span><br><span class="hljs-string">                --port=10250 \</span><br><span class="hljs-string">                --read-only-port=0 \</span><br><span class="hljs-string">                --rotate-certificates \</span><br><span class="hljs-string">                --rotate-server-certificates \</span><br><span class="hljs-string">                --resolv-conf=/run/systemd/resolve/resolv.conf \</span><br><span class="hljs-string">                --system-reserved=cpu=500m,memory=512Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --fail-swap-on=false \</span><br><span class="hljs-string">                --v=2&quot;</span><br></code></pre></td></tr></table></figure><p><strong>当 kubelet 组件设置了 <code>--rotate-certificates</code>，<code>--rotate-server-certificates</code> 后会自动更新其使用的相关证书，同时指定 <code>--authorization-mode=Webhook</code> 后 <code>10250</code> 端口 RBAC 授权将会委托给 apiserver</strong></p><ul><li>proxy</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes proxy config</span><br><span class="hljs-comment"># default config should be adequate</span><br><span class="hljs-comment"># Add your own!</span><br>KUBE_PROXY_ARGS=<span class="hljs-string">&quot;   --bind-address=0.0.0.0 \</span><br><span class="hljs-string">                    --cleanup-ipvs=true \</span><br><span class="hljs-string">                    --cluster-cidr=10.254.0.0/16 \</span><br><span class="hljs-string">                    --hostname-override=docker4.node \</span><br><span class="hljs-string">                    --healthz-bind-address=0.0.0.0 \</span><br><span class="hljs-string">                    --healthz-port=10256 \</span><br><span class="hljs-string">                    --masquerade-all=true \</span><br><span class="hljs-string">                    --proxy-mode=ipvs \</span><br><span class="hljs-string">                    --ipvs-min-sync-period=5s \</span><br><span class="hljs-string">                    --ipvs-sync-period=5s \</span><br><span class="hljs-string">                    --ipvs-scheduler=wrr \</span><br><span class="hljs-string">                    --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span><br><span class="hljs-string">                    --logtostderr=true \</span><br><span class="hljs-string">                    --v=2&quot;</span><br></code></pre></td></tr></table></figure><p>由于 <code>kubelet</code> 组件是采用 TLS Bootstrap 启动，所以需要预先创建相关配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建用于 tls bootstrap 的 token secret</span><br>kubectl create -f bootstrap.secret.yaml<br><br><span class="hljs-comment"># 为了能让 kubelet 实现自动更新证书，需要配置相关 clusterrolebinding</span><br><br><span class="hljs-comment"># 允许 kubelet tls bootstrap 创建 csr 请求</span><br>kubectl create clusterrolebinding create-csrs-for-bootstrapping \<br>    --clusterrole=system:node-bootstrapper \<br>    --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding auto-approve-csrs-for-group \<br>    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient \<br>    --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding auto-approve-renewals-for-nodes \<br>    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient \<br>    --group=system:nodes<br><br><span class="hljs-comment"># 在 kubelet server 开启 api 认证的情况下，apiserver 反向访问 kubelet 10250 需要此授权(eg: kubectl logs)</span><br>kubectl create clusterrolebinding system:kubelet-api-admin \<br>    --clusterrole=system:kubelet-api-admin \<br>    --user=system:kubelet-api-admin<br></code></pre></td></tr></table></figure><h4 id="3-4-3、Nginx-代理"><a href="#3-4-3、Nginx-代理" class="headerlink" title="3.4.3、Nginx 代理"></a>3.4.3、Nginx 代理</h4><p>为了保证 apiserver 的 HA，需要在每个 node 上部署 nginx 来反向代理(tcp)所有 apiserver；然后 kubelet、kube-proxy 组件连接本地 <code>127.0.0.1:6443</code> 访问 apiserver，以确保任何 master 挂掉以后 node 都不会受到影响</p><ul><li>nginx.conf</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">error_log stderr notice;<br><br>worker_processes auto;<br>events &#123;<br>  multi_accept on;<br>  use epoll;<br>  worker_connections 1024;<br>&#125;<br><br>stream &#123;<br>    upstream kube_apiserver &#123;<br>        least_conn;<br>        server 192.168.1.51:6443;<br>        server 192.168.1.52:6443;<br>        server 192.168.1.53:6443;<br>    &#125;<br><br>    server &#123;<br>        listen        0.0.0.0:6443;<br>        proxy_pass    kube_apiserver;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>nginx-proxy.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=kubernetes apiserver docker wrapper<br>Wants=docker.socket<br>After=docker.service<br><br>[Service]<br>User=root<br>PermissionsStartOnly=<span class="hljs-literal">true</span><br>ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \<br>                              -v /etc/nginx:/etc/nginx \<br>                              --name nginx-proxy \<br>                              --net=host \<br>                              --restart=on-failure:5 \<br>                              --memory=512M \<br>                              nginx:1.14.2-alpine<br>ExecStartPre=-/usr/bin/docker <span class="hljs-built_in">rm</span> -f nginx-proxy<br>ExecStop=/usr/bin/docker stop nginx-proxy<br>Restart=always<br>RestartSec=15s<br>TimeoutStartSec=30s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后在每个 node 上先启动 nginx-proxy，接着启动 kubelet 与 kube-proxy 即可(master 上的 kubelet、kube-proxy 只需要修改 ip 和 node name)</p><h4 id="3-4-4、kubelet-server-证书"><a href="#3-4-4、kubelet-server-证书" class="headerlink" title="3.4.4、kubelet server 证书"></a>3.4.4、kubelet server 证书</h4><p><strong>注意: 新版本 kubelet server 的证书自动签发已经被关闭(看 issue 好像是由于安全原因)，所以对于 kubelet server 的证书仍需要手动签署</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ kubectl get csr<br>NAME                                                   AGE   REQUESTOR                  CONDITION<br>csr-99l77                                              10s   system:node:docker4.node   Pending<br>node-csr-aGwaNKorMc0MZBYOuJsJGCB8Bg8ds97rmE3oKBTV-_E   11s   system:bootstrap:5d820b    Approved,Issued<br>docker1.node ➜  ~ kubectl certificate approve csr-99l77<br>certificatesigningrequest.certificates.k8s.io/csr-99l77 approved<br></code></pre></td></tr></table></figure><h3 id="3-5、部署-Calico"><a href="#3-5、部署-Calico" class="headerlink" title="3.5、部署 Calico"></a>3.5、部署 Calico</h3><p>当 node 全部启动后，由于网络组件(CNI)未安装会显示为 NotReady 状态；下面将部署 Calico 作为网络组件，完成跨节点网络通讯；具体安装文档可以参考 <a href="https://docs.projectcalico.org/v3.6/getting-started/kubernetes/installation/calico#installing-with-the-etcd-datastore">Installing with the etcd datastore</a></p><p>以下为 calico 的配置文件</p><ul><li>calico.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: calico/templates/calico-etcd-secrets.yaml</span><br><span class="hljs-comment"># The following contains k8s Secrets for use with a TLS enabled etcd cluster.</span><br><span class="hljs-comment"># For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-etcd-secrets</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># Populate the following with etcd TLS configuration if desired, but leave blank if</span><br>  <span class="hljs-comment"># not using TLS for etcd.</span><br>  <span class="hljs-comment"># The keys below should be uncommented and the values populated with the base64</span><br>  <span class="hljs-comment"># encoded contents of each file that would be associated with the TLS data.</span><br>  <span class="hljs-comment"># Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0</span><br>  <span class="hljs-attr">etcd-key:</span> <span class="hljs-string">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdGtOVlV5QWtOOWxDKy9EbzlCRkt0em5IZlFJKzJMK2crclkwLzNoOExJTEFoWUtXCm1XdVNNQUFjbyt4clVtaTFlUGIzcmRKR0p1NEhmRXFmalYvakhvN0haOGxteXd0S29Ed254aU9jZDRlRXltcXEKTEFVYzZ5RWU4dXFGZ2pLVHE4SjV2Z1F1cGp0ZlZnZXRPdVVsWWtWbUNKMWtpUW0yVk5WRnRWZ0Fqck1xSy9POApJTXN6RWRYU3BDc1Zwb0kzaUpoVHJSRng4ZzRXc2hwNG1XMzhMWDVJYVVoMWZaSGVMWm1sRURpclBWMGRTNmFWCmJscUk2aUFwanVBc3hYWjFlVTdmOVZWK01PVmNVc3A4cDAxNmJzS3R6VTJGSnB6ZlM3c1BlbGpKZGgzZmVOdk8KRVl1aDlsU0c1VGNKUHBuTTZ0R0ppaHpEWCt4dnNGa3d5MVJSVlFJREFRQUJBb0lCQUYwRXVqd2xVRGFzakJJVwpubDFKb2U4bTd0ZXUyTEk0QW9sUmluVERZZVE1aXRYWWt0R1Q0OVRaaWNSak9WYWlsOU0zZjZwWGdYUUcwUTB1CjdJVHpaZTlIZ1I5SDIwMU80dlFxSDBaeEVENjBqQ0hlRkNGSkxyd1ZlRDBUVWJYajZCZWx0Z296Q2pmT1gxYUIKcm5nN1VEdjZIUnZTYitlOGJEQ1pjKzBjRDVURG4vUWV0R1dtUmpJZ1FhMmlUT2MzSzFiaHo2RTl5Nk9qWkFTMQpiai9NL1dOd20yNHRxQTJEeWdjcGVmUGFnTWtFNm9uYXBFVHhZdi83QmNqcUhtdVd6WE1wMzd6VGpPckwxVDdmClhrbHdFMUYrMDRhRDR6dDZycEdmN0lqSUdvRkEvT2ZrRGZiYkRjN2NsaDJ1SkNMTVE5MGpuSkxMTGRSV3dQRW4KMkkyY3IvVUNnWUVBN3BjT29VV3RwdDJjWGIzSnl3Tkh4aXl1bEc4V1JENjBlQ1MrUXFnQUZndU5JWFJlMEREUwovSWY0M1BhaVB3TjhBS216ZTRKbGsxM3Rnd29qdi9RWVFVblJzZi9PbnpUUlFoWVJXT2lxSE5lSmFvOUxFU0VDClcxNXNmUjhnYzd0dFdPZ0loZkhudmdCR0QvYmUzS1NWVjdUY0lndVVjV3RzeHhLdjZ4LzJNdHNDZ1lFQXc1QVIKWk9HNUp4UGVNV3FVRUR3QjJuQmt6WEtGblpNSEJXV2FOeHpEaTI0NmZEVWM2T1hSTTJJanh2cmVkc3JKQjBXMwovelNDeFdUbkRmL3RJY1lKMjRuTmNsMUNDS2hTNVE5bVZxanZ3dE1SaEF1Uk5VSFJSVjZLNS91V1hHQzAzekR3CkEvMUFSd3lZSHNHTlJVOFRNNnpNRFcxL0x5djZNZ2pnOFBIamk0OENnWUVBa3JwelZOcjFJRm5KZ0J6bnJPSW4Ka2NpSTFPQThZVnZ1d0xSWURjWWp4MnJ6TUUvUXYxaEhhT1oyTmUyM2VlazZxVzJ6NDVFZHhyTk5EZmwrWXQ1Swp6RndKaWQ0M3c5RkhuOHpTZmtzWDB3VDZqWDN5UEdhQWZKQmxSODJNdDUvY2I0RERQUnkzMkRGeTVQNTlzRlBIClJGa0Z5Q28yOEVtUWJCMGg4d2VFOFdFQ2dZQm1IeUptS3RWVUNiVDYyeXZzZWxtQlp6WE1ieVJGRDlVWHhXSE4KcTlDVlMvOXdndy9Rc3NvVzZnWEN6NWhDTWt6ZDVsTmFDbUxMajVCMHFCTjlrbnZ0VDcyZ0hnRHdvbTEvUGhaego1STRuajY3UzVITjBleVU3ODAzWUxISHRWWGErSWtFRDVFaWZrWDBTZW9JNkVqdjF2U05sVTZ1WngzNUVpSXhtClpmb3NFd0tCZ0dQMmpsK0lPcFV5Y2NEL25EbUJWa05CWHoydWhncU8yYjE4d0hSOGdiSXoyVTRBZnpreXVkWUcKZzQvRjJZZVdCSEdNeTc5N0I2c0hjQTdQUWNNdUFuRk11MG9UNkMvanpDSHpoK2VaaS8wdHJRTHJGeWFFaGVuWgpnazduUTdHNHhROWZLZmVTeFcyUlNNUUR0MTZULzNOTitTOEZCTjJmZEliY3V4QWs0WjVHCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==</span><br>  <span class="hljs-attr">etcd-cert:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZFekNDQXZ1Z0F3SUJBZ0lVRGJqcTdVc2ViY2toZXRZb1RPNnRsc1N1c1k0d0RRWUpLb1pJaHZjTkFRRU4KQlFBd2J6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeERUQUxCZ05WQkFvVEJHVjBZMlF4RmpBVUJnTlZCQXNURFdWMFkyUWdVMlZqZFhKcGRIa3hGVEFUCkJnTlZCQU1UREdWMFkyUXRjbTl2ZEMxallUQWVGdzB4T1RBek1UWXdNelV4TURCYUZ3MHlPVEF6TVRNd016VXgKTURCYU1HY3hDekFKQmdOVkJBWVRBa05PTVJBd0RnWURWUVFJRXdkQ1pXbHFhVzVuTVJBd0RnWURWUVFIRXdkQwpaV2xxYVc1bk1RMHdDd1lEVlFRS0V3UmxkR05rTVJZd0ZBWURWUVFMRXcxbGRHTmtJRk5sWTNWeWFYUjVNUTB3CkN3WURWUVFERXdSbGRHTmtNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXRrTlYKVXlBa045bEMrL0RvOUJGS3R6bkhmUUkrMkwrZytyWTAvM2g4TElMQWhZS1dtV3VTTUFBY28reHJVbWkxZVBiMwpyZEpHSnU0SGZFcWZqVi9qSG83SFo4bG15d3RLb0R3bnhpT2NkNGVFeW1xcUxBVWM2eUVlOHVxRmdqS1RxOEo1CnZnUXVwanRmVmdldE91VWxZa1ZtQ0oxa2lRbTJWTlZGdFZnQWpyTXFLL084SU1zekVkWFNwQ3NWcG9JM2lKaFQKclJGeDhnNFdzaHA0bVczOExYNUlhVWgxZlpIZUxabWxFRGlyUFYwZFM2YVZibHFJNmlBcGp1QXN4WFoxZVU3Zgo5VlYrTU9WY1VzcDhwMDE2YnNLdHpVMkZKcHpmUzdzUGVsakpkaDNmZU52T0VZdWg5bFNHNVRjSlBwbk02dEdKCmloekRYK3h2c0Zrd3kxUlJWUUlEQVFBQm80R3VNSUdyTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUUKRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVQpFKzVsWWN1LzhieHJ2WjNvUnRSMmEvOVBJRkF3SHdZRFZSMGpCQmd3Rm9BVTJaVWM3R2hGaG1PQXhzRlZ3VEEyCm5lZFJIdmN3TEFZRFZSMFJCQ1V3STRJSmJHOWpZV3hvYjNOMGh3Ui9BQUFCaHdUQXFBRXpod1RBcUFFMGh3VEEKcUFFMU1BMEdDU3FHU0liM0RRRUJEUVVBQTRJQ0FRQUx3Vkc2QW93cklwZzQvYlRwWndWL0pBUWNLSnJGdm52VApabDVDdzIzNDI4UzJLLzIwaXphaStEWUR1SXIwQ0ZCa2xGOXVsK05ROXZMZ1lqcE0rOTNOY3I0dXhUTVZsRUdZCjloc3NyT1FZZVBGUHhBS1k3RGd0K2RWUGwrWlg4MXNWRzJkU3ZBbm9Kd3dEVWt5U0VUY0g5NkszSlNKS2dXZGsKaTYxN21GYnMrTlcxdngrL0JNN2pVU3ZRUzhRb3JGQVE3SlcwYzZ3R2V4RFEzZExvTXJuR3Vocjd0V0E0WjhwawpPaE12cWdhWUZYSThNUm4yemlLV0R6QXNsa0hGd1RZdWhCNURMSEt0RUVwcWhxbGh1RThwTkZMaVVSV2xQWWhlCmpDNnVKZ0hBZDltcSswd2pyTmxqKzlWaDJoZUJWNldXZEROVTZaR2tpR003RW9YbDM1OWdUTzJPUkNLUk5vZ0YKRVplR25HcjJQNDhKbnZjTnFmZzNPdUtYd24wRDVYYllSWjFuYnR5WG9mMFByUUhEU21wUFVPMWNiZUJjSWVtcQpEVWozK0MrRzBRS1FLQlZDTXJzNXJIVlVWVkJZZzk5ZW1sRE1zUE5TZm9JWDQwTVFCeTdKMnpxRVV5M0sxcGlaCkhwT0lZT1RrWDRhczhqcGYxMnkxSXoxRVZydE1xek83d294VmMwdHRZYWN5NzUrVzZuS1hlWjBaand5aTVYSzUKZGduSVhmZW51RUNlWFNDdWZCSmUxVklzaXVWZ3cyRjlUNk5zRDhnQ3A5SlhTamJ1SXpiM3ArNU9uZzM2ZnBRdQpXZVBCY0dQVXE5cGEwZUtOUGJXNjlDUHdtUTQ2cjg0T3hTTURHWC9CMElqNUtNUnZUMmhPUXBqTVpSblc5OUxFCjRMbUJuUTg1Wmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br>  <span class="hljs-attr">etcd-ca:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZyakNDQTVhZ0F3SUJBZ0lVWXVIKzIxYlNaU2hncVYxWkx3a2o4RmpZbUl3d0RRWUpLb1pJaHZjTkFRRU4KQlFBd2J6RUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeERUQUxCZ05WQkFvVEJHVjBZMlF4RmpBVUJnTlZCQXNURFdWMFkyUWdVMlZqZFhKcGRIa3hGVEFUCkJnTlZCQU1UREdWMFkyUXRjbTl2ZEMxallUQWVGdzB4T1RBek1UWXdNelV4TURCYUZ3MHlPVEF6TVRNd016VXgKTURCYU1HOHhDekFKQmdOVkJBWVRBa05PTVJBd0RnWURWUVFJRXdkQ1pXbHFhVzVuTVJBd0RnWURWUVFIRXdkQwpaV2xxYVc1bk1RMHdDd1lEVlFRS0V3UmxkR05rTVJZd0ZBWURWUVFMRXcxbGRHTmtJRk5sWTNWeWFYUjVNUlV3CkV3WURWUVFERXd4bGRHTmtMWEp2YjNRdFkyRXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUsKQW9JQ0FRRGFLK0s4WStqZkdOY2pOeUloeUhXSE5adWxVZzVKZFpOVU9GOHFXbXJMa0NuY2ZWdVF3dmI4cDFwLwpSSjBFOWo0OFBhZ1RJT3U2TU81R24zejFrZGpHRk9jOVZwMlZjYWJEQzJLWWJvRzdVQ0RmTWkzR1MzUnhUejVkCnh0MG1Ya2liVkMvc01NU2RrRm1mU2FCSXBoKzAyTnMwZURyMzNtUWxTdURlTWozNHJaTkVwMzRnUUk0eElTejAKbXhXR0dWNzcwUE9ScVgrZUthTEpiclp3anFFcnpHMEtEVUlBM0ZuTFdRMnp4b0VwN3JZby9LaGRiOHdETE1kbQp6VXNOZHI0T1F4MFBVRXA4akRUU2lFODkydDQ4KytsOHJ0MW4vTHFRc1FhVncrQlQrMTRvRHdIVkFaRXZ2ZnMwCmZkZ0QvU2RINGJRdHNhT21BdFByQldseU5aMUxIZkR2djMraXFzNk83UXpWUTFCK1c5cFRxdUZ2YUxWN3R1S3UKSXNlUFlseFdjV2E2M0hGbFkxVVJ6M0owaGtrZEZ1dkhUc0dhZDVpaWVrb0dUcFdTN2dVdCtTeWVJT2FhMldHLwp4Y1NiUWE0Y2xiZThuUHV2c1ZFVDhqZ0d0NGVLT25yRVJId0hMb2VleEpsSjdUdnhHNHpOTHZsc2FOL29iRzFDClUzMXczZ2d1SXpzRk5yallsUFdSZ0hSdXdPTlE5anlkM2dqVmNYUFdHTFJISUdYbjNhUDluT3A0OE9WWDhzbXoKOGIwS0V4UVpEQWUyS0tjWEg5a1ZiUFJQSWlLeGpXelV5aDMzQlRNejlPczZHcWM0Zk05c1hxbGRhVzBGd3g4MQpJaklScWx5a3VOSXNDWGhMUzhlNmVtdUNYMTVDZGNKb0ZmdXRuTENvV1B4Umg5OEF4UUlEQVFBQm8wSXdRREFPCkJnTlZIUThCQWY4RUJBTUNBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVMlpVYzdHaEYKaG1PQXhzRlZ3VEEybmVkUkh2Y3dEUVlKS29aSWh2Y05BUUVOQlFBRGdnSUJBSjh3bVNJMVBsQm8zcE1RWC9DOQpRS1RrR0xvVUhGdWprdFoxM1FYeXQ1LzFSeVB2WG1lLy90N3FHR2I5RmJZSm9BYTRTd3JSZkYzZmh3UDZaS0FnCnNYSEliR2gwc014UTdqVmQwMUNMWkoxQmZFNGZtTVlaQUlEWGpTcTNqbHJXZWcxL2hWTFN2dXRuUEFWSXc1SWwKZUdXRTMyOVJ2b2d2dXV6dUsxY2xwZFpIL2p3UlZjUUFUK0xvT2xFZ3Rkd293c0xpaWx3WE95eEZLZDd1UDk3bgozTFZUekFNN3Flell4SUVMQVlUUUN5eTdpeEIxNXlJV1UrUWhreUFtWXJoNEN6VUNNUjQreDlpaGZ6UnlOQkxLCmRBRTdwcjdyUEM4WFQ0YWh2SkJCZTg1THViTVdVRmprcEF5cklQODYyYkFCOCtKSXNFdXNZVGdQakUrMGhteTkKT0NIU2x4Q25GQVdPUXcwQ05Kb3AxWGpHU0RZOXlXL1NNWS83T3B0QlBhT3VWTzVwZTg3VmVXRFFtYmlpdnc3MQo4cFhDQnN6ZWNsdjJZKzdscTRnL0FaQkViVXRvLzV4UXJCbmZGKy9hZFFOQzY4aG4yYzZWa3czYTVDR0ZMN0p2CjhWdFNmeFEzZnFUci9TdzlJbkVKVWpuc0Y3R0xINzZMWXZIU05WeldhMkhiVFNlTnQ0RUlpdlEwb2d0b2hzY0kKSHlrZlpRQ3Z6ZnBSZi9TODFiRDNnU29jQ3NzR2crdVpVU0FMdVhBRDE4RkRXNzg2LzRCckcrMzVLOVBLNktUZwpoWGN4WmRHd3V1RWx0aTRBNWx4OHNrZExPSkZ6TUJPWFJNU2Jsc0dna3pGK2JNRkMrMHV3WW1WK0VTRUdwdy9NCm93WUN1dHh2a3ltL2NOcEk1bjFhanpEcQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: calico/templates/calico-config.yaml</span><br><span class="hljs-comment"># This ConfigMap is used to configure a self-hosted Calico installation.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># Configure this with the location of your etcd cluster.</span><br>  <span class="hljs-attr">etcd_endpoints:</span> <span class="hljs-string">&quot;https://192.168.1.51:2379,https://192.168.1.52:2379,https://192.168.1.53:2379&quot;</span><br><br>  <span class="hljs-comment"># If you&#x27;re using TLS enabled etcd uncomment the following.</span><br>  <span class="hljs-comment"># You must also populate the Secret below with these files.</span><br>  <span class="hljs-attr">etcd_ca:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-ca&quot;</span><br>  <span class="hljs-attr">etcd_cert:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-cert&quot;</span><br>  <span class="hljs-attr">etcd_key:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-key&quot;</span><br>  <span class="hljs-comment"># Typha is disabled.</span><br>  <span class="hljs-attr">typha_service_name:</span> <span class="hljs-string">&quot;none&quot;</span><br>  <span class="hljs-comment"># Configure the Calico backend to use.</span><br>  <span class="hljs-attr">calico_backend:</span> <span class="hljs-string">&quot;bird&quot;</span><br><br>  <span class="hljs-comment"># Configure the MTU to use</span><br>  <span class="hljs-attr">veth_mtu:</span> <span class="hljs-string">&quot;1440&quot;</span><br><br>  <span class="hljs-comment"># The CNI network configuration to install on each node.  The special</span><br>  <span class="hljs-comment"># values in this config will be automatically populated.</span><br>  <span class="hljs-attr">cni_network_config:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;name&quot;: &quot;k8s-pod-network&quot;,</span><br><span class="hljs-string">      &quot;cniVersion&quot;: &quot;0.3.0&quot;,</span><br><span class="hljs-string">      &quot;plugins&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">          &quot;type&quot;: &quot;calico&quot;,</span><br><span class="hljs-string">          &quot;log_level&quot;: &quot;info&quot;,</span><br><span class="hljs-string">          &quot;etcd_endpoints&quot;: &quot;__ETCD_ENDPOINTS__&quot;,</span><br><span class="hljs-string">          &quot;etcd_key_file&quot;: &quot;__ETCD_KEY_FILE__&quot;,</span><br><span class="hljs-string">          &quot;etcd_cert_file&quot;: &quot;__ETCD_CERT_FILE__&quot;,</span><br><span class="hljs-string">          &quot;etcd_ca_cert_file&quot;: &quot;__ETCD_CA_CERT_FILE__&quot;,</span><br><span class="hljs-string">          &quot;mtu&quot;: __CNI_MTU__,</span><br><span class="hljs-string">          &quot;ipam&quot;: &#123;</span><br><span class="hljs-string">              &quot;type&quot;: &quot;calico-ipam&quot;</span><br><span class="hljs-string">          &#125;,</span><br><span class="hljs-string">          &quot;policy&quot;: &#123;</span><br><span class="hljs-string">              &quot;type&quot;: &quot;k8s&quot;</span><br><span class="hljs-string">          &#125;,</span><br><span class="hljs-string">          &quot;kubernetes&quot;: &#123;</span><br><span class="hljs-string">              &quot;kubeconfig&quot;: &quot;__KUBECONFIG_FILEPATH__&quot;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">          &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="hljs-string">          &quot;snat&quot;: true,</span><br><span class="hljs-string">          &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      ]</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: calico/templates/rbac.yaml</span><br><br><span class="hljs-comment"># Include a clusterrole for the kube-controllers component,</span><br><span class="hljs-comment"># and bind it to the calico-kube-controllers serviceaccount.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-comment"># Pods are monitored for changing labels.</span><br>  <span class="hljs-comment"># The node controller monitors Kubernetes nodes.</span><br>  <span class="hljs-comment"># Namespace and serviceaccount labels are used for policy.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">serviceaccounts</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-comment"># Watch for changes to Kubernetes NetworkPolicies.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">networkpolicies</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Include a clusterrole for the calico-node DaemonSet,</span><br><span class="hljs-comment"># and bind it to the calico-node serviceaccount.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-comment"># The CNI plugin needs to get pods, nodes, and namespaces.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-comment"># Used to discover service IPs for advertisement.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/status</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-comment"># Needed for clearing NodeNetworkUnavailable flag.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: calico/templates/calico-node.yaml</span><br><span class="hljs-comment"># This manifest installs the calico/node container, as well</span><br><span class="hljs-comment"># as the Calico CNI plugins and network config on</span><br><span class="hljs-comment"># each master and worker node in a Kubernetes cluster.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">updateStrategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-comment"># This, along with the CriticalAddonsOnly toleration below,</span><br>        <span class="hljs-comment"># marks the pod as a critical add-on, ensuring it gets</span><br>        <span class="hljs-comment"># priority scheduling and that its resources are reserved</span><br>        <span class="hljs-comment"># if it ever gets evicted.</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">beta.kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-comment"># Make sure calico-node gets scheduled on all nodes.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-comment"># Mark the pod as a critical add-on for rescheduling.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">CriticalAddonsOnly</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoExecute</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">calico-node</span><br>      <span class="hljs-comment"># Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a &quot;force</span><br>      <span class="hljs-comment"># deletion&quot;: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">initContainers:</span><br>        <span class="hljs-comment"># This container installs the Calico CNI binaries</span><br>        <span class="hljs-comment"># and CNI network config file on each node.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install-cni</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">calico/cni:v3.6.0</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/install-cni.sh&quot;</span>]<br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-comment"># Name of the CNI config file to create.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CNI_CONF_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;10-calico.conflist&quot;</span><br>            <span class="hljs-comment"># The CNI network config to install on each node.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CNI_NETWORK_CONFIG</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">cni_network_config</span><br>            <span class="hljs-comment"># The location of the Calico etcd cluster.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_ENDPOINTS</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_endpoints</span><br>            <span class="hljs-comment"># CNI MTU Config variable</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CNI_MTU</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">veth_mtu</span><br>            <span class="hljs-comment"># Prevents the container from sleeping forever.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SLEEP</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;false&quot;</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/host/opt/cni/bin</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">cni-bin-dir</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/host/etc/cni/net.d</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">cni-net-dir</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/calico-secrets</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-comment"># Runs calico/node container on each Kubernetes node.  This</span><br>        <span class="hljs-comment"># container programs network policy and routes on each</span><br>        <span class="hljs-comment"># host.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">calico/node:v3.6.0</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-comment"># The location of the Calico etcd cluster.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_ENDPOINTS</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_endpoints</span><br>            <span class="hljs-comment"># Location of the CA certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CA_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_ca</span><br>            <span class="hljs-comment"># Location of the client key for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_KEY_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_key</span><br>            <span class="hljs-comment"># Location of the client certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_cert</span><br>            <span class="hljs-comment"># Set noderef for node controller.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_K8S_NODE_REF</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">fieldRef:</span><br>                  <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">spec.nodeName</span><br>            <span class="hljs-comment"># Choose the backend to use.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_NETWORKING_BACKEND</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">calico_backend</span><br>            <span class="hljs-comment"># Cluster type to identify the deployment type</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CLUSTER_TYPE</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;k8s,bgp&quot;</span><br>            <span class="hljs-comment"># Auto-detect the BGP IP address.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">IP</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;autodetect&quot;</span><br>            <span class="hljs-comment"># Enable IPIP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_IPV4POOL_IPIP</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;Always&quot;</span><br>            <span class="hljs-comment"># Set MTU for tunnel device used if ipip is enabled</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FELIX_IPINIPMTU</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">veth_mtu</span><br>            <span class="hljs-comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span><br>            <span class="hljs-comment"># chosen from this range. Changing this value after installation will have</span><br>            <span class="hljs-comment"># no effect. This should fall within `--cluster-cidr`.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_IPV4POOL_CIDR</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;10.20.0.0/16&quot;</span><br>            <span class="hljs-comment"># Disable file logging so `kubectl logs` works.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CALICO_DISABLE_FILE_LOGGING</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;true&quot;</span><br>            <span class="hljs-comment"># Set Felix endpoint to host default action to ACCEPT.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FELIX_DEFAULTENDPOINTTOHOSTACTION</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;ACCEPT&quot;</span><br>            <span class="hljs-comment"># Disable IPv6 on Kubernetes.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FELIX_IPV6SUPPORT</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;false&quot;</span><br>            <span class="hljs-comment"># Set Felix logging to &quot;info&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FELIX_LOGSEVERITYSCREEN</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;info&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FELIX_HEALTHENABLED</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;true&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">IP_AUTODETECTION_METHOD</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">can-reach=192.168.1.51</span><br>          <span class="hljs-attr">securityContext:</span><br>            <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">requests:</span><br>              <span class="hljs-attr">cpu:</span> <span class="hljs-string">250m</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/liveness</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">9099</span><br>              <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">10</span><br>            <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">6</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">exec:</span><br>              <span class="hljs-attr">command:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/calico-node</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">-bird-ready</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">-felix-ready</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/lib/modules</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">lib-modules</span><br>              <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/run/xtables.lock</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">xtables-lock</span><br>              <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/calico</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">var-run-calico</span><br>              <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/calico</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">var-lib-calico</span><br>              <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/calico-secrets</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># Used by calico/node.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lib-modules</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/lib/modules</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">var-run-calico</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/calico</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">var-lib-calico</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/calico</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xtables-lock</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/run/xtables.lock</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">FileOrCreate</span><br>        <span class="hljs-comment"># Used to install CNI.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-bin-dir</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/cni/bin</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-net-dir</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/cni/net.d</span><br>        <span class="hljs-comment"># Mount in the etcd TLS secrets with mode 400.</span><br>        <span class="hljs-comment"># See https://kubernetes.io/docs/concepts/configuration/secret/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>          <span class="hljs-attr">secret:</span><br>            <span class="hljs-attr">secretName:</span> <span class="hljs-string">calico-etcd-secrets</span><br>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0400</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: calico/templates/calico-kube-controllers.yaml</span><br><span class="hljs-comment"># This manifest deploys the Calico Kubernetes controllers.</span><br><span class="hljs-comment"># See https://github.com/projectcalico/kube-controllers</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-kube-controllers</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># The controllers can only have a single active instance.</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-kube-controllers</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">beta.kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-comment"># The controllers must run in the host network namespace so that</span><br>      <span class="hljs-comment"># it isn&#x27;t governed by policy that would prevent it from working.</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-comment"># Mark the pod as a critical add-on for rescheduling.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">CriticalAddonsOnly</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>          <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">calico-kube-controllers</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">calico/kube-controllers:v3.6.0</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-comment"># The location of the Calico etcd cluster.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_ENDPOINTS</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_endpoints</span><br>            <span class="hljs-comment"># Location of the CA certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CA_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_ca</span><br>            <span class="hljs-comment"># Location of the client key for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_KEY_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_key</span><br>            <span class="hljs-comment"># Location of the client certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_cert</span><br>            <span class="hljs-comment"># Choose which controllers to run.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ENABLED_CONTROLLERS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">policy,namespace,serviceaccount,workloadendpoint,node</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-comment"># Mount in the etcd TLS secrets.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/calico-secrets</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">exec:</span><br>              <span class="hljs-attr">command:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/bin/check-status</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">-r</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># Mount in the etcd TLS secrets with mode 400.</span><br>        <span class="hljs-comment"># See https://kubernetes.io/docs/concepts/configuration/secret/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>          <span class="hljs-attr">secret:</span><br>            <span class="hljs-attr">secretName:</span> <span class="hljs-string">calico-etcd-secrets</span><br>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0400</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-kube-controllers</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p><strong>需要注意的是我们添加了 <code>IP_AUTODETECTION_METHOD</code> 变量，这个变量会设置 calcio 获取 node ip 的方式；默认情况下采用 <a href="https://docs.projectcalico.org/v3.6/reference/node/configuration#ip-autodetection-methods">first-found</a> 方式获取，即获取第一个有效网卡的 IP 作为 node ip；在某些多网卡机器上可能会出现问题；这里将值设置为 <code>can-reach=192.168.1.51</code>，即使用第一个能够访问 master <code>192.168.1.51</code> 的网卡地址作为 node ip</strong></p><p>最后执行创建即可，创建成功后如下所示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ kubectl get pod -o wide -n kube-system<br>NAME                                      READY   STATUS    RESTARTS   AGE   IP             NODE           NOMINATED NODE   READINESS GATES<br>calico-kube-controllers-65bc6b9f9-cn27f   1/1     Running   0          85s   192.168.1.53   docker3.node   &lt;none&gt;           &lt;none&gt;<br>calico-node-c5nl8                         1/1     Running   0          85s   192.168.1.53   docker3.node   &lt;none&gt;           &lt;none&gt;<br>calico-node-fqknv                         1/1     Running   0          85s   192.168.1.51   docker1.node   &lt;none&gt;           &lt;none&gt;<br>calico-node-ldfzs                         1/1     Running   0          85s   192.168.1.55   docker5.node   &lt;none&gt;           &lt;none&gt;<br>calico-node-ngjxc                         1/1     Running   0          85s   192.168.1.52   docker2.node   &lt;none&gt;           &lt;none&gt;<br>calico-node-vj8np                         1/1     Running   0          85s   192.168.1.54   docker4.node   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>此时所有 node 应当变为 Ready 状态</p><h3 id="3-5、部署-DNS"><a href="#3-5、部署-DNS" class="headerlink" title="3.5、部署 DNS"></a>3.5、部署 DNS</h3><p>其他组件全部完成后我们应当部署集群 DNS 使 service 等能够正常解析；集群 DNS 这里采用 coredns，具体安装文档参考 <a href="https://github.com/coredns/deployment/tree/master/kubernetes">coredns&#x2F;deployment</a>；coredns 完整配置如下</p><ul><li>coredns.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    .:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        health</span><br><span class="hljs-string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="hljs-string">          pods insecure</span><br><span class="hljs-string">          upstream</span><br><span class="hljs-string">          fallthrough in-addr.arpa ip6.arpa</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        prometheus :9153</span><br><span class="hljs-string">        forward . /etc/resolv.conf</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        loop</span><br><span class="hljs-string">        reload</span><br><span class="hljs-string">        loadbalance</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">coredns</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">beta.kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">coredns/coredns:1.3.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">170Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">70Mi</span><br>        <span class="hljs-attr">args:</span> [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/coredns</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9153</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">capabilities:</span><br>            <span class="hljs-attr">add:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BIND_SERVICE</span><br>            <span class="hljs-attr">drop:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">all</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">Default</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>            <span class="hljs-attr">items:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">Corefile</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">Corefile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;9153&quot;</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.254</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9153</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><h3 id="3-5、部署-DNS-自动扩容"><a href="#3-5、部署-DNS-自动扩容" class="headerlink" title="3.5、部署 DNS 自动扩容"></a>3.5、部署 DNS 自动扩容</h3><p>在大规模集群的情况下，可能需要集群 DNS 自动扩容，具体文档请参考 <a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns-horizontal-autoscaler">DNS Horizontal Autoscaler</a>，DNS 扩容算法可参考 <a href="https://github.com/kubernetes-incubator/cluster-proportional-autoscaler/">Github</a>，如有需要请自行修改；以下为具体配置</p><ul><li>dns-horizontal-autoscaler.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Copyright 2016 The Kubernetes Authors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-dns-autoscaler</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;replicationcontrollers/scale&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;deployments/scale&quot;</span>, <span class="hljs-string">&quot;replicasets/scale&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br><span class="hljs-comment"># Remove the configmaps rule once below issue is fixed:</span><br><span class="hljs-comment"># kubernetes-incubator/cluster-proportional-autoscaler#16</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-dns-autoscaler</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-dns-autoscaler</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns-autoscaler</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">autoscaler</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.azk8s.cn/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2</span><br>        <span class="hljs-attr">resources:</span><br>            <span class="hljs-attr">requests:</span><br>                <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;20m&quot;</span><br>                <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;10Mi&quot;</span><br>        <span class="hljs-attr">command:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/cluster-proportional-autoscaler</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=kube-system</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--configmap=kube-dns-autoscaler</span><br>          <span class="hljs-comment"># Should keep target in sync with cluster/addons/dns/kube-dns.yaml.base</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--target=Deployment/coredns</span><br>          <span class="hljs-comment"># When cluster is using large nodes(with more cores), &quot;coresPerReplica&quot; should dominate.</span><br>          <span class="hljs-comment"># If using small nodes, &quot;nodesPerReplica&quot; should dominate.</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--default-params=&#123;&quot;linear&quot;:&#123;&quot;coresPerReplica&quot;:256,&quot;nodesPerReplica&quot;:16,&quot;preventSinglePointFailure&quot;:true&#125;&#125;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--logtostderr=true</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">--v=2</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kube-dns-autoscaler</span><br></code></pre></td></tr></table></figure><h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><h3 id="4-1、集群测试"><a href="#4-1、集群测试" class="headerlink" title="4.1、集群测试"></a>4.1、集群测试</h3><p>为测试集群工作正常，我们创建一个 deployment 和一个 service，用于测试联通性和 DNS 工作是否正常；测试配置如下</p><ul><li>test.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14.2-alpine</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30001</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p>测试方式很简单，进入某一个 pod ping 其他 pod ip 确认网络是否正常，直接访问 service 名称测试 DNS 是否工作正常，这里不再演示</p><h3 id="4-2、其他说明"><a href="#4-2、其他说明" class="headerlink" title="4.2、其他说明"></a>4.2、其他说明</h3><p>此次搭建开启了大部分认证，限于篇幅原因没有将每个选项作用做完整解释，推荐搭建完成后仔细阅读以下 <code>--help</code> 中的描述(官方文档页面有时候更新不完整)；目前 apiserver 仍然保留了 8080 端口(因为直接使用 kubectl 方便)，但是在高安全性环境请关闭 8080 端口，因为即使绑定在 127.0.0.1 上，对于任何能够登录 master 机器的用户仍然能够不经验证操作整个集群</p>]]></content>
    
    
    <summary type="html">年后回来有点懒，也有点忙；1.13 出来好久了，周末还是决定折腾一下吧</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes sample-cli-plugin 源码分析</title>
    <link href="https://mritd.com/2019/01/16/understand-kubernetes-sample-cli-plugin-source-code/"/>
    <id>https://mritd.com/2019/01/16/understand-kubernetes-sample-cli-plugin-source-code/</id>
    <published>2019-01-16T04:16:42.000Z</published>
    <updated>2019-01-16T04:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇文章的目的是为了继续上篇 <a href="https://mritd.me/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/">Kubernetes 1.12 新的插件机制</a> 中最后部分对 <code>Golang 的插件辅助库</code> 说明；以及为后续使用 Golang 编写自己的 Kubernetes 插件做一个基础铺垫；顺边说一下 <strong>sample-cli-plugin 这个项目是官方为 Golang 开发者编写的一个用于快速切换配置文件中 Namespace 的一个插件样例</strong></p></blockquote><h2 id="一、基础准备"><a href="#一、基础准备" class="headerlink" title="一、基础准备"></a>一、基础准备</h2><p>在开始分析源码之前，<strong>我们假设读者已经熟悉 Golang 语言，至少对基本语法、指针、依赖管理工具有一定认知</strong>；下面介绍一下 <a href="https://github.com/kubernetes/sample-cli-plugin">sample-cli-plugin</a> 这个项目一些基础核心的依赖:</p><h3 id="1-1、Cobra-终端库"><a href="#1-1、Cobra-终端库" class="headerlink" title="1.1、Cobra 终端库"></a>1.1、Cobra 终端库</h3><p>这是一个强大的 Golang 的 command line interface 库，其支持用非常简单的代码创建出符合 Unix 风格的 cli 程序；甚至官方提供了用于创建 cli 工程脚手架的 cli 命令工具；Cobra 官方 Github 地址 <a href="https://github.com/spf13/cobra">点击这里</a>，具体用法请自行 Google，以下只做一个简单的命令定义介绍(docker、kubernetes 终端 cli 都基于这个库)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"># 每一个命令(不论是子命令还是主命令)都会是一个 cobra.Command 对象<br><span class="hljs-keyword">var</span> lsCmd = &amp;cobra.Command&#123;<br>    <span class="hljs-comment">// 一些命令帮助文档有关的描述信息</span><br>    Use:   <span class="hljs-string">&quot;ls&quot;</span>,<br>    Short: <span class="hljs-string">&quot;A brief description of your command&quot;</span>,<br>    Long: <span class="hljs-string">`A longer description that spans multiple lines and likely contains examples</span><br><span class="hljs-string">and usage of using your command. For example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">Cobra is a CLI library for Go that empowers applications.</span><br><span class="hljs-string">This application is a tool to generate the needed files</span><br><span class="hljs-string">to quickly create a Cobra application.`</span>,<br>    <span class="hljs-comment">// 命令运行时真正执行逻辑，如果需要返回 Error 信息，我们一般设置 RunE</span><br>    Run: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cmd *cobra.Command, args []<span class="hljs-type">string</span>)</span></span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;ls called&quot;</span>)<br>    &#125;,<br>&#125;<br><br><span class="hljs-comment">// 为这个命令添加 flag，比如 `--help`、`-p`</span><br><span class="hljs-comment">// PersistentFlags() 方法添加的 flag 在所有子 command 也会生效</span><br><span class="hljs-comment">// Cobra 的 command 可以无限级联，比如 `kubectl get pod` 就是在 `kubectl` command 下增加了子 `get` command</span><br>lsCmd.PersistentFlags().String(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;A help for foo&quot;</span>)<br><span class="hljs-comment">// Flags() 方法添加的 flag 仅在直接调用此子命令时生效</span><br>lsCmd.Flags().BoolP(<span class="hljs-string">&quot;toggle&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;Help message for toggle&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2、vendor-依赖"><a href="#1-2、vendor-依赖" class="headerlink" title="1.2、vendor 依赖"></a>1.2、vendor 依赖</h3><p>vendor 目录用于存放 Golang 的依赖库，sample-cli-plugin 这个项目采用 <a href="https://github.com/tools/godep">godep</a> 工具管理依赖；依赖配置信息被保存在 <code>Godeps/Godeps.json</code> 中，<strong>一般项目不会上传 vendor 目录，因为它的依赖信息已经在 Godeps.json 中存在，只需要在项目下使用 <code>godep restore</code> 命令恢复就可自动重新下载</strong>；这里上传了 vendor 目录的原因应该是为了方便开发者直接使用 <code>go get</code> 命令安装；顺边说一下在 Golang 新版本已经开始转换到 <code>go mod</code> 依赖管理工具，标志就是项目下会有 <code>go.mod</code> 文件</p><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><p>这里准备一笔带过了，基本就是 clone 源码到 <code>$GOPATH/src/k8s.io/sample-cli-plugin</code> 目录，然后在 GoLand 中打开；目前我使用的 Go 版本为最新的 1.11.4；以下时导入源码后的截图</p><p><img src="https://cdn.oss.link/markdown/sn8o8.png" alt="GoLand"></p><h3 id="2-2、定位核心运行方法"><a href="#2-2、定位核心运行方法" class="headerlink" title="2.2、定位核心运行方法"></a>2.2、定位核心运行方法</h3><p>熟悉过 Cobra 库以后，再从整个项目包名上分析，首先想到的启动入口应该在 <code>cmd</code> 包下(一般 <code>cmd</code> 包下的文件都会编译成最终可执行文件名，Kubernetes 也是一样)</p><p><img src="https://cdn.oss.link/markdown/rafeq.png" alt="main"></p><p>从以上截图中可以看出，首先通过 <code>cmd.NewCmdNamespace</code> 方法创建了一个 Command 对象 <code>root</code>，然后调用了 <code>root.Execute</code> 就结束了；那么也就说明 <code>root</code> 这个 Command 是唯一的核心命令对象，整个插件实现都在这个 <code>root</code> 里；所以我们需要查看一下这个 <code>cmd.NewCmdNamespace</code> 是如何对它初始化的，找到 Cobra 中的 <code>Run</code> 或者 <code>RunE</code> 设置</p><p><img src="https://cdn.oss.link/markdown/77krg.png" alt="NewCmdNamespace"></p><p>定位到 <code>NewCmdNamespace</code> 方法以后，基本上就是标准的 Cobra 库的使用方式了；**从截图上可以看到，<code>RunE</code> 设置的函数总共运行了 3 个动作: <code>o.Complete</code>、<code>o.Validate</code>、<code>o.Run</code>**；所以接下来我们主要分析这三个方法就行了</p><h3 id="2-3、NamespaceOptions-结构体"><a href="#2-3、NamespaceOptions-结构体" class="headerlink" title="2.3、NamespaceOptions 结构体"></a>2.3、NamespaceOptions 结构体</h3><p>在分析上面说的这三个方法之前，我们还应当了解一下这个 <code>o</code> 是什么玩意</p><p><img src="https://cdn.oss.link/markdown/4b3cc.png" alt="NamespaceOptions"></p><p>从源码中可以看到，<code>o</code> 这个对象由 <code>NewNamespaceOptions</code> 创建，而 <code>NewNamespaceOptions</code> 方法返回的实际上是一个 <code>NamespaceOptions</code> 结构体；接下来我们需要研究一下这个结构体都是由什么组成的，换句话说要基本大致上整明白结构体的基本结构，比如里面的属性都是干啥的</p><h4 id="2-3-1、-genericclioptions-ConfigFlags"><a href="#2-3-1、-genericclioptions-ConfigFlags" class="headerlink" title="2.3.1、*genericclioptions.ConfigFlags"></a>2.3.1、*genericclioptions.ConfigFlags</h4><p>首先看下第一个属性 <code>configFlags</code>，它的实际类型是 <code>*genericclioptions.ConfigFlags</code>，点击查看以后如下</p><p><img src="https://cdn.oss.link/markdown/li6s4.png" alt="genericclioptions.ConfigFlags"></p><p>从这些字段上来看，我们可以暂且模糊的推测出这应该是个基础配置型的字段，负责存储一些全局基本设置，比如 API Server 认证信息等</p><h4 id="2-3-2、-api-Context"><a href="#2-3-2、-api-Context" class="headerlink" title="2.3.2、*api.Context"></a>2.3.2、*api.Context</h4><p>下面这两个 <code>resultingContext</code>、<code>resultingContextName</code> 就很好理解了，从名字上看就可以知道它们应该是用来存储结果集的 Context 信息的；当然这个 <code>*api.Context</code> 就是 Kubernetes 配置文件中 Context 的 Go 结构体</p><h4 id="2-3-3、userSpecified"><a href="#2-3-3、userSpecified" class="headerlink" title="2.3.3、userSpecified*"></a>2.3.3、userSpecified*</h4><p>这几个字段从名字上就可以区分出，他们应该用于存储用户设置的或者说是通过命令行选项输入的一些指定配置信息，比如 Cluster、Context 等</p><h4 id="2-3-4、rawConfig"><a href="#2-3-4、rawConfig" class="headerlink" title="2.3.4、rawConfig"></a>2.3.4、rawConfig</h4><p>rawConfig 这个变量名字有点子奇怪，不过它实际上是个 <code>api.Config</code>；里面保存了与 API Server 通讯的配置信息；<strong>至于为什么要有这玩意，是因为配置信息输入源有两个: cli 命令行选项(eg: <code>--namespace</code>)和用户配置文件(eg: <code>~/.kube/config</code>)；最终这两个地方的配置合并后会存储在这个 rawConfig 里</strong></p><h4 id="2-3-5、listNamespaces"><a href="#2-3-5、listNamespaces" class="headerlink" title="2.3.5、listNamespaces"></a>2.3.5、listNamespaces</h4><p>这个变量实际上相当于一个 flag，用于存储插件是否使用了 <code>--list</code> 选项；在分析结构体这里没法看出来；不过只要稍稍的多看一眼代码就能看在 <code>NewCmdNamespace</code> 方法中有这么一行代码</p><p><img src="https://cdn.oss.link/markdown/f07l3.png" alt="listNamespaces"></p><h3 id="2-4、核心处理逻辑"><a href="#2-4、核心处理逻辑" class="headerlink" title="2.4、核心处理逻辑"></a>2.4、核心处理逻辑</h3><p>介绍完了结构体的基本属性，最后我们只需要弄明白在核心 Command 方法内运行的这三个核心方法就行了</p><p><img src="https://cdn.oss.link/markdown/8lm4b.png" alt="core func"></p><h4 id="2-4-1、-NamespaceOptions-Complete"><a href="#2-4-1、-NamespaceOptions-Complete" class="headerlink" title="2.4.1、*NamespaceOptions.Complete"></a>2.4.1、*NamespaceOptions.Complete</h4><p>这个方法代码稍微有点多，这里不会对每一行代码都做解释，只要大体明白都在干什么就行了；我们的目的是理解它，后续模仿它创造自己的插件；下面是代码截图</p><p><img src="https://cdn.oss.link/markdown/qqf0f.png" alt="NamespaceOptions.Complete"></p><p>从截图上可以看到，首先弄出了 <code>rawConfig</code> 这个玩意，<code>rawConfig</code> 上面也提到了，它就是终端选项和用户配置文件的最终合并，至于为什么可以查看 <code>ToRawKubeConfigLoader().RawConfig()</code> 这两个方法的注释和实现即可；</p><p>接下来就是各种获取插件执行所需要的变量信息，比如获取用户指定的 <code>Namespace</code>、<code>Cluster</code>、<code>Context</code> 等，其中还包含了一些必要的校验；比如不允许使用 <code>kubectl ns NS_NAME1 --namespace NS_NAME2</code> 这种操作(因为这么干很让人难以理解 “你到底是要切换到 <code>NS_NAME1</code> 还是 <code>NS_NAME2</code>“)</p><p>最后从 <code>153</code> 行 <code>o.resultingContext = api.NewContext()</code> 开始就是创建最终的 <code>resultingContext</code> 对象，把获取到的用户指定的 <code>Namespace</code> 等各种信息赋值好，为下一步将其持久化到配置文件中做准备</p><h4 id="2-4-2、-NamespaceOptions-Validate"><a href="#2-4-2、-NamespaceOptions-Validate" class="headerlink" title="2.4.2、*NamespaceOptions.Validate"></a>2.4.2、*NamespaceOptions.Validate</h4><p>这个方法看名字就知道，里面全是对最终结果的校验；比如检查一下 <code>rawConfig</code> 中的 <code>CurrentContext</code> 是否获取到了，看看命令行参数是否正确，确保你不会瞎鸡儿输入 <code>kubectl ns NS_NAME1 NS_NAME2</code> 这种命令</p><p><img src="https://cdn.oss.link/markdown/frqpb.png" alt="NamespaceOptions.Validate"></p><h4 id="2-4-3、-NamespaceOptions-Run"><a href="#2-4-3、-NamespaceOptions-Run" class="headerlink" title="2.4.3、*NamespaceOptions.Run"></a>2.4.3、*NamespaceOptions.Run</h4><p>第一步合并配置信息并获取到用户设置(输入)的配置，第二部做参数校验；可以说前面的两步操作都是为这一步做准备，<code>Run</code> 方法真正的做了配置文件写入、终端返回结果打印操作</p><p><img src="https://cdn.oss.link/markdown/6tkjz.png" alt="NamespaceOptions.Run"></p><p>可以看到，<code>Run</code> 方法第一步就是更加谨慎的检查了一下参数是否正常，然后调用了 <code>o.setNamespace</code>；这个方法截图如下</p><p><img src="https://cdn.oss.link/markdown/1jc3k.png" alt="NamespaceOptions.setNamespace"></p><p>这个 <code>setNamespace</code>是真正的做了配置文件写入动作的，实际写入方法就是 <code>clientcmd.ModifyConfig</code>；这个是 <code>Kubernetes</code> <code>client-go</code> 提供的方法，这些库的作用就是提供给我们非常方便的 API 操作；比如修改配置文件，你不需要关心配置文件在哪，你更不需要关系文件句柄是否被释放</p><p>从 <code>o.setNamespace</code> 方法以后其实就没什么看头了，毕竟插件的核心功能就是快速修改 <code>Namespace</code>；下面的各种 <code>for</code> 循环遍历其实就是在做打印输出；比如当你没有设置 <code>Namespace</code> 而使用了 <code>--list</code> 选项，插件就通过这里帮你打印设置过那些 <code>Namespace</code></p><h2 id="三、插件总结"><a href="#三、插件总结" class="headerlink" title="三、插件总结"></a>三、插件总结</h2><p>分析完了这个官方的插件，然后想一下自己以后写插件可能的需求，最后对比一下，可以为以后写插件做个总结:</p><ul><li>我们最好也弄个 <code>xxxOptions</code> 这种结构体存存一些配置</li><li>结构体内至少我们应当存储 <code>configFlags</code>、<code>rawConfig</code> 这两个基础配置信息</li><li>结构体内其它参数都应当是跟自己实际业务有关的</li><li>最后在在结构体上增加适当的方法完成自己的业务逻辑并保持好适当的校验</li></ul><p>转载请注明出n，本文采用 [CC4.0](<a href="http://c/">http://c</a> 1.12 新的插件机制](<a href="https://mritd.me/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/">https://mritd.me/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/</a>) 中最后部分对 <code>Golang 的插件辅助库</code> 说明；以及为后续使用 Golang 编写自己的 Kubernetes 插件做一个基础铺垫；顺边说一下 <strong>sample-cli-plugin 这个项目是官方为 Golang 开发者编写的一个用于快速切换配置文件中 Namespace 的一个插件样例</strong></p>]]></content>
    
    
    <summary type="html">写这篇文章的目的是为了继续上篇 [Kubernetes 1.12 新的插件机制](https://mritd.me/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/) 中最后部分对 `Golang 的插件辅助库` 说明；以及为后续使用 Golang 编写自己的 Kubernetes 插件做一个基础铺垫；顺边说一下 **sample-cli-plugin 这个项目是官方为 Golang 开发者编写的一个用于快速切换配置文件中 Namespace 的一个插件样例**</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.12 新的插件机制</title>
    <link href="https://mritd.com/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/"/>
    <id>https://mritd.com/2018/11/30/kubectl-plugin-new-solution-on-kubernetes-1.12/</id>
    <published>2018-11-29T16:05:34.000Z</published>
    <updated>2018-11-29T16:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在很久以前的版本研究过 kubernetes 的插件机制，当时弄了一个快速切换 <code>namespace</code> 的小插件；最近把自己本机的 kubectl 升级到了 1.12，突然发现插件不能用了；撸了一下文档发现插件机制彻底改了…</p></blockquote><h2 id="一、插件编写语言"><a href="#一、插件编写语言" class="headerlink" title="一、插件编写语言"></a>一、插件编写语言</h2><p>kubernetes 1.12 新的插件机制在编写语言上同以前一样，<strong>可以以任意语言编写，只要能弄一个可执行的文件出来就行</strong>，插件可以是一个 <code>bash</code>、<code>python</code> 脚本，也可以是 <code>Go</code> 等编译语言最终编译的二进制；以下是一个 Copy 自官方文档的 <code>bash</code> 编写的插件样例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># optional argument handling</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> == <span class="hljs-string">&quot;version&quot;</span> ]]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1.0.0&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># optional argument handling</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> == <span class="hljs-string">&quot;config&quot;</span> ]]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$KUBECONFIG</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;I am a plugin named kubectl-foo&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、插件加载方式"><a href="#二、插件加载方式" class="headerlink" title="二、插件加载方式"></a>二、插件加载方式</h2><h3 id="2-1、插件位置"><a href="#2-1、插件位置" class="headerlink" title="2.1、插件位置"></a>2.1、插件位置</h3><p>1.12 kubectl 插件最大的变化就是加载方式变了，由原来的放置在指定位置，还要为其编写 yaml 配置变成了现在的类似 git 扩展命令的方式: <strong>只要放置在 PATH 下，并以 <code>kubectl-</code> 开头的可执行文件都被认为是 <code>kubectl</code> 的插件</strong>；所以你可以随便弄个小脚本(比如上面的代码)，然后改好名字赋予可执行权限，扔到 PATH 下即可</p><p><img src="https://cdn.oss.link/markdown/s64v6.png" alt="test-plugin"></p><h3 id="2-2、插件变量"><a href="#2-2、插件变量" class="headerlink" title="2.2、插件变量"></a>2.2、插件变量</h3><p>同以前不通，<strong>以前版本的执行插件时，<code>kubectl</code> 会向插件传递一些特定的与 <code>kubectl</code> 相关的变量，现在则只会传递标准变量；即 <code>kubectl</code> 能读到什么变量，插件就能读到，其他的私有化变量(比如 <code>KUBECTL_PLUGINS_CURRENT_NAMESPACE</code>)不会再提供</strong></p><p><img src="https://cdn.oss.link/markdown/vs1c3.png" alt="plugin env"></p><p><strong>并且新版本的插件体系，所有选项(<code>flag</code>) 将全部交由插件本身处理，kubectl 不会再解析</strong>，比如下面的 <code>--help</code> 交给了自定义插件处理，由于脚本内没有处理这个选项，所以相当于选项无效了</p><p><img src="https://cdn.oss.link/markdown/8ch88.png" alt="plugin flag"></p><p>还有就是 <strong>传递给插件的第一个参数永远是插件自己的绝对位置，比如这个 <code>test</code> 插件在执行时的 <code>$0</code> 是 <code>/usr/local/bin/kubectl-test</code></strong></p><h3 id="2-3、插件命名及查找"><a href="#2-3、插件命名及查找" class="headerlink" title="2.3、插件命名及查找"></a>2.3、插件命名及查找</h3><p>目前在插件命名及查找顺序上官方文档写的非常详尽，不给过对于普通使用者来说，实际上命名规则和查找与常规的 Linux 下的命令查找机制相同，只不过还做了增强；增强后的基本规则如下</p><ul><li><code>PATH</code> 优先匹配原则</li><li>短横线 <code>-</code> 自动分割匹配以及智能转义</li><li>以最精确匹配为首要目标</li><li>查找失败自动转换参数</li></ul><p><code>PATH</code> 优先匹配原则跟传统的命令查找一致，即当多个路径下存在同名的插件时，则采用最先查找到的插件</p><p><img src="https://cdn.oss.link/markdown/ljyp5.png" alt="plugin path"></p><p>当你的插件文件名中包含 <code>-</code> ，并且 <code>kubectl</code> 在无法精确找到插件时会尝试自动拼接命令来尝试匹配；如下所示，在没有找到 <code>kubectl-test</code> 这个命令时会尝试拼接参数查找</p><p><img src="https://cdn.oss.link/markdown/l85bp.png" alt="auto merge"></p><p>由于以上这种查找机制，<strong>当命令中确实包含 <code>-</code> 时，必须进行转义以 <code>_</code> 替换，否则 <code>kubectl</code> 会提示命令未找到错误</strong>；替换后可直接使用 <code>kubectl 插件命令(包含-)</code> 执行，同时也支持以原始插件名称执行(使用 <code>_</code>)</p><p><img src="https://cdn.oss.link/markdown/7vm0l.png" alt="name contains dash"></p><p>在复杂插件体系下，多个插件可能包含同样的前缀，此时将遵序最精确查找原则；即当两个插件 <code>kubectl-test-aaa</code>、<code>kubectl-test-aaa-bbb</code> 同时存在，并且执行 <code>kubectl test aaa bbb</code> 命令时，优先匹配最精确的插件 <code>kubectl-test-aaa-bbb</code>，<strong>而不是将 <code>bbb</code> 作为参数传递给 <code>kubectl-test-aaa</code> 插件</strong></p><p><img src="https://cdn.oss.link/markdown/god8q.png" alt="precise search"></p><h3 id="2-4、总结"><a href="#2-4、总结" class="headerlink" title="2.4、总结"></a>2.4、总结</h3><p>插件查找机制在一般情况下与传统 PATH 查找方式相同，同时 <code>kubectl</code> 实现了智能的 <code>-</code> 自动匹配查找、更精确的命令命中功能；这两种机制的实现主要为了方便编写插件的命令树(插件命令的子命令…)，类似下面这种</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">ls</span> ./plugin_command_tree<br>kubectl-parent<br>kubectl-parent-subcommand<br>kubectl-parent-subcommand-subsubcommand<br></code></pre></td></tr></table></figure><p>当出现多个位置有同名插件时，执行 <code>kubectl plugin list</code> 能够检测出哪些插件由于 PATH 查找顺序原因导致永远不会被执行问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ kubectl plugin list<br>The following kubectl-compatible plugins are available:<br><br><span class="hljs-built_in">test</span>/fixtures/pkg/kubectl/plugins/kubectl-foo<br>/usr/local/bin/kubectl-foo<br>  - warning: /usr/local/bin/kubectl-foo is overshadowed by a similarly named plugin: <span class="hljs-built_in">test</span>/fixtures/pkg/kubectl/plugins/kubectl-foo<br>plugins/kubectl-invalid<br>  - warning: plugins/kubectl-invalid identified as a kubectl plugin, but it is not executable<br><br>error: 2 plugin warnings were found<br></code></pre></td></tr></table></figure><h3 id="三、Golang-的插件辅助库"><a href="#三、Golang-的插件辅助库" class="headerlink" title="三、Golang 的插件辅助库"></a>三、Golang 的插件辅助库</h3><p>由于插件机制的变更，导致其他语言编写的插件在实时获取某些配置信息、动态修改 <code>kubectl</code> 配置方面可能造成一定的阻碍；为此 kubernetes 提供了一个 <a href="https://github.com/kubernetes/cli-runtime">command line runtime package</a>，使用 Go 编写插件，配合这个库可以更加方便的解析和调整 <code>kubectl</code> 的配置信息</p><p>官方为了演示如何使用这个 <a href="https://github.com/kubernetes/cli-runtime">cli-runtime</a> 库编写了一个 <code>namespace</code> 切换的插件(自己白写了…)，仓库地址在 <a href="https://github.com/kubernetes/sample-cli-plugin">Github</a> 上，基本编译使用如下(直接 <code>go get</code> 后编译文件默认为目录名 <code>cmd</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ go get k8s.io/sample-cli-plugin/cmd<br>➜  ~ sudo <span class="hljs-built_in">mv</span> gopath/bin/cmd /usr/local/bin/kubectl-ns<br>➜  ~ kubectl ns<br>default<br>➜  ~ kubectl ns --<span class="hljs-built_in">help</span><br>View or <span class="hljs-built_in">set</span> the current namespace<br><br>Usage:<br>  ns [new-namespace] [flags]<br><br>Examples:<br><br>        <span class="hljs-comment"># view the current namespace in your KUBECONFIG</span><br>        kubectl ns<br><br>        <span class="hljs-comment"># view all of the namespaces in use by contexts in your KUBECONFIG</span><br>        kubectl ns --list<br><br>        <span class="hljs-comment"># switch your current-context to one that contains the desired namespace</span><br>        kubectl ns foo<br><br><br>Flags:<br>      --as string                      Username to impersonate <span class="hljs-keyword">for</span> the operation<br>      --as-group stringArray           Group to impersonate <span class="hljs-keyword">for</span> the operation, this flag can be repeated to specify multiple <span class="hljs-built_in">groups</span>.<br>      --cache-dir string               Default HTTP cache directory (default <span class="hljs-string">&quot;/Users/mritd/.kube/http-cache&quot;</span>)<br>      --certificate-authority string   Path to a cert file <span class="hljs-keyword">for</span> the certificate authority<br>      --client-certificate string      Path to a client certificate file <span class="hljs-keyword">for</span> TLS<br>      --client-key string              Path to a client key file <span class="hljs-keyword">for</span> TLS<br>      --cluster string                 The name of the kubeconfig cluster to use<br>      --context string                 The name of the kubeconfig context to use<br>  -h, --<span class="hljs-built_in">help</span>                           <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> ns<br>      --insecure-skip-tls-verify       If <span class="hljs-literal">true</span>, the server<span class="hljs-string">&#x27;s certificate will not be checked for validity. This will make your HTTPS connections insecure</span><br><span class="hljs-string">      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.</span><br><span class="hljs-string">      --list                           if true, print the list of all namespaces in the current KUBECONFIG</span><br><span class="hljs-string">  -n, --namespace string               If present, the namespace scope for this CLI request</span><br><span class="hljs-string">      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don&#x27;</span>t <span class="hljs-built_in">timeout</span> requests. (default <span class="hljs-string">&quot;0&quot;</span>)<br>  -s, --server string                  The address and port of the Kubernetes API server<br>      --token string                   Bearer token <span class="hljs-keyword">for</span> authentication to the API server<br>      --user string                    The name of the kubeconfig user to use<br></code></pre></td></tr></table></figure><p>限于篇幅原因，具体这个 <code>cli-runtime</code> 包怎么用请自行参考官方写的这个 <code>sample-cli-plugin</code> (其实并不怎么 “simple”…)</p><p>本文参考文档:</p><ul><li><a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/">Extend kubectl with plugins</a></li><li><a href="https://github.com/kubernetes/cli-runtime">cli-runtime</a></li><li><a href="https://github.com/kubernetes/sample-cli-plugin">sample-cli-plugin</a></li></ul>]]></content>
    
    
    <summary type="html">在很久以前的版本研究过 kubernetes 的插件机制，当时弄了一个快速切换 `namespace` 的小插件；最近把自己本机的 kubectl 升级到了 1.12，突然发现插件不能用了；撸了一下文档发现插件机制彻底改了...</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Go 编写的一些常用小工具</title>
    <link href="https://mritd.com/2018/11/27/simple-tool-written-in-golang/"/>
    <id>https://mritd.com/2018/11/27/simple-tool-written-in-golang/</id>
    <published>2018-11-27T04:45:46.000Z</published>
    <updated>2018-11-27T04:45:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>迫于 Github 上 Star 的项目有点多，今天整理一下一些有意思的 Go 编写的小工具；大多数为终端下的实用工具，装逼的比如天气预报啥的就不写了</p></blockquote><h3 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a>syncthing</h3><p>强大的文件同步工具，构建私人同步盘 👉 <a href="https://github.com/syncthing%E3%80%81syncthing">Github</a></p><p><img src="https://cdn.oss.link/markdown/er3tj.jpg" alt="syncthing"></p><h3 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h3><p>一个强大的终端文件浏览器 👉 <a href="https://github.com/junegunn/fzf">Github</a></p><p><img src="https://cdn.oss.link/markdown/ihhqy.jpg" alt="fzf"></p><h3 id="hey"><a href="#hey" class="headerlink" title="hey"></a>hey</h3><p>http 负载测试工具，简单好用 👉 <a href="https://github.com/rakyll/hey">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh">Usage: hey [options...] &lt;url&gt;<br><br>Options:<br>  -n  Number of requests to run. Default is 200.<br>  -c  Number of requests to run concurrently. Total number of requests cannot<br>      be smaller than the concurrency level. Default is 50.<br>  -q  Rate <span class="hljs-built_in">limit</span>, <span class="hljs-keyword">in</span> queries per second (QPS). Default is no rate <span class="hljs-built_in">limit</span>.<br>  -z  Duration of application to send requests. When duration is reached,<br>      application stops and exits. If duration is specified, n is ignored.<br>      Examples: -z 10s -z 3m.<br>  -o  Output <span class="hljs-built_in">type</span>. If none provided, a summary is printed.<br>      <span class="hljs-string">&quot;csv&quot;</span> is the only supported alternative. Dumps the response<br>      metrics <span class="hljs-keyword">in</span> comma-separated values format.<br><br>  -m  HTTP method, one of GET, POST, PUT, DELETE, HEAD, OPTIONS.<br>  -H  Custom HTTP header. You can specify as many as needed by repeating the flag.<br>      For example, -H <span class="hljs-string">&quot;Accept: text/html&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/xml&quot;</span> .<br>  -t  Timeout <span class="hljs-keyword">for</span> each request <span class="hljs-keyword">in</span> seconds. Default is 20, use 0 <span class="hljs-keyword">for</span> infinite.<br>  -A  HTTP Accept header.<br>  -d  HTTP request body.<br>  -D  HTTP request body from file. For example, /home/user/file.txt or ./file.txt.<br>  -T  Content-<span class="hljs-built_in">type</span>, defaults to <span class="hljs-string">&quot;text/html&quot;</span>.<br>  -a  Basic authentication, username:password.<br>  -x  HTTP Proxy address as host:port.<br>  -h2 Enable HTTP/2.<br><br>  -host    HTTP Host header.<br><br>  -disable-compression  Disable compression.<br>  -disable-keepalive    Disable keep-alive, prevents re-use of TCP<br>                        connections between different HTTP requests.<br>  -disable-redirects    Disable following of HTTP redirects<br>  -cpus                 Number of used cpu cores.<br>                        (default <span class="hljs-keyword">for</span> current machine is 8 cores)<br></code></pre></td></tr></table></figure><h3 id="vegeta"><a href="#vegeta" class="headerlink" title="vegeta"></a>vegeta</h3><p>http 负载测试工具，功能强大 👉 <a href="https://github.com/tsenart/vegeta">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs sh">Usage: vegeta [global flags] &lt;<span class="hljs-built_in">command</span>&gt; [<span class="hljs-built_in">command</span> flags]<br><br>global flags:<br>  -cpus int<br>        Number of CPUs to use (default 8)<br>  -profile string<br>        Enable profiling of [cpu, heap]<br>  -version<br>        Print version and <span class="hljs-built_in">exit</span><br><br>attack <span class="hljs-built_in">command</span>:<br>  -body string<br>        Requests body file<br>  -cert string<br>        TLS client PEM encoded certificate file<br>  -connections int<br>        Max open idle connections per target host (default 10000)<br>  -duration duration<br>        Duration of the <span class="hljs-built_in">test</span> [0 = forever]<br>  -format string<br>        Targets format [http, json] (default <span class="hljs-string">&quot;http&quot;</span>)<br>  -h2c<br>        Send HTTP/2 requests without TLS encryption<br>  -header value<br>        Request header<br>  -http2<br>        Send HTTP/2 requests when supported by the server (default <span class="hljs-literal">true</span>)<br>  -insecure<br>        Ignore invalid server TLS certificates<br>  -keepalive<br>        Use persistent connections (default <span class="hljs-literal">true</span>)<br>  -key string<br>        TLS client PEM encoded private key file<br>  -laddr value<br>        Local IP address (default 0.0.0.0)<br>  -lazy<br>        Read targets lazily<br>  -max-body value<br>        Maximum number of bytes to capture from response bodies. [-1 = no <span class="hljs-built_in">limit</span>] (default -1)<br>  -name string<br>        Attack name<br>  -output string<br>        Output file (default <span class="hljs-string">&quot;stdout&quot;</span>)<br>  -rate value<br>        Number of requests per time unit (default 50/1s)<br>  -redirects int<br>        Number of redirects to follow. -1 will not follow but marks as success (default 10)<br>  -resolvers value<br>        List of addresses (ip:port) to use <span class="hljs-keyword">for</span> DNS resolution. Disables use of <span class="hljs-built_in">local</span> system DNS. (comma separated list)<br>  -root-certs value<br>        TLS root certificate files (comma separated list)<br>  -targets string<br>        Targets file (default <span class="hljs-string">&quot;stdin&quot;</span>)<br>  -<span class="hljs-built_in">timeout</span> duration<br>        Requests <span class="hljs-built_in">timeout</span> (default 30s)<br>  -workers uint<br>        Initial number of workers (default 10)<br><br>encode <span class="hljs-built_in">command</span>:<br>  -output string<br>        Output file (default <span class="hljs-string">&quot;stdout&quot;</span>)<br>  -to string<br>        Output encoding [csv, gob, json] (default <span class="hljs-string">&quot;json&quot;</span>)<br><br>plot <span class="hljs-built_in">command</span>:<br>  -output string<br>        Output file (default <span class="hljs-string">&quot;stdout&quot;</span>)<br>  -threshold int<br>        Threshold of data points above <span class="hljs-built_in">which</span> series are downsampled. (default 4000)<br>  -title string<br>        Title and header of the resulting HTML page (default <span class="hljs-string">&quot;Vegeta Plot&quot;</span>)<br><br>report <span class="hljs-built_in">command</span>:<br>  -every duration<br>        Report interval<br>  -output string<br>        Output file (default <span class="hljs-string">&quot;stdout&quot;</span>)<br>  -<span class="hljs-built_in">type</span> string<br>        Report <span class="hljs-built_in">type</span> to generate [text, json, hist[buckets]] (default <span class="hljs-string">&quot;text&quot;</span>)<br><br>examples:<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;GET http://localhost/&quot;</span> | vegeta attack -duration=5s | <span class="hljs-built_in">tee</span> results.bin | vegeta report<br>  vegeta report -<span class="hljs-built_in">type</span>=json results.bin &gt; metrics.json<br>  <span class="hljs-built_in">cat</span> results.bin | vegeta plot &gt; plot.html<br>  <span class="hljs-built_in">cat</span> results.bin | vegeta report -<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hist[0,100ms,200ms,300ms]&quot;</span><br></code></pre></td></tr></table></figure><h3 id="dive"><a href="#dive" class="headerlink" title="dive"></a>dive</h3><p>功能强大的 Docker 镜像分析工具，可以查看每层镜像的具体差异等 👉 <a href="https://github.com/wagoodman/dive">Github</a></p><p><img src="https://cdn.oss.link/markdown/ik3ng.gif" alt="dive"></p><h3 id="ctop"><a href="#ctop" class="headerlink" title="ctop"></a>ctop</h3><p>容器运行时资源分析，如 CPU、内存消耗等 👉 <a href="https://github.com/bcicen/ctop">Github</a></p><p><img src="https://cdn.oss.link/markdown/mr3x3.gif" alt="ctop"></p><h3 id="container-diff"><a href="#container-diff" class="headerlink" title="container-diff"></a>container-diff</h3><p>Google 推出的工具，功能就顾名思义了 👉 <a href="https://github.com/GoogleContainerTools/container-diff">Github</a></p><p><img src="https://cdn.oss.link/markdown/dtapx.png" alt="container-diff"></p><h3 id="transfer-sh"><a href="#transfer-sh" class="headerlink" title="transfer.sh"></a>transfer.sh</h3><p>快捷的终端文件分享工具 👉 <a href="https://github.com/dutchcoders/transfer.sh">Github</a></p><p><img src="https://cdn.oss.link/markdown/76vh0.png" alt="transfer.sh"></p><h3 id="vuls"><a href="#vuls" class="headerlink" title="vuls"></a>vuls</h3><p> Linux&#x2F;FreeBSD 漏洞扫描工具 👉 <a href="https://github.com/future-architect/vuls">Github</a></p><p> <img src="https://cdn.oss.link/markdown/bpsps.jpg" alt="vuls"></p><h3 id="restic"><a href="#restic" class="headerlink" title="restic"></a>restic</h3><p>高性能安全的文件备份工具 👉 <a href="https://github.com/restic/restic">Github</a></p><p><img src="https://cdn.oss.link/markdown/g51z4.png" alt="restic"></p><h3 id="gitql"><a href="#gitql" class="headerlink" title="gitql"></a>gitql</h3><p>使用 sql 的方式查询 git 提交 👉 <a href="https://github.com/cloudson/gitql">Github</a></p><p><img src="https://cdn.oss.link/markdown/4h095.gif" alt="gitql"></p><h3 id="gitflow-toolkit"><a href="#gitflow-toolkit" class="headerlink" title="gitflow-toolkit"></a>gitflow-toolkit</h3><p>帮助生成满足 Gitflow 格式 commit message 的小工具(自己写的) 👉 <a href="https://github.com/mritd/gitflow-toolkit">Github</a></p><p><img src="https://cdn.oss.link/markdown/1e2v1.gif" alt="gitflow-toolkit"></p><h3 id="git-chglog"><a href="#git-chglog" class="headerlink" title="git-chglog"></a>git-chglog</h3><p>对主流的 Gitflow 格式的 commit message 生成 CHANGELOG 👉 <a href="https://github.com/git-chglog/git-chglog">Github</a></p><p><img src="https://cdn.oss.link/markdown/zphxd.gif" alt="git-chglog"></p><h3 id="grv"><a href="#grv" class="headerlink" title="grv"></a>grv</h3><p>一个 git 终端图形化浏览工具 👉 <a href="https://github.com/rgburke/grv">Github</a></p><p><img src="https://cdn.oss.link/markdown/k1vh2.jpg" alt="grv"></p><h3 id="jid"><a href="#jid" class="headerlink" title="jid"></a>jid</h3><p>命令行 json 格式化处理工具，类似 jq，不过感觉更加强大 👉 <a href="https://github.com/simeji/jid">Github</a></p><p><img src="https://cdn.oss.link/markdown/3k4ue.gif" alt="jid"></p><h3 id="annie"><a href="#annie" class="headerlink" title="annie"></a>annie</h3><p>类似 youget 的一个视频下载工具，可以解析大部分视频网站直接下载 👉 <a href="https://github.com/iawia002/annie">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ annie -i https://www.youtube.com/watch?v=dQw4w9WgXcQ<br><br> Site:      YouTube youtube.com<br> Title:     Rick Astley - Never Gonna Give You Up (Video)<br> Type:      video<br> Streams:   <span class="hljs-comment"># All available quality</span><br>     [248]  -------------------<br>     Quality:         1080p video/webm; codecs=<span class="hljs-string">&quot;vp9&quot;</span><br>     Size:            49.29 MiB (51687554 Bytes)<br>     <span class="hljs-comment"># download with: annie -f 248 ...</span><br><br>     [137]  -------------------<br>     Quality:         1080p video/mp4; codecs=<span class="hljs-string">&quot;avc1.640028&quot;</span><br>     Size:            43.45 MiB (45564306 Bytes)<br>     <span class="hljs-comment"># download with: annie -f 137 ...</span><br><br>     [398]  -------------------<br>     Quality:         720p video/mp4; codecs=<span class="hljs-string">&quot;av01.0.05M.08&quot;</span><br>     Size:            37.12 MiB (38926432 Bytes)<br>     <span class="hljs-comment"># download with: annie -f 398 ...</span><br><br>     [136]  -------------------<br>     Quality:         720p video/mp4; codecs=<span class="hljs-string">&quot;avc1.4d401f&quot;</span><br>     Size:            31.34 MiB (32867324 Bytes)<br>     <span class="hljs-comment"># download with: annie -f 136 ...</span><br><br>     [247]  -------------------<br>     Quality:         720p video/webm; codecs=<span class="hljs-string">&quot;vp9&quot;</span><br>     Size:            31.03 MiB (32536181 Bytes)<br>     <span class="hljs-comment"># download with: annie -f 247 ...</span><br></code></pre></td></tr></table></figure><h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><p>Linux 下管道式终端搜索工具 👉 <a href="https://github.com/akavel/up">Github</a></p><p><img src="https://cdn.oss.link/markdown/n8zdj.gif" alt="up"></p><h3 id="lego"><a href="#lego" class="headerlink" title="lego"></a>lego</h3><p>Let’s Encrypt 证书申请工具 👉 <a href="https://github.com/xenolf/lego">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">NAME:<br>   lego - Let<span class="hljs-string">&#x27;s Encrypt client written in Go</span><br><span class="hljs-string"></span><br><span class="hljs-string">USAGE:</span><br><span class="hljs-string">   lego [global options] command [command options] [arguments...]</span><br><span class="hljs-string"></span><br><span class="hljs-string">COMMANDS:</span><br><span class="hljs-string">     run      Register an account, then create and install a certificate</span><br><span class="hljs-string">     revoke   Revoke a certificate</span><br><span class="hljs-string">     renew    Renew a certificate</span><br><span class="hljs-string">     dnshelp  Shows additional help for the --dns global option</span><br><span class="hljs-string">     help, h  Shows a list of commands or help for one command</span><br><span class="hljs-string"></span><br><span class="hljs-string">GLOBAL OPTIONS:</span><br><span class="hljs-string">   --domains value, -d value   Add a domain to the process. Can be specified multiple times.</span><br><span class="hljs-string">   --csr value, -c value       Certificate signing request filename, if an external CSR is to be used</span><br><span class="hljs-string">   --server value, -s value    CA hostname (and optionally :port). The server certificate must be trusted in order to avoid further modifications to the client. (default: &quot;https://acme-v02.api.letsencrypt.org/directory&quot;)</span><br><span class="hljs-string">   --email value, -m value     Email used for registration and recovery contact.</span><br><span class="hljs-string">   --filename value            Filename of the generated certificate</span><br><span class="hljs-string">   --accept-tos, -a            By setting this flag to true you indicate that you accept the current Let&#x27;</span>s Encrypt terms of service.<br>   --eab                       Use External Account Binding <span class="hljs-keyword">for</span> account registration. Requires --kid and --hmac.<br>   --kid value                 Key identifier from External CA. Used <span class="hljs-keyword">for</span> External Account Binding.<br>   --hmac value                MAC key from External CA. Should be <span class="hljs-keyword">in</span> Base64 URL Encoding without padding format. Used <span class="hljs-keyword">for</span> External Account Binding.<br>   --key-type value, -k value  Key <span class="hljs-built_in">type</span> to use <span class="hljs-keyword">for</span> private keys. Supported: rsa2048, rsa4096, rsa8192, ec256, ec384 (default: <span class="hljs-string">&quot;rsa2048&quot;</span>)<br>   --path value                Directory to use <span class="hljs-keyword">for</span> storing the data (default: <span class="hljs-string">&quot;./.lego&quot;</span>)<br>   --exclude value, -x value   Explicitly disallow solvers by name from being used. Solvers: <span class="hljs-string">&quot;http-01&quot;</span>, <span class="hljs-string">&quot;dns-01&quot;</span>, <span class="hljs-string">&quot;tls-alpn-01&quot;</span>.<br>   --webroot value             Set the webroot folder to use <span class="hljs-keyword">for</span> HTTP based challenges to write directly <span class="hljs-keyword">in</span> a file <span class="hljs-keyword">in</span> .well-known/acme-challenge<br>   --memcached-host value      Set the memcached host(s) to use <span class="hljs-keyword">for</span> HTTP based challenges. Challenges will be written to all specified hosts.<br>   --http value                Set the port and interface to use <span class="hljs-keyword">for</span> HTTP based challenges to listen on. Supported: interface:port or :port<br>   --tls value                 Set the port and interface to use <span class="hljs-keyword">for</span> TLS based challenges to listen on. Supported: interface:port or :port<br>   --dns value                 Solve a DNS challenge using the specified provider. Disables all other challenges. Run <span class="hljs-string">&#x27;lego dnshelp&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span> on usage.<br>   --http-timeout value        Set the HTTP <span class="hljs-built_in">timeout</span> value to a specific value <span class="hljs-keyword">in</span> seconds. The default is 10 seconds. (default: 0)<br>   --dns-timeout value         Set the DNS <span class="hljs-built_in">timeout</span> value to a specific value <span class="hljs-keyword">in</span> seconds. The default is 10 seconds. (default: 0)<br>   --dns-resolvers value       Set the resolvers to use <span class="hljs-keyword">for</span> performing recursive DNS queries. Supported: host:port. The default is to use the system resolvers, or Google<span class="hljs-string">&#x27;s DNS resolvers if the system&#x27;</span>s cannot be determined.<br>   --pem                       Generate a .pem file by concatenating the .key and .crt files together.<br>   --<span class="hljs-built_in">help</span>, -h                  show <span class="hljs-built_in">help</span><br>   --version, -v               <span class="hljs-built_in">print</span> the version<br></code></pre></td></tr></table></figure><h3 id="noti"><a href="#noti" class="headerlink" title="noti"></a>noti</h3><p>贼好用的终端命令异步执行通知工具 👉 <a href="https://github.com/variadico/noti">Github</a></p><p><img src="https://cdn.oss.link/markdown/m2r1e.jpg" alt="noti"></p><h3 id="gosu"><a href="#gosu" class="headerlink" title="gosu"></a>gosu</h3><p>临时切换到指定用户运行特定命令，方便测试权限问题 👉 <a href="https://github.com/tianon/gosu">Github</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ gosu<br>Usage: ./gosu user-spec <span class="hljs-built_in">command</span> [args]<br>   eg: ./gosu tianon bash<br>       ./gosu nobody:root bash -c <span class="hljs-string">&#x27;whoami &amp;&amp; id&#x27;</span><br>       ./gosu 1000:1 <span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h3 id="sup"><a href="#sup" class="headerlink" title="sup"></a>sup</h3><p>类似 Ansible 的一个批量执行工具，暂且称之为低配版 Ansible 👉 <a href="https://github.com/pressly/sup">Github</a></p><p><img src="https://cdn.oss.link/markdown/x0eaz.gif" alt="sup"></p><h3 id="aptly"><a href="#aptly" class="headerlink" title="aptly"></a>aptly</h3><p>Debian 仓库管理工具 👉 <a href="https://github.com/aptly-dev/aptly">Github</a></p><p><img src="https://cdn.oss.link/markdown/8e0ml.jpg" alt="aptly"></p><h3 id="mmh"><a href="#mmh" class="headerlink" title="mmh"></a>mmh</h3><p>支持无限跳板机登录的 ssh 小工具(自己写的) 👉 <a href="https://github.com/mritd/mmh">Github</a></p><p><img src="https://cdn.oss.link/markdown/37638.gif" alt="mmh"></p>]]></content>
    
    
    <summary type="html">迫于 Github 上 Star 的项目有点多，今天整理一下一些有意思的 Go 编写的小工具；大多数为终端下的实用工具，装逼的比如天气预报啥的就不写了</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>远程 Debug kubeadm</title>
    <link href="https://mritd.com/2018/11/25/kubeadm-remote-debug/"/>
    <id>https://mritd.com/2018/11/25/kubeadm-remote-debug/</id>
    <published>2018-11-25T03:11:28.000Z</published>
    <updated>2018-11-25T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在看 kubeadm 的源码，不过有些东西光看代码还是没法太清楚，还是需要实际运行才能看到具体代码怎么跑的，还得打断点 debug；无奈的是本机是 mac，debug 得在 Linux 下，so 研究了一下 remote debug</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ul><li>GoLand 2018.2.4</li><li>Golang 1.11.2</li><li>delve v1.1.0</li><li>Kubernetest master</li><li>Ubuntu 18.04</li><li>能够高速访问外网(自行理解)</li></ul><p><strong>这里不会详细写如何安装 Go 开发环境以及 GoLand 安装，本文默认读者已经至少已经对 Go 开发环境以及代码有一定了解；顺便提一下 GoLand，这玩意属于 jetbrains 系列 IDE，在大约 2018.1 版本后在线激活服务器已经全部失效，不过网上还有其他本地离线激活工具，具体请自行 Google，如果后续工资能支撑得起，请补票支持正版(感恩节全家桶半价真香😂)</strong></p><h3 id="1-1、获取源码"><a href="#1-1、获取源码" class="headerlink" title="1.1、获取源码"></a>1.1、获取源码</h3><p>需要注意的是 Kubernetes 源码虽然托管在 Github，但是在使用 <code>go get</code> 的时候要使用 <code>k8s.io</code> 域名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">go get -d k8s.io/kubernetes<br></code></pre></td></tr></table></figure><p><code>go get</code> 命令是接受标准的 http 代理的，这个源码下载会非常慢，源码大约 1G 左右，所以最好使用加速工具下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ <span class="hljs-built_in">which</span> proxy<br>/usr/local/bin/proxy<br>➜  ~ <span class="hljs-built_in">cat</span> /usr/local/bin/proxy<br><span class="hljs-comment">#!/bin/bash</span><br>http_proxy=http://127.0.0.1:8123 https_proxy=http://127.0.0.1:8123 $*<br>➜  ~ proxy go get -d k8s.io/kubernetes<br></code></pre></td></tr></table></figure><h3 id="1-2、安装-delve"><a href="#1-2、安装-delve" class="headerlink" title="1.2、安装 delve"></a>1.2、安装 delve</h3><p>delve 是一个 Golang 的 debug 工具，有点类似 gdb，不过是专门针对 Golang 的，GoLand 的 debug 实际上就是使用的这个开源工具；为了进行远程 debug，运行 kubeadm 的机器必须安装 delve，从而进行远程连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 同样这里省略在 Linux 安装 go 环境操作</span><br>go get -u github.com/derekparker/delve/cmd/dlv<br></code></pre></td></tr></table></figure><h2 id="二、远程-Debug"><a href="#二、远程-Debug" class="headerlink" title="二、远程 Debug"></a>二、远程 Debug</h2><h3 id="2-1、重新编译-kubeadm"><a href="#2-1、重新编译-kubeadm" class="headerlink" title="2.1、重新编译 kubeadm"></a>2.1、重新编译 kubeadm</h3><p>默认情况下直接编译出的 kubeadm 是无法进行 debug 的，因为 Golang 的编译器会进行编译优化，比如进行内联等；所以要关闭编译优化和内联，方便 debug</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;GOPATH&#125;</span>/src/k8s.io/kubernetes/cmd/kubeadm<br>GOOS=<span class="hljs-string">&quot;linux&quot;</span> GOARCH=<span class="hljs-string">&quot;amd64&quot;</span> go build -gcflags <span class="hljs-string">&quot;all=-N -l&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2、远程运行-kubeadm"><a href="#2-2、远程运行-kubeadm" class="headerlink" title="2.2、远程运行 kubeadm"></a>2.2、远程运行 kubeadm</h3><p>将编译好的 kubeadm 复制到远程，并且使用 delve 启动它，此时 delve 会监听 api 端口，GoLand 就可以远程连接过来了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dlv --listen=192.168.1.61:2345 --headless=<span class="hljs-literal">true</span> --api-version=2 <span class="hljs-built_in">exec</span> ./kubeadm init<br></code></pre></td></tr></table></figure><p><strong>注意: 要指定需要 debug 的 kubeadm 的子命令，否则可能出现连接上以后 GoLand 无反应的情况</strong></p><h3 id="2-3、运行-GoLand"><a href="#2-3、运行-GoLand" class="headerlink" title="2.3、运行 GoLand"></a>2.3、运行 GoLand</h3><p>在 GoLand 中打开 kubernetes 源码，在需要 debug 的代码中打上断点，这里以 init 子命令为例</p><p>首先新建一个远程 debug configuration</p><p><img src="https://cdn.oss.link/markdown/i6oed.png" alt="create configuration"></p><p>名字可以随便写，主要是地址和端口</p><p><img src="https://cdn.oss.link/markdown/rmczj.png" alt="conifg delve"></p><p>接下来在目标源码位置打断点，以下为 init 子命令的源码位置</p><p><img src="https://cdn.oss.link/markdown/ylf97.png" alt="create breakpoint"></p><p>最后只需要点击 debug 按钮即可</p><p><img src="https://cdn.oss.link/markdown/ns2yw.png" alt="debug"></p><p><strong>在没有运行 GoLand debug 之前，目标机器的实际指令是不会运行的，也就是说在 GoLand 没有连接到远程 delve 启动的 <code>kubeadm init</code> 命令之前，<code>kubeadm init</code> 并不会真正运行；当点击 GoLand 的终止 debug 按钮后，远程的 delve 也会随之退出</strong></p><p><img src="https://cdn.oss.link/markdown/lmdke.png" alt="stop"></p>]]></content>
    
    
    <summary type="html">最近在看 kubeadm 的源码，不过有些东西光看代码还是没法太清楚，还是需要实际运行才能看到具体代码怎么跑的，还得打断点 debug；无奈的是本机是 mac，debug 得在 Linux 下，so 研究了一下 remote debug</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    <category term="Golang" scheme="https://mritd.com/categories/kubernetes/golang/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Mac: Extract JDK to folder, without running installer</title>
    <link href="https://mritd.com/2018/11/23/extract-jdk-to-folder-on-mac/"/>
    <id>https://mritd.com/2018/11/23/extract-jdk-to-folder-on-mac/</id>
    <published>2018-11-23T04:33:20.000Z</published>
    <updated>2018-11-23T04:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重装了 mac 系统，由于一些公司项目必须使用 Oracle JDK(验证码等组件用了一些 Oracle 独有的 API) 所以又得重新安装；但是 Oracle 只提供了 pkg 的安装方式，研究半天找到了一个解包 pkg 的安装方式，这里记录一下</p></blockquote><p>不使用 pkg 的原因是每次更新版本都要各种安装，最烦人的是 IDEA 选择 JDK 时候弹出的文件浏览器没法进入到这种方式安装的 JDK 的系统目录…mmp，后来从国外网站找到了一篇文章，基本套路如下</p><ul><li>下载 Oracle JDK，从 dmg 中拷贝 pkg 到任意位置</li><li>解压 pkg 到任意位置 <code>pkgutil --expand your_jdk.pkg jdkdir</code></li><li>进入到目录中，解压主文件 <code>cd jdkdir/jdk_version.pkg &amp;&amp; cpio -idv &lt; Payload</code></li><li>移动 jdk 到任意位置 <code>mv Contents/Home ~/myjdk</code></li></ul><p>原文地址: <a href="https://augustl.com/blog/2014/extracting_java_to_folder_no_installer_osx/">OS X: Extract JDK to folder, without running installer</a></p>]]></content>
    
    
    <summary type="html">重装了 mac 系统，由于一些公司项目必须使用 Oracle JDK(验证码等组件用了一些 Oracle 独有的 API) 所以又得重新安装；但是 Oracle 只提供了 pkg 的安装方式，研究半天找到了一个解包 pkg 的安装方式，这里记录一下</summary>
    
    
    
    <category term="Java" scheme="https://mritd.com/categories/java/"/>
    
    
    <category term="Java" scheme="https://mritd.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Go ssh 交互式执行命令</title>
    <link href="https://mritd.com/2018/11/09/go-interactive-shell/"/>
    <id>https://mritd.com/2018/11/09/go-interactive-shell/</id>
    <published>2018-11-09T15:13:44.000Z</published>
    <updated>2018-11-09T15:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在写一个跳板机登录的小工具，其中涉及到了用 Go 来进行交互式执行命令，简单地说就是弄个终端出来；一开始随便 Google 了一下，copy 下来基本上就是能跑了…但是后来发现了一些各种各样的小问题，强迫症的我实在受不了，最后翻了一下 Teleport 的源码，从中学到了不少有用的知识，这里记录一下</p></blockquote><h2 id="一、原始版本"><a href="#一、原始版本" class="headerlink" title="一、原始版本"></a>一、原始版本</h2><blockquote><p>不想看太多可以直接跳转到 <a href="#%E4%B8%89%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81">第三部分</a> 拿代码</p></blockquote><h3 id="1-1、样例代码"><a href="#1-1、样例代码" class="headerlink" title="1.1、样例代码"></a>1.1、样例代码</h3><p>一开始随便 Google 出来的代码，copy 上就直接跑；代码基本如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 创建 ssh 配置</span><br>sshConfig := &amp;ssh.ClientConfig&#123;<br>User: <span class="hljs-string">&quot;root&quot;</span>,<br>Auth: []ssh.AuthMethod&#123;<br>ssh.Password(<span class="hljs-string">&quot;password&quot;</span>),<br>&#125;,<br>HostKeyCallback: ssh.InsecureIgnoreHostKey(),<br>Timeout:         <span class="hljs-number">5</span> * time.Second,<br>&#125;<br><br><span class="hljs-comment">// 创建 client</span><br>client, err := ssh.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;192.168.1.20:22&quot;</span>, sshConfig)<br>checkErr(err)<br><span class="hljs-keyword">defer</span> client.Close()<br><br><span class="hljs-comment">// 获取 session</span><br>session, err := client.NewSession()<br>checkErr(err)<br><span class="hljs-keyword">defer</span> session.Close()<br><br><span class="hljs-comment">// 拿到当前终端文件描述符</span><br>fd := <span class="hljs-type">int</span>(os.Stdin.Fd())<br>termWidth, termHeight, err := terminal.GetSize(fd)<br><br><span class="hljs-comment">// request pty</span><br>err = session.RequestPty(<span class="hljs-string">&quot;xterm-256color&quot;</span>, termHeight, termWidth, ssh.TerminalModes&#123;&#125;)<br>checkErr(err)<br><br><span class="hljs-comment">// 对接 std</span><br>session.Stdout = os.Stdout<br>session.Stderr = os.Stderr<br>session.Stdin = os.Stdin<br><br>err = session.Shell()<br>checkErr(err)<br>err = session.Wait()<br>checkErr(err)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkErr</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2、遇到的问题"><a href="#1-2、遇到的问题" class="headerlink" title="1.2、遇到的问题"></a>1.2、遇到的问题</h3><p>以上代码跑起来后，基本上遇到了以下问题:</p><ul><li>执行命令有回显，表现为敲一个 <code>ls</code> 出现两行</li><li>本地终端大小调整，远端完全无反应，导致显示不全</li><li>Tmux 下终端连接后窗口标题显示的是原始命令，而不是目标机器 shell 环境的目录位置</li><li>首次连接一些刚装完系统的机器可能出现执行命令后回显不换行</li></ul><h2 id="二、改进代码"><a href="#二、改进代码" class="headerlink" title="二、改进代码"></a>二、改进代码</h2><h3 id="2-1、回显问题"><a href="#2-1、回显问题" class="headerlink" title="2.1、回显问题"></a>2.1、回显问题</h3><p>关于回显问题，实际上解决方案很简单，设置当前终端进入 <code>raw</code> 模式即可；代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 拿到当前终端文件描述符</span><br>fd := <span class="hljs-type">int</span>(os.Stdin.Fd())<br><span class="hljs-comment">// make raw</span><br>state, err := terminal.MakeRaw(fd)<br>checkErr(err)<br><span class="hljs-keyword">defer</span> terminal.Restore(fd, state)<br></code></pre></td></tr></table></figure><p>代码很简单，网上一大堆，But…基本没有文章详细说这个 <code>raw</code> 模式到底是个啥玩意；好在万能的 StackOverflow 对于不熟悉 Linux 的人给出了一个很清晰的解释: <a href="https://unix.stackexchange.com/questions/21752/what-s-the-difference-between-a-raw-and-a-cooked-device-driver">What’s the difference between a “raw” and a “cooked” device driver?</a></p><p>大致意思就是说 <strong>在终端处于 <code>Cooked</code> 模式时，当你输入一些字符后，默认是被当前终端 cache 住的，在你敲了回车之前这些文本都在 cache 中，这样允许应用程序做一些处理，比如捕获 <code>Cntl-D</code> 等按键，这时候就会出现敲回车后本地终端帮你打印了一下，导致出现类似回显的效果；当设置终端为 <code>raw</code> 模式后，所有的输入将不被 cache，而是发送到应用程序，在我们的代码中表现为通过 <code>io.Copy</code> 直接发送到了远端 shell 程序</strong></p><h3 id="2-2、终端大小问题"><a href="#2-2、终端大小问题" class="headerlink" title="2.2、终端大小问题"></a>2.2、终端大小问题</h3><p>当本地调整了终端大小后，远程终端毫无反应；后来发现在 <code>*ssh.Session</code> 上有一个 <code>WindowChange</code> 方法，用于向远端发送窗口调整事件；解决方案就是启动一个 <code>goroutine</code> 在后台不断监听窗口改变事件，然后调用 <code>WindowChange</code> 即可；代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 监听窗口变更事件</span><br>sigwinchCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(sigwinchCh, syscall.SIGWINCH)<br><br>fd := <span class="hljs-type">int</span>(os.Stdin.Fd())<br>termWidth, termHeight, err := terminal.GetSize(fd)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 阻塞读取</span><br><span class="hljs-keyword">case</span> sigwinch := &lt;-sigwinchCh:<br><span class="hljs-keyword">if</span> sigwinch == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>currTermWidth, currTermHeight, err := terminal.GetSize(fd)<br><br><span class="hljs-comment">// 判断一下窗口尺寸是否有改变</span><br><span class="hljs-keyword">if</span> currTermHeight == termHeight &amp;&amp; currTermWidth == termWidth &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 更新远端大小</span><br>session.WindowChange(currTermHeight, currTermWidth)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Unable to send window-change reqest: %s.&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>termWidth, termHeight = currTermWidth, currTermHeight<br><br>&#125;<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h3 id="2-3、Tmux-标题以及回显不换行"><a href="#2-3、Tmux-标题以及回显不换行" class="headerlink" title="2.3、Tmux 标题以及回显不换行"></a>2.3、Tmux 标题以及回显不换行</h3><p>这两个问题实际上都是由于我们直接对接了 <code>stderr</code>、<code>stdout</code> 和 <code>stdin</code> 造成的，实际上我们应当启动一个异步的管道式复制行为，并且最好带有 buf 的发送；代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs golang">stdin, err := session.StdinPipe()<br>checkErr(err)<br>stdout, err := session.StdoutPipe()<br>checkErr(err)<br>stderr, err := session.StderrPipe()<br>checkErr(err)<br><br><span class="hljs-keyword">go</span> io.Copy(os.Stderr, stderr)<br><span class="hljs-keyword">go</span> io.Copy(os.Stdout, stdout)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">128</span>)<br><span class="hljs-keyword">for</span> &#123;<br>n, err := os.Stdin.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>_, err = stdin.Write(buf[:n])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>checkErr(err)<br>&#125;<br>&#125;<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> SSHTerminal <span class="hljs-keyword">struct</span> &#123;<br>Session *ssh.Session<br>exitMsg <span class="hljs-type">string</span><br>stdout  io.Reader<br>stdin   io.Writer<br>stderr  io.Reader<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sshConfig := &amp;ssh.ClientConfig&#123;<br>User: <span class="hljs-string">&quot;root&quot;</span>,<br>Auth: []ssh.AuthMethod&#123;<br>ssh.Password(<span class="hljs-string">&quot;password&quot;</span>),<br>&#125;,<br>HostKeyCallback: ssh.InsecureIgnoreHostKey(),<br>&#125;<br><br>client, err := ssh.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;192.168.1.20:22&quot;</span>, sshConfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> client.Close()<br><br>err = New(client)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *SSHTerminal)</span></span> updateTerminalSize() &#123;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// SIGWINCH is sent to the process when the window size of the terminal has</span><br><span class="hljs-comment">// changed.</span><br>sigwinchCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(sigwinchCh, syscall.SIGWINCH)<br><br>fd := <span class="hljs-type">int</span>(os.Stdin.Fd())<br>termWidth, termHeight, err := terminal.GetSize(fd)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// The client updated the size of the local PTY. This change needs to occur</span><br><span class="hljs-comment">// on the server side PTY as well.</span><br><span class="hljs-keyword">case</span> sigwinch := &lt;-sigwinchCh:<br><span class="hljs-keyword">if</span> sigwinch == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>currTermWidth, currTermHeight, err := terminal.GetSize(fd)<br><br><span class="hljs-comment">// Terminal size has not changed, don&#x27;t do anything.</span><br><span class="hljs-keyword">if</span> currTermHeight == termHeight &amp;&amp; currTermWidth == termWidth &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>t.Session.WindowChange(currTermHeight, currTermWidth)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Unable to send window-change reqest: %s.&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>termWidth, termHeight = currTermWidth, currTermHeight<br><br>&#125;<br>&#125;<br>&#125;()<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *SSHTerminal)</span></span> interactiveSession() <span class="hljs-type">error</span> &#123;<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> t.exitMsg == <span class="hljs-string">&quot;&quot;</span> &#123;<br>fmt.Fprintln(os.Stdout, <span class="hljs-string">&quot;the connection was closed on the remote side on &quot;</span>, time.Now().Format(time.RFC822))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Fprintln(os.Stdout, t.exitMsg)<br>&#125;<br>&#125;()<br><br>fd := <span class="hljs-type">int</span>(os.Stdin.Fd())<br>state, err := terminal.MakeRaw(fd)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> terminal.Restore(fd, state)<br><br>termWidth, termHeight, err := terminal.GetSize(fd)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>termType := os.Getenv(<span class="hljs-string">&quot;TERM&quot;</span>)<br><span class="hljs-keyword">if</span> termType == <span class="hljs-string">&quot;&quot;</span> &#123;<br>termType = <span class="hljs-string">&quot;xterm-256color&quot;</span><br>&#125;<br><br>err = t.Session.RequestPty(termType, termHeight, termWidth, ssh.TerminalModes&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>t.updateTerminalSize()<br><br>t.stdin, err = t.Session.StdinPipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>t.stdout, err = t.Session.StdoutPipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>t.stderr, err = t.Session.StderrPipe()<br><br><span class="hljs-keyword">go</span> io.Copy(os.Stderr, t.stderr)<br><span class="hljs-keyword">go</span> io.Copy(os.Stdout, t.stdout)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">128</span>)<br><span class="hljs-keyword">for</span> &#123;<br>n, err := os.Stdin.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>_, err = t.stdin.Write(buf[:n])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>t.exitMsg = err.Error()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;()<br><br>err = t.Session.Shell()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = t.Session.Wait()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(client *ssh.Client)</span></span> <span class="hljs-type">error</span> &#123;<br><br>session, err := client.NewSession()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> session.Close()<br><br>s := SSHTerminal&#123;<br>Session: session,<br>&#125;<br><br><span class="hljs-keyword">return</span> s.interactiveSession()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近在写一个跳板机登录的小工具，其中涉及到了用 Go 来进行交互式执行命令，简单地说就是弄个终端出来；一开始随便 Google 了一下，copy 下来基本上就是能跑了...但是后来发现了一些各种各样的小问题，强迫症的我实在受不了，最后翻了一下 Teleport 的源码，从中学到了不少有用的知识，这里记录一下</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 代码的扩展套路</title>
    <link href="https://mritd.com/2018/10/23/golang-code-plugin/"/>
    <id>https://mritd.com/2018/10/23/golang-code-plugin/</id>
    <published>2018-10-23T13:32:13.000Z</published>
    <updated>2018-10-23T13:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>折腾 Go 已经有一段时间了，最近在用 Go 写点 web 的东西；在搭建脚手架的过程中总是有点不适应，尤其对可扩展性上总是感觉没有 Java 那么顺手；索性看了下 coredns 的源码，最后追踪到 caddy 源码；突然发现他们对代码内的 plugin 机制有一些骚套路，这里索性记录一下</p></blockquote><h3 id="一、问题由来"><a href="#一、问题由来" class="headerlink" title="一、问题由来"></a>一、问题由来</h3><p>纵观现在所有的 Go web 框架，在文档上可以看到使用方式很简明；非常符合我对 Go 的一贯感受: “所写即所得”；就拿 Gin 这个来说，在 README.md 上可以很轻松的看到 <code>engine</code> 或者说 <code>router</code> 这玩意的使用，比如下面这样:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Disable Console Color</span><br><span class="hljs-comment">// gin.DisableConsoleColor()</span><br><br><span class="hljs-comment">// Creates a gin router with default middleware:</span><br><span class="hljs-comment">// logger and recovery (crash-free) middleware</span><br>router := gin.Default()<br><br>router.GET(<span class="hljs-string">&quot;/someGet&quot;</span>, getting)<br>router.POST(<span class="hljs-string">&quot;/somePost&quot;</span>, posting)<br>router.PUT(<span class="hljs-string">&quot;/somePut&quot;</span>, putting)<br>router.DELETE(<span class="hljs-string">&quot;/someDelete&quot;</span>, deleting)<br>router.PATCH(<span class="hljs-string">&quot;/somePatch&quot;</span>, patching)<br>router.HEAD(<span class="hljs-string">&quot;/someHead&quot;</span>, head)<br>router.OPTIONS(<span class="hljs-string">&quot;/someOptions&quot;</span>, options)<br><br><span class="hljs-comment">// By default it serves on :8080 unless a</span><br><span class="hljs-comment">// PORT environment variable was defined.</span><br>router.Run()<br><span class="hljs-comment">// router.Run(&quot;:3000&quot;) for a hard coded port</span><br>&#125;<br></code></pre></td></tr></table></figure><p>乍一看简单到爆，但实际使用中，在脚手架搭建上，我们需要规划好 <strong>包结构、配置文件、命令行参数、数据库连接、cache</strong> 等等；直到目前为止，至少我没有找到一种非常规范的后端 MVC 的标准架子结构；这点目前确实不如 Java 的生态；作为最初的脚手架搭建者，站在这个角度，我想我们更应当考虑如何做好适当的抽象、隔离；以防止后面开发者对系统基础功能可能造成的破坏。</p><p>综上所述，再配合 Gin 或者说 Go 的代码风格，这就形成了一种强烈的冲突；在 Java 中，由于有注解(<code>Annotation</code>)的存在，事实上你是可以有这种操作的: <strong>新建一个 Class，创建 func，在上面加上合适的注解，最终框架会通过注解扫描的方式以适当的形式进行初始化</strong>；而 Go 中并没有 <code>Annotation</code> 这玩意，我们很难实现在 <strong>代码运行时扫描自身做出一种策略性调整</strong>；从而下面这个需求很难实现: <strong>作为脚手架搭建者，我希望我的基础代码安全的放在一个特定位置，后续开发者开发应当以一种类似可热插拔的形式注入进来</strong>，比如 Gin 的 router 路由设置，我不希望每次有修改都会有人动我的 router 核心配置文件。</p><h3 id="二、Caddy-的套路"><a href="#二、Caddy-的套路" class="headerlink" title="二、Caddy 的套路"></a>二、Caddy 的套路</h3><p>在翻了 coredns 的源码后，我发现他是依赖于 Caddy 这框架运行的，coredns 的代码内的插件机制也是直接调用的 Caddy；所以接着我就翻到了 Caddy 源码，其中的代码如下(完整代码<a href="https://github.com/mholt/caddy/blob/master/plugins.go">点击这里</a>):</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// RegisterPlugin plugs in plugin. All plugins should register</span><br><span class="hljs-comment">// themselves, even if they do not perform an action associated</span><br><span class="hljs-comment">// with a directive. It is important for the process to know</span><br><span class="hljs-comment">// which plugins are available.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The plugin MUST have a name: lower case and one word.</span><br><span class="hljs-comment">// If this plugin has an action, it must be the name of</span><br><span class="hljs-comment">// the directive that invokes it. A name is always required</span><br><span class="hljs-comment">// and must be unique for the server type.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterPlugin</span><span class="hljs-params">(name <span class="hljs-type">string</span>, plugin Plugin)</span></span> &#123;<br><span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;plugin must have a name&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> _, ok := plugins[plugin.ServerType]; !ok &#123;<br>plugins[plugin.ServerType] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Plugin)<br>&#125;<br><span class="hljs-keyword">if</span> _, dup := plugins[plugin.ServerType][name]; dup &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;plugin named &quot;</span> + name + <span class="hljs-string">&quot; already registered for server type &quot;</span> + plugin.ServerType)<br>&#125;<br>plugins[plugin.ServerType][name] = plugin<br>&#125;<br></code></pre></td></tr></table></figure><p>套路很清奇，为了实现我上面说的那个需求: “后面开发不需要动我核心代码，我还能允许他们动态添加”，Caddy 套路就是<strong>定义一个 map，map 里用于存放一种特定形式的 func，并且暴露出一个方法用于向 map 内添加指定 func，然后在合适的时机遍历这个 map，并执行其中的 func。</strong>这种套路利用了 Go 函数式编程的特性，将行为先存储在容器中，然后后续再去调用这些行为。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>长篇大论这么久，实际上我也是在一边折腾 Go 的过程中一边总结和对比跟 Java 的差异；在 Java 中扫描自己注解的套路 Go 中没法实现，但是 Go 利用其函数式编程的优势也可以利用一些延迟加载方式实现对应的功能；总结来说，不同语言有其自己的特性，当有对比的时候，可能更加深刻。</p>]]></content>
    
    
    <summary type="html">折腾 Go 已经有一段时间了，最近在用 Go 写点 web 的东西；在搭建脚手架的过程中总是有点不适应，尤其对可扩展性上总是感觉没有 Java 那么顺手；索性看了下 coredns 的源码，最后追踪到 caddy 源码；突然发现他们对代码内的 plugin 机制有一些骚套路，这里索性记录一下</summary>
    
    
    
    <category term="Golang" scheme="https://mritd.com/categories/golang/"/>
    
    
    <category term="Golang" scheme="https://mritd.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Google container registry 同步</title>
    <link href="https://mritd.com/2018/09/17/google-container-registry-sync/"/>
    <id>https://mritd.com/2018/09/17/google-container-registry-sync/</id>
    <published>2018-09-17T13:19:40.000Z</published>
    <updated>2018-09-17T13:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>玩 Kubenretes 的基本都很清楚，Kubernetes 很多组件的镜像全部托管在 <code>gcr.io</code> 这个域名下(现在换成了 <code>k8s.gcr.io</code>)；由于众所周知的原因，这个网站在国内是不可达的；当时由于 Docker Hub 提供了 <code>Auto Build</code> 功能，机智的想到一个解决办法；就是利用 Docker Hub 的 <code>Auto Build</code>，创建只有一行的 Dockerfile，里面就一句 <code>FROM gcr.io/xxxx</code>，然后让 Docker Hub 帮你构建完成后拉取即可</p><p>这种套路的基本方案就是利用一个第三方公共仓库，这个仓库可以访问不可达的 <code>gcr.io</code>，然后生成镜像，我们再从这个仓库 pull 即可；为此我创建了一个 Github 仓库(<a href="https://github.com/mritd/docker-library">docker-library</a>)；时隔这么久以后，我猜想大家都已经有了这种自己的仓库…不过最近发现这个仓库仍然在有人 fork…</p><p>为了一劳永逸的解决这个问题，只能撸点代码解决这个问题了</p><h2 id="二、仓库使用"><a href="#二、仓库使用" class="headerlink" title="二、仓库使用"></a>二、仓库使用</h2><p>为了解决上述问题，我写了一个 <a href="https://github.com/mritd/gcrsync">gcrsync</a> 工具，并且借助 <a href="https://travis-ci.org/mritd/gcrsync">Travis CI</a> 让其每天自动运行，将所有用得到的 <code>gcr.io</code> 下的镜像同步到了 Docker Hub</p><p><strong>目前对于一个 <code>gcr.io</code> 下的镜像，可以直接替换为 <code>gcrxio</code> 用户名，然后从 Docker Hub 直接拉取</strong>，以下为一个示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 原始命令</span><br>docker pull k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0<br><br><span class="hljs-comment"># 使用同步仓库</span><br>docker pull gcrxio/kubernetes-dashboard-amd64:v1.10.0<br></code></pre></td></tr></table></figure><h2 id="三、同步细节说明"><a href="#三、同步细节说明" class="headerlink" title="三、同步细节说明"></a>三、同步细节说明</h2><p>为了保证同步镜像的安全性，同步工具已经开源在 <a href="https://github.com/mritd/gcrsync">gcrsync</a> 仓库，同步细节如下:</p><ul><li>工具每天由 <a href="https://travis-ci.org/mritd/gcrsync">Travis CI</a> 自动进行一次 build，然后进行推送</li><li>工具每次推送前首先 clone 元数据仓库 <a href="https://github.com/mritd/gcr">gcr</a></li><li>工具每次推送首先获取 <code>gcr.io</code> 指定 <code>namespace</code> 下的所有镜像(<code>namesapce</code> 由 <a href="https://github.com/mritd/gcrsync/blob/master/.travis.yml">.travis.yml</a> <code>script</code> 段定义)</li><li>获取 <code>gcr.io</code> 镜像后，再读取元数据仓库(<a href="https://github.com/mritd/gcr">gcr</a>) 中与 <code>namesapce</code> 同名文件(实际是个 json)</li><li>接着对比双方差异，得出需要同步的镜像</li><li>最后通过 API 调用本地的 docker 进行 <code>pull</code>、<code>tag</code>、<code>push</code> 操作，完成镜像推送</li><li>所有镜像推送成功后，更新元数据仓库内 <code>namespace</code> 对应的 json 文件，最后在生成 <a href="https://github.com/mritd/gcr/blob/master/CHANGELOG.md">CHANGELOG</a>，执行 <code>git push</code> 到远程元数据仓库</li></ul><p>综上所述，如果想得知<strong>具体 <code>gcrxio</code> 用户下都有那些镜像，可直接访问 <a href="https://github.com/mritd/gcr">gcr</a> 元数据仓库，查看对应 <code>namesapce</code> 同名的 json 文件即可；每天增量同步的信息会追加到 <a href="https://github.com/mritd/gcr">gcr</a> 仓库的 <code>CHANGELOG.md</code> 文件中</strong></p><h2 id="四、gcrsync"><a href="#四、gcrsync" class="headerlink" title="四、gcrsync"></a>四、gcrsync</h2><p>为方便审查镜像安全性，以下为 <a href="https://github.com/mritd/gcrsync">gcrsync</a> 工具的代码简介，代码仓库文件如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  gcrsync git:(master) tree -I vendor<br>.<br>├── CHANGELOG.md<br>├── Gopkg.lock<br>├── Gopkg.toml<br>├── LICENSE<br>├── README.md<br>├── cmd<br>│   ├── compare.go<br>│   ├── monitor.go<br>│   ├── root.go<br>│   ├── sync.go<br>│   └── test.go<br>├── dist<br>│   ├── gcrsync_darwin_amd64<br>│   ├── gcrsync_linux_386<br>│   └── gcrsync_linux_amd64<br>├── main.go<br>└── pkg<br>    ├── gcrsync<br>    │   ├── docker.go<br>    │   ├── gcr.go<br>    │   ├── git.go<br>    │   ├── registry.go<br>    │   └── sync.go<br>    └── utils<br>        └── common.go<br></code></pre></td></tr></table></figure><p>cmd 目录下为标准的 <code>cobra</code> 框架生成的子命令文件，其中每个命令包含了对应的 flag 设置，如 <code>namesapce</code>、<code>proxy</code> 等；<code>pkg/gcrsync</code> 目录下的文件为核心代码:</p><ul><li><code>docker.go</code> 包含了对本地 docker daemon API 调用，包括 <code>pull</code>、<code>tag</code>、<code>push</code> 操作</li><li><code>gcr.go</code> 包含了对 <code>gcr.io</code> 指定 <code>namespace</code> 下镜像列表获取操作</li><li><code>registry.go</code> 包含了对 Docker Hub 下指定用户(默认 <code>gcrxio</code>)的镜像列表获取操作(其主要用于首次执行 <code>compare</code> 命令生成 json 文件)</li><li><code>sync.go</code> 为主要的程序入口，其中包含了对其他文件内方法的调用，设置并发池等</li></ul><h2 id="五、其他说明"><a href="#五、其他说明" class="headerlink" title="五、其他说明"></a>五、其他说明</h2><p>该仓库不保证镜像实时同步，默认每天同步一次(由 <a href="https://travis-ci.org/mritd/gcrsync">Travis CI</a> 执行)，如有特殊需求，如增加 <code>namesapce</code> 等请开启 issue；最后，请不要再 fork <a href="https://github.com/mritd/docker-library">docker-library</a> 这个仓库了</p>]]></content>
    
    
    <summary type="html">Google container registry 同步</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用 Bootstrap Token 完成 TLS Bootstrapping</title>
    <link href="https://mritd.com/2018/08/28/kubernetes-tls-bootstrapping-with-bootstrap-token/"/>
    <id>https://mritd.com/2018/08/28/kubernetes-tls-bootstrapping-with-bootstrap-token/</id>
    <published>2018-08-28T08:54:43.000Z</published>
    <updated>2018-08-28T08:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在测试 Kubernetes 1.11.2 新版本的相关东西，发现新版本的 Bootstrap Token 功能已经进入 Beta 阶段，索性便尝试了一下；虽说目前是为 kubeadm 设计的，不过手动挡用起来也不错，这里记录一下使用方式</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>首先需要有一个运行状态正常的 Master 节点，目前我测试的是版本是 1.11.2，低版本我没测试；其次本文默认 Node 节点 Docker、kubelet 二进制文件、systemd service 配置等都已经处理好，更具体的环境如下:</p><p><strong>Master 节点 IP 为 <code>192.168.1.61</code>，Node 节点 IP 为 <code>192.168.1.64</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ kubectl version<br>Client Version: version.Info&#123;Major:<span class="hljs-string">&quot;1&quot;</span>, Minor:<span class="hljs-string">&quot;11&quot;</span>, GitVersion:<span class="hljs-string">&quot;v1.11.2&quot;</span>, GitCommit:<span class="hljs-string">&quot;bb9ffb1654d4a729bb4cec18ff088eacc153c239&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, BuildDate:<span class="hljs-string">&quot;2018-08-07T23:08:19Z&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.10.3&quot;</span>, Compiler:<span class="hljs-string">&quot;gc&quot;</span>, Platform:<span class="hljs-string">&quot;linux/amd64&quot;</span>&#125;<br>Server Version: version.Info&#123;Major:<span class="hljs-string">&quot;1&quot;</span>, Minor:<span class="hljs-string">&quot;11&quot;</span>, GitVersion:<span class="hljs-string">&quot;v1.11.2&quot;</span>, GitCommit:<span class="hljs-string">&quot;bb9ffb1654d4a729bb4cec18ff088eacc153c239&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, BuildDate:<span class="hljs-string">&quot;2018-08-07T23:08:19Z&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.10.3&quot;</span>, Compiler:<span class="hljs-string">&quot;gc&quot;</span>, Platform:<span class="hljs-string">&quot;linux/amd64&quot;</span>&#125;<br><br>docker1.node ➜  ~ docker info<br>Containers: 0<br> Running: 0<br> Paused: 0<br> Stopped: 0<br>Images: 0<br>Server Version: 18.06.1-ce<br>Storage Driver: overlay2<br> Backing Filesystem: xfs<br> Supports d_type: <span class="hljs-literal">true</span><br> Native Overlay Diff: <span class="hljs-literal">true</span><br>Logging Driver: json-file<br>Cgroup Driver: cgroupfs<br>Plugins:<br> Volume: <span class="hljs-built_in">local</span><br> Network: bridge host macvlan null overlay<br> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog<br>Swarm: inactive<br>Runtimes: runc<br>Default Runtime: runc<br>Init Binary: docker-init<br>containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e<br>runc version: 69663f0bd4b60df09991c08812a60108003fa340<br>init version: fec3683<br>Security Options:<br> apparmor<br> seccomp<br>  Profile: default<br>Kernel Version: 4.15.0-33-generic<br>Operating System: Ubuntu 18.04.1 LTS<br>OSType: linux<br>Architecture: x86_64<br>CPUs: 2<br>Total Memory: 3.847GiB<br>Name: docker1.node<br>ID: AJOD:RBJZ:YP3G:HCGV:KT4R:D4AF:SBDN:5B76:JM4M:OCJA:YJMJ:OCYQ<br>Docker Root Dir: /data/docker<br>Debug Mode (client): <span class="hljs-literal">false</span><br>Debug Mode (server): <span class="hljs-literal">false</span><br>Registry: https://index.docker.io/v1/<br>Labels:<br>Experimental: <span class="hljs-literal">false</span><br>Insecure Registries:<br> 127.0.0.0/8<br>Live Restore Enabled: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="二、TLS-Bootstrapping-回顾"><a href="#二、TLS-Bootstrapping-回顾" class="headerlink" title="二、TLS Bootstrapping 回顾"></a>二、TLS Bootstrapping 回顾</h2><p>在正式进行 TLS Bootstrapping 操作之前，**如果对 TLS Bootstrapping 完全没接触过的请先阅读 <a href="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note">Kubernetes TLS bootstrapping 那点事</a>**；我想这里有必要简单说明下使用 Token 时整个启动引导过程:</p><ul><li>在集群内创建特定的 <code>Bootstrap Token Secret</code>，该 Secret 将替代以前的 <code>token.csv</code> 内置用户声明文件</li><li>在集群内创建首次 TLS Bootstrap 申请证书的 ClusterRole、后续 renew Kubelet client&#x2F;server 的 ClusterRole，以及其相关对应的 ClusterRoleBinding；并绑定到对应的组或用户</li><li>调整 Controller Manager 配置，以使其能自动签署相关证书和自动清理过期的 TLS Bootstrapping Token</li><li>生成特定的包含 TLS Bootstrapping Token 的 <code>bootstrap.kubeconfig</code> 以供 kubelet 启动时使用</li><li>调整 Kubelet 配置，使其首次启动加载 <code>bootstrap.kubeconfig</code> 并使用其中的 TLS Bootstrapping Token 完成首次证书申请</li><li>证书被 Controller Manager 签署，成功下发，Kubelet 自动重载完成引导流程</li><li>后续 Kubelet 自动 renew 相关证书</li><li>可选的: 集群搭建成功后立即清除 <code>Bootstrap Token Secret</code>，或等待 Controller Manager 待其过期后删除，以防止被恶意利用</li></ul><h2 id="三、使用-Bootstrap-Token"><a href="#三、使用-Bootstrap-Token" class="headerlink" title="三、使用 Bootstrap Token"></a>三、使用 Bootstrap Token</h2><p>第二部分算作大纲了，这部分将会按照第二部分的总体流程来走，同时会对一些细节进行详细说明</p><h3 id="3-1、创建-Bootstrap-Token"><a href="#3-1、创建-Bootstrap-Token" class="headerlink" title="3.1、创建 Bootstrap Token"></a>3.1、创建 Bootstrap Token</h3><p>既然整个功能都时刻强调这个 Token，那么第一步肯定是生成一个 token，生成方式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(head -c 6 /dev/urandom | md5sum | head -c 6)</span>&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$(head -c 16 /dev/urandom | md5sum | head -c 16)</span>&quot;</span><br>47f392.d22d04e89a65eb22<br></code></pre></td></tr></table></figure><p>这个 <code>47f392.d22d04e89a65eb22</code> 就是生成的 Bootstrap Token，保存好 token，因为后续要用；关于这个 token 解释如下:</p><p>Token 必须满足 <code>[a-z0-9]&#123;6&#125;\.[a-z0-9]&#123;16&#125;</code> 格式；以 <code>.</code> 分割，前面的部分被称作  <code>Token ID</code>，<code>Token ID</code> 并不是 “机密信息”，它可以暴露出去；相对的后面的部分称为 <code>Token Secret</code>，它应该是保密的</p><p>本部分官方文档地址 <a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/#token-format">Token Format</a></p><h3 id="3-2、创建-Bootstrap-Token-Secret"><a href="#3-2、创建-Bootstrap-Token-Secret" class="headerlink" title="3.2、创建 Bootstrap Token Secret"></a>3.2、创建 Bootstrap Token Secret</h3><p>对于 Kubernetes 来说 <code>Bootstrap Token Secret</code> 也仅仅是一个特殊的 <code>Secret</code> 而已；对于这个特殊的 <code>Secret</code> 样例 yaml 配置如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-comment"># Name MUST be of form &quot;bootstrap-token-&lt;token id&gt;&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bootstrap-token-07401b</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><br><span class="hljs-comment"># Type MUST be &#x27;bootstrap.kubernetes.io/token&#x27;</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">bootstrap.kubernetes.io/token</span><br><span class="hljs-attr">stringData:</span><br>  <span class="hljs-comment"># Human readable description. Optional.</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The default bootstrap token generated by &#x27;kubeadm init&#x27;.&quot;</span><br><br>  <span class="hljs-comment"># Token ID and secret. Required.</span><br>  <span class="hljs-attr">token-id:</span> <span class="hljs-string">47f392</span><br>  <span class="hljs-attr">token-secret:</span> <span class="hljs-string">d22d04e89a65eb22</span><br><br>  <span class="hljs-comment"># Expiration. Optional.</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">2018-09-10T00:00:11Z</span><br><br>  <span class="hljs-comment"># Allowed usages.</span><br>  <span class="hljs-attr">usage-bootstrap-authentication:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">usage-bootstrap-signing:</span> <span class="hljs-string">&quot;true&quot;</span><br><br>  <span class="hljs-comment"># Extra groups to authenticate the token as. Must start with &quot;system:bootstrappers:&quot;</span><br>  <span class="hljs-attr">auth-extra-groups:</span> <span class="hljs-string">system:bootstrappers:worker,system:bootstrappers:ingress</span><br></code></pre></td></tr></table></figure><p>需要注意几点:</p><ul><li>作为 <code>Bootstrap Token Secret</code> 的 type 必须为 <code>bootstrap.kubernetes.io/token</code>，name 必须为 <code>bootstrap-token-&lt;token id&gt;</code> (Token ID 就是上一步创建的 Token 前一部分)</li><li><code>usage-bootstrap-authentication</code>、<code>usage-bootstrap-signing</code> 必须存才且设置为 <code>true</code> (我个人感觉 <code>usage-bootstrap-signing</code> 可以没有，具体见文章最后部分)</li><li><code>expiration</code> 字段是可选的，如果设置则 <code>Secret</code> 到期后将由 Controller Manager 中的 <code>tokencleaner</code> 自动清理</li><li><code>auth-extra-groups</code> 也是可选的，令牌的扩展认证组，组必须以 <code>system:bootstrappers:</code> 开头</li></ul><p>最后使用 <code>kubectl create -f bootstrap.secret.yaml</code> 创建即可</p><p>本部分官方文档地址 <a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/#bootstrap-token-secret-format">Bootstrap Token Secret Format</a></p><h3 id="3-3、创建-ClusterRole-和-ClusterRoleBinding"><a href="#3-3、创建-ClusterRole-和-ClusterRoleBinding" class="headerlink" title="3.3、创建 ClusterRole 和 ClusterRoleBinding"></a>3.3、创建 ClusterRole 和 ClusterRoleBinding</h3><p>具体都有哪些 <code>ClusterRole</code> 和 <code>ClusterRoleBinding</code>，以及其作用请参考上一篇的 <a href="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note">Kubernetes TLS bootstrapping 那点事</a>，不想在这里重复了</p><p>在 1.8 以后三个 <code>ClusterRole</code> 中有两个已经有了，我们只需要创建剩下的一个即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><p>然后是三个 <code>ClusterRole</code> 对应的 <code>ClusterRoleBinding</code>；需要注意的是 <strong>在使用 <code>Bootstrap Token</code> 进行引导时，Kubelet 组件使用 Token 发起的请求其用户名为 <code>system:bootstrap:&lt;token id&gt;</code>，用户组为 <code>system:bootstrappers</code>；so 我们在创建 <code>ClusterRoleBinding</code> 时要绑定到这个用户或者组上</strong>；当然我选择懒一点，全部绑定到组上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 允许 system:bootstrappers 组用户创建 CSR 请求</span><br>kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver --group=system:nodes<br></code></pre></td></tr></table></figure><p>关于本部分首次请求用户名变为 <code>system:bootstrap:&lt;token id&gt;</code> 官方文档原文如下:</p><blockquote><p>Tokens authenticate as the username system:bootstrap:<token id> and are members of the group system:bootstrappers. Additional groups may be specified in the token’s Secret.</p></blockquote><h3 id="3-4、调整-Controller-Manager"><a href="#3-4、调整-Controller-Manager" class="headerlink" title="3.4、调整 Controller Manager"></a>3.4、调整 Controller Manager</h3><p>根据官方文档描述，Controller Manager 需要启用 <code>tokencleaner</code> 和 <code>bootstrapsigner</code> (目测这个 <code>bootstrapsigner</code> 实际上并不需要，顺便加着吧)，完整配置如下(为什么贴完整配置? 文章凑数啊…):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;  --address=127.0.0.1 \</span><br><span class="hljs-string">                                --bind-address=192.168.1.61 \</span><br><span class="hljs-string">                                --port=10252 \</span><br><span class="hljs-string">                                --secure-port=10258 \</span><br><span class="hljs-string">                                --cluster-name=kubernetes \</span><br><span class="hljs-string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="hljs-string">                                --deployment-controller-sync-period=10s \</span><br><span class="hljs-string">                                --experimental-cluster-signing-duration=86700h0m0s \</span><br><span class="hljs-string">                                --enable-garbage-collector=true \</span><br><span class="hljs-string">                                --leader-elect=true \</span><br><span class="hljs-string">                                --master=http://127.0.0.1:8080 \</span><br><span class="hljs-string">                                --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                                --node-monitor-period=5s \</span><br><span class="hljs-string">                                --pod-eviction-timeout=5m0s \</span><br><span class="hljs-string">                                --terminated-pod-gc-threshold=50 \</span><br><span class="hljs-string">                                --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --feature-gates=RotateKubeletServerCertificate=true&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-5、生成-bootstrap-kubeconfig"><a href="#3-5、生成-bootstrap-kubeconfig" class="headerlink" title="3.5、生成 bootstrap.kubeconfig"></a>3.5、生成 bootstrap.kubeconfig</h3><p>前面所有步骤实际上都是在处理 Api Server、Controller Manager 这一块，为的就是 “老子启动后 TLS Bootstarpping 发证书申请你两个要立马允许，不能拒绝老子”；接下来就是比较重要的 <code>bootstrap.kubeconfig</code> 配置生成，这个 <code>bootstrap.kubeconfig</code> 是最终被 Kubelet 使用的，里面包含了相关的 Token，以帮助 Kubelet 在第一次通讯时能成功沟通 Api Server；生成方式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/etc/kubernetes/ssl/k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=https://127.0.0.1:6443 \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置客户端认证参数</span><br>kubectl config set-credentials system:bootstrap:47f392 \<br>  --token=47f392.d22d04e89a65eb22 \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=system:bootstrap:47f392 \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=bootstrap.kubeconfig<br></code></pre></td></tr></table></figure><h3 id="3-6、调整-Kubelet"><a href="#3-6、调整-Kubelet" class="headerlink" title="3.6、调整 Kubelet"></a>3.6、调整 Kubelet</h3><p>Kubelet 启动参数需要做一些相应调整，以使其能正确的使用 <code>Bootstartp Token</code>，完整配置如下(与使用 token.csv 配置没什么变化，因为主要变更在 bootstrap.kubeconfig 中):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBELET_ARGS=<span class="hljs-string">&quot;  --address=192.168.1.64 \</span><br><span class="hljs-string">                --allow-privileged=true \</span><br><span class="hljs-string">                --alsologtostderr \</span><br><span class="hljs-string">                --anonymous-auth=true \</span><br><span class="hljs-string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">                --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">                --cgroup-driver=cgroupfs \</span><br><span class="hljs-string">                --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">                --cluster-domain=cluster.local. \</span><br><span class="hljs-string">                --fail-swap-on=false \</span><br><span class="hljs-string">                --healthz-port=10248 \</span><br><span class="hljs-string">                --healthz-bind-address=192.168.1.64 \</span><br><span class="hljs-string">                --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">                --node-labels=node-role.kubernetes.io/k8s-master=true \</span><br><span class="hljs-string">                --image-gc-high-threshold=70 \</span><br><span class="hljs-string">                --image-gc-low-threshold=50 \</span><br><span class="hljs-string">                --kube-reserved=cpu=500m,memory=512Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">                --system-reserved=cpu=1000m,memory=1024Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --serialize-image-pulls=false \</span><br><span class="hljs-string">                --sync-frequency=30s \</span><br><span class="hljs-string">                --pod-infra-container-image=k8s.gcr.io/pause:3.1 \</span><br><span class="hljs-string">                --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">                --rotate-certificates&quot;</span><br></code></pre></td></tr></table></figure><p><strong>一切准备就绪后，执行 <code>systemctl daemon-reload &amp;&amp; systemctl start kubelet</code> 启动即可</strong></p><h2 id="四、其他说明"><a href="#四、其他说明" class="headerlink" title="四、其他说明"></a>四、其他说明</h2><p>可能有人已经注意到，在官方文档中最后部分有关于 <a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/#configmap-signing">ConfigMap Signing</a> 的相关描述，同时要求了启用 <code>bootstrapsigner</code> 这个 controller，而且在上文创建 <code>Bootstrap Token Secret</code> 中我也说 <code>usage-bootstrap-signing</code> 这个可以不设置；其中官方文档上的描述我们能看到的大致只说了这么两段稍微有点用的话:</p><blockquote><p>In addition to authentication, the tokens can be used to sign a ConfigMap. This is used early in a cluster bootstrap process before the client trusts the API server. The signed ConfigMap can be authenticated by the shared token.</p></blockquote><blockquote><p>The ConfigMap that is signed is cluster-info in the kube-public namespace. The typical flow is that a client reads this ConfigMap while unauthenticated and ignoring TLS errors. It then validates the payload of the ConfigMap by looking at a signature embedded in the ConfigMap.</p></blockquote><p>从这两段话中我们只能得出两个结论:</p><ul><li>Bootstrap Token 能对 ConfigMap 签名</li><li>可以签名一个 <code>kube-public</code> NameSpace 下的名字叫 <code>cluster-info</code> 的 ConfigMap，并且这个 ConfigMap 可以在没进行引导之前强行读取</li></ul><p>说实话这两段话搞得我百思不得<del>骑姐</del>其解，最终我在 kubeadm 的相关文档中找到了真正的说明及作用:</p><ul><li>在使用 <code>kubeadm init</code> 时创建 <code>cluster-info</code> 这个 ConfigMap，ConfigMap 中包含了集群基本信息</li><li>在使用 <code>kubeadm join</code> 时目标节点强行读取 ConfigMap 以得知集群基本信息，然后进行 <code>join</code></li></ul><p><strong>综上所述，我个人认为手动部署下，在仅仅使用 Bootstrap Token 进行 TLS Bootstrapping 时，<code>bootstrapsigner</code> 这个 controller 和 <code>Bootstrap Token Secret</code> 中的 <code>usage-bootstrap-signing</code> 选项是没有必要的，当然我还没测试(胡吹谁不会)…</strong></p><p>最后附上 <code>kubeadm</code> 的文档说明: <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#create-the-public-cluster-info-configmap">Create the public cluster-info ConfigMap</a>、<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#discovery-cluster-info">Discovery cluster-info</a></p>]]></content>
    
    
    <summary type="html">最近在测试 Kubernetes 1.11.2 新版本的相关东西，发现新版本的 Bootstrap Token 功能已经进入 Beta 阶段，索性便尝试了一下；虽说目前是为 kubeadm 设计的，不过手动挡用起来也不错，这里记录一下使用方式</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 证书配置</title>
    <link href="https://mritd.com/2018/08/26/kubernetes-certificate-configuration/"/>
    <id>https://mritd.com/2018/08/26/kubernetes-certificate-configuration/</id>
    <published>2018-08-26T14:54:16.000Z</published>
    <updated>2018-08-26T14:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直以来自己的 Kubernetes 集群大部分证书配置全部都在使用一个 CA，而事实上很多教程也没有具体的解释过这些证书代表的作用以及含义；今天索性仔细的翻了翻，顺便看到了一篇老外的文章，感觉写的不错，这里顺带着自己的理解总结一下。</p></blockquote><h2 id="一、Kubernetes-证书分类"><a href="#一、Kubernetes-证书分类" class="headerlink" title="一、Kubernetes 证书分类"></a>一、Kubernetes 证书分类</h2><p>这里的证书分类只是我自己定义的一种 “并不 ok” 的概念；从整体的作用上 Kubernetes 证书大致上应当分为两类:</p><ul><li>API Server 用于校验请求合法性证书</li><li>对其他敏感信息进行签名的证书(如 Service Account)</li></ul><p>对于 API Server 用于检验请求合法性的证书配置一般会在 API Server 中配置好，而对其他敏感信息签名加密的证书一般会可能放在 Controller Manager 中配置，也可能还在 API Server，具体不同版本需要撸文档</p><p>另外需要明确的是: <strong>Kubernetes 中 CA 证书并不一定只有一个，很多证书配置实际上是不相干的，只是大家为了方便普遍选择了使用一个 CA 进行签发；同时有一些证书如果不设置也会自动默认一个，就目前我所知的大约有 5 个可以完全不同的证书签发体系(或者说由不同的 CA 签发)</strong></p><h2 id="二、API-Server-中的证书配置"><a href="#二、API-Server-中的证书配置" class="headerlink" title="二、API Server 中的证书配置"></a>二、API Server 中的证书配置</h2><h3 id="2-1、API-Server-证书"><a href="#2-1、API-Server-证书" class="headerlink" title="2.1、API Server 证书"></a>2.1、API Server 证书</h3><p>API Server 证书配置中最应当明确的两个选项应该是以下两个:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">--tls-cert-file string<br>    File containing the default x509 Certificate <span class="hljs-keyword">for</span> HTTPS. (CA cert, <span class="hljs-keyword">if</span> any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated <span class="hljs-keyword">for</span> the public address and saved to the directory specified by --cert-dir.<br><br>--tls-private-key-file string<br>    File containing the default x509 private key matching --tls-cert-file.<br></code></pre></td></tr></table></figure><p>从描述上就可以看出，这两个选项配置的就是 API Server HTTPS 端点应当使用的证书</p><h3 id="2-2、Client-CA-证书"><a href="#2-2、Client-CA-证书" class="headerlink" title="2.2、Client CA 证书"></a>2.2、Client CA 证书</h3><p>接下来就是我们常见的 CA 配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">--client-ca-file string<br>    If <span class="hljs-built_in">set</span>, any request presenting a client certificate signed by one of the authorities <span class="hljs-keyword">in</span> the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.<br></code></pre></td></tr></table></figure><p>该配置明确了 Clent 连接 API Server 时，API Server 应当确保其证书源自哪个 CA 签发；如果其证书不是由该 CA 签发，则拒绝请求；事实上，这个 CA 不必与 HTTPS 端点所使用的证书 CA 相同；同时这里的 Client 是一个泛指的，可以是 kubectl，也可能是你自己开发的应用</p><h3 id="2-3、请求头证书"><a href="#2-3、请求头证书" class="headerlink" title="2.3、请求头证书"></a>2.3、请求头证书</h3><p>由于 API Server 是支持多种认证方式的，其中一种就是使用 HTTP 头中的指定字段来进行认证，相关配置如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">--requestheader-allowed-names stringSlice<br>    List of client certificate common names to allow to provide usernames <span class="hljs-keyword">in</span> headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities <span class="hljs-keyword">in</span> --requestheader-client-ca-file is allowed.<br>--requestheader-client-ca-file string<br>    Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames <span class="hljs-keyword">in</span> headers specified by --requestheader-username-headers. WARNING: generally <span class="hljs-keyword">do</span> not depend on authorization being already <span class="hljs-keyword">done</span> <span class="hljs-keyword">for</span> incoming requests.<br></code></pre></td></tr></table></figure><p>当指定这个 CA 证书后，则 API Server 使用 HTTP 头进行认证时会检测其 HTTP 头中发送的证书是否由这个 CA 签发；同样它也可独立于其他 CA(可以是个独立的 CA)；具体可以参考 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authenticating-proxy">Authenticating Proxy</a></p><h3 id="2-4、Kubelet-证书"><a href="#2-4、Kubelet-证书" class="headerlink" title="2.4、Kubelet 证书"></a>2.4、Kubelet 证书</h3><p>对于 Kubelet 组件，API Server 单独提供了证书配置选项，同时 Kubelet 组件也提供了反向设置的相关选项:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># API Server</span><br>--kubelet-certificate-authority string<br>    Path to a cert file <span class="hljs-keyword">for</span> the certificate authority.<br>--kubelet-client-certificate string<br>    Path to a client cert file <span class="hljs-keyword">for</span> TLS.<br>--kubelet-client-key string<br>    Path to a client key file <span class="hljs-keyword">for</span> TLS.<br><br><span class="hljs-comment"># Kubelet</span><br>--client-ca-file string<br>    If <span class="hljs-built_in">set</span>, any request presenting a client certificate signed by one of the authorities <span class="hljs-keyword">in</span> the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.<br>--tls-cert-file string<br>    File containing x509 Certificate used <span class="hljs-keyword">for</span> serving HTTPS (with intermediate certs, <span class="hljs-keyword">if</span> any, concatenated after server cert). If --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated <span class="hljs-keyword">for</span> the public address and saved to the directory passed to --cert-dir.<br>--tls-private-key-file string<br>    File containing x509 private key matching --tls-cert-file.<br></code></pre></td></tr></table></figure><p>相信这个配置不用多说就能猜到，这个就是用于指定 API Server 与 Kubelet 通讯所使用的证书以及其签署的 CA；同样这个 CA 可以完全独立与上述其他CA</p><h2 id="三、Service-Account-证书"><a href="#三、Service-Account-证书" class="headerlink" title="三、Service Account 证书"></a>三、Service Account 证书</h2><p>在 API Server 配置中，对于 Service Account 同样有两个证书配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">--service-account-key-file stringArray<br>    File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. The specified file can contain multiple keys, and the flag can be specified multiple <span class="hljs-built_in">times</span> with different files. If unspecified, --tls-private-key-file is used. Must be specified when --service-account-signing-key is provided<br>--service-account-signing-key-file string<br>    Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the <span class="hljs-string">&#x27;TokenRequest&#x27;</span> feature gate.)<br></code></pre></td></tr></table></figure><p>这两个配置描述了对 Service Account 进行签名验证时所使用的证书；不过需要注意的是这里并没有明确要求证书 CA，所以这两个证书的 CA 理论上也是可以完全独立的；至于未要求 CA 问题，可能是由于 jwt 库并不支持 CA 验证</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Kubernetes 中大部分证书都是用于 API Server 各种鉴权使用的；在不同鉴权方案或者对象上实际证书体系可以完全不同；具体是使用多个 CA 好还是都用一个，取决于集群规模、安全性要求等等因素，至少目前来说没有明确的那个好与不好</p><p>最后，嗯…吹牛逼就吹到这，有点晚了，得睡觉了…</p>]]></content>
    
    
    <summary type="html">一直以来自己的 Kubernetes 集群大部分证书配置全部都在使用一个 CA，而事实上很多教程也没有具体的解释过这些证书代表的作用以及含义；今天索性仔细的翻了翻，顺便看到了一篇老外的文章，感觉写的不错，这里顺带着自己的理解总结一下。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>编写 kubectl 插件</title>
    <link href="https://mritd.com/2018/08/09/create-a-plugin-for-kubectl/"/>
    <id>https://mritd.com/2018/08/09/create-a-plugin-for-kubectl/</id>
    <published>2018-08-09T14:19:35.000Z</published>
    <updated>2018-08-09T14:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近忙的晕头转向，博客停更了 1 个月，感觉对不起党、对不起人民、对不起 <del>CCAV</del>…不过在忙的时候操作 Kubernetes 集群要频繁的使用 <code>kubectl</code> 命令，而在多个 NameSpace 下来回切换每次都得加个 <code>-n</code> 简直让我想打人；索性翻了下 <code>kubectl</code> 的插件机制，顺便写了一个快速切换 NameSpace 的小插件，以下记录一下插件编写过程</p></blockquote><h2 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h2><p><code>kubectl</code> 命令从 <code>v1.8.0</code> 版本开始引入了 alpha feature 的插件机制；在此机制下我们可以对 <code>kubectl</code> 命令进行扩展，从而编写一些自己的插件集成进 <code>kubectl</code> 命令中；**<code>kubectl</code> 插件机制是与语言无关的，也就是说你可以用任何语言编写插件，可以是 <code>bash</code>、<code>python</code> 脚本，也可以是 <code>go</code>、<code>java</code> 等编译型语言；所以选择你熟悉的语言即可**，以下是一个用 <code>go</code> 编写的用于快速切换 NameSpace 的小插件，运行截图如下:</p><p><strong>所谓: 开局一张图，功能全靠编 😂</strong><br><img src="https://cdn.oss.link/markdown/6t89g.gif" alt="swns.gif"></p><p>当前插件代码放在 <a href="https://github.com/mritd/swns">mritd&#x2F;swns</a> 这个项目下面</p><h2 id="二、插件加载"><a href="#二、插件加载" class="headerlink" title="二、插件加载"></a>二、插件加载</h2><p><code>kubectl</code> 插件机制目前并不提供包管理器一样的功能，比如你想执行 <code>kuebctl plugin install xxx</code> 这种操作目前还没有实现(个人感觉差个规范)；所以一旦我们编写或者下载一个插件后，我们只有正确放在特定目录才会生效；</p><p><strong>目前插件根据文档描述只有两部分内容: <code>plugin.yaml</code> 和其依赖的二进制&#x2F;脚本等可执行文件</strong>；根据文档说明，<code>kubectl</code> 会尝试在如下位置查找并加载插件，所以我们只需要将 <code>plugin.yaml</code> 和相关二进制放在在对应位置即可:</p><ul><li><code>$&#123;KUBECTL_PLUGINS_PATH&#125;</code>: 如果这个环境变量定义了，那么 <code>kubectl</code> <strong>只会</strong>从这里查找；<strong>注意: 这个变量可以是多个目录，类似 PATH 变量一样，做好分割即可</strong></li><li><code>$&#123;XDG_DATA_DIRS&#125;/kubectl/plugins</code>: 关于这个变量具体请看 <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG System Directory Structure</a>，我了解也不多；<strong>如果这个变量没定义则默认为 <code>/usr/local/share:/usr/share</code></strong></li><li><code>~/.kube/plugins</code>: 这个没啥可说的，我推荐还是将插件放在这个位置比较友好一点</li></ul><p>所以最终插件目录结构类似这样:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ tree .kube<br>.kube<br>├── config<br>└── plugins<br>    └── swns<br>        ├── plugin.yaml<br>        └── swns<br></code></pre></td></tr></table></figure><h2 id="三、Plugin-yaml"><a href="#三、Plugin-yaml" class="headerlink" title="三、Plugin.yaml"></a>三、Plugin.yaml</h2><p><code>plugin.yaml</code> 这个文件实际上才是插件的核心，在这个文件里声明了插件如何使用、调用的二进制&#x2F;脚本等重要配置；<strong>一个插件可以没有任何脚本&#x2F;二进制可执行文件，但至少应当有一个 <code>plugin.yaml</code> 描述文件</strong>；目前 <code>plugin.yaml</code> 的结构如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;targaryen&quot;</span>                 <span class="hljs-comment"># 必填项: 用于 kuebctl 调用的插件名称</span><br><span class="hljs-attr">shortDesc:</span> <span class="hljs-string">&quot;Dragonized plugin&quot;</span>    <span class="hljs-comment"># 必填项: 用于 help 该插件时的简短描述</span><br><span class="hljs-attr">longDesc:</span> <span class="hljs-string">&quot;&quot;</span>                      <span class="hljs-comment"># 非必填: 插件的长描述</span><br><span class="hljs-attr">example:</span> <span class="hljs-string">&quot;&quot;</span>                       <span class="hljs-comment"># 非必填: 插件的使用样例</span><br><span class="hljs-attr">command:</span> <span class="hljs-string">&quot;./dracarys&quot;</span>             <span class="hljs-comment"># 必填项: 插件实际执行的文件位置，可以相对路径 or 绝对路径，或者在 PATH 里也行</span><br><span class="hljs-attr">flags:</span>                            <span class="hljs-comment"># 非必填: 插件支持的 flag</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;heat&quot;</span>                  <span class="hljs-comment"># 必填项: 如果你写了支持的 flag，那么此项必填</span><br>    <span class="hljs-attr">shorthand:</span> <span class="hljs-string">&quot;h&quot;</span>                <span class="hljs-comment"># 非必填: 该选项的缩短形式</span><br>    <span class="hljs-attr">desc:</span> <span class="hljs-string">&quot;Fire heat&quot;</span>             <span class="hljs-comment"># 必填项: 同样每个 flag 都必须书写描述</span><br>    <span class="hljs-attr">defValue:</span> <span class="hljs-string">&quot;extreme&quot;</span>           <span class="hljs-comment"># 非必填: 默认值</span><br><span class="hljs-attr">tree:</span>                             <span class="hljs-comment"># 允许定义一些子命令</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">...</span>                           <span class="hljs-comment"># 子命令支持同样的设置属性(我想知道子命令的子命令的子命令支不支持...我还没去试过)</span><br></code></pre></td></tr></table></figure><h2 id="四、插件环境变量"><a href="#四、插件环境变量" class="headerlink" title="四、插件环境变量"></a>四、插件环境变量</h2><p>在编写插件时，<strong>有时插件运行时需要获取到一些参数，比如 <code>kubectl</code> 执行时的全局 flag 等，</strong>为了方便插件开发者，<code>kuebctl</code> 的插件机制提供一些预置的环境变量方便我们读取；即如果你用 <code>bash</code> 写插件，那么这些变量你只需要 <code>$&#123;xxxx&#125;</code> 即可拿到，然后做一些你想做的事情；这些变量目前支持如下:</p><ul><li><code>KUBECTL_PLUGINS_CALLER</code>: <code>kubectl</code> 二进制文件所在位置；<strong>作为插件编写者，我们无需关系 api server 是否能联通，因为配置是否正确应当由使用者决定；在需要时我们只需要直接调用 <code>kubectl</code> 即可；</strong>比如在 <code>bash</code> 脚本中执行 <code>get pod</code> 等</li><li><code>KUBECTL_PLUGINS_CURRENT_NAMESPACE</code>: 当前 <code>kuebctl</code> 命令所对应的 NameSpace，<strong>插件机制确保了该值一定正确；即这是经过解析了 <code>--namespace</code> 选项或者 <code>kubeconfig</code> 配置后的最终结果；作为插件编写者，我们无需关心处理过程</strong>；想详细了解的的可以去看源码，以及 <code>Cobra</code> 库(Kubernetes 用这个库解析命令行参数和配置)</li><li><code>KUBECTL_PLUGINS_DESCRIPTOR_*</code>: 插件自己本身位于 <code>plugin.yaml</code> 中的描述信息，比如 <code>KUBECTL_PLUGINS_DESCRIPTOR_NAME</code> 输出 <code>plugin.yaml</code> 下的 <code>name</code> 属性；一般可以用作插件输出自己的帮助文档等</li><li><code>KUBECTL_PLUGINS_GLOBAL_FLAG_*</code>: 获取 <code>kubectl</code> 所有全局 flag 值的变量，比如 <code>KUBECTL_PLUGINS_GLOBAL_FLAG_NAMESPACE</code> 能拿到 <code>--namespace</code> 选项的值</li><li><code>KUBECTL_PLUGINS_LOCAL_FLAG_*</code>: 同上面类似，只不过这个是获取插件自己本身 flag 的值，个人认为在脚本语言中，比如 <code>bash</code> 等处理选项不怎么好用时，可以考虑直接从变量拿</li></ul><p>以上变量我并未都测试，具体以测试为准，<strong>删库跑路等情况本人概不负责</strong></p><h2 id="五、写一个切换-NameSpace-的插件"><a href="#五、写一个切换-NameSpace-的插件" class="headerlink" title="五、写一个切换 NameSpace 的插件"></a>五、写一个切换 NameSpace 的插件</h2><p>前面墨迹一大堆只是为了描述清楚 <strong>要写一个插件应该怎么干</strong> 的问题，下面开始 <strong>这么干</strong></p><h3 id="5-1、编写配置"><a href="#5-1、编写配置" class="headerlink" title="5.1、编写配置"></a>5.1、编写配置</h3><p>上面已经介绍好了 <code>plugin.yaml</code> 怎么写，那么根据我自己的需求，我写的这个切换 NameSpace 插件的名字暂且叫做 <code>swns</code>；我希望 <code>swns</code> 执行后接受一个 NameSpace 的字符串，然后调用 <code>kuebctl config</code> 去设置当前默认的 NameSpace，这样在后续命令中我就不用再一直加个 <code>-n xxx</code> 参数了；同时我希望使用更方便点，当执行 <code>swns</code> 命令时，如果不提供 NameSpace 的字符串，那我就弹出下拉列表供用户选择；综上需求自己想明白后，就写一个 <code>plugin.yaml</code>，如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;swns&quot;</span><br><span class="hljs-attr">shortDesc:</span> <span class="hljs-string">&quot;Switch NameSpace&quot;</span><br><span class="hljs-attr">longDesc:</span> <span class="hljs-string">&quot;Switch Kubernetes current context namespace.&quot;</span><br><span class="hljs-attr">example:</span> <span class="hljs-string">&quot;kubectl plugin swns [NAMESPACE]&quot;</span><br><span class="hljs-attr">command:</span> <span class="hljs-string">&quot;./swns&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2、编写插件"><a href="#5-2、编写插件" class="headerlink" title="5.2、编写插件"></a>5.2、编写插件</h3><p>上面 <code>plugin.yaml</code> 已经定义好了，那么接下来就简单了，撸代码实现了就好；代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 注意: 下面的模板语法大括号中间没有空格，此处空格是为了防止博客渲染出错</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><br><span class="hljs-string">&quot;github.com/mritd/promptx&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 先拿到当前的 context</span><br>cmd := exec.Command(<span class="hljs-string">&quot;kubectl&quot;</span>, <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;current-context&quot;</span>)<br>cmd.Stdin = os.Stdin<br>cmd.Stderr = os.Stderr<br><br>b, err := cmd.Output()<br>checkAndExit(err)<br>currentContext := strings.TrimSpace(<span class="hljs-type">string</span>(b))<br><br><span class="hljs-comment">// 如果提供了 NameSpace 字符串，我直接改就行了</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &gt; <span class="hljs-number">1</span> &#123;<br>cmd = exec.Command(<span class="hljs-string">&quot;kubectl&quot;</span>, <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;set-context&quot;</span>, currentContext, <span class="hljs-string">&quot;--namespace=&quot;</span>+os.Args[<span class="hljs-number">1</span>])<br>cmd.Stdout = os.Stdout<br>checkAndExit(cmd.Run())<br>fmt.Printf(<span class="hljs-string">&quot;Kubernetes namespace switch to %s.\n&quot;</span>, os.Args[<span class="hljs-number">1</span>])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 没提供我就得先把所有的 NameSpace 弄出来</span><br>cmd = exec.Command(<span class="hljs-string">&quot;kubectl&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;ns&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;template&quot;</span>, <span class="hljs-string">&quot;--template&quot;</span>, <span class="hljs-string">&quot;&#123; &#123; range .items &#125; &#125;&#123; &#123; .metadata.name &#125; &#125; &#123; &#123; end &#125; &#125;&quot;</span>)<br>b, err = cmd.Output()<br>checkAndExit(err)<br>allNameSpace := strings.Fields(<span class="hljs-type">string</span>(b))<br><br><span class="hljs-comment">// 弄到所有的 NameSpace 后，我在弄一个下拉列表(这是我自己造的一个下拉列表库)</span><br>cfg := &amp;promptx.SelectConfig&#123;<br>ActiveTpl:    <span class="hljs-string">&quot;»  &#123; &#123; . | cyan &#125; &#125;&quot;</span>,<br>InactiveTpl:  <span class="hljs-string">&quot;  &#123; &#123; . | white &#125; &#125;&quot;</span>,<br>SelectPrompt: <span class="hljs-string">&quot;NameSpace&quot;</span>,<br>SelectedTpl:  <span class="hljs-string">&quot;&#123; &#123; \&quot;» \&quot; | green &#125; &#125;&#123; &#123;\&quot;NameSpace:\&quot; | cyan &#125; &#125; &#123; &#123; . &#125; &#125;&quot;</span>,<br>DisPlaySize:  <span class="hljs-number">9</span>,<br>DetailsTpl:   <span class="hljs-string">` `</span>,<br>&#125;<br>s := &amp;promptx.Select&#123;<br>Items:  allNameSpace,<br>Config: cfg,<br>&#125;<br><br><span class="hljs-comment">// 用户选中一个 NameSpace 后我就拿到了想要设置的 NameSpace 字符串</span><br>selectNameSpace := allNameSpace[s.Run()]<br><br><span class="hljs-comment">// 跟上面套路一样，写进去就行了</span><br>cmd = exec.Command(<span class="hljs-string">&quot;kubectl&quot;</span>, <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;set-context&quot;</span>, currentContext, <span class="hljs-string">&quot;--namespace=&quot;</span>+selectNameSpace)<br>cmd.Stdout = os.Stdout<br>checkAndExit(cmd.Run())<br>fmt.Printf(<span class="hljs-string">&quot;Kubernetes namespace switch to %s.\n&quot;</span>, selectNameSpace)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkErr</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkAndExit</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> !checkErr(err) &#123;<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后编译后放到上面所说的插件加载目录即可</p><p>到此，**”全局一张图，功能全靠编”** 图上面也有了，编的的也差不多 😂</p>]]></content>
    
    
    <summary type="html">最近忙的晕头转向，博客停更了 1 个月，感觉对不起党、对不起人民、对不起 ~~CCAV~~...不过在忙的时候操作 Kubernetes 集群要频繁的使用 `kubectl` 命令，而在多个 NameSpace 下来回切换每次都得加个 `-n` 简直让我想打人；索性翻了下 `kubectl` 的插件机制，顺便写了一个快速切换 NameSpace 的小插件，以下记录一下插件编写过程</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Traefik 另类的服务暴露方式</title>
    <link href="https://mritd.com/2018/05/24/kubernetes-traefik-service-exposure/"/>
    <id>https://mritd.com/2018/05/24/kubernetes-traefik-service-exposure/</id>
    <published>2018-05-24T15:53:09.000Z</published>
    <updated>2018-05-24T15:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近准备重新折腾一下 Kubernetes 的服务暴露方式，以前的方式是彻底剥离 Kubenretes 本身的服务发现，然后改动应用实现 应用+Consul+Fabio 的服务暴露方式；总感觉这种方式不算优雅，所以折腾了一下 Traefik，试了下效果还不错，以下记录了使用 Traefik 的新的服务暴露方式(本文仅针对 HTTP 协议)；</p></blockquote><h2 id="一、Traefik-服务暴露方案"><a href="#一、Traefik-服务暴露方案" class="headerlink" title="一、Traefik 服务暴露方案"></a>一、Traefik 服务暴露方案</h2><h3 id="1-1、以前的-Consul-Fabio-方案"><a href="#1-1、以前的-Consul-Fabio-方案" class="headerlink" title="1.1、以前的 Consul+Fabio 方案"></a>1.1、以前的 Consul+Fabio 方案</h3><p>以前的服务暴露方案是修改应用代码，使其能对接 Consul，然后 Consul 负责健康监测，检测通过后 Fabio 负责读取，最终上层 Nginx 将流量打到 Fabio 上，Fabio 再将流量路由到健康的 Pod 上；总体架构如下</p><p><img src="https://cdn.oss.link/markdown/hkwp3.png" alt="consul+fabio"></p><p>这种架构目前有几点不太好的地方，首先是必须应用能成功集成 Consul，需要动应用代码不通用；其次组件过多增加维护成本，尤其是调用链日志不好追踪；这里面需要吐槽下 Consul 和 Fabio，Consul 的集群设计模式要想做到完全的 HA 那么需要在每个 pod 中启动一个 agent，因为只要这个 agent 挂了那么集群认为其上所有注册服务都挂了，这点很恶心人；而 Fabio 的日志目前好像还是不支持合理的输出，好像只能 stdout；目前来看不论是组件复杂度还是维护成本都不怎么友好</p><h3 id="1-2、新的-Traefik-方案"><a href="#1-2、新的-Traefik-方案" class="headerlink" title="1.2、新的 Traefik 方案"></a>1.2、新的 Traefik 方案</h3><p>使用 Traefik 首先想到就是直接怼 Ingress，这个确实方便也简单；但是在集群 kube-proxy 不走 ipvs 的情况下 iptables 性能确实堪忧；虽说 Traefik 会直连 Pod，但是你 Ingress 暴露 80、443 端口在本机没有对应 Ingress Controller 的情况下还是会走一下 iptables；<strong>不论是换 kube-router、kube-proxy 走 ipvs 都不是我想要的，我们需要一种完全远离 Kubernetes Service 的新路子</strong>；在看 Traefik 文档的时候，其中说明了 Traefik 只利用 Kubernetes 的 API 来读取相关后端数据，那么我们就可以以此来使用如下的套路</p><p><img src="https://cdn.oss.link/markdown/tfo2f.png" alt="traefik"></p><p>这个套路的方案很简单，<strong>将 Traefik 部署在物理机上，让其直连 Kubernets api 以读取 Ingress 配置和 Pod IP 等信息，然后在这几台物理机上部署好 Kubernetes 的网络组件使其能直连 Pod IP</strong>；这种方案能够让流量经过 Traefik 直接路由到后端 Pod，健康检测还是由集群来做；<strong>由于 Traefik 连接 Kubernetes api 需要获取一些数据；所以在集群内还是像往常一样创建 Ingress，只不过此时我们并没有 Ingress Controller；这样避免了经过 iptables 转发，不占用全部集群机器的 80、443 端口，同时还能做到高可控</strong></p><h2 id="二、Traefik-部署"><a href="#二、Traefik-部署" class="headerlink" title="二、Traefik 部署"></a>二、Traefik 部署</h2><p>部署之前首先需要有一个正常访问的集群，然后在另外几台机器上部署 Kubernetes 的网络组件；最终要保证另外几台机器能够直接连通 Pod 的 IP，我这里偷懒直接在 Kubernetes 的其中几个 Node 上部署 Traefik</p><h3 id="2-1、Docker-Compose"><a href="#2-1、Docker-Compose" class="headerlink" title="2.1、Docker Compose"></a>2.1、Docker Compose</h3><p>Traefik 的 Docker Compose 如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.5&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">traefik:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">traefik:v1.6.1-alpine</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">traefik</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--configFile=/etc/traefik.toml</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2080:2080&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2180:2180&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./traefik.toml:/etc/traefik.toml</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./k8s-root-ca.pem:/etc/kubernetes/ssl/k8s-root-ca.pem</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./log:/var/log/traefik</span><br></code></pre></td></tr></table></figure><p>由于 Kubernetes 集群开启了 RBAC 认证同时采用 TLS 通讯，所以需要挂载 Kubernetes CA 证书，还需要为 Traefik 创建对应的 RBAC 账户以使其能够访问 Kubernetes API</p><h3 id="2-2、创建-RBAC-账户"><a href="#2-2、创建-RBAC-账户" class="headerlink" title="2.2、创建 RBAC 账户"></a>2.2、创建 RBAC 账户</h3><p>Traefik 连接 Kubernetes API 时需要使用 Service Account 的 Token，Service Account 以及 ClusterRole 等配置具体见 <a href="https://docs.traefik.io/user-guide/kubernetes/">官方文档</a>，下面是我从当前版本的文档中 Copy 出来的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-controller</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-ingress-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>创建好以后需要提取 Service Account 的 Token 方便下面使用，提取命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl describe secret -n kube-system $(kubectl get secrets -n kube-system | grep traefik-ingress-controller | <span class="hljs-built_in">cut</span> -f1 -d <span class="hljs-string">&#x27; &#x27;</span>) | grep -E <span class="hljs-string">&#x27;^token&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-3、创建-Traefik-配置"><a href="#2-3、创建-Traefik-配置" class="headerlink" title="2.3、创建 Traefik 配置"></a>2.3、创建 Traefik 配置</h3><p>Traefik 的具体配置细节请参考 <a href="https://docs.traefik.io/configuration/commons/">官方文档</a>，以下仅给出一个样例配置</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># DEPRECATED - for general usage instruction see [lifeCycle.graceTimeOut].</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If both the deprecated option and the new one are given, the deprecated one</span><br><span class="hljs-comment"># takes precedence.</span><br><span class="hljs-comment"># A value of zero is equivalent to omitting the parameter, causing</span><br><span class="hljs-comment"># [lifeCycle.graceTimeOut] to be effective. Pass zero to the new option in</span><br><span class="hljs-comment"># order to disable the grace period.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: &quot;0s&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># graceTimeOut = &quot;10s&quot;</span><br><br><span class="hljs-comment"># Enable debug mode.</span><br><span class="hljs-comment"># This will install HTTP handlers to expose Go expvars under /debug/vars and</span><br><span class="hljs-comment"># pprof profiling data under /debug/pprof.</span><br><span class="hljs-comment"># The log level will be set to DEBUG unless `logLevel` is specified.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># debug = true</span><br><br><span class="hljs-comment"># Periodically check if a new version has been released.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: true</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">checkNewVersion</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Backends throttle duration.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: &quot;2s&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># providersThrottleDuration = &quot;2s&quot;</span><br><br><span class="hljs-comment"># Controls the maximum idle (keep-alive) connections to keep per-host.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: 200</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># maxIdleConnsPerHost = 200</span><br><br><span class="hljs-comment"># If set to true invalid SSL certificates are accepted for backends.</span><br><span class="hljs-comment"># This disables detection of man-in-the-middle attacks so should only be used on secure backend networks.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># insecureSkipVerify = true</span><br><br><span class="hljs-comment"># Register Certificates in the rootCA.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: []</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rootCAs = [ &quot;/mycert.cert&quot; ]</span><br><br><span class="hljs-comment"># Entrypoints to be used by frontends that do not specify any entrypoint.</span><br><span class="hljs-comment"># Each frontend can specify its own entrypoints.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: [&quot;http&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># defaultEntryPoints = [&quot;http&quot;, &quot;https&quot;]</span><br><br><span class="hljs-comment"># Allow the use of 0 as server weight.</span><br><span class="hljs-comment"># - false: a weight 0 means internally a weight of 1.</span><br><span class="hljs-comment"># - true: a weight 0 means internally a weight of 0 (a server with a weight of 0 is removed from the available servers).</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># AllowMinWeightZero = true</span><br><br><span class="hljs-attr">logLevel</span> = <span class="hljs-string">&quot;INFO&quot;</span><br><br><span class="hljs-section">[traefikLog]</span><br>  <span class="hljs-attr">filePath</span> = <span class="hljs-string">&quot;/var/log/traefik/traefik.log&quot;</span><br>  <span class="hljs-attr">format</span>   = <span class="hljs-string">&quot;json&quot;</span><br><br><span class="hljs-section">[accessLog]</span><br>  <span class="hljs-attr">filePath</span> = <span class="hljs-string">&quot;/var/log/traefik/access.log&quot;</span><br>  <span class="hljs-attr">format</span> = <span class="hljs-string">&quot;json&quot;</span><br><br>  <span class="hljs-section">[accessLog.filters]</span><br>    <span class="hljs-attr">statusCodes</span> = [<span class="hljs-string">&quot;200-511&quot;</span>]<br>    <span class="hljs-attr">retryAttempts</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#  [accessLog.fields]</span><br><span class="hljs-comment">#    defaultMode = &quot;keep&quot;</span><br><span class="hljs-comment">#    [accessLog.fields.names]</span><br><span class="hljs-comment">#      &quot;ClientUsername&quot; = &quot;drop&quot;</span><br><span class="hljs-comment">#      # ...</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    [accessLog.fields.headers]</span><br><span class="hljs-comment">#      defaultMode = &quot;keep&quot;</span><br><span class="hljs-comment">#      [accessLog.fields.headers.names]</span><br><span class="hljs-comment">#        &quot;User-Agent&quot; = &quot;redact&quot;</span><br><span class="hljs-comment">#        &quot;Authorization&quot; = &quot;drop&quot;</span><br><span class="hljs-comment">#        &quot;Content-Type&quot; = &quot;keep&quot;</span><br><span class="hljs-comment">#        # ...</span><br><br><br><span class="hljs-section">[entryPoints]</span><br>  <span class="hljs-section">[entryPoints.http]</span><br>    <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;:2080&quot;</span><br>    <span class="hljs-attr">compress</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-section">[entryPoints.traefik]</span><br>    <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;:2180&quot;</span><br>    <span class="hljs-attr">compress</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#    [entryPoints.http.whitelist]</span><br><span class="hljs-comment">#      sourceRange = [&quot;192.168.1.0/24&quot;]</span><br><span class="hljs-comment">#      useXForwardedFor = true</span><br><br><span class="hljs-comment">#    [entryPoints.http.tls]</span><br><span class="hljs-comment">#      minVersion = &quot;VersionTLS12&quot;</span><br><span class="hljs-comment">#      cipherSuites = [</span><br><span class="hljs-comment">#        &quot;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&quot;,</span><br><span class="hljs-comment">#        &quot;TLS_RSA_WITH_AES_256_GCM_SHA384&quot;</span><br><span class="hljs-comment">#       ]</span><br><span class="hljs-comment">#      [[entryPoints.http.tls.certificates]]</span><br><span class="hljs-comment">#        certFile = &quot;path/to/my.cert&quot;</span><br><span class="hljs-comment">#        keyFile = &quot;path/to/my.key&quot;</span><br><span class="hljs-comment">#      [[entryPoints.http.tls.certificates]]</span><br><span class="hljs-comment">#        certFile = &quot;path/to/other.cert&quot;</span><br><span class="hljs-comment">#        keyFile = &quot;path/to/other.key&quot;</span><br><span class="hljs-comment">#      # ...</span><br><span class="hljs-comment">#      [entryPoints.http.tls.clientCA]</span><br><span class="hljs-comment">#        files = [&quot;path/to/ca1.crt&quot;, &quot;path/to/ca2.crt&quot;]</span><br><span class="hljs-comment">#        optional = false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    [entryPoints.http.redirect]</span><br><span class="hljs-comment">#      entryPoint = &quot;https&quot;</span><br><span class="hljs-comment">#      regex = &quot;^http://localhost/(.*)&quot;</span><br><span class="hljs-comment">#      replacement = &quot;http://mydomain/$1&quot;</span><br><span class="hljs-comment">#      permanent = true</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    [entryPoints.http.auth]</span><br><span class="hljs-comment">#      headerField = &quot;X-WebAuth-User&quot;</span><br><span class="hljs-comment">#      [entryPoints.http.auth.basic]</span><br><span class="hljs-comment">#        users = [</span><br><span class="hljs-comment">#          &quot;test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/&quot;,</span><br><span class="hljs-comment">#          &quot;test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0&quot;,</span><br><span class="hljs-comment">#        ]</span><br><span class="hljs-comment">#        usersFile = &quot;/path/to/.htpasswd&quot;</span><br><span class="hljs-comment">#      [entryPoints.http.auth.digest]</span><br><span class="hljs-comment">#        users = [</span><br><span class="hljs-comment">#          &quot;test:traefik:a2688e031edb4be6a3797f3882655c05&quot;,</span><br><span class="hljs-comment">#          &quot;test2:traefik:518845800f9e2bfb1f1f740ec24f074e&quot;,</span><br><span class="hljs-comment">#        ]</span><br><span class="hljs-comment">#        usersFile = &quot;/path/to/.htdigest&quot;</span><br><span class="hljs-comment">#      [entryPoints.http.auth.forward]</span><br><span class="hljs-comment">#        address = &quot;https://authserver.com/auth&quot;</span><br><span class="hljs-comment">#        trustForwardHeader = true</span><br><span class="hljs-comment">#        [entryPoints.http.auth.forward.tls]</span><br><span class="hljs-comment">#          ca =  [ &quot;path/to/local.crt&quot;]</span><br><span class="hljs-comment">#          caOptional = true</span><br><span class="hljs-comment">#          cert = &quot;path/to/foo.cert&quot;</span><br><span class="hljs-comment">#          key = &quot;path/to/foo.key&quot;</span><br><span class="hljs-comment">#          insecureSkipVerify = true</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    [entryPoints.http.proxyProtocol]</span><br><span class="hljs-comment">#      insecure = true</span><br><span class="hljs-comment">#      trustedIPs = [&quot;10.10.10.1&quot;, &quot;10.10.10.2&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#    [entryPoints.http.forwardedHeaders]</span><br><span class="hljs-comment">#      trustedIPs = [&quot;10.10.10.1&quot;, &quot;10.10.10.2&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  [entryPoints.https]</span><br><span class="hljs-comment">#    # ...</span><br><br><span class="hljs-comment">################################################################</span><br><span class="hljs-comment"># Kubernetes Ingress configuration backend</span><br><span class="hljs-comment">################################################################</span><br><br><span class="hljs-comment"># Enable Kubernetes Ingress configuration backend.</span><br><span class="hljs-section">[kubernetes]</span><br><br><span class="hljs-comment"># Kubernetes server endpoint.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional for in-cluster configuration, required otherwise.</span><br><span class="hljs-comment"># Default: empty</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">endpoint</span> = <span class="hljs-string">&quot;https://172.16.0.36:6443&quot;</span><br><br><span class="hljs-comment"># Bearer token used for the Kubernetes client configuration.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: empty</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">token</span> = <span class="hljs-string">&quot;eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ0cmFlZmlrLWluZ3Jlc3MtY29udHJvbGxlci10b2tlbi1zbm5iNSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJ0cmFlZmlrLWlyZ3Jlc3MtY29udHJvbGxlciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImE4NmI3YWEzLTVmNjQtMTFlOC1hZjYxLWM4MWY2NmUwMzRhNyIsInN1YiI6InN5c3RlbTpxZXJ2aWNlYWNjb3VudDPrdWJlLXN5c3RlbTp0cmFlZmlrLWluZ3Jlc3MtY29udHJvbGxlciJ9.vOFEITuANWGnkER8gukWkTs54BmHXqNpzM55bOb5qXPmI3pZsbei3gtE6tZoqME9P5Lb85cav-8mGZJcoQqqxNBkZJ1YRqy_1O9Apkxa4jA68ipe_NB3L5-exH5cEIrU8iql_r7ycDaKwzsMnAWGPolp1dRkF31u5u8g68oLwF3GR8Z5g4_tLJlTvA53doX7k6Wd6vUygTS3EaQ_qvfXwbcIeaSdWWo2Mym6O0CvIap4jH2w21MbredGURqkRlXEPezKAgRVkr75CdvuvwORnT8YxFLVwuAJs70V-13Ib9v6HAK64GmzcqkAuJtZT8NZKl8Y4TfRGl2_RMq2tk86gD4ShDMedcrto44ZUYHQccsSlpaW5PsN2KBBNPN0-6ca3jIpOmnJojAFUYGM42Wymnx9_4XwHUeeA18-RrercmOaRMdlNq8BzBomAxQB99TqUzRIqpe6m5OotXvouCUnE7qjMwRWmQ5LHjqUGEw_A1pHcalFXQZK0sOCaJOJZIJbc_8rVX-4uxkCBxoIXmzjq8x5a_xPsN4L0aWifkP6co--agw3kOT0O6my8T_CbcZGO9e3OqYPdT4FSl92XlXW8EXHdDpCUJ10aoqJGG2vZSud7IoDxkcScpkj3n6TvyvSRVtk3CtYiIYBpgi7-X2JKkun1a7yFpLogyazz9VlUE4&quot;</span><br><br><span class="hljs-comment"># Path to the certificate authority file.</span><br><span class="hljs-comment"># Used for the Kubernetes client configuration.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: empty</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">certAuthFilePath</span> = <span class="hljs-string">&quot;/etc/kubernetes/ssl/k8s-root-ca.pem&quot;</span><br><br><span class="hljs-comment"># Array of namespaces to watch.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: all namespaces (empty array).</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">namespaces</span> = [<span class="hljs-string">&quot;default&quot;</span>]<br><br><span class="hljs-comment"># Ingress label selector to filter Ingress objects that should be processed.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: empty (process all Ingresses)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># labelselector = &quot;A and not B&quot;</span><br><br><span class="hljs-comment"># Value of `kubernetes.io/ingress.class` annotation that identifies Ingress objects to be processed.</span><br><span class="hljs-comment"># If the parameter is non-empty, only Ingresses containing an annotation with the same value are processed.</span><br><span class="hljs-comment"># Otherwise, Ingresses missing the annotation, having an empty value, or the value `traefik` are processed.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Note : `ingressClass` option must begin with the &quot;traefik&quot; prefix.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: empty</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ingressClass = &quot;traefik-internal&quot;</span><br><br><span class="hljs-comment"># Disable PassHost Headers.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># disablePassHostHeaders = true</span><br><br><span class="hljs-comment"># Enable PassTLSCert Headers.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: false</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># enablePassTLSCert = true</span><br><br><span class="hljs-comment"># Override default configuration template.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Optional</span><br><span class="hljs-comment"># Default: &lt;built-in template&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># filename = &quot;kubernetes.tmpl&quot;</span><br><br><br><span class="hljs-comment"># API definition</span><br><span class="hljs-section">[api]</span><br>  <span class="hljs-comment"># Name of the related entry point</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># Optional</span><br>  <span class="hljs-comment"># Default: &quot;traefik&quot;</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-attr">entryPoint</span> = <span class="hljs-string">&quot;traefik&quot;</span><br><br>  <span class="hljs-comment"># Enabled Dashboard</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># Optional</span><br>  <span class="hljs-comment"># Default: true</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-attr">dashboard</span> = <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># Enable debug mode.</span><br>  <span class="hljs-comment"># This will install HTTP handlers to expose Go expvars under /debug/vars and</span><br>  <span class="hljs-comment"># pprof profiling data under /debug/pprof.</span><br>  <span class="hljs-comment"># Additionally, the log level will be set to DEBUG.</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># Optional</span><br>  <span class="hljs-comment"># Default: false</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-attr">debug</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Ping definition</span><br><span class="hljs-comment">#[ping]</span><br><span class="hljs-comment">#  # Name of the related entry point</span><br><span class="hljs-comment">#  #</span><br><span class="hljs-comment">#  # Optional</span><br><span class="hljs-comment">#  # Default: &quot;traefik&quot;</span><br><span class="hljs-comment">#  #</span><br><span class="hljs-comment">#  entryPoint = &quot;traefik&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-4、启动-Traefik"><a href="#2-4、启动-Traefik" class="headerlink" title="2.4、启动 Traefik"></a>2.4、启动 Traefik</h3><p>所有文件准备好以后直接执行 <code>docker-compose up -d</code> 启动即可，所有文件目录结构如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">traefik<br>├── docker-compose.yaml<br>├── k8s-root-ca.pem<br>├── <span class="hljs-built_in">log</span><br>│   ├── access.log<br>│   └── traefik.log<br>├── rbac.yaml<br>└── traefik.toml<br></code></pre></td></tr></table></figure><p>启动成功后可以访问 <code>http://IP:2180</code> 查看 Traefik 的控制面板</p><p><img src="https://cdn.oss.link/markdown/phrps.png" alt="dashboard"></p><h2 id="三、增加-Ingress-配置并测试"><a href="#三、增加-Ingress-配置并测试" class="headerlink" title="三、增加 Ingress 配置并测试"></a>三、增加 Ingress 配置并测试</h2><h3 id="3-1、增加-Ingress-配置"><a href="#3-1、增加-Ingress-配置" class="headerlink" title="3.1、增加 Ingress 配置"></a>3.1、增加 Ingress 配置</h3><p>虽然这种部署方式脱离了 Kubernetes 的 Service 与 Ingress 负载，但是 Traefik 还是需要通过 Kubernetes 的 Ingress 配置来确定后端负载规则，所以 Ingress 对象我们仍需照常创建；以下为一个 Demo 项目的 deployment、service、ingress 配置示例</p><ul><li>demo.deploy.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mritd/demo</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ul><li>demo.svc.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">svc:</span> <span class="hljs-string">demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br></code></pre></td></tr></table></figure><ul><li>demo.ing.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/preserve-host:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">demo.mritd.me</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">demo</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="3-2、测试访问"><a href="#3-2、测试访问" class="headerlink" title="3.2、测试访问"></a>3.2、测试访问</h3><p>部署好后应当能从 Traefik 的 Dashboard 中看到新增的 demo ingress，如下所示</p><p><img src="https://cdn.oss.link/markdown/zociy.png" alt="dashboard-demo"></p><p>最后我们使用 curl 测试即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在不使用 Host 头的情况下 Traefik 会返 404(Traefik 根据 Host 路由后端，具体配置参考官方文档)</span><br>test36.node ➜  ~ curl http://172.16.0.36:2080<br>404 page not found<br><br><span class="hljs-comment"># 指定 Host 头来路由到 demo 的相关 Pod</span><br>test36.node ➜  ~ curl -H <span class="hljs-string">&quot;Host: demo.mritd.me&quot;</span> http://172.16.0.36:2080<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Running!&lt;/title&gt;<br>    &lt;style <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        body &#123;<br>            width: 100%;<br>            min-height: 100%;<br>            background: linear-gradient(to bottom, <span class="hljs-comment">#fff 0, #b8edff 50%, #83dfff 100%);</span><br>            background-attachment: fixed;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body class=<span class="hljs-string">&quot; hasGoogleVoiceExt&quot;</span>&gt;<br>&lt;div align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>    &lt;h1&gt;Your container is running!&lt;/h1&gt;<br>    &lt;img src=<span class="hljs-string">&quot;./docker.png&quot;</span> alt=<span class="hljs-string">&quot;docker&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h2 id="四、其他说明"><a href="#四、其他说明" class="headerlink" title="四、其他说明"></a>四、其他说明</h2><p>写这篇文章的目的是给予一种新的服务暴露思路，这篇文章的某些配置并不适合生产使用；<strong>生产环境尽量使用独立的机器部署 Traefik，同时最好宿主机二进制方式部署；应用的 Deployment 也应当加入健康检测以防止错误的流量路由</strong>；至于 Traefik 的具体细节配置，比如访问日志、Entrypoints 配置、如何连接 Kubernets HA api 等不在本文范畴内，请自行查阅文档；</p><p>最后说一下，关于 Traefik 的 HA 只需要部署多个实例即可，还有 Traefik 本身不做日志滚动等，需要自行处理一下日志。</p>]]></content>
    
    
    <summary type="html">最近准备重新折腾一下 Kubernetes 的服务暴露方式，以前的方式是彻底剥离 Kubenretes 本身的服务发现，然后改动应用实现 应用+Consul+Fabio 的服务暴露方式；总感觉这种方式不算优雅，所以折腾了一下 Traefik，试了下效果还不错，以下记录了使用 Traefik 的新的服务暴露方式(本文仅针对 HTTP 协议)</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>为你的 GitLab 增加提交信息检测</title>
    <link href="https://mritd.com/2018/05/11/add-commit-message-style-check-to-your-gitlab/"/>
    <id>https://mritd.com/2018/05/11/add-commit-message-style-check-to-your-gitlab/</id>
    <published>2018-05-11T09:44:40.000Z</published>
    <updated>2018-05-11T09:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近准备对项目生成 Change Log，然而发现提交格式不统一根本没法处理；so 后来大家约定式遵循 GitFlow，并使用 Angular 社区规范的提交格式，同时扩展了一些前缀如 hotfix 等；但是时间长了发现还是有些提交为了 “方便” 不遵循 Angular 社区规范的提交格式，这时候我唯一能做的就是想办法在服务端增加一个提交检测；以下记录了 GitLab 增加自定义 Commit 提交格式检测的方案</p></blockquote><h2 id="一、相关文章资料"><a href="#一、相关文章资料" class="headerlink" title="一、相关文章资料"></a>一、相关文章资料</h2><p>最开始用 Google 搜索到的方案是使用 GitLab 的 Push Rules 功能，具体文档见 <a href="https://docs.gitlab.com/ee/push_rules/push_rules.html">这里</a>，看完了我才发现这是企业版独有的，作为比较有逼格(qiong)的我们是不可能接受这种 “没技术含量” 的方式的；后来找了好多资料，发现还得借助 Git Hook 功能，文档见 <a href="https://docs.gitlab.com/ee/administration/custom_hooks.html">Custom Git Hooks</a>；简单地说 Git Hook 就是在 git 操作的不同阶段执行的预定义脚本，<strong>GitLab 目前仅支持 <code>pre-receive</code> 这个钩子，当然他可以链式调用</strong>；所以一切操作就得从这里入手</p><h2 id="二、pre-receive-实现"><a href="#二、pre-receive-实现" class="headerlink" title="二、pre-receive 实现"></a>二、pre-receive 实现</h2><p>查阅了相关资料得出，在进行 push 时，GitLab 会调用这个钩子文件，这个钩子文件必须放在 <code>/var/opt/gitlab/git-data/repositories/&lt;group&gt;/&lt;project&gt;.git/custom_hooks</code> 目录中，当然具体路径也可能是 <code>/home/git/repositories/&lt;group&gt;/&lt;project&gt;.git/custom_hooks</code>；<code>custom_hooks</code> 目录需要自己创建，具体可以参阅文档的 <a href="https://docs.gitlab.com/ee/administration/custom_hooks.html#setup">Setup</a>；</p><p><strong>在进行 push 操作时，GitLab 会调用这个钩子文件，并且从 stdin 输入三个参数，分别为 之前的版本 commit ID、push 的版本 commit ID 和 push 的分支；根据 commit ID 我们就可以很轻松的获取到提交信息，从而实现进一步检测动作；根据 GitLab 的文档说明，当这个 hook 执行后以非 0 状态退出则认为执行失败，从而拒绝 push；同时会将 stderr 信息返回给 client 端；</strong>说了这么多，下面就可以直接上代码了，为了方便我就直接用 go 造了一个 <a href="https://github.com/mritd/pre-receive">pre-receive</a>，官方文档说明了不限制语言</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;os/exec&quot;</span><br>    <span class="hljs-string">&quot;regexp&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> CommitType <span class="hljs-type">string</span><br><br><span class="hljs-keyword">const</span> (<br>    FEAT     CommitType = <span class="hljs-string">&quot;feat&quot;</span><br>    FIX      CommitType = <span class="hljs-string">&quot;fix&quot;</span><br>    DOCS     CommitType = <span class="hljs-string">&quot;docs&quot;</span><br>    STYLE    CommitType = <span class="hljs-string">&quot;style&quot;</span><br>    REFACTOR CommitType = <span class="hljs-string">&quot;refactor&quot;</span><br>    TEST     CommitType = <span class="hljs-string">&quot;test&quot;</span><br>    CHORE    CommitType = <span class="hljs-string">&quot;chore&quot;</span><br>    PERF     CommitType = <span class="hljs-string">&quot;perf&quot;</span><br>    HOTFIX   CommitType = <span class="hljs-string">&quot;hotfix&quot;</span><br>)<br><span class="hljs-keyword">const</span> CommitMessagePattern = <span class="hljs-string">`^(?:fixup!\s*)?(\w*)(\(([\w\$\.\*/-].*)\))?\: (.*)|^Merge\ branch(.*)`</span><br><br><span class="hljs-keyword">const</span> checkFailedMeassge = <span class="hljs-string">`##############################################################################</span><br><span class="hljs-string">##                                                                          ##</span><br><span class="hljs-string">## Commit message style check failed!                                       ##</span><br><span class="hljs-string">##                                                                          ##</span><br><span class="hljs-string">## Commit message style must satisfy this regular:                          ##</span><br><span class="hljs-string">##   ^(?:fixup!\s*)?(\w*)(\(([\w\$\.\*/-].*)\))?\: (. *)|^Merge\ branch(.*) ##</span><br><span class="hljs-string">##                                                                          ##</span><br><span class="hljs-string">## Example:                                                                 ##</span><br><span class="hljs-string">##   feat(test): test commit style check.                                   ##</span><br><span class="hljs-string">##                                                                          ##</span><br><span class="hljs-string">##############################################################################`</span><br><br><span class="hljs-comment">// 是否开启严格模式，严格模式下将校验所有的提交信息格式(多 commit 下)</span><br><span class="hljs-keyword">const</span> strictMode = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">var</span> commitMsgReg = regexp.MustCompile(CommitMessagePattern)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    input, _ := ioutil.ReadAll(os.Stdin)<br>    param := strings.Fields(<span class="hljs-type">string</span>(input))<br><br>    <span class="hljs-comment">// allow branch/tag delete</span><br>    <span class="hljs-keyword">if</span> param[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;0000000000000000000000000000000000000000&quot;</span> &#123;<br>        os.Exit(<span class="hljs-number">0</span>)<br>    &#125;<br><br>    commitMsg := getCommitMsg(param[<span class="hljs-number">0</span>], param[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> _, tmpStr := <span class="hljs-keyword">range</span> commitMsg &#123;<br>        commitTypes := commitMsgReg.FindAllStringSubmatch(tmpStr, <span class="hljs-number">-1</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(commitTypes) != <span class="hljs-number">1</span> &#123;<br>            checkFailed()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">switch</span> commitTypes[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(FEAT):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(FIX):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(DOCS):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(STYLE):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(REFACTOR):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(TEST):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(CHORE):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(PERF):<br>            <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>(HOTFIX):<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">if</span> !strings.HasPrefix(tmpStr, <span class="hljs-string">&quot;Merge branch&quot;</span>) &#123;<br>                    checkFailed()<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> !strictMode &#123;<br>            os.Exit(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getCommitMsg</span><span class="hljs-params">(odlCommitID, commitID <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>    getCommitMsgCmd := exec.Command(<span class="hljs-string">&quot;git&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, odlCommitID+<span class="hljs-string">&quot;..&quot;</span>+commitID, <span class="hljs-string">&quot;--pretty=format:%s&quot;</span>)<br>    getCommitMsgCmd.Stdin = os.Stdin<br>    getCommitMsgCmd.Stderr = os.Stderr<br>    b, err := getCommitMsgCmd.Output()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Print(err)<br>        os.Exit(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    commitMsg := strings.Split(<span class="hljs-type">string</span>(b), <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-keyword">return</span> commitMsg<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkFailed</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Fprintln(os.Stderr, checkFailedMeassge)<br>    os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、安装-pre-receive"><a href="#三、安装-pre-receive" class="headerlink" title="三、安装 pre-receive"></a>三、安装 pre-receive</h2><p>把以上代码编译后生成的 <code>pre-receive</code> 文件复制到对应项目的钩子目录即可；<strong>要注意的是文件名必须为 <code>pre-receive</code>，同时 <code>custom_hooks</code> 目录需要自建；<code>custom_hooks</code> 目录以及 <code>pre-receive</code> 文件用户组必须为 <code>git:git</code>；在删除分支时 commit ID 为 <code>0000000000000000000000000000000000000000</code>，此时不需要检测提交信息，否则可能导致无法删除分支&#x2F;tag</strong>；最后效果如下所示</p><p><img src="https://cdn.oss.link/markdown/hs9c2.png" alt="commit msg check"></p>]]></content>
    
    
    <summary type="html">最近准备对项目生成 Change Log，然而发现提交格式不统一根本没法处理；so 后来大家约定式遵循 GitFlow，并使用 Angular 社区规范的提交格式，同时扩展了一些前缀如 hotfix 等；但是时间长了发现还是有些提交为了 &quot;方便&quot; 不遵循 Angular 社区规范的提交格式，这时候我唯一能做的就是想办法在服务端增加一个提交检测；以下记录了 GitLab 增加自定义 Commit 提交格式检测的方案</summary>
    
    
    
    <category term="CI/CD" scheme="https://mritd.com/categories/ci-cd/"/>
    
    
    <category term="CI/CD" scheme="https://mritd.com/tags/ci-cd/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.10.1 集群搭建</title>
    <link href="https://mritd.com/2018/04/19/set-up-kubernetes-1.10.1-cluster-by-hyperkube/"/>
    <id>https://mritd.com/2018/04/19/set-up-kubernetes-1.10.1-cluster-by-hyperkube/</id>
    <published>2018-04-19T08:19:08.000Z</published>
    <updated>2018-04-19T08:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年后比较忙，所以 1.9 也没去折腾(其实就是懒)，最近刚有点时间凑巧 1.10 发布；所以就折腾一下 1.10，感觉搭建配置没有太大变化，折腾了 2 天基本算是搞定了，这里记录一下搭建过程；本文用到的被 block 镜像已经上传至 <a href="https://pan.baidu.com/s/14W86QQ4qi8qn8JqaDMcC3g">百度云</a> 密码: dy5p</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>目前搭建仍然采用 5 台虚拟机测试，基本环境如下</p><table><thead><tr><th>IP</th><th>Type</th><th>Docker</th><th>OS</th></tr></thead><tbody><tr><td>192.168.1.61</td><td>master、node、etcd</td><td>18.03.0-ce</td><td>ubuntu 16.04</td></tr><tr><td>192.168.1.62</td><td>master、node、etcd</td><td>18.03.0-ce</td><td>ubuntu 16.04</td></tr><tr><td>192.168.1.63</td><td>master、node、etcd</td><td>18.03.0-ce</td><td>ubuntu 16.04</td></tr><tr><td>192.168.1.64</td><td>node</td><td>18.03.0-ce</td><td>ubuntu 16.04</td></tr><tr><td>192.168.1.65</td><td>node</td><td>18.03.0-ce</td><td>ubuntu 16.04</td></tr></tbody></table><p><strong>搭建前请看完整篇文章后再操作，一些变更说明我放到后面了；还有为了尽可能的懒，也不用什么 rpm、deb 了，直接 <code>hyperkube</code> + <code>service</code> 配置，布吉岛 <code>hyperkube</code> 的请看 <a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/images/hyperkube/README.md">GitHub</a>；本篇文章基于一些小脚本搭建(懒)，所以不会写太详细的步骤，具体请参考 <a href="https://github.com/mritd/ktool">仓库脚本</a>，如果想看更详细的每一步的作用可以参考以前的 1.7、1.8 的搭建文档</strong></p><h3 id="二、搭建-Etcd-集群"><a href="#二、搭建-Etcd-集群" class="headerlink" title="二、搭建 Etcd 集群"></a>二、搭建 Etcd 集群</h3><h4 id="2-1、安装-cfssl"><a href="#2-1、安装-cfssl" class="headerlink" title="2.1、安装 cfssl"></a>2.1、安装 cfssl</h4><p>说实话这个章节我不想写，但是考虑可能有人真的需要，所以还是写了一下；<strong>这个安装脚本使用的是我私人的 cdn，文件可能随时删除，想使用最新版本请自行从 <a href="https://github.com/cloudflare/cfssl">Github</a> clone 并编译</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mritdftp.b0.upaiyun.com/cfssl/cfssl.tar.gz<br>tar -zxvf cfssl.tar.gz<br><span class="hljs-built_in">mv</span> cfssl cfssljson /usr/local/bin<br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/cfssl /usr/local/bin/cfssljson<br><span class="hljs-built_in">rm</span> -f cfssl.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2-2、生成-Etcd-证书"><a href="#2-2、生成-Etcd-证书" class="headerlink" title="2.2、生成 Etcd 证书"></a>2.2、生成 Etcd 证书</h4><h5 id="etcd-csr-json"><a href="#etcd-csr-json" class="headerlink" title="etcd-csr.json"></a>etcd-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.61&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.62&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.63&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="etcd-gencert-json"><a href="#etcd-gencert-json" class="headerlink" title="etcd-gencert.json"></a>etcd-gencert.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="etcd-root-ca-csr-json"><a href="#etcd-root-ca-csr-json" class="headerlink" title="etcd-root-ca-csr.json"></a>etcd-root-ca-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd-root-ca&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca<br>cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd<br></code></pre></td></tr></table></figure><p>生成后如下</p><p><img src="https://cdn.oss.link/markdown/81203.png" alt="gen etcd certs"></p><h4 id="2-3、安装-Etcd"><a href="#2-3、安装-Etcd" class="headerlink" title="2.3、安装 Etcd"></a>2.3、安装 Etcd</h4><p>Etcd 这里采用最新的 3.2.18 版本，安装方式直接复制二进制文件、systemd service 配置即可，不过需要注意相关用户权限问题，以下脚本配置等参考了 etcd rpm 安装包</p><h5 id="etcd-service"><a href="#etcd-service" class="headerlink" title="etcd.service"></a>etcd.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/var/lib/etcd/<br>EnvironmentFile=-/etc/etcd/etcd.conf<br>User=etcd<br><span class="hljs-comment"># set GOMAXPROCS to number of processors</span><br>ExecStart=/bin/bash -c <span class="hljs-string">&quot;GOMAXPROCS=<span class="hljs-subst">$(nproc)</span> /usr/local/bin/etcd --name=\&quot;<span class="hljs-variable">$&#123;ETCD_NAME&#125;</span>\&quot; --data-dir=\&quot;<span class="hljs-variable">$&#123;ETCD_DATA_DIR&#125;</span>\&quot; --listen-client-urls=\&quot;<span class="hljs-variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>\&quot;&quot;</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="etcd-conf"><a href="#etcd-conf" class="headerlink" title="etcd.conf"></a>etcd.conf</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># [member]</span><br>ETCD_NAME=etcd1<br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/etcd1.etcd&quot;</span><br>ETCD_WAL_DIR=<span class="hljs-string">&quot;/var/lib/etcd/wal&quot;</span><br>ETCD_SNAPSHOT_COUNT=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_HEARTBEAT_INTERVAL=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_ELECTION_TIMEOUT=<span class="hljs-string">&quot;1000&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.61:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.61:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_MAX_SNAPSHOTS=<span class="hljs-string">&quot;5&quot;</span><br>ETCD_MAX_WALS=<span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment">#ETCD_CORS=&quot;&quot;</span><br><br><span class="hljs-comment"># [cluster]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.61:2380&quot;</span><br><span class="hljs-comment"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.1.61:2380,etcd2=https://192.168.1.62:2380,etcd3=https://192.168.1.63:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.61:2379&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</span><br><span class="hljs-comment">#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;</span><br><br><span class="hljs-comment"># [proxy]</span><br><span class="hljs-comment">#ETCD_PROXY=&quot;off&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</span><br><br><span class="hljs-comment"># [security]</span><br>ETCD_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_PEER_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_PEER_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_PEER_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># [logging]</span><br><span class="hljs-comment">#ETCD_DEBUG=&quot;false&quot;</span><br><span class="hljs-comment"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</span><br><span class="hljs-comment">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="install-sh"><a href="#install-sh" class="headerlink" title="install.sh"></a>install.sh</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br>ETCD_VERSION=<span class="hljs-string">&quot;3.2.18&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">download</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz&quot;</span> ]; <span class="hljs-keyword">then</span><br>        wget https://github.com/coreos/etcd/releases/download/v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>/etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>        tar -zxvf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">preinstall</span></span>()&#123;<br>    getent group etcd &gt;/dev/null || groupadd -r etcd<br>    getent passwd etcd &gt;/dev/null || useradd -r -g etcd -d /var/lib/etcd -s /sbin/nologin -c <span class="hljs-string">&quot;etcd user&quot;</span> etcd<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd...\033[0m&quot;</span><br>    tar -zxvf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64.tar.gz<br>    <span class="hljs-built_in">cp</span> etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64/etcd* /usr/local/bin<br>    <span class="hljs-built_in">rm</span> -rf etcd-v<span class="hljs-variable">$&#123;ETCD_VERSION&#125;</span>-linux-amd64<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> -r conf /etc/etcd<br>    <span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd<br>    <span class="hljs-built_in">chmod</span> -R 755 /etc/etcd/ssl<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy etcd systemd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> systemd/*.service /lib/systemd/system<br>    systemctl daemon-reload<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">postinstall</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/lib/etcd&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/lib/etcd<br>        <span class="hljs-built_in">chown</span> -R etcd:etcd /var/lib/etcd<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><br>download<br>preinstall<br>install<br>postinstall<br></code></pre></td></tr></table></figure><p><strong>脚本解释如下:</strong></p><ul><li>download: 从 Github 下载二进制文件并解压</li><li>preinstall: 为 Etcd 安装做准备，创建 etcd 用户，并指定家目录登录 shell 等</li><li>install: 将 etcd 二进制文件复制到安装目录(<code>/usr/local/bin</code>)，复制 conf 目录到 <code>/etc/etcd</code></li><li>postinstall: 安装后收尾工作，比如检测 <code>/var/lib/etcd</code> 是否存在，纠正权限等</li></ul><p>整体目录结构如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">etcd<br>├── conf<br>│   ├── etcd.conf<br>│   └── ssl<br>│       ├── etcd.csr<br>│       ├── etcd-csr.json<br>│       ├── etcd-gencert.json<br>│       ├── etcd-key.pem<br>│       ├── etcd.pem<br>│       ├── etcd-root-ca.csr<br>│       ├── etcd-root-ca-csr.json<br>│       ├── etcd-root-ca-key.pem<br>│       └── etcd-root-ca.pem<br>├── etcd.service<br>└── install.sh<br></code></pre></td></tr></table></figure><p><strong>请自行创建 conf 目录等，并放置好相关文件，保存上面脚本为 <code>install.sh</code>，直接执行即可；在每台机器上更改好对应的配置，如 etcd 名称等，etcd 估计都是轻车熟路了，这里不做过多阐述；安装后启动即可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start etcd<br>systemctl <span class="hljs-built_in">enable</span> etcd<br></code></pre></td></tr></table></figure><p><strong>注意: 集群 etcd 要 3 个一起启动，集群模式下单个启动会卡半天最后失败，不要傻等；启动成功后测试如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> ETCDCTL_API=3<br>etcdctl --cacert=/etc/etcd/ssl/etcd-root-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.1.61:2379,https://192.168.1.62:2379,https://192.168.1.63:2379 endpoint health<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/ji94m.png" alt="check etcd"></p><h3 id="三、安装-Kubernets-集群组件"><a href="#三、安装-Kubernets-集群组件" class="headerlink" title="三、安装 Kubernets 集群组件"></a>三、安装 Kubernets 集群组件</h3><blockquote><p><strong>注意：与以前文档不同的是，这次不依赖 rpm 等特定安装包，而是基于 hyperkube 二进制手动安装，每个节点都会同时安装 Master 与 Node 配置文件，具体作为 Master 还是 Node 取决于服务开启情况</strong></p></blockquote><h4 id="3-1、生成-Kubernetes-证书"><a href="#3-1、生成-Kubernetes-证书" class="headerlink" title="3.1、生成 Kubernetes 证书"></a>3.1、生成 Kubernetes 证书</h4><p>由于 kubelet 和 kube-proxy 用到的 kubeconfig 配置文件需要借助 kubectl 来生成，所以需要先安装一下 kubectl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://storage.googleapis.com/kubernetes-release/release/v1.10.1/bin/linux/amd64/hyperkube -O hyperkube_1.10.1<br><span class="hljs-built_in">chmod</span> +x hyperkube_1.10.1<br><span class="hljs-built_in">cp</span> hyperkube_1.10.1 /usr/local/bin/hyperkube<br><span class="hljs-built_in">ln</span> -s /usr/local/bin/hyperkube /usr/local/bin/kubectl<br></code></pre></td></tr></table></figure><h5 id="admin-csr-json"><a href="#admin-csr-json" class="headerlink" title="admin-csr.json"></a>admin-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="k8s-gencert-json"><a href="#k8s-gencert-json" class="headerlink" title="k8s-gencert.json"></a>k8s-gencert.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;kubernetes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="k8s-root-ca-csr-json"><a href="#k8s-root-ca-csr-json" class="headerlink" title="k8s-root-ca-csr.json"></a>k8s-root-ca-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="kube-apiserver-csr-json"><a href="#kube-apiserver-csr-json" class="headerlink" title="kube-apiserver-csr.json"></a>kube-apiserver-csr.json</h5><p><strong>注意: 在以前的文档中这个配置叫 <code>kubernetes-csr.json</code>，为了明确划分职责，这个证书目前被重命名以表示其专属于 <code>apiserver</code> 使用；加了一个 <code>*.kubernetes.master</code> 域名以便内部私有 DNS 解析使用(可删除)；至于很多人问过 <code>kubernetes</code> 这几个能不能删掉，答案是不可以的；因为当集群创建好后，default namespace 下会创建一个叫 <code>kubenretes</code> 的 svc，有一些组件会直接连接这个 svc 来跟 api 通讯的，证书如果不包含可能会出现无法连接的情况；其他几个 <code>kubernetes</code> 开头的域名作用相同</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.254.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.61&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.62&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.63&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.64&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.65&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;*.kubernetes.master&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="kube-proxy-csr-json"><a href="#kube-proxy-csr-json" class="headerlink" title="kube-proxy-csr.json"></a>kube-proxy-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="生成证书及配置"><a href="#生成证书及配置" class="headerlink" title="生成证书及配置"></a>生成证书及配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成 CA</span><br>cfssl gencert --initca=<span class="hljs-literal">true</span> k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca<br><br><span class="hljs-comment"># 依次生成其他组件证书</span><br><span class="hljs-keyword">for</span> targetName <span class="hljs-keyword">in</span> kube-apiserver admin kube-proxy; <span class="hljs-keyword">do</span><br>    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes <span class="hljs-variable">$targetName</span>-csr.json | cfssljson --bare <span class="hljs-variable">$targetName</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 地址默认为 127.0.0.1:6443</span><br><span class="hljs-comment"># 如果在 master 上启用 kubelet 请在生成后的 kubeconfig 中</span><br><span class="hljs-comment"># 修改该地址为 当前MASTER_IP:6443</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://127.0.0.1:6443&quot;</span><br>BOOTSTRAP_TOKEN=$(<span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">od</span> -An -t x | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Tokne: <span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 不要质疑 system:bootstrappers 用户组是否写错了，有疑问请参考官方文档</span><br><span class="hljs-comment"># https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/</span><br><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:bootstrappers&quot;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kubelet bootstrapping kubeconfig...&quot;</span><br><span class="hljs-comment"># 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置客户端认证参数</span><br>kubectl config set-credentials kubelet-bootstrap \<br>  --token=<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kubelet-bootstrap \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=bootstrap.kubeconfig<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kube-proxy kubeconfig...&quot;</span><br><span class="hljs-comment"># 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置客户端认证参数</span><br>kubectl config set-credentials kube-proxy \<br>  --client-certificate=kube-proxy.pem \<br>  --client-key=kube-proxy-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-proxy \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig<br><br><span class="hljs-comment"># 创建高级审计配置</span><br><span class="hljs-built_in">cat</span> &gt;&gt; audit-policy.yaml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"># Log all requests at the Metadata level.</span><br><span class="hljs-string">apiVersion: audit.k8s.io/v1beta1</span><br><span class="hljs-string">kind: Policy</span><br><span class="hljs-string">rules:</span><br><span class="hljs-string">- level: Metadata</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>生成后文件如下</p><p><img src="https://cdn.oss.link/markdown/xk8uj.png" alt="k8s certs"></p><h4 id="3-2、准备-systemd-配置"><a href="#3-2、准备-systemd-配置" class="headerlink" title="3.2、准备 systemd 配置"></a>3.2、准备 systemd 配置</h4><p>所有组件的 <code>systemd</code> 配置如下</p><h5 id="kube-apiserver-service"><a href="#kube-apiserver-service" class="headerlink" title="kube-apiserver.service"></a>kube-apiserver.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes API Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=network.target<br>After=etcd.service<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/config<br>EnvironmentFile=-/etc/kubernetes/apiserver<br>User=kube<br>ExecStart=/usr/local/bin/hyperkube apiserver \<br>            <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>            <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>            <span class="hljs-variable">$KUBE_ETCD_SERVERS</span> \<br>            <span class="hljs-variable">$KUBE_API_ADDRESS</span> \<br>            <span class="hljs-variable">$KUBE_API_PORT</span> \<br>            <span class="hljs-variable">$KUBELET_PORT</span> \<br>            <span class="hljs-variable">$KUBE_ALLOW_PRIV</span> \<br>            <span class="hljs-variable">$KUBE_SERVICE_ADDRESSES</span> \<br>            <span class="hljs-variable">$KUBE_ADMISSION_CONTROL</span> \<br>            <span class="hljs-variable">$KUBE_API_ARGS</span><br>Restart=on-failure<br>Type=notify<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="kube-controller-manager-service"><a href="#kube-controller-manager-service" class="headerlink" title="kube-controller-manager.service"></a>kube-controller-manager.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/config<br>EnvironmentFile=-/etc/kubernetes/controller-manager<br>User=kube<br>ExecStart=/usr/local/bin/hyperkube controller-manager \<br>            <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>            <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>            <span class="hljs-variable">$KUBE_MASTER</span> \<br>            <span class="hljs-variable">$KUBE_CONTROLLER_MANAGER_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="kubelet-service"><a href="#kubelet-service" class="headerlink" title="kubelet.service"></a>kubelet.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Kubelet Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=docker.service<br>Requires=docker.service<br><br>[Service]<br>WorkingDirectory=/var/lib/kubelet<br>EnvironmentFile=-/etc/kubernetes/config<br>EnvironmentFile=-/etc/kubernetes/kubelet<br>ExecStart=/usr/local/bin/hyperkube kubelet \<br>            <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>            <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>            <span class="hljs-variable">$KUBELET_API_SERVER</span> \<br>            <span class="hljs-variable">$KUBELET_ADDRESS</span> \<br>            <span class="hljs-variable">$KUBELET_PORT</span> \<br>            <span class="hljs-variable">$KUBELET_HOSTNAME</span> \<br>            <span class="hljs-variable">$KUBE_ALLOW_PRIV</span> \<br>            <span class="hljs-variable">$KUBELET_ARGS</span><br>Restart=on-failure<br>KillMode=process<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="kube-proxy-service"><a href="#kube-proxy-service" class="headerlink" title="kube-proxy.service"></a>kube-proxy.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Kube-Proxy Server<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br>After=network.target<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/config<br>EnvironmentFile=-/etc/kubernetes/proxy<br>ExecStart=/usr/local/bin/hyperkube proxy \<br>            <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>            <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>            <span class="hljs-variable">$KUBE_MASTER</span> \<br>            <span class="hljs-variable">$KUBE_PROXY_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h5 id="kube-scheduler-service"><a href="#kube-scheduler-service" class="headerlink" title="kube-scheduler.service"></a>kube-scheduler.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Kubernetes Scheduler Plugin<br>Documentation=https://github.com/GoogleCloudPlatform/kubernetes<br><br>[Service]<br>EnvironmentFile=-/etc/kubernetes/config<br>EnvironmentFile=-/etc/kubernetes/scheduler<br>User=kube<br>ExecStart=/usr/local/bin/hyperkube scheduler \<br>            <span class="hljs-variable">$KUBE_LOGTOSTDERR</span> \<br>            <span class="hljs-variable">$KUBE_LOG_LEVEL</span> \<br>            <span class="hljs-variable">$KUBE_MASTER</span> \<br>            <span class="hljs-variable">$KUBE_SCHEDULER_ARGS</span><br>Restart=on-failure<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="3-3、Master-节点配置"><a href="#3-3、Master-节点配置" class="headerlink" title="3.3、Master 节点配置"></a>3.3、Master 节点配置</h4><p>Master 节点主要会运行 3 各组件: <code>kube-apiserver</code>、<code>kube-controller-manager</code>、<code>kube-scheduler</code>，其中用到的配置文件如下</p><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p><strong>config 是一个通用配置文件，值得注意的是由于安装时对于 Node、Master 节点都会包含该文件，在 Node 节点上请注释掉 <code>KUBE_MASTER</code> 变量，因为 Node 节点需要做 HA，要连接本地的 6443 加密端口；而这个变量将会覆盖 <code>kubeconfig</code> 中指定的 <code>127.0.0.1:6443</code> 地址</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure various aspects of all</span><br><span class="hljs-comment"># kubernetes services, including</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kube-apiserver.service</span><br><span class="hljs-comment">#   kube-controller-manager.service</span><br><span class="hljs-comment">#   kube-scheduler.service</span><br><span class="hljs-comment">#   kubelet.service</span><br><span class="hljs-comment">#   kube-proxy.service</span><br><span class="hljs-comment"># logging to stderr means we get it in the systemd journal</span><br>KUBE_LOGTOSTDERR=<span class="hljs-string">&quot;--logtostderr=true&quot;</span><br><br><span class="hljs-comment"># journal message level, 0 is debug</span><br>KUBE_LOG_LEVEL=<span class="hljs-string">&quot;--v=2&quot;</span><br><br><span class="hljs-comment"># Should this cluster be allowed to run privileged docker containers</span><br>KUBE_ALLOW_PRIV=<span class="hljs-string">&quot;--allow-privileged=true&quot;</span><br><br><span class="hljs-comment"># How the controller-manager, scheduler, and proxy find the apiserver</span><br>KUBE_MASTER=<span class="hljs-string">&quot;--master=http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><h5 id="apiserver"><a href="#apiserver" class="headerlink" title="apiserver"></a>apiserver</h5><p>apiserver 配置相对于 1.8 略有变动，其中准入控制器(<code>admission control</code>)选项名称变为了 <code>--enable-admission-plugins</code>，控制器列表也有相应变化，这里采用官方推荐配置，具体请参考 <a href="https://kubernetes.io/docs/admin/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use">官方文档</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure the kube-apiserver</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># The address on the local server to listen to.</span><br>KUBE_API_ADDRESS=<span class="hljs-string">&quot;--advertise-address=192.168.1.61 --bind-address=192.168.1.61&quot;</span><br><br><span class="hljs-comment"># The port on the local server to listen on.</span><br>KUBE_API_PORT=<span class="hljs-string">&quot;--secure-port=6443&quot;</span><br><br><span class="hljs-comment"># Port minions listen on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><br><span class="hljs-comment"># Comma separated list of nodes in the etcd cluster</span><br>KUBE_ETCD_SERVERS=<span class="hljs-string">&quot;--etcd-servers=https://192.168.1.61:2379,https://192.168.1.62:2379,https://192.168.1.63:2379&quot;</span><br><br><span class="hljs-comment"># Address range to use for services</span><br>KUBE_SERVICE_ADDRESSES=<span class="hljs-string">&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</span><br><br><span class="hljs-comment"># default admission control policies</span><br>KUBE_ADMISSION_CONTROL=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,NodeRestriction&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_API_ARGS=<span class="hljs-string">&quot; --anonymous-auth=false \</span><br><span class="hljs-string">                --apiserver-count=3 \</span><br><span class="hljs-string">                --audit-log-maxage=30 \</span><br><span class="hljs-string">                --audit-log-maxbackup=3 \</span><br><span class="hljs-string">                --audit-log-maxsize=100 \</span><br><span class="hljs-string">                --audit-log-path=/var/log/kube-audit/audit.log \</span><br><span class="hljs-string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><br><span class="hljs-string">                --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">                --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --enable-bootstrap-token-auth \</span><br><span class="hljs-string">                --enable-garbage-collector \</span><br><span class="hljs-string">                --enable-logs-handler \</span><br><span class="hljs-string">                --enable-swagger-ui \</span><br><span class="hljs-string">                --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem \</span><br><span class="hljs-string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">                --etcd-compaction-interval=5m0s \</span><br><span class="hljs-string">                --etcd-count-metric-poll-period=1m0s \</span><br><span class="hljs-string">                --event-ttl=48h0m0s \</span><br><span class="hljs-string">                --kubelet-https=true \</span><br><span class="hljs-string">                --kubelet-timeout=3s \</span><br><span class="hljs-string">                --log-flush-frequency=5s \</span><br><span class="hljs-string">                --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">                --service-node-port-range=30000-50000 \</span><br><span class="hljs-string">                --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                --storage-backend=etcd3 \</span><br><span class="hljs-string">                --enable-swagger-ui=true&quot;</span><br></code></pre></td></tr></table></figure><h5 id="controller-manager"><a href="#controller-manager" class="headerlink" title="controller-manager"></a>controller-manager</h5><p>controller manager 配置默认开启了证书轮换能力用于自动签署 kueblet 证书，并且证书时间也设置了 10 年，可自行调整；增加了 <code>--controllers</code> 选项以指定开启全部控制器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># The following values are used to configure the kubernetes controller-manager</span><br><br><span class="hljs-comment"># defaults from config and apiserver should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;  --bind-address=0.0.0.0 \</span><br><span class="hljs-string">                                --cluster-name=kubernetes \</span><br><span class="hljs-string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="hljs-string">                                --deployment-controller-sync-period=10s \</span><br><span class="hljs-string">                                --experimental-cluster-signing-duration=86700h0m0s \</span><br><span class="hljs-string">                                --leader-elect=true \</span><br><span class="hljs-string">                                --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                                --node-monitor-period=5s \</span><br><span class="hljs-string">                                --pod-eviction-timeout=5m0s \</span><br><span class="hljs-string">                                --terminated-pod-gc-threshold=50 \</span><br><span class="hljs-string">                                --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                                --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                                --feature-gates=RotateKubeletServerCertificate=true&quot;</span><br></code></pre></td></tr></table></figure><h5 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes scheduler config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_SCHEDULER_ARGS=<span class="hljs-string">&quot;   --address=0.0.0.0 \</span><br><span class="hljs-string">                        --leader-elect=true \</span><br><span class="hljs-string">                        --algorithm-provider=DefaultProvider&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-4、Node-节点配置"><a href="#3-4、Node-节点配置" class="headerlink" title="3.4、Node 节点配置"></a>3.4、Node 节点配置</h4><p>Node 节点上主要有 <code>kubelet</code>、<code>kube-proxy</code> 组件，用到的配置如下</p><h5 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h5><p>kubeket 默认也开启了证书轮换能力以保证自动续签相关证书，同时增加了 <code>--node-labels</code> 选项为 node 打一个标签，关于这个标签最后部分会有讨论，<strong>如果在 master 上启动 kubelet，请将 <code>node-role.kubernetes.io/k8s-node=true</code> 修改为 <code>node-role.kubernetes.io/k8s-master=true</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--node-ip=192.168.1.61&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=k1.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;  --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">                --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">                --cgroup-driver=cgroupfs \</span><br><span class="hljs-string">                --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">                --cluster-domain=cluster.local. \</span><br><span class="hljs-string">                --fail-swap-on=false \</span><br><span class="hljs-string">                --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">                --node-labels=node-role.kubernetes.io/k8s-node=true \</span><br><span class="hljs-string">                --image-gc-high-threshold=70 \</span><br><span class="hljs-string">                --image-gc-low-threshold=50 \</span><br><span class="hljs-string">                --kube-reserved=cpu=500m,memory=512Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">                --system-reserved=cpu=1000m,memory=1024Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --serialize-image-pulls=false \</span><br><span class="hljs-string">                --sync-frequency=30s \</span><br><span class="hljs-string">                --pod-infra-container-image=k8s.gcr.io/pause-amd64:3.0 \</span><br><span class="hljs-string">                --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">                --rotate-certificates&quot;</span><br></code></pre></td></tr></table></figure><h5 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes proxy config</span><br><span class="hljs-comment"># default config should be adequate</span><br><span class="hljs-comment"># Add your own!</span><br>KUBE_PROXY_ARGS=<span class="hljs-string">&quot;--bind-address=0.0.0.0 \</span><br><span class="hljs-string">                 --hostname-override=k1.node \</span><br><span class="hljs-string">                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span><br><span class="hljs-string">                 --cluster-cidr=10.254.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-5、安装集群组件"><a href="#3-5、安装集群组件" class="headerlink" title="3.5、安装集群组件"></a>3.5、安装集群组件</h4><p>上面已经准备好了相关配置文件，接下来将这些配置文件组织成如下目录结构以便后续脚本安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sh">k8s<br>├── conf<br>│   ├── apiserver<br>│   ├── audit-policy.yaml<br>│   ├── bootstrap.kubeconfig<br>│   ├── config<br>│   ├── controller-manager<br>│   ├── kubelet<br>│   ├── kube-proxy.kubeconfig<br>│   ├── proxy<br>│   ├── scheduler<br>│   ├── ssl<br>│   │   ├── admin.csr<br>│   │   ├── admin-csr.json<br>│   │   ├── admin-key.pem<br>│   │   ├── admin.pem<br>│   │   ├── k8s-gencert.json<br>│   │   ├── k8s-root-ca.csr<br>│   │   ├── k8s-root-ca-csr.json<br>│   │   ├── k8s-root-ca-key.pem<br>│   │   ├── k8s-root-ca.pem<br>│   │   ├── kube-apiserver.csr<br>│   │   ├── kube-apiserver-csr.json<br>│   │   ├── kube-apiserver-key.pem<br>│   │   ├── kube-apiserver.pem<br>│   │   ├── kube-proxy.csr<br>│   │   ├── kube-proxy-csr.json<br>│   │   ├── kube-proxy-key.pem<br>│   │   └── kube-proxy.pem<br>│   └── token.csv<br>├── hyperkube_1.10.1<br>├── install.sh<br>└── systemd<br>    ├── kube-apiserver.service<br>    ├── kube-controller-manager.service<br>    ├── kubelet.service<br>    ├── kube-proxy.service<br>    └── kube-scheduler.service<br></code></pre></td></tr></table></figure><p>其中 <code>install.sh</code> 内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br>KUBE_VERSION=<span class="hljs-string">&quot;1.10.1&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">download_k8s</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;hyperkube_<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        wget https://storage.googleapis.com/kubernetes-release/release/v<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span>/bin/linux/amd64/hyperkube -O hyperkube_<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span><br>        <span class="hljs-built_in">chmod</span> +x hyperkube_<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">preinstall</span></span>()&#123;<br>    getent group kube &gt;/dev/null || groupadd -r kube<br>    getent passwd kube &gt;/dev/null || useradd -r -g kube -d / -s /sbin/nologin -c <span class="hljs-string">&quot;Kubernetes user&quot;</span> kube<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_k8s</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy hyperkube...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> hyperkube_<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span> /usr/local/bin/hyperkube<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Create symbolic link...\033[0m&quot;</span><br>    <span class="hljs-built_in">ln</span> -sf /usr/local/bin/hyperkube /usr/local/bin/kubectl<br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy kubernetes config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> -r conf /etc/kubernetes<br>    <span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;/etc/kubernetes/ssl&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mINFO: Copy kubernetes systemd config...\033[0m&quot;</span><br>    <span class="hljs-built_in">cp</span> systemd/*.service /lib/systemd/system<br>    systemctl daemon-reload<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">postinstall</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/log/kube-audit&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/log/kube-audit<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/var/lib/kubelet&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /var/lib/kubelet<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/usr/libexec&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">mkdir</span> /usr/libexec<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">chown</span> -R kube:kube /var/log/kube-audit /var/lib/kubelet /usr/libexec<br>&#125;<br><br><br>download_k8s<br>preinstall<br>install_k8s<br>postinstall<br></code></pre></td></tr></table></figure><p><strong>脚本解释如下:</strong></p><ul><li>download_k8s: 下载 hyperkube 二进制文件</li><li>preinstall: 安装前处理，同 etcd 一样创建 kube 普通用户指定家目录、shell 等</li><li>install_k8s: 复制 hyperkube 到安装目录，为 kubectl 创建软连接(为啥创建软连接就能执行请自行阅读 <a href="https://github.com/kubernetes/kubernetes/blob/cce67ed8e7d461657d350a1cdd55791d1637fc43/cmd/hyperkube/main.go#L69">源码</a>)，复制相关配置到对应目录，并处理权限</li><li>postinstall: 收尾工作，创建日志目录等，并处理权限</li></ul><p>最后执行此脚本安装即可，<strong>此外，应确保每个节点安装了 <code>ipset</code>、<code>conntrack</code> 两个包，因为 kube-proxy 组件会使用其处理 iptables 规则等</strong></p><h3 id="四、启动-Kubernetes-Master-节点"><a href="#四、启动-Kubernetes-Master-节点" class="headerlink" title="四、启动 Kubernetes Master 节点"></a>四、启动 Kubernetes Master 节点</h3><p>对于 <code>master</code> 节点启动无需做过多处理，多个 <code>master</code> 只要保证 <code>apiserver</code> 等配置中的 ip 地址监听没问题后直接启动即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kube-apiserver<br>systemctl start kube-controller-manager<br>systemctl start kube-scheduler<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br></code></pre></td></tr></table></figure><p>成功后截图如下</p><p><img src="https://cdn.oss.link/markdown/lqur1.png" alt="Master success"></p><h3 id="五、启动-Kubernetes-Node-节点"><a href="#五、启动-Kubernetes-Node-节点" class="headerlink" title="五、启动 Kubernetes Node 节点"></a>五、启动 Kubernetes Node 节点</h3><p>由于 HA 等功能需要，对于 Node 需要做一些处理才能启动，主要有以下两个地方需要处理</p><h4 id="5-1、nginx-proxy"><a href="#5-1、nginx-proxy" class="headerlink" title="5.1、nginx-proxy"></a>5.1、nginx-proxy</h4><p>在启动 <code>kubelet</code>、<code>kube-proxy</code> 服务之前，需要在本地启动 <code>nginx</code> 来 tcp 负载均衡 <code>apiserver</code> 6443 端口，<code>nginx-proxy</code> 使用 <code>docker</code> + <code>systemd</code> 启动，配置如下</p><p><strong>注意: 对于在 master 节点启动 kubelet 来说，不需要 nginx 做负载均衡；可以跳过此步骤，并修改 <code>kubelet.kubeconfig</code>、<code>kube-proxy.kubeconfig</code> 中的 apiserver 地址为当前 master ip 6443 端口即可</strong></p><ul><li>nginx-proxy.service</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=kubernetes apiserver docker wrapper<br>Wants=docker.socket<br>After=docker.service<br><br>[Service]<br>User=root<br>PermissionsStartOnly=<span class="hljs-literal">true</span><br>ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \<br>                              -v /etc/nginx:/etc/nginx \<br>                              --name nginx-proxy \<br>                              --net=host \<br>                              --restart=on-failure:5 \<br>                              --memory=512M \<br>                              nginx:1.13.12-alpine<br>ExecStartPre=-/usr/bin/docker <span class="hljs-built_in">rm</span> -f nginx-proxy<br>ExecStop=/usr/bin/docker stop nginx-proxy<br>Restart=always<br>RestartSec=15s<br>TimeoutStartSec=30s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ul><li>nginx.conf</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">error_log stderr notice;<br><br>worker_processes auto;<br>events &#123;<br>        multi_accept on;<br>        use epoll;<br>        worker_connections 1024;<br>&#125;<br><br>stream &#123;<br>    upstream kube_apiserver &#123;<br>        least_conn;<br>        server 192.168.1.61:6443;<br>        server 192.168.1.62:6443;<br>        server 192.168.1.63:6443;<br>    &#125;<br><br>    server &#123;<br>        listen        0.0.0.0:6443;<br>        proxy_pass    kube_apiserver;<br>        proxy_timeout 10m;<br>        proxy_connect_timeout 1s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动 apiserver 的本地负载均衡</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /etc/nginx<br><span class="hljs-built_in">cp</span> nginx.conf /etc/nginx<br><span class="hljs-built_in">cp</span> nginx-proxy.service /lib/systemd/system<br><br>systemctl daemon-reload<br>systemctl start nginx-proxy<br>systemctl <span class="hljs-built_in">enable</span> nginx-proxy<br></code></pre></td></tr></table></figure><h4 id="5-2、TLS-bootstrapping"><a href="#5-2、TLS-bootstrapping" class="headerlink" title="5.2、TLS bootstrapping"></a>5.2、TLS bootstrapping</h4><p>创建好 <code>nginx-proxy</code> 后不要忘记为 <code>TLS Bootstrap</code> 创建相应的 <code>RBAC</code> 规则，这些规则能实现证自动签署 <code>TLS Bootstrap</code> 发出的 <code>CSR</code> 请求，从而实现证书轮换(创建一次即可)；详情请参考 <a href="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note/">Kubernetes TLS bootstrapping 那点事</a></p><ul><li>tls-bootstrapping-clusterrole.yaml(与 1.8 一样)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><p><strong>在 master 执行创建</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 给与 kubelet-bootstrap 用户进行 node-bootstrapper 的权限</span><br>kubectl create clusterrolebinding kubelet-bootstrap \<br>    --clusterrole=system:node-bootstrapper \<br>    --user=kubelet-bootstrap<br><br>kubectl create -f tls-bootstrapping-clusterrole.yaml<br><br><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr \<br>        --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient \<br>        --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt \<br>        --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient \<br>        --group=system:nodes<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt \<br>        --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver \<br>        --group=system:nodes<br></code></pre></td></tr></table></figure><h4 id="5-3、执行启动"><a href="#5-3、执行启动" class="headerlink" title="5.3、执行启动"></a>5.3、执行启动</h4><p>多节点部署时先启动好 <code>nginx-proxy</code>，然后修改好相应配置的 ip 地址等配置，最终直接启动即可(master 上启动 kubelet 不要忘了修改 kubeconfig 中的 apiserver 地址，还有对应的 kubelet 的 node label)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kubelet<br>systemctl start kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br></code></pre></td></tr></table></figure><p>最后启动成功后如下</p><p><img src="https://cdn.oss.link/markdown/r4s34.png" alt="cluster started"></p><h3 id="五、安装-Calico"><a href="#五、安装-Calico" class="headerlink" title="五、安装 Calico"></a>五、安装 Calico</h3><p>Calico 安装仍然延续以前的方案，使用 Daemonset 安装 cni 组件，使用 systemd 控制 calico-node 以确保 calico-node 能正确的拿到主机名等</p><h4 id="5-1、修改-Calico-配置"><a href="#5-1、修改-Calico-配置" class="headerlink" title="5.1、修改 Calico 配置"></a>5.1、修改 Calico 配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/calico.yaml -O calico.example.yaml<br><br>ETCD_CERT=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br>ETCD_KEY=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-key.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br>ETCD_CA=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-root-ca.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br>ETCD_ENDPOINTS=<span class="hljs-string">&quot;https://192.168.1.61:2379,https://192.168.1.62:2379,https://192.168.1.63:2379&quot;</span><br><br><span class="hljs-built_in">cp</span> calico.example.yaml calico.yaml<br><br>sed -i <span class="hljs-string">&quot;s@.*etcd_endpoints:.*@\ \ etcd_endpoints:\ \&quot;<span class="hljs-variable">$&#123;ETCD_ENDPOINTS&#125;</span>\&quot;@gi&quot;</span> calico.yaml<br><br>sed -i <span class="hljs-string">&quot;s@.*etcd-cert:.*@\ \ etcd-cert:\ <span class="hljs-variable">$&#123;ETCD_CERT&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-key:.*@\ \ etcd-key:\ <span class="hljs-variable">$&#123;ETCD_KEY&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-ca:.*@\ \ etcd-ca:\ <span class="hljs-variable">$&#123;ETCD_CA&#125;</span>@gi&quot;</span> calico.yaml<br><br>sed -i <span class="hljs-string">&#x27;s@.*etcd_ca:.*@\ \ etcd_ca:\ &quot;/calico-secrets/etcd-ca&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_cert:.*@\ \ etcd_cert:\ &quot;/calico-secrets/etcd-cert&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_key:.*@\ \ etcd_key:\ &quot;/calico-secrets/etcd-key&quot;@gi&#x27;</span> calico.yaml<br><br><span class="hljs-comment"># 注释掉 calico-node 部分(由 Systemd 接管)</span><br>sed -i <span class="hljs-string">&#x27;123,219s@.*@#&amp;@gi&#x27;</span> calico.yaml<br></code></pre></td></tr></table></figure><h4 id="5-2、创建-Systemd-文件"><a href="#5-2、创建-Systemd-文件" class="headerlink" title="5.2、创建 Systemd 文件"></a>5.2、创建 Systemd 文件</h4><p><strong>注意: 创建 systemd service 配置文件要在每个节点上都执行</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh">K8S_MASTER_IP=<span class="hljs-string">&quot;192.168.1.61&quot;</span><br>HOSTNAME=`<span class="hljs-built_in">cat</span> /etc/hostname`<br>ETCD_ENDPOINTS=<span class="hljs-string">&quot;https://192.168.1.61:2379,https://192.168.1.62:2379,https://192.168.1.63:2379&quot;</span><br><br><span class="hljs-built_in">cat</span> &gt; /lib/systemd/system/calico-node.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=calico node</span><br><span class="hljs-string">After=docker.service</span><br><span class="hljs-string">Requires=docker.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">Environment=ETCD_ENDPOINTS=$&#123;ETCD_ENDPOINTS&#125;</span><br><span class="hljs-string">PermissionsStartOnly=true</span><br><span class="hljs-string">ExecStart=/usr/bin/docker run   --net=host --privileged --name=calico-node \\</span><br><span class="hljs-string">                                -e ETCD_ENDPOINTS=\$&#123;ETCD_ENDPOINTS&#125; \\</span><br><span class="hljs-string">                                -e ETCD_CA_CERT_FILE=/etc/etcd/ssl/etcd-root-ca.pem \\</span><br><span class="hljs-string">                                -e ETCD_CERT_FILE=/etc/etcd/ssl/etcd.pem \\</span><br><span class="hljs-string">                                -e ETCD_KEY_FILE=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="hljs-string">                                -e NODENAME=$&#123;HOSTNAME&#125; \\</span><br><span class="hljs-string">                                -e IP= \\</span><br><span class="hljs-string">                                -e IP_AUTODETECTION_METHOD=can-reach=$&#123;K8S_MASTER_IP&#125; \\</span><br><span class="hljs-string">                                -e AS=64512 \\</span><br><span class="hljs-string">                                -e CLUSTER_TYPE=k8s,bgp \\</span><br><span class="hljs-string">                                -e CALICO_IPV4POOL_CIDR=10.20.0.0/16 \\</span><br><span class="hljs-string">                                -e CALICO_IPV4POOL_IPIP=always \\</span><br><span class="hljs-string">                                -e CALICO_LIBNETWORK_ENABLED=true \\</span><br><span class="hljs-string">                                -e CALICO_NETWORKING_BACKEND=bird \\</span><br><span class="hljs-string">                                -e CALICO_DISABLE_FILE_LOGGING=true \\</span><br><span class="hljs-string">                                -e FELIX_IPV6SUPPORT=false \\</span><br><span class="hljs-string">                                -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \\</span><br><span class="hljs-string">                                -e FELIX_LOGSEVERITYSCREEN=info \\</span><br><span class="hljs-string">                                -e FELIX_IPINIPMTU=1440 \\</span><br><span class="hljs-string">                                -e FELIX_HEALTHENABLED=true \\</span><br><span class="hljs-string">                                -e CALICO_K8S_NODE_REF=$&#123;HOSTNAME&#125; \\</span><br><span class="hljs-string">                                -v /etc/calico/etcd-root-ca.pem:/etc/etcd/ssl/etcd-root-ca.pem \\</span><br><span class="hljs-string">                                -v /etc/calico/etcd.pem:/etc/etcd/ssl/etcd.pem \\</span><br><span class="hljs-string">                                -v /etc/calico/etcd-key.pem:/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="hljs-string">                                -v /lib/modules:/lib/modules \\</span><br><span class="hljs-string">                                -v /var/lib/calico:/var/lib/calico \\</span><br><span class="hljs-string">                                -v /var/run/calico:/var/run/calico \\</span><br><span class="hljs-string">                                quay.io/calico/node:v3.1.0</span><br><span class="hljs-string">ExecStop=/usr/bin/docker rm -f calico-node</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=10</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><strong>对于以上脚本中的 <code>K8S_MASTER_IP</code> 变量，只需要填写一个 master ip 即可，这个变量用于 calico 自动选择 IP 使用；在宿主机有多张网卡的情况下，calcio node 会自动获取一个 IP，获取原则就是尝试是否能够联通这个 master ip</strong></p><p>由于 calico 需要使用 etcd 存储数据，所以需要复制 etcd 证书到相关目录，**<code>/etc/calico</code> 需要在每个节点都有**</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -r /etc/etcd/ssl /etc/calico<br></code></pre></td></tr></table></figure><h4 id="5-3、修改-kubelet-配置"><a href="#5-3、修改-kubelet-配置" class="headerlink" title="5.3、修改 kubelet 配置"></a>5.3、修改 kubelet 配置</h4><p>使用 Calico 后需要修改 kubelet 配置增加 CNI 设置(<code>--network-plugin=cni</code>)，修改后配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--node-ip=192.168.1.61&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=k1.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;  --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">                --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">                --cgroup-driver=cgroupfs \</span><br><span class="hljs-string">                --network-plugin=cni \</span><br><span class="hljs-string">                --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">                --cluster-domain=cluster.local. \</span><br><span class="hljs-string">                --fail-swap-on=false \</span><br><span class="hljs-string">                --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">                --node-labels=node-role.kubernetes.io/k8s-master=true \</span><br><span class="hljs-string">                --image-gc-high-threshold=70 \</span><br><span class="hljs-string">                --image-gc-low-threshold=50 \</span><br><span class="hljs-string">                --kube-reserved=cpu=500m,memory=512Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">                --system-reserved=cpu=1000m,memory=1024Mi,ephemeral-storage=1Gi \</span><br><span class="hljs-string">                --serialize-image-pulls=false \</span><br><span class="hljs-string">                --sync-frequency=30s \</span><br><span class="hljs-string">                --pod-infra-container-image=k8s.gcr.io/pause-amd64:3.0 \</span><br><span class="hljs-string">                --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">                --rotate-certificates&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-4、创建-Calico-Daemonset"><a href="#5-4、创建-Calico-Daemonset" class="headerlink" title="5.4、创建 Calico Daemonset"></a>5.4、创建 Calico Daemonset</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 先创建 RBAC</span><br>kubectl apply -f \<br>https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/rbac.yaml<br><br><span class="hljs-comment"># 再创建 Calico Daemonset</span><br>kubectl create -f calico.yaml<br></code></pre></td></tr></table></figure><h4 id="5-5、启动-Calico-Node"><a href="#5-5、启动-Calico-Node" class="headerlink" title="5.5、启动 Calico Node"></a>5.5、启动 Calico Node</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart calico-node<br>systemctl <span class="hljs-built_in">enable</span> calico-node<br><br><span class="hljs-comment"># 等待 20s 拉取镜像</span><br><span class="hljs-built_in">sleep</span> 20<br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><h4 id="5-6、测试网络"><a href="#5-6、测试网络" class="headerlink" title="5.6、测试网络"></a>5.6、测试网络</h4><p>网络测试与其他几篇文章一样，创建几个 pod 测试即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 deployment</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; demo.deploy.yml</span><br><span class="hljs-string">apiVersion: apps/v1</span><br><span class="hljs-string">kind: Deployment</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: demo-deployment</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  replicas: 5</span><br><span class="hljs-string">  selector:</span><br><span class="hljs-string">    matchLabels:</span><br><span class="hljs-string">      app: demo</span><br><span class="hljs-string">  template:</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      labels:</span><br><span class="hljs-string">        app: demo</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: demo</span><br><span class="hljs-string">        image: mritd/demo</span><br><span class="hljs-string">        imagePullPolicy: IfNotPresent</span><br><span class="hljs-string">        ports:</span><br><span class="hljs-string">        - containerPort: 80</span><br><span class="hljs-string">EOF</span><br>kubectl create -f demo.deploy.yml<br></code></pre></td></tr></table></figure><p>测试结果如图所示</p><p><img src="https://cdn.oss.link/markdown/u9j3v.png" alt="test calico"></p><h3 id="六、部署集群-DNS"><a href="#六、部署集群-DNS" class="headerlink" title="六、部署集群 DNS"></a>六、部署集群 DNS</h3><h4 id="6-1、部署-CoreDNS"><a href="#6-1、部署-CoreDNS" class="headerlink" title="6.1、部署 CoreDNS"></a>6.1、部署 CoreDNS</h4><p>CoreDNS 给出了标准的 deployment 配置，如下</p><ul><li>coredns.yaml.sed</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs sh">apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRole<br>metadata:<br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: system:coredns<br>rules:<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - endpoints<br>  - services<br>  - pods<br>  - namespaces<br>  verbs:<br>  - list<br>  - watch<br>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>  name: system:coredns<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: system:coredns<br>subjects:<br>- kind: ServiceAccount<br>  name: coredns<br>  namespace: kube-system<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>data:<br>  Corefile: |<br>    .:53 &#123;<br>        errors<br>        health<br>        kubernetes CLUSTER_DOMAIN REVERSE_CIDRS &#123;<br>          pods insecure<br>          upstream<br>          fallthrough in-addr.arpa ip6.arpa<br>        &#125;<br>        prometheus :9153<br>        proxy . /etc/resolv.conf<br>        cache 30<br>    &#125;<br>---<br>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  replicas: 2<br>  strategy:<br>    <span class="hljs-built_in">type</span>: RollingUpdate<br>    rollingUpdate:<br>      maxUnavailable: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: kube-dns<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: kube-dns<br>    spec:<br>      serviceAccountName: coredns<br>      tolerations:<br>        - key: <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          operator: <span class="hljs-string">&quot;Exists&quot;</span><br>      containers:<br>      - name: coredns<br>        image: coredns/coredns:1.1.1<br>        imagePullPolicy: IfNotPresent<br>        args: [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        volumeMounts:<br>        - name: config-volume<br>          mountPath: /etc/coredns<br>        ports:<br>        - containerPort: 53<br>          name: dns<br>          protocol: UDP<br>        - containerPort: 53<br>          name: dns-tcp<br>          protocol: TCP<br>        - containerPort: 9153<br>          name: metrics<br>          protocol: TCP<br>        livenessProbe:<br>          httpGet:<br>            path: /health<br>            port: 8080<br>            scheme: HTTP<br>          initialDelaySeconds: 60<br>          timeoutSeconds: 5<br>          successThreshold: 1<br>          failureThreshold: 5<br>      dnsPolicy: Default<br>      volumes:<br>        - name: config-volume<br>          configMap:<br>            name: coredns<br>            items:<br>            - key: Corefile<br>              path: Corefile<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kube-dns<br>  namespace: kube-system<br>  annotations:<br>    prometheus.io/scrape: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  selector:<br>    k8s-app: kube-dns<br>  clusterIP: CLUSTER_DNS_IP<br>  ports:<br>  - name: dns<br>    port: 53<br>    protocol: UDP<br>  - name: dns-tcp<br>    port: 53<br>    protocol: TCP<br></code></pre></td></tr></table></figure><p>然后直接使用脚本替换即可(脚本变量我已经修改了)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Deploys CoreDNS to a cluster currently running Kube-DNS.</span><br><br>SERVICE_CIDR=<span class="hljs-variable">$&#123;1:-10.254.0.0/16&#125;</span><br>POD_CIDR=<span class="hljs-variable">$&#123;2:-10.20.0.0/16&#125;</span><br>CLUSTER_DNS_IP=<span class="hljs-variable">$&#123;3:-10.254.0.2&#125;</span><br>CLUSTER_DOMAIN=<span class="hljs-variable">$&#123;4:-cluster.local&#125;</span><br>YAML_TEMPLATE=<span class="hljs-variable">$&#123;5:-`pwd`/coredns.yaml.sed&#125;</span><br><br>sed -e s/CLUSTER_DNS_IP/<span class="hljs-variable">$CLUSTER_DNS_IP</span>/g -e s/CLUSTER_DOMAIN/<span class="hljs-variable">$CLUSTER_DOMAIN</span>/g -e s?SERVICE_CIDR?<span class="hljs-variable">$SERVICE_CIDR</span>?g -e s?POD_CIDR?<span class="hljs-variable">$POD_CIDR</span>?g <span class="hljs-variable">$YAML_TEMPLATE</span> &gt; coredns.yaml<br></code></pre></td></tr></table></figure><p>最后使用 <code>kubectl</code> 创建一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 执行上面的替换脚本</span><br>./deploy.sh<br><br><span class="hljs-comment"># 创建 CoreDNS</span><br>kubectl create -f coredns.yaml<br></code></pre></td></tr></table></figure><p>测试截图如下</p><p><img src="https://cdn.oss.link/markdown/v1jdc.png" alt="test dns"></p><h4 id="6-2、部署-DNS-自动扩容"><a href="#6-2、部署-DNS-自动扩容" class="headerlink" title="6.2、部署 DNS 自动扩容"></a>6.2、部署 DNS 自动扩容</h4><p>自动扩容跟以往一样，yaml 创建一下就行</p><ul><li>dns-horizontal-autoscaler.yaml</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Copyright 2016 The Kubernetes Authors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br>kind: ServiceAccount<br>apiVersion: v1<br>metadata:<br>  name: kube-dns-autoscaler<br>  namespace: kube-system<br>  labels:<br>    addonmanager.kubernetes.io/mode: Reconcile<br>---<br>kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: system:kube-dns-autoscaler<br>  labels:<br>    addonmanager.kubernetes.io/mode: Reconcile<br>rules:<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources: [<span class="hljs-string">&quot;nodes&quot;</span>]<br>    verbs: [<span class="hljs-string">&quot;list&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources: [<span class="hljs-string">&quot;replicationcontrollers/scale&quot;</span>]<br>    verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br>  - apiGroups: [<span class="hljs-string">&quot;extensions&quot;</span>]<br>    resources: [<span class="hljs-string">&quot;deployments/scale&quot;</span>, <span class="hljs-string">&quot;replicasets/scale&quot;</span>]<br>    verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>]<br><span class="hljs-comment"># Remove the configmaps rule once below issue is fixed:</span><br><span class="hljs-comment"># kubernetes-incubator/cluster-proportional-autoscaler#16</span><br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources: [<span class="hljs-string">&quot;configmaps&quot;</span>]<br>    verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>]<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: system:kube-dns-autoscaler<br>  labels:<br>    addonmanager.kubernetes.io/mode: Reconcile<br>subjects:<br>  - kind: ServiceAccount<br>    name: kube-dns-autoscaler<br>    namespace: kube-system<br>roleRef:<br>  kind: ClusterRole<br>  name: system:kube-dns-autoscaler<br>  apiGroup: rbac.authorization.k8s.io<br><br>---<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: kube-dns-autoscaler<br>  namespace: kube-system<br>  labels:<br>    k8s-app: kube-dns-autoscaler<br>    kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>    addonmanager.kubernetes.io/mode: Reconcile<br>spec:<br>  selector:<br>    matchLabels:<br>      k8s-app: kube-dns-autoscaler<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: kube-dns-autoscaler<br>      annotations:<br>        scheduler.alpha.kubernetes.io/critical-pod: <span class="hljs-string">&#x27;&#x27;</span><br>    spec:<br>      priorityClassName: system-cluster-critical<br>      containers:<br>      - name: autoscaler<br>        image: k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.1.2-r2<br>        resources:<br>            requests:<br>                cpu: <span class="hljs-string">&quot;20m&quot;</span><br>                memory: <span class="hljs-string">&quot;10Mi&quot;</span><br>        <span class="hljs-built_in">command</span>:<br>          - /cluster-proportional-autoscaler<br>          - --namespace=kube-system<br>          - --configmap=kube-dns-autoscaler<br>          <span class="hljs-comment"># Should keep target in sync with cluster/addons/dns/kube-dns.yaml.base</span><br>          - --target=Deployment/kube-dns<br>          <span class="hljs-comment"># When cluster is using large nodes(with more cores), &quot;coresPerReplica&quot; should dominate.</span><br>          <span class="hljs-comment"># If using small nodes, &quot;nodesPerReplica&quot; should dominate.</span><br>          - --default-params=&#123;<span class="hljs-string">&quot;linear&quot;</span>:&#123;<span class="hljs-string">&quot;coresPerReplica&quot;</span>:256,<span class="hljs-string">&quot;nodesPerReplica&quot;</span>:16,<span class="hljs-string">&quot;preventSinglePointFailure&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;<br>          - --logtostderr=<span class="hljs-literal">true</span><br>          - --v=2<br>      tolerations:<br>      - key: <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>        operator: <span class="hljs-string">&quot;Exists&quot;</span><br>      serviceAccountName: kube-dns-autoscaler<br></code></pre></td></tr></table></figure><h3 id="七、部署-heapster"><a href="#七、部署-heapster" class="headerlink" title="七、部署 heapster"></a>七、部署 heapster</h3><p>heapster 部署相对简单的多，yaml 创建一下就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/grafana.yaml<br>kubectl create -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/heapster.yaml<br>kubectl create -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml<br>kubectl create -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml<br></code></pre></td></tr></table></figure><h3 id="八、部署-Dashboard"><a href="#八、部署-Dashboard" class="headerlink" title="八、部署 Dashboard"></a>八、部署 Dashboard</h3><h4 id="8-1、部署-Dashboard"><a href="#8-1、部署-Dashboard" class="headerlink" title="8.1、部署 Dashboard"></a>8.1、部署 Dashboard</h4><p>Dashboard 部署同 heapster 一样，不过为了方便访问，我设置了 NodePort，还注意到一点是 yaml 拉取策略已经没有比较傻的 <code>Always</code> 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml -O kubernetes-dashboard.yaml<br></code></pre></td></tr></table></figure><p>将最后部分的端口暴露修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ------------------- Dashboard Service ------------------- #</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dashboard-tls</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30000</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>然后执行 <code>kubectl create -f kubernetes-dashboard.yaml</code> 即可</p><h4 id="8-2、创建-admin-账户"><a href="#8-2、创建-admin-账户" class="headerlink" title="8.2、创建 admin 账户"></a>8.2、创建 admin 账户</h4><p>默认情况下部署成功后可以直接访问 <code>https://NODE_IP:30000</code> 访问，但是想要登录进去查看的话需要使用 kubeconfig 或者 access token 的方式；实际上这个就是 RBAC 授权控制，以下提供一个创建 admin access token 的脚本，更细节的权限控制比如只读用户可以参考 <a href="https://mritd.me/2018/03/20/use-rbac-to-control-kubectl-permissions/">使用 RBAC 控制 kubectl 权限</a>，RBAC 权限控制原理是一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> kubectl get sa dashboard-admin -n kube-system &amp;&gt; /dev/null;<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[33mWARNING: ServiceAccount dashboard-admin exist!\033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    kubectl create sa dashboard-admin -n kube-system<br>    kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin<br><span class="hljs-keyword">fi</span><br><br>kubectl describe secret -n kube-system $(kubectl get secrets -n kube-system | grep dashboard-admin | <span class="hljs-built_in">cut</span> -f1 -d <span class="hljs-string">&#x27; &#x27;</span>) | grep -E <span class="hljs-string">&#x27;^token&#x27;</span><br></code></pre></td></tr></table></figure><p>将以上脚本保存为 <code>create_dashboard_sa.sh</code> 执行即可，成功后访问截图如下(<strong>如果访问不了的话请检查下 iptable FORWARD 默认规则是否为 DROP，如果是将其改为 ACCEPT 即可</strong>)</p><p><img src="https://cdn.oss.link/markdown/oxmms.png" alt="create_dashboard_sa"></p><p><img src="https://cdn.oss.link/markdown/pyplb.png" alt="dashboard"></p><h3 id="九、其他说明"><a href="#九、其他说明" class="headerlink" title="九、其他说明"></a>九、其他说明</h3><h4 id="9-1、选项-label-等说明"><a href="#9-1、选项-label-等说明" class="headerlink" title="9.1、选项 label 等说明"></a>9.1、选项 label 等说明</h4><p>部署过程中注意到一些选项已经做了名称更改，比如 <code>--network-plugin-dir</code> 变更为 <code>--cni-bin-dir</code> 等，具体的那些选项做了变更请自行对比配置，以及查看官方文档；</p><p>对于 Node label <code>--node-labels=node-role.kubernetes.io/k8s-node=true</code> 这个选项，它的作用只是在 <code>kubectl get node</code> 时 ROLES 栏显示是什么节点；不过需要注意 <strong>master 上的 kubelet 不要将 <code>node-role.kubernetes.io/k8s-master=true</code> 更改成 <code>node-role.kubernetes.io/master=xxxx</code>；后面这个 <code>node-role.kubernetes.io/master</code> 是 kubeadm 用的，这个 label 会告诉 k8s 调度器当前节点为 master，从而执行一些特定动作，比如 <code>node-role.kubernetes.io/master:NoSchedule</code> 此节点将不会被分配 pod；具体参见 <a href="https://github.com/kubernetes-incubator/kubespray/issues/2108">kubespray issue</a> 以及 <a href="https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.9.md#mark-master">官方设计文档</a></strong></p><p>很多人可能会发现大约 1 小时候 <code>kubectl get csr</code> 看不到任何 csr 了，这是因为最新版本增加了 csr 清理功能，<strong>默认对于 <code>approved</code> 和 <code>denied</code> 状态的 csr 一小时后会被清理，对于 <code>pending</code> 状态的 csr 24 小时后会被清理，想问时间从哪来的请看 <a href="https://github.com/kubernetes/kubernetes/blob/fa85bf7094a8a503fede964b7038eed51360ffc7/pkg/controller/certificates/cleaner/cleaner.go#L47">代码</a>；PR issue 我忘记了，增加这个功能的起因大致就是因为当开启了证书轮换后，csr 会不断增加，所以需要增加一个清理功能</strong></p><h4 id="9-2、异常及警告说明"><a href="#9-2、异常及警告说明" class="headerlink" title="9.2、异常及警告说明"></a>9.2、异常及警告说明</h4><p>在部署过程中我记录了一些异常警告等，以下做一下统一说明</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># https://github.com/kubernetes/kubernetes/issues/42158</span><br><span class="hljs-comment"># 这个问题还没解决，PR 没有合并被关闭了，可以关注一下上面这个 issue，被关闭的 PR 在下面</span><br><span class="hljs-comment"># https://github.com/kubernetes/kubernetes/pull/49567</span><br>Failed to update statusUpdateNeeded field <span class="hljs-keyword">in</span> actual state of world: Failed to <span class="hljs-built_in">set</span> statusUpdateNeeded to needed <span class="hljs-literal">true</span>, because nodeName=...<br><br><span class="hljs-comment"># https://github.com/kubernetes/kubernetes/issues/59993</span><br><span class="hljs-comment"># 这个似乎已经解决了，没时间测试，PR 地址在下面，我大致 debug 一下 好像是 cAdvisor 的问题</span><br><span class="hljs-comment"># https://github.com/opencontainers/runc/pull/1722</span><br>Failed to get system container stats <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;/kubepods&quot;</span>: failed to get cgroup stats <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;/kubepods&quot;</span>: failed to get container info <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;/kubepods&quot;</span>: unknown containe <span class="hljs-string">&quot;/kubepods&quot;</span><br><br><span class="hljs-comment"># https://github.com/kubernetes/kubernetes/issues/58217</span><br><span class="hljs-comment"># 注意: 这个问题现在仍未解决，可关注上面的 issue，这个问题可能影响 node image gc</span><br><span class="hljs-comment"># 强烈依赖于 kubelet 做 宿主机 image gc 的需要注意一下</span><br>Image garbage collection failed once. Stats initialization may not have completed yet: failed to get imageFs info: unable to find data <span class="hljs-keyword">for</span> container /<br><br><span class="hljs-comment"># 没找到太多资料，不过感觉跟上面问题类似</span><br>failed to construct signal: <span class="hljs-string">&quot;allocatableMemory.available&quot;</span> error: system container <span class="hljs-string">&quot;pods&quot;</span> not found <span class="hljs-keyword">in</span> metrics<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">年后比较忙，所以 1.9 也没去折腾(其实就是懒)，最近刚有点时间凑巧 1.10 发布；所以就折腾一下 1.10，感觉搭建配置没有太大变化，折腾了 2 天基本算是搞定了，这里记录一下搭建过程；本文用到的被 block 镜像已经上传至 [百度云](https://pan.baidu.com/s/14W86QQ4qi8qn8JqaDMcC3g) 密码: dy5p</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Drone CI 搭建</title>
    <link href="https://mritd.com/2018/03/30/set-up-drone-ci/"/>
    <id>https://mritd.com/2018/03/30/set-up-drone-ci/</id>
    <published>2018-03-30T13:38:29.000Z</published>
    <updated>2018-03-30T13:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近感觉 GitLab CI 稍有繁琐，所以尝试了一下 Drone CI，这里记录一下搭建过程；虽然 Drone CI 看似简单，但是坑还是有不少的</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>基本环境如下:</p><ul><li>Docker: 17.09.0-ce</li><li>GitLab: 10.4.3-ce.0</li><li>Drone: 0.8.5</li></ul><p>其中 GitLab 采用 TLS 链接，为了方便使用 git 协议 clone 代码，所以 docker compose 部署时采用了 macvlan 网络获取独立 IP</p><h2 id="二、GitLab-配置"><a href="#二、GitLab-配置" class="headerlink" title="二、GitLab 配置"></a>二、GitLab 配置</h2><h3 id="2-1、GitLab-搭建"><a href="#2-1、GitLab-搭建" class="headerlink" title="2.1、GitLab 搭建"></a>2.1、GitLab 搭建</h3><p>为了测试 CI build 需要一个 GitLab 服务器以及测试项目，GitLab 这里直接采用 docker compose 启动，同时为了方便 git clone，网络使用了 macvlan 方式，macvlan 网络接口、IP 等参数请自行修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># config refs ==&gt; https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template</span><br>version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  gitlab:<br>    image: <span class="hljs-string">&#x27;gitlab/gitlab-ce:10.4.3-ce.0&#x27;</span><br>    container_name: gitlab<br>    restart: always<br>    hostname: <span class="hljs-string">&#x27;gitlab.mritd.me&#x27;</span><br>    environment:<br>      GITLAB_OMNIBUS_CONFIG: |<br>        external_url <span class="hljs-string">&#x27;https://gitlab.mritd.me&#x27;</span><br>        nginx[<span class="hljs-string">&#x27;redirect_http_to_https&#x27;</span>] = <span class="hljs-literal">true</span><br>        nginx[<span class="hljs-string">&#x27;ssl_certificate&#x27;</span>] = <span class="hljs-string">&quot;/etc/gitlab/ssl/mritd.me.cer&quot;</span><br>        nginx[<span class="hljs-string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="hljs-string">&quot;/etc/gitlab/ssl/mritd.me.key&quot;</span><br>        nginx[<span class="hljs-string">&#x27;real_ip_header&#x27;</span>] = <span class="hljs-string">&#x27;X-Real-IP&#x27;</span><br>        nginx[<span class="hljs-string">&#x27;real_ip_recursive&#x27;</span>] = <span class="hljs-string">&#x27;on&#x27;</span><br>        <span class="hljs-comment">#gitlab_rails[&#x27;ldap_enabled&#x27;] = true</span><br>        <span class="hljs-comment">#gitlab_rails[&#x27;ldap_servers&#x27;] = YAML.load &lt;&lt;-EOS # remember to close this block with &#x27;EOS&#x27; below</span><br>        <span class="hljs-comment">#main: # &#x27;main&#x27; is the GitLab &#x27;provider ID&#x27; of this LDAP server</span><br>        <span class="hljs-comment">#  ## label</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  # A human-friendly name for your LDAP server. It is OK to change the label later,</span><br>        <span class="hljs-comment">#  # for instance if you find out it is too large to fit on the web page.</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  # Example: &#x27;Paris&#x27; or &#x27;Acme, Ltd.&#x27;</span><br>        <span class="hljs-comment">#  label: &#x27;LDAP&#x27;</span><br>        <span class="hljs-comment">#  host: &#x27;mail.mritd.me&#x27;</span><br>        <span class="hljs-comment">#  port: 389 # or 636</span><br>        <span class="hljs-comment">#  uid: &#x27;uid&#x27;</span><br>        <span class="hljs-comment">#  method: &#x27;plain&#x27; # &quot;tls&quot; or &quot;ssl&quot; or &quot;plain&quot;</span><br>        <span class="hljs-comment">#  bind_dn: &#x27;uid=zimbra,cn=admins,cn=zimbra&#x27;</span><br>        <span class="hljs-comment">#  password: &#x27;PASSWORD&#x27;</span><br>        <span class="hljs-comment">#  # This setting specifies if LDAP server is Active Directory LDAP server.</span><br>        <span class="hljs-comment">#  # For non AD servers it skips the AD specific queries.</span><br>        <span class="hljs-comment">#  # If your LDAP server is not AD, set this to false.</span><br>        <span class="hljs-comment">#  active_directory: true</span><br>        <span class="hljs-comment">#  # If allow_username_or_email_login is enabled, GitLab will ignore everything</span><br>        <span class="hljs-comment">#  # after the first &#x27;@&#x27; in the LDAP username submitted by the user on login.</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  # Example:</span><br>        <span class="hljs-comment">#  # - the user enters &#x27;jane.doe@example.com&#x27; and &#x27;p@ssw0rd&#x27; as LDAP credentials;</span><br>        <span class="hljs-comment">#  # - GitLab queries the LDAP server with &#x27;jane.doe&#x27; and &#x27;p@ssw0rd&#x27;.</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  # If you are using &quot;uid: &#x27;userPrincipalName&#x27;&quot; on ActiveDirectory you need to</span><br>        <span class="hljs-comment">#  # disable this setting, because the userPrincipalName contains an &#x27;@&#x27;.</span><br>        <span class="hljs-comment">#  allow_username_or_email_login: true</span><br>        <span class="hljs-comment">#  # Base where we can search for users</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  #   Ex. ou=People,dc=gitlab,dc=example</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  base: &#x27;&#x27;</span><br>        <span class="hljs-comment">#  # Filter LDAP users</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  #   Format: RFC 4515 http://tools.ietf.org/search/rfc4515</span><br>        <span class="hljs-comment">#  #   Ex. (employeeType=developer)</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  #   Note: GitLab does not support omniauth-ldap&#x27;s custom filter syntax.</span><br>        <span class="hljs-comment">#  #</span><br>        <span class="hljs-comment">#  user_filter: &#x27;&#x27;</span><br>        <span class="hljs-comment">#EOS</span><br>        gitlab_rails[<span class="hljs-string">&#x27;log_directory&#x27;</span>] = <span class="hljs-string">&quot;/var/log/gitlab/gitlab-rails&quot;</span><br>        unicorn[<span class="hljs-string">&#x27;log_directory&#x27;</span>] = <span class="hljs-string">&quot;/var/log/gitlab/unicorn&quot;</span><br>        registry[<span class="hljs-string">&#x27;log_directory&#x27;</span>] = <span class="hljs-string">&quot;/var/log/gitlab/registry&quot;</span><br>        <span class="hljs-comment"># Below are some of the default settings</span><br>        logging[<span class="hljs-string">&#x27;logrotate_frequency&#x27;</span>] = <span class="hljs-string">&quot;daily&quot;</span> <span class="hljs-comment"># rotate logs daily</span><br>        logging[<span class="hljs-string">&#x27;logrotate_size&#x27;</span>] = nil <span class="hljs-comment"># do not rotate by size by default</span><br>        logging[<span class="hljs-string">&#x27;logrotate_rotate&#x27;</span>] = 30 <span class="hljs-comment"># keep 30 rotated logs</span><br>        logging[<span class="hljs-string">&#x27;logrotate_compress&#x27;</span>] = <span class="hljs-string">&quot;compress&quot;</span> <span class="hljs-comment"># see &#x27;man logrotate&#x27;</span><br>        logging[<span class="hljs-string">&#x27;logrotate_method&#x27;</span>] = <span class="hljs-string">&quot;copytruncate&quot;</span> <span class="hljs-comment"># see &#x27;man logrotate&#x27;</span><br>        logging[<span class="hljs-string">&#x27;logrotate_postrotate&#x27;</span>] = nil <span class="hljs-comment"># no postrotate command by default</span><br>        logging[<span class="hljs-string">&#x27;logrotate_dateformat&#x27;</span>] = nil <span class="hljs-comment"># use date extensions for rotated files rather than numbers e.g. a value of &quot;-%Y-%m-%d&quot; would give rotated files like p</span><br>        <span class="hljs-comment"># You can add overrides per service</span><br>        nginx[<span class="hljs-string">&#x27;logrotate_frequency&#x27;</span>] = nil<br>        nginx[<span class="hljs-string">&#x27;logrotate_size&#x27;</span>] = <span class="hljs-string">&quot;200M&quot;</span><br>        <span class="hljs-comment"># You can also disable the built-in logrotate service if you want</span><br>        logrotate[<span class="hljs-string">&#x27;enable&#x27;</span>] = <span class="hljs-literal">false</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_enable&#x27;</span>] = <span class="hljs-literal">true</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_address&#x27;</span>] = <span class="hljs-string">&quot;mail.mritd.me&quot;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_port&#x27;</span>] = 25<br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_user_name&#x27;</span>] = <span class="hljs-string">&quot;no-reply@mritd.me&quot;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_password&#x27;</span>] = <span class="hljs-string">&quot;PASSWORD&quot;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_domain&#x27;</span>] = <span class="hljs-string">&quot;mritd.me&quot;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_authentication&#x27;</span>] = <span class="hljs-string">&quot;login&quot;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="hljs-literal">true</span><br>        gitlab_rails[<span class="hljs-string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="hljs-string">&#x27;peer&#x27;</span><br>        <span class="hljs-comment"># If your SMTP server does not like the default &#x27;From: gitlab@localhost&#x27; you</span><br>        <span class="hljs-comment"># can change the &#x27;From&#x27; with this setting.</span><br>        gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_from&#x27;</span>] = <span class="hljs-string">&#x27;gitlab@mritd.me&#x27;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_reply_to&#x27;</span>] = <span class="hljs-string">&#x27;no-reply@mritd.me&#x27;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;initial_root_password&#x27;</span>] = <span class="hljs-string">&#x27;PASSWORD&#x27;</span><br>        gitlab_rails[<span class="hljs-string">&#x27;initial_shared_runners_registration_token&#x27;</span>] = <span class="hljs-string">&quot;iuLaUhGZYyFgTxAyZ6HbdFUZ&quot;</span><br>    networks:<br>      macvlan:<br>        ipv4_address: 172.16.0.70<br>    ports:<br>      - <span class="hljs-string">&#x27;80:80&#x27;</span><br>      - <span class="hljs-string">&#x27;443:443&#x27;</span><br>      - <span class="hljs-string">&#x27;22:22&#x27;</span><br>    volumes:<br>      - config:/etc/gitlab<br>      - logs:/var/log/gitlab<br>      - data:/var/opt/gitlab<br><br>networks:<br>  macvlan:<br>    driver: macvlan<br>    driver_opts:<br>      parent: ens18<br>    ipam:<br>      config:<br>      - subnet: 172.16.0.0/19<br><br>volumes:<br>  config:<br>  logs:<br>  data:<br></code></pre></td></tr></table></figure><h3 id="2-2、创建-Drone-App"><a href="#2-2、创建-Drone-App" class="headerlink" title="2.2、创建 Drone App"></a>2.2、创建 Drone App</h3><p>Drone CI 工作时需要接入 GitLab 以完成项目同步等功能，所以在搭建好 GitLab 后需要为其创建 Application，创建方式如下所示</p><p><img src="https://cdn.oss.link/markdown/lzm4j.png" alt="create drone app"></p><p>创建 Application 时请自行更换回调地址域名，创建好后如下所示(后续 Drone CI 需要使用这两个 key)</p><p><img src="https://cdn.oss.link/markdown/sl4yl.png" alt="drone app create success"></p><h2 id="三、Drone-服务端配置"><a href="#三、Drone-服务端配置" class="headerlink" title="三、Drone 服务端配置"></a>三、Drone 服务端配置</h2><h3 id="3-1、Drone-CI-搭建"><a href="#3-1、Drone-CI-搭建" class="headerlink" title="3.1、Drone CI 搭建"></a>3.1、Drone CI 搭建</h3><p>Drone CI 服务器与 GitLab 等传统 CI 相似，都是 CS 模式，为了方便测试这里将 Agent 与 Server 端都放在一个 docker compose 中启动；docker compose 配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">&#x27;3&#x27;</span><br><br>services:<br>  drone-server:<br>    image: drone/drone:0.8-alpine<br>    container_name: drone-server<br><br>    ports:<br>      - 8000:8000<br>      - 9000:9000<br>    volumes:<br>      - data:/var/lib/drone/<br>    restart: always<br>    environment:<br>      - DRONE_OPEN=<span class="hljs-literal">true</span><br>      - DRONE_ADMIN=drone,mritd<br>      - DRONE_HOST=https://drone.mritd.me<br>      - DRONE_GITLAB=<span class="hljs-literal">true</span><br>      - DRONE_GITLAB_PRIVATE_MODE=<span class="hljs-literal">true</span><br>      - DRONE_GITLAB_URL=https://gitlab.mritd.me<br>      - DRONE_GITLAB_CLIENT=76155ab75bafd73d4ebfe0a02d9d6284a032f7d8667d558e3f929a64805d1fa1<br>      - DRONE_GITLAB_SECRET=6957b06f53b80d4dd17051ceb36f9139ae83b9077e345a404f476e317b0c8f3d<br>      - DRONE_SECRET=XsJnj4DmzuXBKkcgHeUAJQxq<br><br>  drone-agent:<br>    image: drone/agent:0.8<br>    container_name: drone-agent<br>    <span class="hljs-built_in">command</span>: agent<br>    restart: always<br>    volumes:<br>      - /var/run/docker.sock:/var/run/docker.sock<br>    environment:<br>      - DRONE_SERVER=172.16.0.36:9000<br>      - DRONE_SECRET=XsJnj4DmzuXBKkcgHeUAJQxq<br><br>volumes:<br>  data:<br></code></pre></td></tr></table></figure><p>docker compose 中 <code>DRONE_GITLAB_CLIENT</code> 为 GitLab 创建 Application 时的 <code>Application Id</code>，<code>DRONE_GITLAB_SECRET</code> 为 <code>Secret</code>；其他环境变量解释如下:</p><ul><li>DRONE_OPEN: 是否允许开放注册</li><li>DRONE_ADMIN: 注册后的管理员用户</li><li>DRONE_HOST: Server 地址</li><li>DRONE_GITLAB: 声明 Drone CI 对接为 GitLab</li><li>DRONE_GITLAB_PRIVATE_MODE: GitLab 私有化部署</li><li>DRONE_GITLAB_URL: GitLab 地址</li><li>DRONE_SECRET: Server 端认证秘钥，Agent 连接时需要</li></ul><p>实际上 Agent 可以与 Server 分离部署，不过需要注意 Server 端 9000 端口走的是 grpc 协议基于 HTTP2，nginx 等反向代理时需要做好对应处理</p><p>搭建成功这里外面套了一层 nginx 用来反向代理 Drone Server 的 8000 端口，Nginx 配置如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sh">upstream drone&#123;<br>    server 172.16.0.36:8000;<br>&#125;<br>server &#123;<br>    listen 80;<br>    listen [::]:80;<br>    server_name drone.mritd.me;<br><br>    <span class="hljs-comment"># Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.</span><br>    <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br>server &#123;<br>    listen 443 ssl http2;<br>    listen [::]:443 ssl http2;<br>    server_name drone.mritd.me;<br><br>    <span class="hljs-comment"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span><br>    ssl_certificate /etc/nginx/ssl/mritd.me.cer;<br>    ssl_certificate_key /etc/nginx/ssl/mritd.me.key;<br>    ssl_session_timeout 1d;<br>    ssl_session_cache shared:SSL:50m;<br>    ssl_session_tickets off;<br>    <br>    <span class="hljs-comment"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span><br>    ssl_dhparam /etc/nginx/ssl/dhparam.pem;<br><br>    <span class="hljs-comment"># intermediate configuration. tweak to your needs.</span><br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_ciphers <span class="hljs-string">&#x27;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:EC</span><br><span class="hljs-string">DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES2</span><br><span class="hljs-string">56-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:D</span><br><span class="hljs-string">HE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES</span><br><span class="hljs-string">256-SHA:DES-CBC3-SHA:!DSS&#x27;</span>;<br>    ssl_prefer_server_ciphers on;<br><br>    <span class="hljs-comment"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span><br>    add_header Strict-Transport-Security max-age=15768000;<br><br>    <span class="hljs-comment"># OCSP Stapling ---</span><br>    <span class="hljs-comment"># fetch OCSP records from URL in ssl_certificate and cache them</span><br>    ssl_stapling on;<br>    ssl_stapling_verify on;<br><br>    <span class="hljs-comment">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span><br>    ssl_trusted_certificate /etc/nginx/ssl/mritd-ca.cer;<br><br>    <span class="hljs-comment">#resolver &lt;IP DNS resolver&gt;;</span><br><br>    location / &#123;<br><br>        log_not_found on;<br><br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br><br>        proxy_pass http://drone;<br>        proxy_redirect off;<br>        proxy_http_version 1.1;<br>        proxy_buffering off;<br><br>        chunked_transfer_encoding off;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后访问 <code>https://YOUR_DRONE_SERVER</code> 将会自动跳转到 GitLab Auth2 授权界面，授权登录即可；随后将会返回 Drone CI 界面，界面上会列出相应的项目列表，点击后面的开关按钮来开启对应项目的 Drone CI 服务</p><p><img src="https://cdn.oss.link/markdown/6u4fk.png" alt="drone ci project list"></p><h3 id="3-2、创建示例项目"><a href="#3-2、创建示例项目" class="headerlink" title="3.2、创建示例项目"></a>3.2、创建示例项目</h3><p>这里的示例项目为 Java 项目，采用 Gradle 构建，项目整体结构如下所示，源码可以从 <a href="">GitHub</a> 下载</p><p><img src="https://cdn.oss.link/markdown/ybrjc.png" alt="drone test project"></p><p>将此项目推送到 GitLab 就会触发 Drone CI 自动构建(第一次肯定构建失败，具体看下面配置)</p><h3 id="3-3、Drone-CLI"><a href="#3-3、Drone-CLI" class="headerlink" title="3.3、Drone CLI"></a>3.3、Drone CLI</h3><p>这里不得不说一下官方文档真的很烂，有些东西只能自己摸索，而且各种错误提示也是烂的不能再烂，经常遇到 <code>Client Error 404:</code> 这种错误，后面任何提示信息也没有；官方文档中介绍了有些操作只能通过 cli 执行，CLI 下载需要到 GitHub 下载页下载，地址 <a href="https://github.com/drone/drone-cli/releases">点这里</a></p><p>cli 工具下载后需要进行配置，目前只支持读取环境变量，使用前需要 <code>export</code> 以下两个变量</p><ul><li>DRONE_SERVER: Drone CI 地址</li><li>DRONE_TOKEN: cli 控制 Server 端使用的用户 Token</li></ul><p>其中 Token 可以在用户设置页面找到，如下</p><p><img src="https://cdn.oss.link/markdown/5fkvi.png" alt="drone user token"></p><p>配置好以后就可以使用 cli 操作 CI Server 了</p><h3 id="3-4、Drone-CI-配置文件"><a href="#3-4、Drone-CI-配置文件" class="headerlink" title="3.4、Drone CI 配置文件"></a>3.4、Drone CI 配置文件</h3><p>Drone CI 对一个项目进行 CI 构建取决于两个因素，第一必须保证该项目在 Drone 控制面板中开启了构建(构建按钮开启)，第二保证项目根目录下存在 <code>.drone.yml</code>；满足这两点后每次提交 Drone 就会根据 <code>.drone.yml</code> 中配置进行按步骤构建；本示例中 <code>.drone.yml</code> 配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">clone</span>:<br>  git:<br>    image: plugins/git<br><br>pipeline:<br><br>  backend:<br>    image: reg.mritd.me/base/build:2.1.5<br>    commands:<br>      - gradle --no-daemon clean assemble<br>    when:<br>      branch:<br>        event: [ push, pull_request ]<br>        include: [ master ]<br>        exclude: [ develop ]<br><br><span class="hljs-comment">#  rebuild-cache:</span><br><span class="hljs-comment">#    image: drillster/drone-volume-cache</span><br><span class="hljs-comment">#    rebuild: true</span><br><span class="hljs-comment">#    mount:</span><br><span class="hljs-comment">#      - ./build</span><br><span class="hljs-comment">#    volumes:</span><br><span class="hljs-comment">#      - /data/drone/$DRONE_COMMIT_SHA:/cache</span><br><br>  docker:<br>    image: mritd/docker-kubectl:v1.8.8<br>    commands:<br>      - bash build_image.sh<br>    volumes:<br>      - /var/run/docker.sock:/var/run/docker.sock<br><br><br><br><span class="hljs-comment"># Pipeline Conditions</span><br>branches:<br>  include: [ master, feature/* ]<br>  exclude: [ develop, <span class="hljs-built_in">test</span>/* ]<br></code></pre></td></tr></table></figure><p>Drone CI 配置文件为 docker compose 的超集，<strong>Drone CI 构建思想是使用不同的阶段定义完成对 CI 流程的整体划分，然后每个阶段内定义不同的任务(task)，这些任务所有操作无论是 build、package 等全部由单独的 Docker 镜像完成，同时以 <code>plugins</code> 开头的 image 被解释为内部插件；其他的插件实际上可以看做为标准的 Docker image</strong></p><p>第一段 <code>clone</code> 配置声明了源码版本控制系统拉取方式，具体参见 <a href="http://docs.drone.io/cloning">cloning</a>部分，定义后 Drone CI 将自动拉取源码</p><p>此后的 <code>pipeline</code> 配置段为定义整个 CI 流程段，该段中可以自定义具体 task，比如后端构建可以取名字为 <code>backend</code>，前端构建可以叫做 <code>frontend</code>；中间可以穿插辅助的如打包 docker 镜像等 task；同 GitLab CI 一样，Agent 在使用 Docker 进行构建时必然涉及到拉取私有镜像，Drone CI 想要拉取私有镜像目前仅能通过 cli 命令行进行设置，而且仅针对项目级设置(全局需要企业版…这也行)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">drone registry add --repository drone/DroneCI-TestProject --hostname reg.mritd.me --username gitlab --password 123456<br></code></pre></td></tr></table></figure><p>在构建时需要注意一点，Drone CI 不同的 task 之间共享源码文件，<strong>也就是说如果你在第一个 task 中对源码或者编译后的发布物做了什么更改，在下一个 task 中同样可见，Drone CI 并没有 GitLab CI 在每个 task 中都进行还原的机制</strong></p><p>除此之外，某些特殊性的挂载行为默认也是不被允许的，需要在 Drone CI 中对项目做 <code>Trusted</code> 设置</p><p><img src="https://cdn.oss.link/markdown/gd60v.png" alt="Drone Project Trusted Setting"></p><h2 id="四、与-GitLab-CI-对比"><a href="#四、与-GitLab-CI-对比" class="headerlink" title="四、与 GitLab CI 对比"></a>四、与 GitLab CI 对比</h2><p>写到这里基本接近尾声了，可能常看我博客的人现在想喷我，这篇文章确实有点水…因为我真不推荐用这玩意，未来发展倒是不确定；下面对比一下与 GitLab CI 的区别</p><p>先说一下 Drone CI 的优点，Drone CI 更加轻量级，而且也支持 HA 等设置，配置文件使用 docker compose 的方式对于玩容器多的人确实很爽，启动速度等感觉也比 GitLab CI 要快；而且我个人用 GitLab CI Docker build 的方式时也是尽量将不同功能交给不同的镜像，通过切换镜像实现不同的功能；这个思想在 Drone CI 中表现的非常明显</p><p>至于 Drone CI 的缺点，目前我最大的吐槽就是文档烂，报错烂；很多时候搞得莫名其妙，比如上来安装讲的那个管理员账户配置，我现在也没明白怎么能关闭注册启动然后添加用户(可能是我笨)；还有就是报错问题，感觉就像写代码不打 log 一样，比如 CI Server 在没有 agent 链接时，如果触发了 build 任务，Drone CI 不会报错，只会在任务上显示一个小闹钟，也没有超时…我傻傻的等了 1 小时；其他的比如全局变量、全局加密参数等都需要企业版才能支持，同时一些细节东西也缺失，比如查看当前 Server 连接的 Agent，对 Agent 打标签实现不同 task 分配等等</p><p>总结: Drone CI 目前还是个小玩具阶段，与传统 CI 基本没有抗衡之力，文档功能呢也是缺失比较严重，出问题很难排查</p>]]></content>
    
    
    <summary type="html">最近感觉 GitLab CI 稍有繁琐，所以尝试了一下 Drone CI，这里记录一下搭建过程；虽然 Drone CI 看似简单，但是坑还是有不少的</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    <category term="CI/CD" scheme="https://mritd.com/categories/docker/ci-cd/"/>
    
    
    <category term="CI/CD" scheme="https://mritd.com/tags/ci-cd/"/>
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Drone" scheme="https://mritd.com/tags/drone/"/>
    
  </entry>
  
  <entry>
    <title>Unix 平台下各种加速配置</title>
    <link href="https://mritd.com/2018/03/28/unix-proxy-setting/"/>
    <id>https://mritd.com/2018/03/28/unix-proxy-setting/</id>
    <published>2018-03-28T14:09:57.000Z</published>
    <updated>2018-03-28T14:09:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要阐述在 *Uinx 平台下，各种常用开发工具的加速配置，<strong>加速前提是你需要有一个能够加速的 socks5 端口，常用工具请自行搭建</strong>；本文档包括 docker、terminal、git、chrome 常用加速配置，其他工具可能后续补充</p></blockquote><h3 id="一、加速类型"><a href="#一、加速类型" class="headerlink" title="一、加速类型"></a>一、加速类型</h3><p>目前大部分工具在原始版本都是只提供 socks5 加速，常用平台一些工具已经支持手动设置加速端口，如 telegram、mega 同步客户端等等；但是某些工具并不支持 socks5，通用的加速目前各个平台只支持 http、https 设置(包括 terminal 下)；<strong>综上所述，在设置之前你至少需要保证有一个 socks5 端口能够进行加速，然后根据以下教程将 socks5 转换成 http，最后配置各个软件或系统的加速方式为 http，这也是我们常用的某些带有图形化客户端实际的背后实现</strong></p><h3 id="二、socks5-to-http"><a href="#二、socks5-to-http" class="headerlink" title="二、socks5 to http"></a>二、socks5 to http</h3><p>sock5 转 http 这里采用 privoxy 进行转换，根据各个平台不同，安装方式可能不同，主要就是包管理器的区别，以下只列举 Ubuntu、Mac 下的命令，其他平台自行 Google</p><ul><li>Mac: <code>brew install privoxy</code></li><li>Ubuntu: <code>apt-get -y install privoxy</code></li></ul><p>安装成功后，需要修改配置以指定 socks5 端口以及不代理的白名单，配置文件位置如下:</p><ul><li>Mac: <code>/usr/local/etc/privoxy/config</code></li><li>Ubuntu: <code>/etc/privoxy/config</code></li></ul><p>在修改之前请备份默认配置文件，这是个好习惯，备份后修改内容如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 转发地址</span><br>forward-socks5   /               127.0.0.1:1080 .<br><span class="hljs-comment"># 监听地址</span><br>listen-address  localhost:8118<br><span class="hljs-comment"># local network do not use proxy</span><br>forward         192.168.*.*/     .<br>forward            10.*.*.*/     .<br>forward           127.*.*.*/     .<br></code></pre></td></tr></table></figure><p><strong>其中 <code>127.0.0.1:1080</code> 为你的 socks5 ip 及 端口，<code>localhost:8118</code> 为你转换后的 http 监听地址和端口</strong>；配置完成后启动 privoxy 即可，启动命令如下:</p><ul><li>Mac: <code>brew services start privoxy</code></li><li>Ubuntu: <code>systemctl start privoxy</code></li></ul><h3 id="三、Docker-加速拉取-gcr-io-镜像"><a href="#三、Docker-加速拉取-gcr-io-镜像" class="headerlink" title="三、Docker 加速拉取 gcr.io 镜像"></a>三、Docker 加速拉取 gcr.io 镜像</h3><p>对于 docker 来说，terminal 下执行 <code>docker pull</code> 等命令实质上都是通过调用 docker daemon 操作的；而 docker daemon 是由 systemd 启动的(就目前来讲，别跟我掰什么 service start…)；对于 docker daemon 来说，一旦它启动以后就不会再接受加速设置，所以我们需要在 systemd 的 service 配置中配置它的加速。</p><p>目前 docker daemon 接受标准的终端加速设置(读取 <code>http_proxy</code>、<code>https_proxy</code>)，同时也支持 socks5 加速；为了保证配置清晰方便修改，这里采用创建单独配置文件的方式来配置 daemon 的 socks5 加速，配置脚本如下(Ubuntu、CentOS):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">set</span> -e<br><br>OS_TYPE=<span class="hljs-variable">$1</span><br>PROXY_ADDRESS=<span class="hljs-variable">$2</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_ADDRESS&#125;</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mError: PROXY_ADDRESS is blank!\033[0m&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mUse: sudo <span class="hljs-variable">$0</span> centos|ubuntu 1.2.3.4:1080\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;OS_TYPE&#125;</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31mError: OS_TYPE is blank!\033[0m&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32mUse: sudo <span class="hljs-variable">$0</span> centos|ubuntu\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;OS_TYPE&#125;</span>&quot;</span> == <span class="hljs-string">&quot;centos&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> /etc/systemd/system/docker.service.d || <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">tee</span> /etc/systemd/system/docker.service.d/socks5-proxy.conf &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Environment=&quot;ALL_PROXY=socks5://$&#123;PROXY_ADDRESS&#125;&quot;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;OS_TYPE&#125;</span>&quot;</span> == <span class="hljs-string">&quot;ubuntu&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> /lib/systemd/system/docker.service.d || <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">tee</span> /lib/systemd/system/docker.service.d/socks5-proxy.conf &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Environment=&quot;ALL_PROXY=socks5://$&#123;PROXY_ADDRESS&#125;&quot;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">fi</span><br><br>systemctl daemon-reload<br>systemctl restart docker<br>systemctl show docker --property Environment<br></code></pre></td></tr></table></figure><p>将该脚本内容保存为 <code>docker_proxy.sh</code>，终端执行 <code>bash docker_proxy.sh ubuntu 1.2.3.4:1080</code> 即可(自行替换 socks5 地址)；脚本实际上很简单，就是创建一个与 <code>docker.service</code> 文件同级的 <code>docker.service.d</code> 目录，然后在里面写入一个 <code>socks5-proxy.conf</code>，配置内容只有两行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Service]<br>Environment=<span class="hljs-string">&quot;ALL_PROXY=socks5://1.2.3.4:1080</span><br></code></pre></td></tr></table></figure><p>这样 systemd 会自动读取，只需要 reload 一下，然后 restart docker daemon 即可，此后  docker 就可以通过加速端口直接 pull <code>gcr.io</code> 的镜像；<strong>注意: 配置加速后，docker 将无法 pull 私服镜像(一般私服都是内网 DNS 解析)，但是不会影响容器启动以及启动后的容器中的网络</strong></p><h3 id="四、Chrome-加速访问"><a href="#四、Chrome-加速访问" class="headerlink" title="四、Chrome 加速访问"></a>四、Chrome 加速访问</h3><p>对于 Chrome 浏览器来说，目前有比较好的插件实现用来配置根据策略的加速访问；这里使用的插件为 <code>SwitchyOmega</code></p><h4 id="4-1、SwitchyOmega-下载"><a href="#4-1、SwitchyOmega-下载" class="headerlink" title="4.1、SwitchyOmega 下载"></a>4.1、SwitchyOmega 下载</h4><p>默认情况下 <code>SwitchyOmega</code> 可以通过 Chrome 进行在线安装，但是众所周知的原因这是不可能的，不过国内有一些网站提供代理下载 Chrome 扩展的服务，如 <code>https://chrome-extension-downloader.com</code>、<code>http://yurl.sinaapp.com/crx.php</code>，这些网站只需要提供插件 ID 即可帮你下载下来；**<code>SwitchyOmega</code> 插件的 ID 为 <code>padekgcemlokbadohgkifijomclgjgif</code>，注意下载时不要使用 chrome 下载，因为他自身的防护机制会阻止你下载扩展程序**；下载后打开 chrome 的扩展设置页，将 crx 文件拖入安装即可，如下所示:</p><p><img src="https://cdn.oss.link/markdown/zruoq.png" alt="install chrome plugin"></p><h4 id="4-2、SwitchyOmega-配置"><a href="#4-2、SwitchyOmega-配置" class="headerlink" title="4.2、SwitchyOmega 配置"></a>4.2、SwitchyOmega 配置</h4><p>SwitchyOmega 安装成功后在 Chrome 右上角有显示，右键点击该图标，进入选项设置后如下所示:</p><p><img src="https://cdn.oss.link/markdown/ouh48.png" alt="SwitchyOmega detail"></p><p>默认情况下左侧只有两个加速模式，一个叫做 <code>proxy</code> 另一个叫做 <code>autoproxy</code>；根据加速模式不同 SwitchyOmega 在浏览网页时选择的加速通道也不同，不同的加速方式可以通过点击 <strong>新建情景模式</strong> 按钮创建，下面介绍一下常用的两种情景模式:</p><p><strong>代理服务器:</strong> 这种情景模式创建后需要填写一个代理地址，该地址可以是 http(s)&#x2F;socks5(4) 类型；创建成功后，浏览器右上角切换到该情景模式，<strong>浏览器访问所有网页的流量全部通过该代理地址发出</strong>，不论你是访问百度还是 Google</p><p> <img src="https://cdn.oss.link/markdown/idbi4.png" alt="create test proxy1"></p><p> <img src="https://cdn.oss.link/markdown/52m7b.png" alt="create test proxy2"></p><p><strong>自动切换模式:</strong> 这种情景模式并不需要填写实际的代理地址，而是需要填写一些规则；创建完成后插件中选择此种情景模式时，浏览器访问所有网页流量会根据填写的规则自动路由，然后选择合适的代理情景模式；可以实现智能切换代理</p><p> <img src="https://cdn.oss.link/markdown/7u6mv.png" alt="create test auto proxy1"></p><p> <img src="https://cdn.oss.link/markdown/m5x36.png" alt="create test auto proxy2"></p><p>综上所述，首先应该创建(或者修改默认的 proxy 情景模式)一个代理服务器的情景模式，然后填写好你的加速 IP 和对应的协议端口；接下来在浏览器中切换到该情景模式尝试访问 kubenretes.io 等网站测试加速效果；成功后再次新建一个自动切换情景模式，**保证 <code>规则列表规则</code> 一栏后面的下拉列表对应到你刚刚创建的代理服务器情景模式，<code>默认情景模式</code> 后面的下拉列表对应到直接连接情景模式，然后点击下面的 <code>添加规则列表</code> 按钮，选择 <code>AutoProxy</code> 单选框，<code>规则列表网址</code> 填写 <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>(这是一个开源项目收集的需要加速的网址列表)**；最后在浏览器中切换到自动切换情景模式，然后访问 kubernetes.io、baidu.com 等网站测试是否能自动切换情景模式</p><h3 id="五、Terminal-加速"><a href="#五、Terminal-加速" class="headerlink" title="五、Terminal 加速"></a>五、Terminal 加速</h3><h4 id="5-1、脚本方式"><a href="#5-1、脚本方式" class="headerlink" title="5.1、脚本方式"></a>5.1、脚本方式</h4><p>对于终端下的应用程序，百分之九十的程序都会识别 <code>http_proxy</code> 和 <code>https_proxy</code> 两个变量；所以终端加速最简单的方式就是在执行命令前声明这两个变量即可，为了方便起见也可以写个小脚本，示例如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">tee</span> /usr/local/bin/proxy &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">http_proxy=http://1.2.3.4:8118 https_proxy=http://1.2.3.4:8118 \$*</span><br><span class="hljs-string">EOF</span><br><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/proxy<br></code></pre></td></tr></table></figure><p>将上面的地址自行更换成你的 http 加速地址后，终端运行 <code>proxy curl ip.cn</code> 即可测试加速效果</p><h4 id="5-2、proxychains-ng"><a href="#5-2、proxychains-ng" class="headerlink" title="5.2、proxychains-ng"></a>5.2、proxychains-ng</h4><p>proxychains-ng 是一个终端下的工具，它可以 hook libc 下的网络相关方法实现加速效果；目前支持后端为 http(s)&#x2F;socks5(4a)，前段协议仅支持对 TCP 加速；</p><p>Mac 下安装方式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install proxychains-ng<br></code></pre></td></tr></table></figure><p>Ubuntu 等平台下需要手动编译安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装编译依赖</span><br>apt-get -y install gcc make git<br><br><span class="hljs-comment"># 下载源码</span><br>git <span class="hljs-built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git<br><br><span class="hljs-comment"># 编译安装</span><br><span class="hljs-built_in">cd</span> /proxychains-ng<br>./configure --prefix=/usr --sysconfdir=/etc<br>sudo make install<br>sudo make install-config<br></code></pre></td></tr></table></figure><p>安装完成后编辑配置使用即可，Mac 下配置位于 <code>/usr/local/etc/proxychains.conf</code>，Ubuntu 下配置位于 <code>/etc/proxychains.conf</code>；配置修改如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 主要修改 [ProxyList] 下的加速地址</span><br>[ProxyList]<br>socks5 1.2.3.4 1080<br></code></pre></td></tr></table></figure><p>然后命令行使用 <code>proxychains4 curl ip.cn</code> 测试即可</p><h3 id="六、Git-加速"><a href="#六、Git-加速" class="headerlink" title="六、Git 加速"></a>六、Git 加速</h3><p>目前 Git 的协议大致上只有三种 <code>https</code>、<code>ssh</code> 和 <code>git</code>，对于使用 <code>https</code> 方式进行 clone 和 push 操作时，可以使用第五部分 Terminal 加速方案即可实现对 Git 的加速；对于 <code>ssh</code>、<code>git</code> 协议，实际上都在调用 ssh 协议相关进行通讯(具体细节请 Google，这里的描述可能不精准)，此时同样可以使用 <code>proxychains-ng</code> 进行加速，**不过需要注意 <code>proxychains-ng</code> 要自行编译安装，同时 <code>./configure</code> 增加 <code>--fat-binary</code> 选项，具体参考 <a href="https://github.com/rofl0r/proxychains-ng/issues/109">GitHub Issue</a>**；<code>ssh</code>、<code>git</code> 由于都在调用 ssh 协议进行通讯，所以实际上还可以通过设置 ssh 的 <code>ProxyCommand</code> 来实现，具体操作如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">tee</span> /usr/local/bin/proxy-wrapper &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">nc -x1.2.3.4:1080 -X5 \$*</span><br><span class="hljs-string">#connect-proxy -S 1.2.3.4:1080 \$*</span><br><span class="hljs-string">EOF</span><br><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/proxy-wrapper<br><br>sudo <span class="hljs-built_in">tee</span> ~/.ssh/config &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">Host github.com</span><br><span class="hljs-string">    ProxyCommand /usr/local/bin/proxy-wrapper &#x27;%h %p&#x27;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>需要注意: <strong>nc 命令是 netcat-openbsd 版本，Mac 下默认提供，Ubuntu 下需要使用 <code>apt-get install -y netcat-openbsd</code> 安装；CentOS 没有 netcat-openbsd，需要安装 EPEL 源，然后安装 connect-proxy 包，使用 connect-proxy 命令替代</strong></p>]]></content>
    
    
    <summary type="html">本文主要阐述在 *Uinx 平台下，各种常用开发工具的加速配置，**加速前提是你需要有一个能够加速的 socks5 端口，常用工具请自行搭建**；本文档包括 docker、terminal、git、chrome 常用加速配置，其他工具可能后续补充</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 RBAC 控制 kubectl 权限</title>
    <link href="https://mritd.com/2018/03/20/use-rbac-to-control-kubectl-permissions/"/>
    <id>https://mritd.com/2018/03/20/use-rbac-to-control-kubectl-permissions/</id>
    <published>2018-03-20T15:58:37.000Z</published>
    <updated>2018-03-20T15:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没写文章了，过年以后就有点懒… 最近也在学习 golang，再加上不断造轮子所以没太多时间；凑巧最近想控制一下 kubectl 权限，这里便记录一下。</p></blockquote><h3 id="一、RBAC-相关"><a href="#一、RBAC-相关" class="headerlink" title="一、RBAC 相关"></a>一、RBAC 相关</h3><p>相信现在大部分人用的集群已经都是 1.6 版本以上，而且在安装各种组件的时候也已经或多或少的处理过 RBAC 的东西，所以这里不做太细节性的讲述，RBAC 文档我以前胡乱翻译过一篇，请看 <a href="https://mritd.me/2017/07/17/kubernetes-rbac-chinese-translation/">这里</a>，以下内容仅说主要的</p><h4 id="1-1、RBAC-用户角色相关"><a href="#1-1、RBAC-用户角色相关" class="headerlink" title="1.1、RBAC 用户角色相关"></a>1.1、RBAC 用户角色相关</h4><p>我在第一次接触 Kubernetes RBAC 的时候，对于基于角色控制权限这种做法是有了解的，基本结构主要就是三个:</p><ul><li>权限: 即对系统中指定资源的增删改查权限</li><li>角色: 将一定的权限组合在一起产生权限组，如管理员角色</li><li>用户: 具体的使用者，具有唯一身份标识(ID)，其后与角色绑定便拥有角色的对应权限</li></ul><p>但是翻了一会文档，最晕的就是 <strong>这个用户标识(ID)存在哪</strong>，因为传统的授权模型都是下面这样</p><p><img src="https://cdn.oss.link/markdown/sn1qp.png" alt="ctrole"></p><p>不论怎样，在进行授权时总要有个地方存放用户信息(DB&#x2F;文件)，但是在 Kubernetes 里却没找到；后来翻阅文档，找到<a href="https://kubernetes.io/docs/admin/authentication/">这么一段</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Normal users are assumed <span class="hljs-built_in">to</span> be managed <span class="hljs-keyword">by</span> <span class="hljs-keyword">an</span> outside, independent service. An admin distributing <span class="hljs-keyword">private</span> <span class="hljs-built_in">keys</span>, <span class="hljs-keyword">a</span> user store like Keystone <span class="hljs-keyword">or</span> Google Accounts, even <span class="hljs-keyword">a</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> list <span class="hljs-keyword">of</span> usernames <span class="hljs-keyword">and</span> passwords.<br></code></pre></td></tr></table></figure><p><strong>也就是说，Kubernetes 是不负责维护存储用户数据的；对于 Kubernetes 来说，它识别或者说认识一个用户主要就几种方式</strong></p><ul><li>X509 Client Certs: 使用由 k8s 根 CA 签发的证书，提取 O 字段</li><li>Static Token File: 预先在 API Server 放置 Token 文件(bootstrap 阶段使用过)</li><li>Bootstrap Tokens: 一种在集群内创建的 Bootstrap 专用 Token(新的 Bootstarp 推荐)</li><li>Static Password File: 跟静态 Token 类似</li><li>Service Account Tokens: 使用 Service Account 的 Token</li></ul><p>其他不再一一列举，具体请看文档 <a href="https://kubernetes.io/docs/admin/authentication/">Authenticating</a>；了解了这些，后面我们使用 RBAC 控制 kubectl 权限的时候就要使用如上几种方法创建对应用户</p><h4 id="1-2、RBAC-权限相关"><a href="#1-2、RBAC-权限相关" class="headerlink" title="1.2、RBAC 权限相关"></a>1.2、RBAC 权限相关</h4><p>RBAC 权限定义部分主要有三个层级</p><ul><li>apiGroups: 指定那个 API 组下的权限</li><li>resources: 该组下具体资源，如 pod 等</li><li>verbs: 指对该资源具体执行哪些动作</li></ul><p>定义一组权限(角色)时要根据其所需的真正需求做最细粒度的划分</p><h3 id="二、创建一个只读的用户"><a href="#二、创建一个只读的用户" class="headerlink" title="二、创建一个只读的用户"></a>二、创建一个只读的用户</h3><h4 id="2-1、创建用户"><a href="#2-1、创建用户" class="headerlink" title="2.1、创建用户"></a>2.1、创建用户</h4><p>首先根据上文可以得知，Kubernetes 不存储用户具体细节信息，也就是说只要通过它的那几种方式能进来的用户，Kubernetes 就认为它是合法的；那么为了让 kubectl 只读，所以我们需要先给它创建一个用来承载只读权限的用户；这里用户创建我们选择使用证书方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 首先先创建一个用于签发证书的 json(证书创建使用 cfssl)</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;readonly&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;develop:readonly&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;develop&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>然后基于以 Kubernetes CA 证书创建只读用户的证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --ca /etc/kubernetes/ssl/k8s-root-ca.pem \<br>              --ca-key /etc/kubernetes/ssl/k8s-root-ca-key.pem \<br>              --config k8s-gencert.json \<br>              --profile kubernetes readonly.json | \<br>              cfssljson --bare <span class="hljs-built_in">readonly</span><br></code></pre></td></tr></table></figure><p>以上命令会生成 <code>readonly-key.pem</code>、<code>readonly.pem</code> 两个证书文件以及一个 csr 请求文件</p><h4 id="2-2、创建-kubeconfig"><a href="#2-2、创建-kubeconfig" class="headerlink" title="2.2、创建 kubeconfig"></a>2.2、创建 kubeconfig</h4><p>有了用于证明身份的证书以后，接下来创建一个 kubeconfig 文件方便 kubectl 使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>KUBE_API_SERVER=<span class="hljs-string">&quot;https://172.16.0.18:6443&quot;</span><br>CERT_DIR=<span class="hljs-variable">$&#123;2:-&quot;/etc/kubernetes/ssl&quot;&#125;</span><br><br>kubectl config set-cluster default-cluster --server=<span class="hljs-variable">$&#123;KUBE_API_SERVER&#125;</span> \<br>    --certificate-authority=<span class="hljs-variable">$&#123;CERT_DIR&#125;</span>/k8s-root-ca.pem \<br>    --embed-certs=<span class="hljs-literal">true</span> \<br>    --kubeconfig=readonly.kubeconfig<br><br>kubectl config set-credentials develop-readonly \<br>    --certificate-authority=<span class="hljs-variable">$&#123;CERT_DIR&#125;</span>/k8s-root-ca.pem \<br>    --embed-certs=<span class="hljs-literal">true</span> \<br>    --client-key=readonly-key.pem \<br>    --client-certificate=readonly.pem \<br>    --kubeconfig=readonly.kubeconfig<br><br>kubectl config set-context default-system --cluster=default-cluster \<br>    --user=develop-readonly \<br>    --kubeconfig=readonly.kubeconfig<br><br>kubectl config use-context default-system --kubeconfig=readonly.kubeconfig<br></code></pre></td></tr></table></figure><p>这条命令会将证书也写入到 readonly.kubeconfig 配置文件中，将该文件放在 <code>~/.kube/config</code> 位置，kubectl 会自动读取</p><h4 id="2-3、创建-ClusterRole"><a href="#2-3、创建-ClusterRole" class="headerlink" title="2.3、创建 ClusterRole"></a>2.3、创建 ClusterRole</h4><p>本示例创建的只读用户权限范围为 Cluster 集群范围，所以先创建一个只读权限的 ClusterRole；创建 ClusterRole 不知道都有哪些权限的话，最简单的办法是将集群的 admin ClusterRole 保存出来，然后做修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 导出 admin ClusterRole</span><br>kubectl get clusterrole admin -o yaml &gt; readonly.yaml<br></code></pre></td></tr></table></figure><p>这个 admin ClusterRole 是默认存在的，导出后我们根据自己需求修改就行；最基本的原则就是像 update、delete 这种权限必须删掉(我们要创建只读用户)，修改后如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-readonly</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/attach</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/exec</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/portforward</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/proxy</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers/scale</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">serviceaccounts</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services/proxy</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">bindings</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">events</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">limitranges</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces/status</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/log</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/status</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicationcontrollers/status</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">resourcequotas/status</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apps</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments/rollback</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments/scale</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">autoscaling</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">horizontalpodautoscalers</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">batch</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cronjobs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jobs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">scheduledjobs</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">extensions</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">daemonsets</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deployments</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ingresses</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">replicasets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><p>最后执行 <code>kubectl create -f readonly.yaml</code> 创建即可</p><h4 id="2-4、创建-ClusterRoleBinding"><a href="#2-4、创建-ClusterRoleBinding" class="headerlink" title="2.4、创建 ClusterRoleBinding"></a>2.4、创建 ClusterRoleBinding</h4><p>用户已经创建完成，集群权限也有了，接下来使用 ClusterRoleBinding 绑定到一起即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-readonly</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-readonly</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">develop:readonly</span><br></code></pre></td></tr></table></figure><p>将以上保存为 <code>readonly-bind.yaml</code> 执行 <code>kubectl create -f readonly-bind.yaml</code> 即可</p><h4 id="2-5、测试权限"><a href="#2-5、测试权限" class="headerlink" title="2.5、测试权限"></a>2.5、测试权限</h4><p>将最初创建的 kubeconfig 放到 <code>~/.kube/config</code> 或者直接使用 <code>--kubeconfig</code> 选项测试读取、删除 pod 等权限即可，测试后如下所示</p><p><img src="https://cdn.oss.link/markdown/68ukm.png" alt="test readonly"></p>]]></content>
    
    
    <summary type="html">好久没写文章了，过年以后就有点懒... 最近也在学习 golang，再加上不断造轮子所以没太多时间；凑巧最近想控制一下 kubectl 权限，这里便记录一下。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes TLS bootstrapping 那点事</title>
    <link href="https://mritd.com/2018/01/07/kubernetes-tls-bootstrapping-note/"/>
    <id>https://mritd.com/2018/01/07/kubernetes-tls-bootstrapping-note/</id>
    <published>2018-01-07T10:06:06.000Z</published>
    <updated>2018-01-07T10:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间撸了一会 Kubernetes 官方文档，在查看 TLS bootstrapping 这块是发现已经跟 1.4 的时候完全不一样了；目前所有搭建文档也都保留着 1.4 时代的配置，在看完文档后发现目前配置有很多问题，同时也埋下了 <strong>隐藏炸弹</strong>，这个问题可能会在一年后爆发…..后果就是集群 node 全部掉线；所以仔细的撸了一下这个文档，从元旦到写此文章的时间都在测试这个 TLS bootstrapping，以下记录一下这次的成果</p></blockquote><p>阅读本文章前，请先阅读一下本文参考的相关文档:</p><ul><li><a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/">TLS bootstrapping</a></li><li><a href="https://github.com/jcbsmpsn/community/blob/a843295a4f7594d41e66a8342e174f48d06b4f9f/contributors/design-proposals/kubelet-server-certificate-bootstrap-rotation.md">Kubelet Server Certificate Bootstrap &amp; Rotation</a></li><li><a href="https://kubernetes.io/docs/admin/authorization/rbac/">Using RBAC Authorization</a></li></ul><h3 id="一、TLS-bootstrapping-简介"><a href="#一、TLS-bootstrapping-简介" class="headerlink" title="一、TLS bootstrapping 简介"></a>一、TLS bootstrapping 简介</h3><p>Kubernetes 在 1.4 版本(我记着是)推出了 TLS bootstrapping 功能；这个功能主要解决了以下问题:</p><p>当集群开启了 TLS 认证后，每个节点的 kubelet 组件都要使用由 apiserver 使用的 CA 签发的有效证书才能与 apiserver 通讯；此时如果节点多起来，为每个节点单独签署证书将是一件非常繁琐的事情；TLS bootstrapping 功能就是让 kubelet 先使用一个预定的低权限用户连接到 apiserver，然后向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署；在配合 RBAC 授权模型下的工作流程大致如下所示(不完整，下面细说)</p><p><img src="https://cdn.oss.link/markdown/ixtwd.png" alt="tls_bootstrapping"></p><h3 id="二、TLS-bootstrapping-相关术语"><a href="#二、TLS-bootstrapping-相关术语" class="headerlink" title="二、TLS bootstrapping 相关术语"></a>二、TLS bootstrapping 相关术语</h3><h4 id="2-1、kubelet-server"><a href="#2-1、kubelet-server" class="headerlink" title="2.1、kubelet server"></a>2.1、kubelet server</h4><p>在官方 TLS bootstrapping 文档中多次提到过 <code>kubelet server</code> 这个东西；在经过翻阅大量文档以及 TLS bootstrapping 设计文档后得出，**<code>kubelet server</code> 指的应该是 kubelet 的 10250 端口；**</p><p><strong>kubelet 组件在工作时，采用主动的查询机制，即定期请求 apiserver 获取自己所应当处理的任务，如哪些 pod 分配到了自己身上，从而去处理这些任务；同时 kubelet 自己还会暴露出两个本身 api 的端口，用于将自己本身的私有 api 暴露出去，这两个端口分别是 10250 与 10255；对于 10250 端口，kubelet 会在其上采用 TLS 加密以提供适当的鉴权功能；对于 10255 端口，kubelet 会以只读形式暴露组件本身的私有 api，并且不做鉴权处理</strong></p><p><strong>总结一下，就是说 kubelet 上实际上有两个地方用到证书，一个是用于与 API server 通讯所用到的证书，另一个是 kubelet 的 10250 私有 api 端口需要用到的证书</strong></p><h4 id="2-2、CSR-请求类型"><a href="#2-2、CSR-请求类型" class="headerlink" title="2.2、CSR 请求类型"></a>2.2、CSR 请求类型</h4><p>kubelet 发起的 CSR 请求都是由 controller manager 来做实际签署的，对于 controller manager 来说，TLS bootstrapping 下 kubelet 发起的 CSR 请求大致分为以下三种</p><ul><li>nodeclient: kubelet 以 <code>O=system:nodes</code> 和 <code>CN=system:node:(node name)</code> 形式发起的 CSR 请求</li><li>selfnodeclient: kubelet client renew 自己的证书发起的 CSR 请求(与上一个证书就有相同的 O 和 CN)</li><li>selfnodeserver: kubelet server renew 自己的证书发起的 CSR 请求</li></ul><p><strong>大白话加自己测试得出的结果: nodeclient 类型的 CSR 仅在第一次启动时会产生，selfnodeclient 类型的 CSR 请求实际上就是 kubelet renew 自己作为 client 跟 apiserver 通讯时使用的证书产生的，selfnodeserver 类型的 CSR 请求则是 kubelet 首次申请或后续 renew 自己的 10250 api 端口证书时产生的</strong></p><h3 id="三、TLS-bootstrapping-具体引导过程"><a href="#三、TLS-bootstrapping-具体引导过程" class="headerlink" title="三、TLS bootstrapping 具体引导过程"></a>三、TLS bootstrapping 具体引导过程</h3><h4 id="3-1、Kubernetes-TLS-与-RBAC-认证"><a href="#3-1、Kubernetes-TLS-与-RBAC-认证" class="headerlink" title="3.1、Kubernetes TLS 与 RBAC 认证"></a>3.1、Kubernetes TLS 与 RBAC 认证</h4><p>在说具体的引导过程之前先谈一下 TLS 和 RBAC，因为这两个事不整明白下面的都不用谈；</p><ul><li>TLS 作用</li></ul><p>众所周知 TLS 的作用就是对通讯加密，防止中间人窃听；同时如果证书不信任的话根本就无法与 apiserver 建立连接，更不用提有没有权限向 apiserver 请求指定内容</p><ul><li>RBAC 作用</li></ul><p>当 TLS 解决了通讯问题后，那么权限问题就应由 RBAC 解决(可以使用其他权限模型，如 ABAC)；RBAC 中规定了一个用户或者用户组(subject)具有请求哪些 api 的权限；<strong>在配合 TLS 加密的时候，实际上 apiserver 读取客户端证书的 CN 字段作为用户名，读取 O 字段作为用户组</strong></p><p>从以上两点上可以总结出两点: 第一，想要与 apiserver 通讯就必须采用由 apiserver CA 签发的证书，这样才能形成信任关系，建立 TLS 连接；第二，可以通过证书的 CN、O 字段来提供 RBAC 所需的用户与用户组</p><h4 id="3-2、kubelet-首次启动流程"><a href="#3-2、kubelet-首次启动流程" class="headerlink" title="3.2、kubelet 首次启动流程"></a>3.2、kubelet 首次启动流程</h4><p>看完上面的介绍，不知道有没有人想过，既然 TLS bootstrapping 功能是让 kubelet 组件去 apiserver 申请证书，然后用于连接 apiserver；<strong>那么第一次启动时没有证书如何连接 apiserver ?</strong></p><p>这个问题实际上可以去查看一下 <code>bootstrap.kubeconfig</code> 和 <code>token.csv</code> 得到答案: <strong>在 apiserver 配置中指定了一个 <code>token.csv</code> 文件，该文件中是一个预设的用户配置；同时该用户的 Token 和 apiserver 的 CA 证书被写入了 kubelet 所使用的 <code>bootstrap.kubeconfig</code> 配置文件中；这样在首次请求时，kubelet 使用 <code>bootstrap.kubeconfig</code> 中的 apiserver CA 证书来与 apiserver 建立 TLS 通讯，使用 <code>bootstrap.kubeconfig</code> 中的用户 Token 来向 apiserver 声明自己的 RBAC 授权身份</strong>，如下图所示</p><p><img src="https://cdn.oss.link/markdown/ji5ug.png" alt="first_request"></p><p>在有些用户首次启动时，可能与遇到 kubelet 报 401 无权访问 apiserver 的错误；<strong>这是因为在默认情况下，kubelet 通过 <code>bootstrap.kubeconfig</code> 中的预设用户 Token 声明了自己的身份，然后创建 CSR 请求；但是不要忘记这个用户在我们不处理的情况下他没任何权限的，包括创建 CSR 请求；所以需要如下命令创建一个 ClusterRoleBinding，将预设用户 <code>kubelet-bootstrap</code> 与内置的 ClusterRole <code>system:node-bootstrapper</code> 绑定到一起，使其能够发起 CSR 请求</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=system:node-bootstrapper \<br>  --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h4 id="3-3、手动签发证书"><a href="#3-3、手动签发证书" class="headerlink" title="3.3、手动签发证书"></a>3.3、手动签发证书</h4><p>在 kubelet 首次启动后，如果用户 Token 没问题，并且 RBAC 也做了相应的设置，那么此时在集群内应该能看到 kubelet 发起的 CSR 请求</p><p><img src="https://cdn.oss.link/markdown/n9bbw.png" alt="bootstrap_csr"></p><p>出现 CSR 请求后，可以使用 kubectl 手动签发(允许) kubelet 的证书</p><p><img src="https://cdn.oss.link/markdown/5ssf8.png" alt="bootstrap_approve_crt"></p><p><strong>当成功签发证书后，目标节点的 kubelet 会将证书写入到 <code>--cert-dir=</code> 选项指定的目录中；注意此时如果不做其他设置应当生成四个文件</strong></p><p><img src="https://cdn.oss.link/markdown/a25ip.png" alt="bootstrap_crt"></p><p><strong>而 kubelet 与 apiserver 通讯所使用的证书为 <code>kubelet-client.crt</code>，剩下的 <code>kubelet.crt</code> 将会被用于 <code>kubelet server</code>(10250) 做鉴权使用；注意，此时 <code>kubelet.crt</code> 这个证书是个独立于 apiserver CA 的自签 CA，并且删除后 kubelet 组件会重新生成它</strong></p><h3 id="四、TLS-bootstrapping-证书自动续期"><a href="#四、TLS-bootstrapping-证书自动续期" class="headerlink" title="四、TLS bootstrapping 证书自动续期"></a>四、TLS bootstrapping 证书自动续期</h3><blockquote><p>单独把这部分拿出来写，是因为个人觉得上面已经有点乱了；这部分实际上更复杂，只好单独写一下了，因为这部分涉及的东西比较多，所以也不想草率的几笔带过</p></blockquote><h4 id="4-1、RBAC-授权"><a href="#4-1、RBAC-授权" class="headerlink" title="4.1、RBAC 授权"></a>4.1、RBAC 授权</h4><p>首先…首先好几次了…嗯，就是说 kubelet 所发起的 CSR 请求是由 controller manager 签署的；如果想要是实现自动续期，就需要让 controller manager 能够在 kubelet 发起证书请求的时候自动帮助其签署证书；那么 controller manager 不可能对所有的 CSR 证书申请都自动签署，这时候就需要配置 RBAC 规则，<strong>保证 controller manager 只对 kubelet 发起的特定 CSR 请求自动批准即可</strong>；在 TLS bootstrapping 官方文档中，针对上面 2.2 章节提出的 3 种 CSR 请求分别给出了 3 种对应的 ClusterRole，如下所示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a user requesting</span><br><span class="hljs-comment"># node client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-client-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/nodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node renewing its</span><br><span class="hljs-comment"># own client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-client-renewal-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-server-renewal-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><p>RBAC 中 ClusterRole 只是描述或者说定义一种集群范围内的能力，这三个 ClusterRole 在 1.7 之前需要自己手动创建，在 1.8 后 apiserver 会自动创建前两个(1.8 以后名称有改变，自己查看文档)；以上三个 ClusterRole 含义如下</p><ul><li>approve-node-client-csr: 具有自动批准 nodeclient 类型 CSR 请求的能力</li><li>approve-node-client-renewal-csr: 具有自动批准 selfnodeclient 类型 CSR 请求的能力</li><li>approve-node-server-renewal-csr: 具有自动批准 selfnodeserver 类型 CSR 请求的能力</li></ul><p><strong>所以，如果想要 kubelet 能够自动续期，那么就应当将适当的 ClusterRole 绑定到 kubelet 自动续期时所所采用的用户或者用户组身上</strong></p><h4 id="4-2、自动续期下的引导过程"><a href="#4-2、自动续期下的引导过程" class="headerlink" title="4.2、自动续期下的引导过程"></a>4.2、自动续期下的引导过程</h4><p>在自动续期下引导过程与单纯的手动批准 CSR 有点差异，具体的引导流程地址如下</p><ul><li>kubelet 读取 bootstrap.kubeconfig，使用其 CA 与 Token 向 apiserver 发起第一次 CSR 请求(nodeclient)</li><li>apiserver 根据 RBAC 规则自动批准首次 CSR 请求(approve-node-client-csr)，并下发证书(kubelet-client.crt)</li><li>kubelet **使用刚刚签发的证书(O&#x3D;system:nodes, CN&#x3D;system:node:NODE_NAME)**与 apiserver 通讯，并发起申请 10250 server 所使用证书的 CSR 请求</li><li>apiserver 根据 RBAC 规则自动批准 kubelet 为其 10250 端口申请的证书(kubelet-server-current.crt)</li><li>证书即将到期时，kubelet 自动向 apiserver 发起用于与 apiserver 通讯所用证书的 renew CSR 请求和 renew 本身 10250 端口所用证书的 CSR 请求</li><li>apiserver 根据 RBAC 规则自动批准两个证书</li><li>kubelet 拿到新证书后关闭所有连接，reload 新证书，以后便一直如此</li></ul><p><strong>从以上流程我们可以看出，我们如果要创建 RBAC 规则，则至少能满足四种情况:</strong></p><ul><li>自动批准 kubelet 首次用于与 apiserver 通讯证书的 CSR 请求(nodeclient)</li><li>自动批准 kubelet 首次用于 10250 端口鉴权的 CSR 请求(实际上这个请求走的也是 selfnodeserver 类型 CSR)</li><li>自动批准 kubelet 后续 renew 用于与 apiserver 通讯证书的 CSR 请求(selfnodeclient)</li><li>自动批准 kubelet 后续 renew 用于 10250 端口鉴权的 CSR 请求(selfnodeserver)</li></ul><p>基于以上四种情况，我们需要创建 3 个 ClusterRoleBinding，创建如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 自动批准 kubelet 的首次 CSR 请求(用于与 apiserver 通讯的证书)</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=approve-node-client-csr --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 kubelet 后续 renew 用于与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=approve-node-client-renewal-csr --group=system:nodes<br><br><span class="hljs-comment"># 自动批准 kubelet 发起的用于 10250 端口鉴权证书的 CSR 请求(包括后续 renew)</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=approve-node-server-renewal-csr --group=system:nodes<br></code></pre></td></tr></table></figure><h4 id="4-3、开启自动续期"><a href="#4-3、开启自动续期" class="headerlink" title="4.3、开启自动续期"></a>4.3、开启自动续期</h4><p>在 1.7 后，kubelet 启动时增加 <code>--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true</code> 选项，则 kubelet 在证书即将到期时会自动发起一个 renew 自己证书的 CSR 请求；同时 controller manager 需要在启动时增加 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 参数，再配合上面创建好的 ClusterRoleBinding，kubelet client 和 kubelet server 证才书会被自动签署；</p><p><strong>注意，1.7 版本设置自动续期参数后，新的 renew 请求不会立即开始，而是在证书总有效期的 <code>70%~90%</code> 的时间时发起；而且经测试 1.7 版本即使自动签发了证书，kubelet 在不重启的情况下不会重新应用新证书；在 1.8 后 kubelet 组件在增加一个 <code>--rotate-certificates</code> 参数后，kubelet 才会自动重载新证书</strong></p><h4 id="4-3、证书过期问题"><a href="#4-3、证书过期问题" class="headerlink" title="4.3、证书过期问题"></a>4.3、证书过期问题</h4><p>需要重复强调一个问题是: <strong>TLS bootstrapping 时的证书实际是由 kube-controller-manager 组件来签署的，也就是说证书有效期是 kube-controller-manager 组件控制的</strong>；所以在 1.7 版本以后(我查文档发现的从1.7开始有) kube-controller-manager 组件提供了一个 <code>--experimental-cluster-signing-duration</code> 参数来设置签署的证书有效时间；默认为 <code>8760h0m0s</code>，将其改为 <code>87600h0m0s</code> 即 10 年后再进行 TLS bootstrapping 签署证书即可。</p><h3 id="五、TLS-bootstrapping-总结以及详细操作"><a href="#五、TLS-bootstrapping-总结以及详细操作" class="headerlink" title="五、TLS bootstrapping 总结以及详细操作"></a>五、TLS bootstrapping 总结以及详细操作</h3><h4 id="5-1、主要流程细节"><a href="#5-1、主要流程细节" class="headerlink" title="5.1、主要流程细节"></a>5.1、主要流程细节</h4><p>kubelet 首次启动通过加载 <code>bootstrap.kubeconfig</code> 中的用户 Token 和 apiserver CA 证书发起首次 CSR 请求，这个 Token 被预先内置在 apiserver 节点的 token.csv 中，其身份为 <code>kubelet-bootstrap</code> 用户和 <code>system:bootstrappers</code> 用户组；想要首次 CSR 请求能成功(成功指的是不会被 apiserver 401 拒绝)，则需要先将 <code>kubelet-bootstrap</code> 用户和 <code>system:node-bootstrapper</code> 内置 ClusterRole 绑定；</p><p>对于首次 CSR 请求可以手动批准，也可以将 <code>system:bootstrappers</code> 用户组与 <code>approve-node-client-csr</code> ClusterRole 绑定实现自动批准(1.8 之前这个 ClusterRole 需要手动创建，1.8 后 apiserver 自动创建，并更名为 <code>system:certificates.k8s.io:certificatesigningrequests:nodeclient</code>)</p><p>默认签署的的证书只有 1 年有效期，如果想要调整证书有效期可以通过设置 kube-controller-manager 的 <code>--experimental-cluster-signing-duration</code> 参数实现，该参数默认值为 <code>8760h0m0s</code></p><p>对于证书自动续签，需要通过协调两个方面实现；第一，想要 kubelet 在证书到期后自动发起续期请求，则需要在 kubelet 启动时增加 <code>--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true</code> 来实现；第二，想要让 controller manager 自动批准续签的 CSR 请求需要在 controller manager 启动时增加 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 参数，并绑定对应的 RBAC 规则；<strong>同时需要注意的是 1.7 版本的 kubelet 自动续签后需要手动重启 kubelet 以使其重新加载新证书，而 1.8 后只需要在 kublet 启动时附带 <code>--rotate-certificates</code> 选项就会自动重新加载新证书</strong></p><h4 id="5-2、证书及配置文件作用"><a href="#5-2、证书及配置文件作用" class="headerlink" title="5.2、证书及配置文件作用"></a>5.2、证书及配置文件作用</h4><ul><li>token.csv</li></ul><p>该文件为一个用户的描述文件，基本格式为 <code>Token,用户名,UID,用户组</code>；这个文件在 apiserver 启动时被 apiserver 加载，然后就相当于在集群内创建了一个这个用户；接下来就可以用 RBAC 给他授权；持有这个用户 Token 的组件访问 apiserver 的时候，apiserver 根据 RBAC 定义的该用户应当具有的权限来处理相应请求</p><ul><li>bootstarp.kubeconfig</li></ul><p>该文件中内置了 token.csv 中用户的 Token，以及 apiserver CA 证书；kubelet 首次启动会加载此文件，使用 apiserver CA 证书建立与 apiserver 的 TLS 通讯，使用其中的用户 Token 作为身份标识像 apiserver 发起 CSR 请求</p><ul><li>kubelet-client.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后生成，此证书是由 controller manager 签署的，此后 kubelet 将会加载该证书，用于与 apiserver 建立 TLS 通讯，同时使用该证书的 CN 字段作为用户名，O 字段作为用户组向 apiserver 发起其他请求</p><ul><li>kubelet.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后并且<strong>没有配置 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 时才会生成</strong>；这种情况下该文件为一个独立于 apiserver CA 的自签 CA 证书，有效期为 1 年；被用作 kubelet 10250 api 端口</p><ul><li>kubelet-server.crt</li></ul><p>该文件在 kubelet 完成 TLS bootstrapping 后并且<strong>配置了 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 时才会生成</strong>；这种情况下该证书由 apiserver CA 签署，默认有效期同样是 1 年，被用作 kubelet 10250 api 端口鉴权</p><ul><li>kubelet-client-current.pem</li></ul><p>这是一个软连接文件，当 kubelet 配置了 <code>--feature-gates=RotateKubeletClientCertificate=true</code> 选项后，会在证书总有效期的 <code>70%~90%</code> 的时间内发起续期请求，请求被批准后会生成一个 <code>kubelet-client-时间戳.pem</code>；<code>kubelet-client-current.pem</code> 文件则始终软连接到最新的真实证书文件，除首次启动外，kubelet 一直会使用这个证书同  apiserver 通讯</p><ul><li>kubelet-server-current.pem</li></ul><p>同样是一个软连接文件，当 kubelet 配置了 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 选项后，会在证书总有效期的 <code>70%~90%</code> 的时间内发起续期请求，请求被批准后会生成一个 <code>kubelet-server-时间戳.pem</code>；<code>kubelet-server-current.pem</code> 文件则始终软连接到最新的真实证书文件，该文件将会一直被用于 kubelet 10250 api 端口鉴权</p><h4 id="5-3、1-7-TLS-bootstrapping-配置"><a href="#5-3、1-7-TLS-bootstrapping-配置" class="headerlink" title="5.3、1.7 TLS bootstrapping 配置"></a>5.3、1.7 TLS bootstrapping 配置</h4><p>apiserver 预先放置 token.csv，内容样例如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">6df3c701f979cee17732c30958745947,kubelet-bootstrap,10001,<span class="hljs-string">&quot;system:bootstrappers&quot;</span><br></code></pre></td></tr></table></figure><p>允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=system:node-bootstrapper \<br>  --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><p>配置 kubelet 自动续期，<strong>RotateKubeletClientCertificate 用于自动续期 kubelet 连接 apiserver 所用的证书(kubelet-client-xxxx.pem)，RotateKubeletServerCertificate 用于自动续期 kubelet 10250 api 端口所使用的证书(kubelet-server-xxxx.pem)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --fail-swap-on=false \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode=promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><p>配置 controller manager 自动批准相关 CSR 请求，<strong>如果不配置 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 参数，则即使配置了相关的 RBAC 规则，也只会自动批准 kubelet client 的 renew 请求</strong> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;--address=0.0.0.0 \</span><br><span class="hljs-string">                              --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                              --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">                              --cluster-name=kubernetes \</span><br><span class="hljs-string">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --leader-elect=true \</span><br><span class="hljs-string">                              --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                              --node-monitor-period=5s \</span><br><span class="hljs-string">                              --pod-eviction-timeout=5m0s&quot;</span><br></code></pre></td></tr></table></figure><p>创建自动批准相关 CSR 请求的 ClusterRole</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a user requesting</span><br><span class="hljs-comment"># node client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-client-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/nodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node renewing its</span><br><span class="hljs-comment"># own client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-client-renewal-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">approve-node-server-renewal-csr</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><p>将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=approve-node-client-csr --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=approve-node-client-renewal-csr --group=system:nodes<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=approve-node-server-renewal-csr --group=system:nodes<br></code></pre></td></tr></table></figure><p><strong>一切就绪后启动 kubelet 组件即可，不过需要注意的是 1.7 版本 kubelet 不会自动重载 renew 的证书，需要自己手动重启</strong></p><h4 id="5-4、1-8-TLS-bootstrapping-配置"><a href="#5-4、1-8-TLS-bootstrapping-配置" class="headerlink" title="5.4、1.8 TLS bootstrapping 配置"></a>5.4、1.8 TLS bootstrapping 配置</h4><p>apiserver 预先放置 token.csv，内容样例如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">6df3c701f979cee17732c30958745947,kubelet-bootstrap,10001,<span class="hljs-string">&quot;system:bootstrappers&quot;</span><br></code></pre></td></tr></table></figure><p>允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=system:node-bootstrapper \<br>  --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><p>配置 kubelet 自动续期，<strong>RotateKubeletClientCertificate 用于自动续期 kubelet 连接 apiserver 所用的证书(kubelet-client-xxxx.pem)，RotateKubeletServerCertificate 用于自动续期 kubelet 10250 api 端口所使用的证书(kubelet-server-xxxx.pem)，<code>--rotate-certificates</code> 选项使得 kubelet 能够自动重载新证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">              --rotate-certificates \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --fail-swap-on=false \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode=promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><p>配置 controller manager 自动批准相关 CSR 请求，<strong>如果不配置 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 参数，则即使配置了相关的 RBAC 规则，也只会自动批准 kubelet client 的 renew 请求</strong> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;--address=0.0.0.0 \</span><br><span class="hljs-string">                              --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                              --cluster-name=kubernetes \</span><br><span class="hljs-string">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --leader-elect=true \</span><br><span class="hljs-string">                              --experimental-cluster-signing-duration 10m0s \</span><br><span class="hljs-string">                              --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                              --node-monitor-period=5s \</span><br><span class="hljs-string">                              --pod-eviction-timeout=5m0s&quot;</span><br></code></pre></td></tr></table></figure><p>创建自动批准相关 CSR 请求的 ClusterRole，相对于 1.7 版本，1.8 的 apiserver 自动创建了前两条 ClusterRole，所以只需要创建一条就行了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span><br><span class="hljs-comment"># serving cert matching its client cert.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeserver&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br></code></pre></td></tr></table></figure><p>将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --group=system:bootstrappers<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes<br><br><span class="hljs-comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span><br>kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver --group=system:nodes<br></code></pre></td></tr></table></figure><p><strong>一切就绪后启动 kubelet 组件即可，1.8 版本 kubelet 会自动重载证书，以下为 1.8 版本在运行一段时间后的相关证书截图</strong></p><p><img src="https://cdn.oss.link/markdown/570wk.png" alt="tls_bootstrapping_crts"></p>]]></content>
    
    
    <summary type="html">前段时间撸了一会 Kubernetes 官方文档，在查看 TLS bootstrapping 这块是发现已经跟 1.4 的时候完全不一样了；目前所有搭建文档也都保留着 1.4 时代的配置，在看完文档后发现目前配置有很多问题，同时也埋下了 **隐藏炸弹**，这个问题可能会在一年后爆发.....后果就是集群 node 全部掉线；所以仔细的撸了一下这个文档，从元旦到写此文章的时间都在测试这个 TLS bootstrapping，以下记录一下这次的成果</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD 之 GitLab CI</title>
    <link href="https://mritd.com/2017/11/28/ci-cd-gitlab-ci/"/>
    <id>https://mritd.com/2017/11/28/ci-cd-gitlab-ci/</id>
    <published>2017-11-28T09:43:23.000Z</published>
    <updated>2017-11-28T09:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 <a href="https://github.com/mritd/GitLabCI-TestProject">GitHub</a></p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内</p><ul><li>Docker Version : 1.13.1</li><li>GitLab Version : 10.1.4-ce.0</li><li>GitLab Runner Version : 10.1.0</li><li>GitLab IP : 172.16.0.37</li><li>GitLab Runner IP : 172.16.0.36</li></ul><h3 id="二、GitLab-CI-简介"><a href="#二、GitLab-CI-简介" class="headerlink" title="二、GitLab CI 简介"></a>二、GitLab CI 简介</h3><p>GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 <code>.gitlab-ci.yaml</code> 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下</p><p><img src="https://cdn.oss.link/markdown/wejnz.png" alt="GitLab"></p><h3 id="三、搭建-GitLab-服务器"><a href="#三、搭建-GitLab-服务器" class="headerlink" title="三、搭建 GitLab 服务器"></a>三、搭建 GitLab 服务器</h3><h4 id="3-1、GitLab-搭建"><a href="#3-1、GitLab-搭建" class="headerlink" title="3.1、GitLab 搭建"></a>3.1、GitLab 搭建</h4><p>GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">&#x27;2&#x27;</span><br>services:<br>  gitlab:<br>    image: <span class="hljs-string">&#x27;gitlab/gitlab-ce:10.1.4-ce.0&#x27;</span><br>    restart: always<br>    container_name: gitlab<br>    hostname: <span class="hljs-string">&#x27;git.mritd.me&#x27;</span><br>    environment:<br>      GITLAB_OMNIBUS_CONFIG: |<br>        external_url <span class="hljs-string">&#x27;http://git.mritd.me&#x27;</span><br>        <span class="hljs-comment"># Add any other gitlab.rb configuration here, each on its own line</span><br>    ports:<br>      - <span class="hljs-string">&#x27;80:80&#x27;</span><br>      - <span class="hljs-string">&#x27;443:443&#x27;</span><br>      - <span class="hljs-string">&#x27;8022:22&#x27;</span><br>    volumes:<br>      - <span class="hljs-string">&#x27;./data/gitlab/config:/etc/gitlab&#x27;</span><br>      - <span class="hljs-string">&#x27;./data/gitlab/logs:/var/log/gitlab&#x27;</span><br>      - <span class="hljs-string">&#x27;./data/gitlab/data:/var/opt/gitlab&#x27;</span><br></code></pre></td></tr></table></figure><p>直接启动后，首次登陆需要设置初始密码如下，默认用户为 <code>root</code></p><p><img src="https://cdn.oss.link/markdown/5go94.png" alt="gitkab init"></p><p>登陆成功后创建一个用户(该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示</p><p><img src="https://cdn.oss.link/markdown/vtyhi.png" alt="Create User"></p><p><img src="https://cdn.oss.link/markdown/3b7gl.png" alt="Test Project"></p><h4 id="3-2、增加示例项目"><a href="#3-2、增加示例项目" class="headerlink" title="3.2、增加示例项目"></a>3.2、增加示例项目</h4><p>这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；<strong>如果不熟悉 Java 的没必要死磕此步配置，任意语言(最好 Java)整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目</strong>；SpringBoot 可以采用 <a href="https://start.spring.io/">Spring Initializr</a> 直接生成(依赖要加入 WEB)，如下所示</p><p><img src="https://cdn.oss.link/markdown/0wx6d.png" alt="Spring Initializr"></p><p>将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下</p><ul><li>build.gradle</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    ext &#123;<br>        springBootVersion = <span class="hljs-string">&#x27;1.5.8.RELEASE&#x27;</span><br>    &#125;<br>    repositories &#123;<br>        mavenCentral()<br>    &#125;<br>    dependencies &#123;<br>        classpath(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;</span>)<br>    &#125;<br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;java&#x27;</span><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;eclipse&#x27;</span><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;idea&#x27;</span><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span><br><br>group = <span class="hljs-string">&#x27;me.mritd&#x27;</span><br>version = <span class="hljs-string">&#x27;0.0.1-SNAPSHOT&#x27;</span><br>sourceCompatibility = <span class="hljs-number">1.8</span><br><br>repositories &#123;<br>    mavenCentral()<br>&#125;<br><br><br>dependencies &#123;<br>    compile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span>)<br>    compile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)<br>    compile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-thymeleaf&#x27;</span>)<br>    testCompile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>新建一个 HomeController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> me.mritd.TestProject;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/*******************************************************************************</span><br><span class="hljs-comment"> * Copyright (c) 2005-2017 Mritd, Inc.</span><br><span class="hljs-comment"> * TestProject</span><br><span class="hljs-comment"> * me.mritd.TestProject</span><br><span class="hljs-comment"> * Created by mritd on 2017/11/24 下午12:23.</span><br><span class="hljs-comment"> * Description: </span><br><span class="hljs-comment"> *******************************************************************************/</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>templates 下新建 index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Test...<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后项目整体结构如下</p><p><img src="https://cdn.oss.link/markdown/5k12p.png" alt="TestProject"></p><p>执行 <code>assemble</code> Task 打包出可执行 jar 包，并运行 <code>java -jar TestProject-0.0.1-SNAPSHOT.jar</code> 测试下能启动访问页面即可</p><p><img src="https://cdn.oss.link/markdown/xoj3d.png" alt="TestProject assemble"></p><p>最后将项目提交到 GitLab 后如下</p><p><img src="https://cdn.oss.link/markdown/1fuex.png" alt="init Project"></p><h3 id="四、GitLab-CI-配置"><a href="#四、GitLab-CI-配置" class="headerlink" title="四、GitLab CI 配置"></a>四、GitLab CI 配置</h3><blockquote><p>针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可</p></blockquote><h4 id="4-1、增加-Runner"><a href="#4-1、增加-Runner" class="headerlink" title="4.1、增加 Runner"></a>4.1、增加 Runner</h4><p>GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gitlab-runner:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">gitlab-runner</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gitlab/gitlab-runner:alpine-v10.1.0</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">&quot;host&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config.toml:/etc/gitlab-runner/config.toml</span><br>    <span class="hljs-attr">extra_hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;git.mritd.me:172.16.0.37&quot;</span><br></code></pre></td></tr></table></figure><p><strong>在启动前，我们需要先 touch 一下这个 config.toml 配置文件</strong>；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件(不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，<strong>需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成 Runner 配置文件</span><br><span class="hljs-built_in">touch</span> config.toml<br><span class="hljs-comment"># 启动 Runner</span><br>docker-compose up -d<br><span class="hljs-comment"># 激活 Runner</span><br>docker <span class="hljs-built_in">exec</span> -it gitlab-runner gitlab-runner register<br></code></pre></td></tr></table></figure><p>在执行上一条激活命令后，会按照提示让你输入一些信息；<strong>首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看</strong>，如下所示</p><p><img src="https://cdn.oss.link/markdown/mfqg7.png" alt="Runner Token"></p><p>整体注册流程如下</p><p><img src="https://cdn.oss.link/markdown/r7xay.png" alt="Runner registry"></p><p>注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示</p><p><img src="https://cdn.oss.link/markdown/xv03e.png" alt="Runner List"></p><p><strong>Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射( <code>extra_hosts</code> )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下(配置文件可以做一些更高级的配置，具体参考 <a href="https://docs.gitlab.com/runner/configuration/advanced-configuration.html">官方文档</a> )</strong></p><ul><li>config.toml</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">concurrent</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">check_interval</span> = <span class="hljs-number">0</span><br><br><span class="hljs-section">[[runners]]</span><br>  <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Test Runner&quot;</span><br>  <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;http://git.mritd.me&quot;</span><br>  <span class="hljs-attr">token</span> = <span class="hljs-string">&quot;c279ec1ac08aec98c7141c7cf2d474&quot;</span><br>  <span class="hljs-attr">executor</span> = <span class="hljs-string">&quot;docker&quot;</span><br>  <span class="hljs-attr">builds_dir</span> = <span class="hljs-string">&quot;/gitlab/runner-builds&quot;</span><br>  <span class="hljs-attr">cache_dir</span> = <span class="hljs-string">&quot;/gitlab/runner-cache&quot;</span><br>  <span class="hljs-section">[runners.docker]</span><br>    <span class="hljs-attr">tls_verify</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-attr">image</span> = <span class="hljs-string">&quot;debian&quot;</span><br>    <span class="hljs-attr">privileged</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-attr">disable_cache</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-attr">shm_size</span> = <span class="hljs-number">0</span><br>    <span class="hljs-attr">volumes</span> = [<span class="hljs-string">&quot;/data/gitlab-runner:/gitlab&quot;</span>,<span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>,<span class="hljs-string">&quot;/data/maven_repo:/data/repo&quot;</span>,<span class="hljs-string">&quot;/data/maven_repo:/data/maven&quot;</span>,<span class="hljs-string">&quot;/data/gradle:/data/gradle&quot;</span>,<span class="hljs-string">&quot;/data/sonar_cache:/root/.sonar&quot;</span>,<span class="hljs-string">&quot;/data/androidsdk:/usr/local/android&quot;</span>,<span class="hljs-string">&quot;/data/node_modules:/data/node_modules&quot;</span>]<br>    <span class="hljs-attr">extra_hosts</span> = [<span class="hljs-string">&quot;git.mritd.me:172.16.0.37&quot;</span>]<br>  <span class="hljs-section">[runners.cache]</span><br></code></pre></td></tr></table></figure><p><strong>注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录</strong>；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 <code>docker-compose down &amp;&amp; docker-compose up -d</code> 重启</p><h4 id="4-2、创建基础镜像"><a href="#4-2、创建基础镜像" class="headerlink" title="4.2、创建基础镜像"></a>4.2、创建基础镜像</h4><p>由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:edge <br><br>LABEL maintainer=<span class="hljs-string">&quot;mritd &lt;mritd1234@gmail.com&gt;&quot;</span><br><br>ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk<br>ENV PATH <span class="hljs-variable">$PATH</span>:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin<br><br>RUN apk add --update bash curl tar wget ca-certificates unzip \<br>        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/cache/apk/* \<br><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>]<br></code></pre></td></tr></table></figure><p>**这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 <a href="https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/">Alpine 3.6 OpenJDK 8 Bug</a>**；使用这个 Dockerfile，在当前目录执行 <code>docker build -t mritd/openjdk:8 .</code> build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可</p><h4 id="4-3、创建项目镜像"><a href="#4-3、创建项目镜像" class="headerlink" title="4.3、创建项目镜像"></a>4.3、创建项目镜像</h4><p>有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；<strong>项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量</strong>；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM mritd/openjdk:8-144-01<br><br>MAINTAINER mritd &lt;mritd1234@gmail.com&gt;<br><br>ARG PROJECT_BUILD_FINALNAME<br><br>ENV TZ <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>ENV PROJECT_BUILD_FINALNAME <span class="hljs-variable">$&#123;PROJECT_BUILD_FINALNAME&#125;</span><br><br><br>COPY build/libs/<span class="hljs-variable">$&#123;PROJECT_BUILD_FINALNAME&#125;</span>.jar /<span class="hljs-variable">$&#123;PROJECT_BUILD_FINALNAME&#125;</span>.jar<br><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;java -jar /<span class="hljs-variable">$&#123;PROJECT_BUILD_FINALNAME&#125;</span>.jar&quot;</span>]<br></code></pre></td></tr></table></figure><p><strong>该 Dockerfile 通过声明一个 <code>PROJECT_BUILD_FINALNAME</code> 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可</strong></p><h4 id="4-4、Gradle-修改"><a href="#4-4、Gradle-修改" class="headerlink" title="4.4、Gradle 修改"></a>4.4、Gradle 修改</h4><p>上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 <code>PROJECT_BUILD_FINALNAME</code> 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 <code>PROJECT_BUILD_FINALNAME</code> 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下</p><ul><li>build.gradle 最后面增加如下</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">bootRepackage &#123;<br><br>    mainClass = <span class="hljs-string">&#x27;me.mritd.TestProject.TestProjectApplication&#x27;</span><br>    executable = <span class="hljs-literal">true</span><br><br>    doLast &#123;<br>        File envFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;build/tmp/PROJECT_ENV&quot;</span>)<br><br>        println(<span class="hljs-string">&quot;Create $&#123;archivesBaseName&#125; ENV File ===&gt; &quot;</span> + envFile.createNewFile())<br>        println(<span class="hljs-string">&quot;Export $&#123;archivesBaseName&#125; Build Version ===&gt; $&#123;version&#125;&quot;</span>)<br>        envFile.write(<span class="hljs-string">&quot;export PROJECT_BUILD_FINALNAME=$&#123;archivesBaseName&#125;-$&#123;version&#125;\n&quot;</span>)<br><br>        println(<span class="hljs-string">&quot;Generate Docker image tag...&quot;</span>)<br>        envFile.append(<span class="hljs-string">&quot;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&quot;</span>)<br>        envFile.append(<span class="hljs-string">&quot;export IMAGE_NAME=mritd/test:`echo \$&#123;CI_BUILD_REF_NAME&#125; | tr &#x27;/&#x27; &#x27;-&#x27;`-`echo \$&#123;CI_COMMIT_SHA&#125; | cut -c1-8`-\$&#123;BUILD_DATE&#125;\n&quot;</span>)<br>        envFile.append(<span class="hljs-string">&quot;export LATEST_IMAGE_NAME=mritd/test:latest\n&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这一步操作实际上是修改了 <code>bootRepackage</code> 这个 Task(不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 <code>PROJECT_ENV</code> 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用</strong>，<code>PROJECT_ENV</code> 最终生成如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PROJECT_BUILD_FINALNAME=TestProject-0.0.1-SNAPSHOT<br><span class="hljs-built_in">export</span> BUILD_DATE=`<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S`<br><span class="hljs-built_in">export</span> IMAGE_NAME=mritd/test:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;CI_BUILD_REF_NAME&#125;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;-&#x27;</span>`-`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;CI_COMMIT_SHA&#125;</span> | <span class="hljs-built_in">cut</span> -c1-8`-<span class="hljs-variable">$&#123;BUILD_DATE&#125;</span><br><span class="hljs-built_in">export</span> LATEST_IMAGE_NAME=mritd/test:latest<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/gr6kc.png" alt="PROJECT_ENV"></p><h4 id="4-5、创建-CI-配置文件"><a href="#4-5、创建-CI-配置文件" class="headerlink" title="4.5、创建 CI 配置文件"></a>4.5、创建 CI 配置文件</h4><p>一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 <code>.gitlab-ci.yml</code> 文件来执行相应的 CI 操作；以下为测试项目的 <code>.gitlab-ci.yml</code> 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 调试开启</span><br><span class="hljs-comment">#before_script:</span><br><span class="hljs-comment">#  - pwd</span><br><span class="hljs-comment">#  - env</span><br><br><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">deploy</span><br><br><span class="hljs-attr">auto-build:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mritd/build:2.1.1</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">gradle</span> <span class="hljs-string">--no-daemon</span> <span class="hljs-string">clean</span> <span class="hljs-string">assemble</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mritd/docker-kubectl:v1.7.4</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source</span> <span class="hljs-string">build/tmp/PROJECT_ENV</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Build Docker Image ==&gt; $&#123;IMAGE_NAME&#125;&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">build</span> <span class="hljs-string">-t</span> <span class="hljs-string">$&#123;IMAGE_NAME&#125;</span> <span class="hljs-string">--build-arg</span> <span class="hljs-string">PROJECT_BUILD_FINALNAME=$&#123;PROJECT_BUILD_FINALNAME&#125;</span> <span class="hljs-string">.</span><br><span class="hljs-comment">#    - docker push $&#123;IMAGE_NAME&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">tag</span> <span class="hljs-string">$&#123;IMAGE_NAME&#125;</span> <span class="hljs-string">$&#123;LATEST_IMAGE_NAME&#125;</span><br><span class="hljs-comment">#    - docker push $&#123;LATEST_IMAGE_NAME&#125;</span><br><span class="hljs-comment">#    - docker rmi $&#123;IMAGE_NAME&#125; $&#123;LATEST_IMAGE_NAME&#125;</span><br><span class="hljs-comment">#    - kubectl --kubeconfig $&#123;KUBE_CONFIG&#125; set image deployment/test test=$IMAGE_NAME</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">develop</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/^chore.*$/</span><br></code></pre></td></tr></table></figure><p><strong>关于 CI 配置的一些简要说明如下</strong></p><h5 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h5><p>stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 <code>build</code>、<code>deploy</code> 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；<strong>在正常生产环境流程可以定义很多个，比如可以有 <code>test</code>、<code>publish</code>，甚至可能有代码扫描的 <code>sonar</code> 阶段等；这些阶段没有任何限制，完全是自定义的</strong>，上面的阶段定义好后在 CI 中表现如下图</p><p><img src="https://cdn.oss.link/markdown/8c7gs.png" alt="stages"></p><h5 id="task"><a href="#task" class="headerlink" title="task"></a>task</h5><p>task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 <code>auto-build</code> 和 <code>deploy</code> 都是 task，他们通过 <code>stage: xxxx</code> 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 <code>image</code> 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像(这里是 debian)；<strong>同时 task 还有一个 <code>tags</code> 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用</strong>，当 task 运行后如下图所示</p><p><img src="https://cdn.oss.link/markdown/qzvlh.png" alt="Task"></p><p>除此之外 task 还能指定 <code>only</code> 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；<strong>默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 <code>when: manual</code> 改为手动执行；注意: 手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击</strong>；手动执行如下图所示</p><p><img src="https://cdn.oss.link/markdown/vcjci.png" alt="manual task"></p><h5 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h5><p>cache 这个参数用于定义全局那些文件将被 cache；<strong>在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录(Docker 容器 中)还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除</strong>；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 <code>cache</code> 这个参数将 <code>build</code> 目录 cache 住，保证其跨 stage 也能存在</p><p><strong>关于 <code>.gitlab-ci.yml</code> 具体配置更完整的请参考 <a href="https://docs.gitlab.com/ee/ci/yaml/">官方文档</a></strong></p><h3 id="五、其他相关"><a href="#五、其他相关" class="headerlink" title="五、其他相关"></a>五、其他相关</h3><h4 id="5-1、GitLab-内置环境变量"><a href="#5-1、GitLab-内置环境变量" class="headerlink" title="5.1、GitLab 内置环境变量"></a>5.1、GitLab 内置环境变量</h4><p>上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 <code>PROJECT_ENV</code> 文件中引用了 <code>$&#123;CI_COMMIT_SHA&#125;</code> 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；<strong>也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用</strong>，具体的完整环境变量列表可以从 <a href="https://docs.gitlab.com/ee/ci/variables/">官方文档</a> 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 <code>env</code> 指令打印出来，如下所示</p><p><img src="https://cdn.oss.link/markdown/la9kn.png" alt="env"></p><p><img src="https://cdn.oss.link/markdown/0175j.png" alt="env task"></p><h4 id="5-2、GitLab-自定义环境变量"><a href="#5-2、GitLab-自定义环境变量" class="headerlink" title="5.2、GitLab 自定义环境变量"></a>5.2、GitLab 自定义环境变量</h4><p>在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下</p><p><img src="https://cdn.oss.link/markdown/ennug.png" alt="project env"></p><p>另一种是组级别的，可以在整个组内的所有项目中使用，如下</p><p><img src="https://cdn.oss.link/markdown/si8ig.png" alt="group env"></p><p>这两种变量添加后都可以在 CI 的脚本中直接引用</p><h4 id="5-3、Kubernetes-集成"><a href="#5-3、Kubernetes-集成" class="headerlink" title="5.3、Kubernetes 集成"></a>5.3、Kubernetes 集成</h4><p>对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以</p><p><img src="https://cdn.oss.link/markdown/bu17r.png" alt="kubectl"></p><p>其中 <code>mritd/docker-kubectl:v1.7.4</code> 这个镜像的 Dockerfile 如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM docker:dind <br><br>LABEL maintainer=<span class="hljs-string">&quot;mritd &lt;mritd1234@gmail.com&gt;&quot;</span><br><br>ARG TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><br>ENV TZ <span class="hljs-variable">$&#123;TZ&#125;</span><br><br>ENV KUBE_VERSION v1.8.0<br><br>RUN apk upgrade --update \<br>    &amp;&amp; apk add bash tzdata wget ca-certificates \<br>    &amp;&amp; wget https://storage.googleapis.com/kubernetes-release/release/<span class="hljs-variable">$&#123;KUBE_VERSION&#125;</span>/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl \<br>    &amp;&amp; <span class="hljs-built_in">chmod</span> +x /usr/local/bin/kubectl \<br>    &amp;&amp; <span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/<span class="hljs-variable">$&#123;TZ&#125;</span> /etc/localtime \<br>    &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;TZ&#125;</span> &gt; /etc/timezone \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/cache/apk/*<br><br>CMD [<span class="hljs-string">&quot;/bin/bash&quot;</span>]<br></code></pre></td></tr></table></figure><p>这里面的 <code>$&#123;KUBE_CONFIG&#125;</code> 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 <code>$&#123;KUBE_CONFIG&#125;</code> 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用</p><h4 id="5-4、GitLab-CI-总结"><a href="#5-4、GitLab-CI-总结" class="headerlink" title="5.4、GitLab CI 总结"></a>5.4、GitLab CI 总结</h4><p>关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了</p><p><strong>CS 架构</strong></p><p>GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务</p><p><strong>容器即环境</strong></p><p>在 Runner 使用 Docker build 的前提下；<strong>所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离</strong></p><p><strong>CI即脚本</strong></p><p>不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本</p><p><strong>敏感信息走环境变量</strong></p><p>一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中</p>]]></content>
    
    
    <summary type="html">接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 [GitHub](https://github.com/mritd/GitLabCI-TestProject)</summary>
    
    
    
    <category term="CI/CD" scheme="https://mritd.com/categories/ci-cd/"/>
    
    
    <category term="CI/CD" scheme="https://mritd.com/tags/ci-cd/"/>
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD 之 Dockerfile</title>
    <link href="https://mritd.com/2017/11/12/ci-cd-dockerfile/"/>
    <id>https://mritd.com/2017/11/12/ci-cd-dockerfile/</id>
    <published>2017-11-12T14:46:53.000Z</published>
    <updated>2017-11-12T14:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近准备整理一下关于 CI&#x2F;CD 的相关文档，写一个关于 CI&#x2F;CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具</p></blockquote><h3 id="一、基础镜像选择"><a href="#一、基础镜像选择" class="headerlink" title="一、基础镜像选择"></a>一、基础镜像选择</h3><p>这里的基础镜像指的是实际项目运行时的基础环境镜像，比如 Java 的 JDK 基础镜像、Nodejs 的基础镜像等；在制作项目的基础镜像时，我个人认为应当考虑一下几点因素:</p><h4 id="1-1、可维护性"><a href="#1-1、可维护性" class="headerlink" title="1.1、可维护性"></a>1.1、可维护性</h4><p>可维护性应当放在首要位置，如果在制作基础镜像时，选择了一个你根本不熟悉的基础镜像，或者说你完全不知道这个基础镜像里有哪些环境变量、Entrypoint 脚本做了什么时，请果断放弃这个基础镜像，选择一个你自己更加熟悉的基础镜像，不要为以后挖坑；还有就是如果对应的应用已经有官方镜像，那么尽量采用官方的，因为你可以省去维护 <strong>自己造的轮子</strong> 的精力，<strong>除非你对基础镜像制作已经得心应手，否则请不要造轮子</strong></p><h4 id="1-2、稳定性"><a href="#1-2、稳定性" class="headerlink" title="1.2、稳定性"></a>1.2、稳定性</h4><p>基础镜像稳定性实际上是个很微妙的话题，因为普遍来说成熟的 Linux 发行版都很稳定；但是对于不同发行版镜像之间还是存在差异的，比如 alpine 的镜像用的是 musl libc，而 debian 用的是 glibc，某些依赖 glibc 的程序可能无法在 alpine 上工作；alpine 版本的 nginx 能使用 http2，debian 版本 nginx 则不行，因为 openssl 版本不同；甚至在相同发行版不同版本之间也会有差异，譬如 openjdk alpine 3.6 版本 java 某些图形库无法工作，在 alpine edge 上安装最新的 openjdk 却没问题等；所以稳定性这个话题对于基础镜像自己来说，他永远稳定，但是对于你的应用来说，则不同基础镜像会产生不同的稳定性；<strong>最后，如果你完全熟悉你的应用，甚至应用层代码也是你写的，那么你可以根据你的习惯和喜好去选择基础镜像，因为你能把控应用运行时依赖；否则的话，请尽量选择 debian 这种比较成熟的发行版作为基础镜像，因为它在普遍上兼容性更好一点；还有尽量不要使用 CentOS 作为基础镜像，因为他的体积将会成为大规模网络分发瓶颈</strong></p><h4 id="1-3、易用性"><a href="#1-3、易用性" class="headerlink" title="1.3、易用性"></a>1.3、易用性</h4><p>易用性简单地说就是是否可调试，因为有些极端情况下，并不是应用只要运行起来就没事了；可能出现一些很棘手的问题需要你进入容器进行调试，此时你的镜像易用性就会体现出来；譬如一个 Java 项目你的基础镜像是 JRE，那么 JDK 的调试工具将完全不可用，还有就是如果你的基础镜像选择了 alpine，那么它默认没有 bash，可能你的脚本无法在里面工作；<strong>所有在选择基础镜像的时候最好也考虑一下未来极端情况的可调试性</strong></p><h3 id="二、格式化及注意事项"><a href="#二、格式化及注意事项" class="headerlink" title="二、格式化及注意事项"></a>二、格式化及注意事项</h3><h4 id="2-1、书写格式"><a href="#2-1、书写格式" class="headerlink" title="2.1、书写格式"></a>2.1、书写格式</h4><p>Dockerfile 类似一堆 shell 命令的堆砌，实际上在构建阶段也可以简单的看做是一个 shell 脚本；但是为了更高效的利用缓存层，通常都会在一个 RUN 命令中连续书写大量的脚本命令，这时候一个良好的书写格式可以使 Dockerfile 看起来更加清晰易懂，也方便以后维护；我个人比较推崇的格式是按照 <a href="https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile">nginx-alpine官方 Dockerfile</a> 的样式来书写，这个 Dockerfile 大致包括了以下规则:</p><ul><li>换行以 <code>&amp;&amp;</code> 开头保持每行对齐，看起来干净又舒服</li><li>安装大量软件包时，每个包一行并添加换行符，虽然会造成很多行，但是看起来很清晰；也可根据实际需要增加每行软件包个数，但是建议不要超过 5 个</li><li>configure 的配置尽量放在统一的变量里，并做好合理换行，方便以后集中化修改</li><li>注释同样和对应命令对齐，并保持单行长度不超出视野，即不能造成拉动滚动条才能看完你的注释</li><li>alpine 作为基础镜像的话，必要时可以使用 scanelf 来减少安装依赖</li></ul><p>除了以上规则，说下我个人的一些小习惯，仅供参考:</p><ul><li>当需要编译时，尽量避免多次 <code>cd</code> 目录，必须进入目录编译时可以开启子 shell 使其完成后还停留但在当前目录，避免 <code>cd</code> 进去再 <code>cd</code> 回来，如</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> xxxx \<br>&amp;&amp; ./configure \<br>&amp;&amp; make \<br>&amp;&amp; make install \<br>&amp;&amp; <span class="hljs-built_in">cd</span> ../<br></code></pre></td></tr></table></figure><p>可以变为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">(<span class="hljs-built_in">cd</span> xxx \<br>&amp;&amp; ./configure \<br>&amp;&amp; make \<br>&amp;&amp; make install)<br></code></pre></td></tr></table></figure><ul><li>同样意义的操作统一放在相邻行处理，比如镜像需要安装两个软件，做两次 <code>wget</code>，那么没必要安装完一个删除一个安装包，可以在最后统一的进行清理动作，简而言之是 <strong>合并具有相同目的的命令</strong></li><li>尽量使用网络资源，也就是说尽量不要在当前目录下放置那种二进制文件，然后进行 <code>ADD</code>&#x2F;<code>COPY</code> 操作，因为一般 Dockerfile 都是存放到 git 仓库的，同目录下的二进制变动会给 git 仓库带来很大负担</li><li>调整好镜像时区，最好内置一下 bash，可能以后临时进入容器会处理一些东西</li><li><code>FROM</code> 时指定具体的版本号，防止后续升级或者更换主机 build 造成不可预知的结果</li></ul><h4 id="2-2、合理利用缓存"><a href="#2-2、合理利用缓存" class="headerlink" title="2.2、合理利用缓存"></a>2.2、合理利用缓存</h4><p>Docker 在 build 或者说是拉取镜像时是以层为单位作为缓存的；通俗的讲，一个 Dockerfile 命令就会形成一个镜像层(不绝对)，尤其是 <code>RUN</code> 命令形成的镜像层可能会很大；此时应当合理组织 Dockerfile，以便每次拉取或者 build 时高效的利用缓存层</p><ul><li>重复 build 的缓存利用</li></ul><p>Docker 在进行 build 操作时，对于同一个 Dockerfile 来说，<strong>只要执行过一次 build，那么下次 build 将从命令更改处开始</strong>；简单的例子如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.6<br><br>COPY test.jar /test.jar<br><br>RUN apk add openjdk8 --no-cache<br><br>CMD [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/test.tar&quot;</span>]<br></code></pre></td></tr></table></figure><p>假设我们的项目发布物为 <code>test.jar</code>，那么以上 Dockerfile 放到 CI 里每次 build 都会相当慢，原因就是 <strong>每次更改的发布物为 <code>test.jar</code>，那么也就是相当于每次 build 失效位置从 <code>COPY</code> 命令开始，这将导致下面的 <code>RUN</code> 命令每次都会不走缓存重复执行，当 <code>RUN</code> 命令涉及网络下载等复杂动作时这会极大拖慢 build 进度</strong>，解决方案很简单，移动一下 <code>COPY</code> 命令即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.6<br><br>RUN apk add openjdk8 --no-cache<br><br>COPY test.jar /test.jar<br><br>CMD [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/test.tar&quot;</span>]<br></code></pre></td></tr></table></figure><p>此时每次 build 失效位置仍然是 <code>COPY</code> 命令，但是上面的 <code>RUN</code> 命令层已经被 build 过，而且无任何改变，那么每次 build 时 <code>RUN</code> 命令都会命中缓存层从而秒过</p><ul><li>多次拉取的缓存利用</li></ul><p>同上面的 build 一个原理，在 Docker 进行 pull 操作时，也是按照镜像层来进行缓存；当项目进行更新版本，那么只要当前主机 pull 过一次上一个版本的项目，那么下一次将会直接 pull 变更的层，也就是说上面安装 openjdk 的层将会复用；这种情况为了看起来清晰一点也可以将 Dockerfile 拆分成两个</p><p><strong>OpenJDK8 base</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.6<br><br>RUN RUN apk add openjdk8 --no-cache<br></code></pre></td></tr></table></figure><p><strong>Java Web image</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM xxx.com/base/openjdk8<br><br>COPY test.jar /test.jar<br><br>CMD [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/test.tar&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="三、镜像安全"><a href="#三、镜像安全" class="headerlink" title="三、镜像安全"></a>三、镜像安全</h3><h4 id="3-1、用户切换"><a href="#3-1、用户切换" class="headerlink" title="3.1、用户切换"></a>3.1、用户切换</h4><p>当我们不在 Dockerfile 中指定内部用户时，那么默认以 root 用户运行；由于 Linux 系统权限判定是根据 UID、GID 来进行的，也就是说 <strong>容器里面的 root 用户有权限访问宿主机 root 用户的东西；所以一旦挂载错误(比如将 <code>/root/.ssh</code> 目录挂载进去)，并且里面的用户具有高权限那么就很危险</strong>；通常习惯是遵从最小权限原则，也就是说尽量保证容器里的程序以低权限运行，此时可以在 Dockerfile 中通过 <code>USER</code> 命令指定后续运行命令所使用的账户，通过 <code>WORKDIR</code> 指定后续命令在那个目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.6<br><br>RUN apk add openjdk8 --no-cache<br><br>COPY test.jar /test.jar<br><br>USER testuser:testuser<br><br>WORKDIR /tmp<br><br>CMD [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/test.tar&quot;</span>]<br></code></pre></td></tr></table></figure><p>有时直接使用 <code>USER</code> 指令来切换用户并不算方便，比如你的镜像需要挂载外部存储，如果外部存储中文件权限被意外修改，你的程序接下来可能就会启动失败；此时可以使用一下两个小工具来动态切换用户，巧妙的做法是 <strong>在正式运行程序之前先使用 root 用户进行权限修复，然后使用以下工具切换到具体用户运行</strong></p><ul><li><a href="https://github.com/tianon/gosu">gosu</a> Golang 实现的一个切换用户身份执行其他程序的小工具</li><li><a href="https://github.com/hlovdal/su-exec">su-exec</a> C 实现的一个更轻量级的用户切换工具</li></ul><p>具体的 Dockerfile 可以参见我写的 elasticsearch 的 <a href="https://github.com/mritd/dockerfile/blob/master/elasticsearch/docker-entrypoint.sh">entrypoint 脚本</a></p><h4 id="3-2、容器运行时"><a href="#3-2、容器运行时" class="headerlink" title="3.2、容器运行时"></a>3.2、容器运行时</h4><p>并不是每个容器都一定能切换到低权限用户来运行的，可能某些程序就希望在 root 下运行，此时一定要确认好容器是否需要 <strong>特权模式</strong> 运行；因为一旦开启了特权模式运行的容器将有能力修改宿主机内核参数等重要设置；具体的 Docker 容器运行设置前请参考 <a href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities">官方文档</a></p><p>关于 Dockerfile 方面暂时总结出这些，可能也会有遗漏，待后续补充吧；同时欢迎各位提出相关修改意见 😊</p>]]></content>
    
    
    <summary type="html">最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具</summary>
    
    
    
    <category term="CI/CD" scheme="https://mritd.com/categories/ci-cd/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Teleport 跳板机部署</title>
    <link href="https://mritd.com/2017/11/09/set-up-teleport/"/>
    <id>https://mritd.com/2017/11/09/set-up-teleport/</id>
    <published>2017-11-09T08:47:51.000Z</published>
    <updated>2017-11-09T08:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>目前准备了 3 台虚拟机，两台位于内网 NAT 之后，一台位于公网可以直接链接；使用时客户端通过工具连接到公网跳板机上，然后实现自动跳转到内网任意主机；并且具有相应的操作回放审计，通过宿主机账户限制用户权限</p><table><thead><tr><th>ip</th><th>节点</th></tr></thead><tbody><tr><td>92.223.67.84</td><td>公网 Master</td></tr><tr><td>172.16.0.80</td><td>内网 Master</td></tr><tr><td>172.16.0.81</td><td>内网 Node</td></tr></tbody></table><h3 id="二、Teleport-工作模式"><a href="#二、Teleport-工作模式" class="headerlink" title="二、Teleport 工作模式"></a>二、Teleport 工作模式</h3><p>Teleport 工作时从宏观上看是以集群为单位，也就是说<strong>公网算作一个集群，内网算作另一个集群，内网集群通过 ssh 隧道保持跟公网的链接状态，同时内网机群允许公网集群用户连接</strong>，大体工作模式如下</p><p><img src="https://cdn.oss.link/markdown/hsnj8.png" alt="Teleport 工作模式"></p><h3 id="三、搭建公网-Master"><a href="#三、搭建公网-Master" class="headerlink" title="三、搭建公网 Master"></a>三、搭建公网 Master</h3><h4 id="3-1、配置-Systemd"><a href="#3-1、配置-Systemd" class="headerlink" title="3.1、配置 Systemd"></a>3.1、配置 Systemd</h4><p>首先下载相关可执行文件并复制到 Path 目录下，然后创建一下配置目录等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/gravitational/teleport/releases/download/v2.3.5/teleport-v2.3.5-linux-amd64-bin.tar.gz<br>tar -zxvf teleport-v2.3.5-linux-amd64-bin.tar.gz<br><span class="hljs-built_in">mv</span> teleport/tctl teleport/teleport teleport/tsh /usr/local/bin<br><span class="hljs-built_in">mkdir</span> -p /etc/teleport /data/teleport<br></code></pre></td></tr></table></figure><p>然后为了让服务后台运行创建一个 systemd service 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/teleport.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Teleport SSH Service</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=simple</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">ExecStart=/usr/local/bin/teleport start -c /etc/teleport/teleport.yaml</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="3-2、配置-Teleport"><a href="#3-2、配置-Teleport" class="headerlink" title="3.2、配置 Teleport"></a>3.2、配置 Teleport</h4><p>Systemd 配置完成后，就需要写一个 Teleport 的配置文件来让 Teleport 启动，具体选项含义可以参考 <a href="https://gravitational.com/teleport/docs/2.3/admin-guide/">官方文档</a>；以下为我的配置样例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># By default, this file should be stored in /etc/teleport.yaml</span><br><br><span class="hljs-comment"># This section of the configuration file applies to all teleport</span><br><span class="hljs-comment"># services.</span><br><span class="hljs-attr">teleport:</span><br>    <span class="hljs-comment"># nodename allows to assign an alternative name this node can be reached by.</span><br>    <span class="hljs-comment"># by default it&#x27;s equal to hostname</span><br>    <span class="hljs-attr">nodename:</span> <span class="hljs-string">mritd.master</span><br><br>    <span class="hljs-comment"># Data directory where Teleport keeps its data, like keys/users for</span><br>    <span class="hljs-comment"># authentication (if using the default BoltDB back-end)</span><br>    <span class="hljs-attr">data_dir:</span> <span class="hljs-string">/data/teleport</span><br><br>    <span class="hljs-comment"># one-time invitation token used to join a cluster. it is not used on</span><br>    <span class="hljs-comment"># subsequent starts</span><br>    <span class="hljs-attr">auth_token:</span> <span class="hljs-string">jYektagNTmhjv9Dh</span><br><br>    <span class="hljs-comment"># when running in multi-homed or NATed environments Teleport nodes need</span><br>    <span class="hljs-comment"># to know which IP it will be reachable at by other nodes</span><br>    <span class="hljs-attr">advertise_ip:</span> <span class="hljs-number">92.223</span><span class="hljs-number">.67</span><span class="hljs-number">.84</span><br><br>    <span class="hljs-comment"># list of auth servers in a cluster. you will have more than one auth server</span><br>    <span class="hljs-comment"># if you configure teleport auth to run in HA configuration</span><br>    <span class="hljs-attr">auth_servers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3025</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3025</span><br><br>    <span class="hljs-comment"># Teleport throttles all connections to avoid abuse. These settings allow</span><br>    <span class="hljs-comment"># you to adjust the default limits</span><br>    <span class="hljs-attr">connection_limits:</span><br>        <span class="hljs-attr">max_connections:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">max_users:</span> <span class="hljs-number">250</span><br><br>    <span class="hljs-comment"># Logging configuration. Possible output values are &#x27;stdout&#x27;, &#x27;stderr&#x27; and</span><br>    <span class="hljs-comment"># &#x27;syslog&#x27;. Possible severity values are INFO, WARN and ERROR (default).</span><br>    <span class="hljs-attr">log:</span><br>        <span class="hljs-attr">output:</span> <span class="hljs-string">stdout</span><br>        <span class="hljs-attr">severity:</span> <span class="hljs-string">INFO</span><br><br>    <span class="hljs-comment"># Type of storage used for keys. You need to configure this to use etcd</span><br>    <span class="hljs-comment"># backend if you want to run Teleport in HA configuration.</span><br>    <span class="hljs-attr">storage:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">bolt</span><br><br>    <span class="hljs-comment"># Cipher algorithms that the server supports. This section only needs to be</span><br>    <span class="hljs-comment"># set if you want to override the defaults.</span><br>    <span class="hljs-attr">ciphers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes128-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes192-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes256-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes128-gcm@openssh.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">arcfour256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">arcfour128</span><br><br>    <span class="hljs-comment"># Key exchange algorithms that the server supports. This section only needs</span><br>    <span class="hljs-comment"># to be set if you want to override the defaults.</span><br>    <span class="hljs-attr">kex_algos:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">curve25519-sha256@libssh.org</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp384</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp521</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">diffie-hellman-group14-sha1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">diffie-hellman-group1-sha1</span><br><br>    <span class="hljs-comment"># Message authentication code (MAC) algorithms that the server supports.</span><br>    <span class="hljs-comment"># This section only needs to be set if you want to override the defaults.</span><br>    <span class="hljs-attr">mac_algos:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha2-256-etm@openssh.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha2-256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha1-96</span><br><br><span class="hljs-comment"># This section configures the &#x27;auth service&#x27;:</span><br><span class="hljs-attr">auth_service:</span><br>    <span class="hljs-comment"># Turns &#x27;auth&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-attr">authentication:</span><br>        <span class="hljs-comment"># default authentication type. possible values are &#x27;local&#x27;, &#x27;oidc&#x27; and &#x27;saml&#x27;</span><br>        <span class="hljs-comment"># only local authentication (Teleport&#x27;s own user DB) is supported in the open</span><br>        <span class="hljs-comment"># source version</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">local</span><br>        <span class="hljs-comment"># second_factor can be off, otp, or u2f</span><br>        <span class="hljs-attr">second_factor:</span> <span class="hljs-string">otp</span><br>        <span class="hljs-comment"># this section is used if second_factor is set to &#x27;u2f&#x27;</span><br>        <span class="hljs-comment">#u2f:</span><br>        <span class="hljs-comment">#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible</span><br>        <span class="hljs-comment">#    # by the end users</span><br>        <span class="hljs-comment">#    app_id: https://localhost:3080</span><br>        <span class="hljs-comment">#    # facets must list all proxy servers if there are more than one deployed</span><br>        <span class="hljs-comment">#    facets:</span><br>        <span class="hljs-comment">#    - https://localhost:3080</span><br><br>    <span class="hljs-comment"># IP and the port to bind to. Other Teleport nodes will be connecting to</span><br>    <span class="hljs-comment"># this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client</span><br>    <span class="hljs-comment"># certificates</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3025</span><br><br>    <span class="hljs-comment"># Pre-defined tokens for adding new nodes to a cluster. Each token specifies</span><br>    <span class="hljs-comment"># the role a new node will be allowed to assume. The more secure way to</span><br>    <span class="hljs-comment"># add nodes is to use `ttl node add --ttl` command to generate auto-expiring</span><br>    <span class="hljs-comment"># tokens.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># We recommend to use tools like `pwgen` to generate sufficiently random</span><br>    <span class="hljs-comment"># tokens of 32+ byte length.</span><br>    <span class="hljs-attr">tokens:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;proxy,node:jYektagNTmhjv9Dh&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;auth:jYektagNTmhjv9Dh&quot;</span><br><br>    <span class="hljs-comment"># Optional &quot;cluster name&quot; is needed when configuring trust between multiple</span><br>    <span class="hljs-comment"># auth servers. A cluster name is used as part of a signature in certificates</span><br>    <span class="hljs-comment"># generated by this CA.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># By default an automatically generated GUID is used.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># IMPORTANT: if you change cluster_name, it will invalidate all generated</span><br>    <span class="hljs-comment"># certificates and keys (may need to wipe out /var/lib/teleport directory)</span><br>    <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">&quot;mritd&quot;</span><br><br><span class="hljs-comment"># This section configures the &#x27;node service&#x27;:</span><br><span class="hljs-attr">ssh_service:</span><br>    <span class="hljs-comment"># Turns &#x27;ssh&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-comment"># IP and the port for SSH service to bind to.</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3022</span><br>    <span class="hljs-comment"># See explanation of labels in &quot;Labeling Nodes&quot; section below</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">role:</span> <span class="hljs-string">master</span><br><br>    <span class="hljs-comment"># List of the commands to periodically execute. Their output will be used as node labels.</span><br>    <span class="hljs-comment"># See &quot;Labeling Nodes&quot; section below for more information.</span><br>    <span class="hljs-attr">commands:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">arch</span>             <span class="hljs-comment"># this command will add a label like &#x27;arch=x86_64&#x27; to a node</span><br>      <span class="hljs-attr">command:</span> [<span class="hljs-string">uname</span>, <span class="hljs-string">-p</span>]<br>      <span class="hljs-attr">period:</span> <span class="hljs-string">1h0m0s</span><br><br>    <span class="hljs-comment"># enables reading ~/.tsh/environment before creating a session. by default</span><br>    <span class="hljs-comment"># set to false, can be set true here or as a command line flag.</span><br>    <span class="hljs-attr">permit_user_env:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># This section configures the &#x27;proxy servie&#x27;</span><br><span class="hljs-attr">proxy_service:</span><br>    <span class="hljs-comment"># Turns &#x27;proxy&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-comment"># SSH forwarding/proxy address. Command line (CLI) clients always begin their</span><br>    <span class="hljs-comment"># SSH sessions by connecting to this port</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3023</span><br><br>    <span class="hljs-comment"># Reverse tunnel listening address. An auth server (CA) can establish an</span><br>    <span class="hljs-comment"># outbound (from behind the firewall) connection to this address.</span><br>    <span class="hljs-comment"># This will allow users of the outside CA to connect to behind-the-firewall</span><br>    <span class="hljs-comment"># nodes.</span><br>    <span class="hljs-attr">tunnel_listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3024</span><br><br>    <span class="hljs-comment"># The HTTPS listen address to serve the Web UI and also to authenticate the</span><br>    <span class="hljs-comment"># command line (CLI) users via password+HOTP</span><br>    <span class="hljs-attr">web_listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3080</span><br><br>    <span class="hljs-comment"># TLS certificate for the HTTPS connection. Configuring these properly is</span><br>    <span class="hljs-comment"># critical for Teleport security.</span><br>    <span class="hljs-comment">#https_key_file: /var/lib/teleport/webproxy_key.pem</span><br>    <span class="hljs-comment">#https_cert_file: /var/lib/teleport/webproxy_cert.pem</span><br></code></pre></td></tr></table></figure><p>然后启动 Teleport 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> teleport<br>systemctl start teleport<br></code></pre></td></tr></table></figure><p>如果启动出现如下错误</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key<br>error: Could not load host key: /etc/ssh/ssh_host_ed25519_key<br></code></pre></td></tr></table></figure><p>请执行 ssh-keygen 命令自行生成相关秘钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key<br>ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key<br></code></pre></td></tr></table></figure><h4 id="3-3、添加用户"><a href="#3-3、添加用户" class="headerlink" title="3.3、添加用户"></a>3.3、添加用户</h4><p>公网这台 Teleport 将会作为主要的接入机器，所以在此节点内添加的用户将有权限登录所有集群，包括内网的另一个集群；所以为了方便以后操作先添加一个用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加一个用户名为 mritd 的用户，该用户在所有集群具有 root 用户权限</span><br>tctl --config /etc/teleport/teleport.yaml <span class="hljs-built_in">users</span> add mritd root<br></code></pre></td></tr></table></figure><p>添加成功后会返回一个 OTP 认证初始化地址，浏览器访问后可以使用 Google 扫描 OTP 二维码从而在登录时增加一层 OTP 认证</p><p><img src="https://cdn.oss.link/markdown/chuyf.png" alt="OTP CMD"></p><p>访问该地址后初始化密码及 OTP</p><p><img src="https://cdn.oss.link/markdown/czwmd.png" alt="init OTP"></p><h3 id="四、搭建内网-Master"><a href="#四、搭建内网-Master" class="headerlink" title="四、搭建内网 Master"></a>四、搭建内网 Master</h3><p>内网搭建 Master 和公网类似，只不过为了安全将所有 <code>0.0.0.0</code> 的地址全部换成内网 IP 即可，以下为内网的配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># By default, this file should be stored in /etc/teleport.yaml</span><br><br><span class="hljs-comment"># This section of the configuration file applies to all teleport</span><br><span class="hljs-comment"># services.</span><br><span class="hljs-attr">teleport:</span><br>    <span class="hljs-comment"># nodename allows to assign an alternative name this node can be reached by.</span><br>    <span class="hljs-comment"># by default it&#x27;s equal to hostname</span><br>    <span class="hljs-attr">nodename:</span> <span class="hljs-string">mritd.test1</span><br><br>    <span class="hljs-comment"># Data directory where Teleport keeps its data, like keys/users for</span><br>    <span class="hljs-comment"># authentication (if using the default BoltDB back-end)</span><br>    <span class="hljs-attr">data_dir:</span> <span class="hljs-string">/data/teleport</span><br><br>    <span class="hljs-comment"># one-time invitation token used to join a cluster. it is not used on</span><br>    <span class="hljs-comment"># subsequent starts</span><br>    <span class="hljs-attr">auth_token:</span> <span class="hljs-string">jYektagNTmhjv9Dh</span><br><br>    <span class="hljs-comment"># when running in multi-homed or NATed environments Teleport nodes need</span><br>    <span class="hljs-comment"># to know which IP it will be reachable at by other nodes</span><br>    <span class="hljs-attr">advertise_ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><br><br>    <span class="hljs-comment"># list of auth servers in a cluster. you will have more than one auth server</span><br>    <span class="hljs-comment"># if you configure teleport auth to run in HA configuration</span><br>    <span class="hljs-attr">auth_servers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3025</span><br><br>    <span class="hljs-comment"># Teleport throttles all connections to avoid abuse. These settings allow</span><br>    <span class="hljs-comment"># you to adjust the default limits</span><br>    <span class="hljs-attr">connection_limits:</span><br>        <span class="hljs-attr">max_connections:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">max_users:</span> <span class="hljs-number">250</span><br><br>    <span class="hljs-comment"># Logging configuration. Possible output values are &#x27;stdout&#x27;, &#x27;stderr&#x27; and</span><br>    <span class="hljs-comment"># &#x27;syslog&#x27;. Possible severity values are INFO, WARN and ERROR (default).</span><br>    <span class="hljs-attr">log:</span><br>        <span class="hljs-attr">output:</span> <span class="hljs-string">stdout</span><br>        <span class="hljs-attr">severity:</span> <span class="hljs-string">INFO</span><br><br>    <span class="hljs-comment"># Type of storage used for keys. You need to configure this to use etcd</span><br>    <span class="hljs-comment"># backend if you want to run Teleport in HA configuration.</span><br>    <span class="hljs-attr">storage:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">bolt</span><br><br>    <span class="hljs-comment"># Cipher algorithms that the server supports. This section only needs to be</span><br>    <span class="hljs-comment"># set if you want to override the defaults. </span><br>    <span class="hljs-attr">ciphers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes128-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes192-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes256-ctr</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">aes128-gcm@openssh.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">arcfour256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">arcfour128</span><br><br>    <span class="hljs-comment"># Key exchange algorithms that the server supports. This section only needs</span><br>    <span class="hljs-comment"># to be set if you want to override the defaults.</span><br>    <span class="hljs-attr">kex_algos:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">curve25519-sha256@libssh.org</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp384</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ecdh-sha2-nistp521</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">diffie-hellman-group14-sha1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">diffie-hellman-group1-sha1</span><br><br>    <span class="hljs-comment"># Message authentication code (MAC) algorithms that the server supports.</span><br>    <span class="hljs-comment"># This section only needs to be set if you want to override the defaults.</span><br>    <span class="hljs-attr">mac_algos:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha2-256-etm@openssh.com</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha2-256</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmac-sha1-96</span><br><br><span class="hljs-comment"># This section configures the &#x27;auth service&#x27;:</span><br><span class="hljs-attr">auth_service:</span><br>    <span class="hljs-comment"># Turns &#x27;auth&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-attr">authentication:</span><br>        <span class="hljs-comment"># default authentication type. possible values are &#x27;local&#x27;, &#x27;oidc&#x27; and &#x27;saml&#x27;</span><br>        <span class="hljs-comment"># only local authentication (Teleport&#x27;s own user DB) is supported in the open</span><br>        <span class="hljs-comment"># source version</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">local</span><br>        <span class="hljs-comment"># second_factor can be off, otp, or u2f</span><br>        <span class="hljs-attr">second_factor:</span> <span class="hljs-string">otp</span><br>        <span class="hljs-comment"># this section is used if second_factor is set to &#x27;u2f&#x27;</span><br>        <span class="hljs-comment">#u2f:</span><br>        <span class="hljs-comment">#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible</span><br>        <span class="hljs-comment">#    # by the end users</span><br>        <span class="hljs-comment">#    app_id: https://localhost:3080</span><br>        <span class="hljs-comment">#    # facets must list all proxy servers if there are more than one deployed</span><br>        <span class="hljs-comment">#    facets:</span><br>        <span class="hljs-comment">#    - https://localhost:3080</span><br><br>    <span class="hljs-comment"># IP and the port to bind to. Other Teleport nodes will be connecting to</span><br>    <span class="hljs-comment"># this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client</span><br>    <span class="hljs-comment"># certificates</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3025</span><br><br>    <span class="hljs-comment"># Pre-defined tokens for adding new nodes to a cluster. Each token specifies</span><br>    <span class="hljs-comment"># the role a new node will be allowed to assume. The more secure way to</span><br>    <span class="hljs-comment"># add nodes is to use `ttl node add --ttl` command to generate auto-expiring</span><br>    <span class="hljs-comment"># tokens.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># We recommend to use tools like `pwgen` to generate sufficiently random</span><br>    <span class="hljs-comment"># tokens of 32+ byte length.</span><br>    <span class="hljs-attr">tokens:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;proxy,node:jYektagNTmhjv9Dh&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;auth:jYektagNTmhjv9Dh&quot;</span><br><br>    <span class="hljs-comment"># Optional &quot;cluster name&quot; is needed when configuring trust between multiple</span><br>    <span class="hljs-comment"># auth servers. A cluster name is used as part of a signature in certificates</span><br>    <span class="hljs-comment"># generated by this CA.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># By default an automatically generated GUID is used.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># IMPORTANT: if you change cluster_name, it will invalidate all generated</span><br>    <span class="hljs-comment"># certificates and keys (may need to wipe out /var/lib/teleport directory)</span><br>    <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">&quot;nat&quot;</span><br><br><span class="hljs-comment"># This section configures the &#x27;node service&#x27;:</span><br><span class="hljs-attr">ssh_service:</span><br>    <span class="hljs-comment"># Turns &#x27;ssh&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-comment"># IP and the port for SSH service to bind to.</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3022</span><br>    <span class="hljs-comment"># See explanation of labels in &quot;Labeling Nodes&quot; section below</span><br>    <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">role:</span> <span class="hljs-string">master</span><br><br>    <span class="hljs-comment"># List of the commands to periodically execute. Their output will be used as node labels.</span><br>    <span class="hljs-comment"># See &quot;Labeling Nodes&quot; section below for more information.</span><br>    <span class="hljs-attr">commands:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">arch</span>             <span class="hljs-comment"># this command will add a label like &#x27;arch=x86_64&#x27; to a node</span><br>      <span class="hljs-attr">command:</span> [<span class="hljs-string">uname</span>, <span class="hljs-string">-p</span>]<br>      <span class="hljs-attr">period:</span> <span class="hljs-string">1h0m0s</span><br><br>    <span class="hljs-comment"># enables reading ~/.tsh/environment before creating a session. by default</span><br>    <span class="hljs-comment"># set to false, can be set true here or as a command line flag.</span><br>    <span class="hljs-attr">permit_user_env:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># This section configures the &#x27;proxy servie&#x27;</span><br><span class="hljs-attr">proxy_service:</span><br>    <span class="hljs-comment"># Turns &#x27;proxy&#x27; role on. Default is &#x27;yes&#x27;</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-comment"># SSH forwarding/proxy address. Command line (CLI) clients always begin their</span><br>    <span class="hljs-comment"># SSH sessions by connecting to this port</span><br>    <span class="hljs-attr">listen_addr:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3023</span><br><br>    <span class="hljs-comment"># Reverse tunnel listening address. An auth server (CA) can establish an</span><br>    <span class="hljs-comment"># outbound (from behind the firewall) connection to this address.</span><br>    <span class="hljs-comment"># This will allow users of the outside CA to connect to behind-the-firewall</span><br>    <span class="hljs-comment"># nodes.</span><br>    <span class="hljs-attr">tunnel_listen_addr:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3024</span><br><br>    <span class="hljs-comment"># The HTTPS listen address to serve the Web UI and also to authenticate the</span><br>    <span class="hljs-comment"># command line (CLI) users via password+HOTP</span><br>    <span class="hljs-attr">web_listen_addr:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span><span class="hljs-string">:3080</span><br><br>    <span class="hljs-comment"># TLS certificate for the HTTPS connection. Configuring these properly is</span><br>    <span class="hljs-comment"># critical for Teleport security.</span><br>    <span class="hljs-comment">#https_key_file: /var/lib/teleport/webproxy_key.pem</span><br>    <span class="hljs-comment">#https_cert_file: /var/lib/teleport/webproxy_cert.pem</span><br></code></pre></td></tr></table></figure><p>配置完成后直接启动即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> teleport<br>systemctl start teleport<br></code></pre></td></tr></table></figure><h3 id="五、将内网集群链接至公网"><a href="#五、将内网集群链接至公网" class="headerlink" title="五、将内网集群链接至公网"></a>五、将内网集群链接至公网</h3><p>上文已经讲过，Teleport 通过公网链接内网主机的方式是让内网集群向公网打通一条 ssh 隧道，然后再进行通讯；具体配置如下</p><h4 id="5-1、公网-Master-开启授信集群"><a href="#5-1、公网-Master-开启授信集群" class="headerlink" title="5.1、公网 Master 开启授信集群"></a>5.1、公网 Master 开启授信集群</h4><p>在公网 Master 增加 Token 配置，以允许持有该 Token 的其他内网集群连接到此，修改 <code>/etc/teleport/teleport.yaml</code> 增加一个 token 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">tokens:<br>    - <span class="hljs-string">&quot;proxy,node:jYektagNTmhjv9Dh&quot;</span><br>    - <span class="hljs-string">&quot;auth:jYektagNTmhjv9Dh&quot;</span><br>    - <span class="hljs-string">&quot;trusted_cluster:xiomwWcrKinFw4Vs&quot;</span><br></code></pre></td></tr></table></figure><p>然后重启 Teleport</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart teleport<br></code></pre></td></tr></table></figure><h4 id="5-2、内网-Master-链接公网-Master"><a href="#5-2、内网-Master-链接公网-Master" class="headerlink" title="5.2、内网 Master 链接公网 Master"></a>5.2、内网 Master 链接公网 Master</h4><p>当公网集群开启了允许其他集群链接后，内网集群只需要创建配置进行连接即可，创建配置(cluster.yaml)如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># cluster.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">trusted_cluster</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-comment"># the trusted cluster name MUST match the &#x27;cluster_name&#x27; setting of the</span><br>  <span class="hljs-comment"># cluster</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">local_cluster</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># this field allows to create tunnels that are disabled, but can be enabled later.</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># the token expected by the &quot;main&quot; cluster:</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">xiomwWcrKinFw4Vs</span><br>  <span class="hljs-comment"># the address in &#x27;host:port&#x27; form of the reverse tunnel listening port on the</span><br>  <span class="hljs-comment"># &quot;master&quot; proxy server:</span><br>  <span class="hljs-attr">tunnel_addr:</span> <span class="hljs-number">92.223</span><span class="hljs-number">.67</span><span class="hljs-number">.84</span><span class="hljs-string">:3024</span><br>  <span class="hljs-comment"># the address in &#x27;host:port&#x27; form of the web listening port on the</span><br>  <span class="hljs-comment"># &quot;master&quot; proxy server:</span><br>  <span class="hljs-attr">web_proxy_addr:</span> <span class="hljs-number">92.223</span><span class="hljs-number">.67</span><span class="hljs-number">.84</span><span class="hljs-string">:3080</span><br></code></pre></td></tr></table></figure><p>执行以下命令使内网集群通过 ssh 隧道连接到公网集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tctl --config /etc/teleport/teleport.yaml create /etc/teleport/cluster.yaml<br></code></pre></td></tr></table></figure><p><strong>注意，如果在启动公网和内网集群时没有指定受信的证书( <code>https_cert_file</code>、<code>https_key_file</code> )，那么默认 Teleport 将会生成一个自签名证书，此时在 create 受信集群时将会产生如下错误:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">the trusted cluster uses misconfigured HTTP/TLS certificate<br></code></pre></td></tr></table></figure><p>此时需要在 <strong>待添加集群(内网)</strong> 启动时增加 <code>--insecure</code> 参数，即 Systemd 配置修改如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Teleport SSH Service<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=always<br>ExecStart=/usr/local/bin/teleport start --insecure -c /etc/teleport/teleport.yaml<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后再进行 create 就不会报错</p><h3 id="六、添加其他节点"><a href="#六、添加其他节点" class="headerlink" title="六、添加其他节点"></a>六、添加其他节点</h3><p>两台节点打通后，此时如果有其他机器则可以将其加入到对应集群中，以下以另一台内网机器为例</p><p>由于在主节点 <code>auth_service</code> 中已经预先指定了一个 static Token 用于其他节点加入( <code>proxy,node:jYektagNTmhjv9Dh</code> )，所以其他节点只需要使用这个 Token 加入即可，在另一台内网主机上修改 Systemd 配置如下，然后启动即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Teleport SSH Service<br>After=network.target<br><br>[Service]<br>Type=simple<br>Restart=always<br>ExecStart=/usr/local/bin/teleport start --roles=node,proxy \<br>                                        --token=jYektagNTmhjv9Dh \<br>                                        --auth-server=172.16.0.80<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>此时在内网的 Master 上可以查看到 Node 已经加入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">test1.node ➜ tctl --config /etc/teleport/teleport.yaml nodes <span class="hljs-built_in">ls</span><br>Hostname    UUID                                 Address          Labels<br>----------- ------------------------------------ ---------------- -----------------------<br>test2.node  abc786fe-9a60-4480-80f7-8edc20710e58 172.16.0.81:3022<br>mritd.test1 be9080fb-bdba-4823-9fb6-294e0b0dcce3 172.16.0.80:3022 <span class="hljs-built_in">arch</span>=x86_64,role=master<br></code></pre></td></tr></table></figure><h3 id="七、连接测试"><a href="#七、连接测试" class="headerlink" title="七、连接测试"></a>七、连接测试</h3><h4 id="7-1、Web-测试"><a href="#7-1、Web-测试" class="headerlink" title="7.1、Web 测试"></a>7.1、Web 测试</h4><p>Teleport 支持 Web 页面访问，直接访问 <code>https://公网IP:3080</code>，然后登陆即可，登陆后如下</p><p><img src="https://cdn.oss.link/markdown/9yf6k.png" alt="Web login"></p><p>通过 Cluster 选项可以切换不同集群，点击后面的用户名可以选择不同用户登录到不同主机(用户授权在添加用户时控制)，登陆成功后如下</p><p><img src="https://cdn.oss.link/markdown/m7hz5.png" alt="Login Success"></p><p>通过 Teleport 进行的所有操作可以通过审计菜单进行操作回放</p><p><img src="https://cdn.oss.link/markdown/c8a74.png" alt="Audit"></p><h4 id="7-2、命令行测试"><a href="#7-2、命令行测试" class="headerlink" title="7.2、命令行测试"></a>7.2、命令行测试</h4><p>类 Uninx 系统下我们还是习惯使用终端登录，终端登录需要借助 Teleport 的命令行工具 <code>tsh</code>，<code>tsh</code> 在下载的 release 压缩版中已经有了，具体使用文档请自行 help 和参考官方文档，以下为简单的使用示例</p><ul><li>登录跳板机: 短时间内只需要登录一次即可，登录时需要输入密码及 OTP 口令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> TELEPORT_PROXY=92.223.67.84<br><span class="hljs-built_in">export</span> TELEPORT_USER=mritd<br>tsh login --insecure<br></code></pre></td></tr></table></figure><ul><li>登录主机: 完成上一步 login 后就可以免密码登录任意主机</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># cluster 名字是上面设置的，在 web 界面也能看到</span><br>tsh ssh --cluster nat root@test2.node<br></code></pre></td></tr></table></figure><ul><li>复制文件: <strong>复制文件时不显示进度，并非卡死</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">tsh scp --cluster nat teleport-v2.3.5-linux-amd64-bin.tar.gz root@test2.node:/<br><br>-&gt; teleport-v2.3.5-linux-amd64-bin.tar.gz (16797035)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 深度学习笔记</title>
    <link href="https://mritd.com/2017/11/03/deep-learning-on-kubernetes/"/>
    <id>https://mritd.com/2017/11/03/deep-learning-on-kubernetes/</id>
    <published>2017-11-03T09:37:13.000Z</published>
    <updated>2017-11-03T09:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档</p></blockquote><h3 id="一、先决条件"><a href="#一、先决条件" class="headerlink" title="一、先决条件"></a>一、先决条件</h3><p>Kubernetes 运行深度学习应用实际上要解决的唯一问题就是 GPU 调用，以下只描述 Nvidia 相关的问题以及解决方法；要想完成 Kubernetes 对 GPU 调用，首先要满足以下条件:</p><ul><li>Nvidia 显卡驱动安装正确</li><li>CUDA 安装正确</li><li>Nvidia Docker 安装正确</li></ul><p>关于 Nvidia 驱动和 CUDA 请自行查找安装方法，如果这两部都搞不定，那么不用继续了</p><p><strong>还有一点需要注意: <code>/var/lib</code> 这个目录不能处于单独分区中，具体原因下面阐述</strong></p><h3 id="二、Nvidia-Docker-安装"><a href="#二、Nvidia-Docker-安装" class="headerlink" title="二、Nvidia Docker 安装"></a>二、Nvidia Docker 安装</h3><p>在安装 Nvidia Docker 之前，请确保 Nvidia 驱动以及 CUDA 安装成功，并且 <code>nvidia-smi</code> 能正确显示，如下图所示(来源于网络)</p><p><img src="https://cdn.oss.link/markdown/tdpbk.jpg" alt="nvidia-smi"></p><p>Nvidia Docker 安装极其简单，具体可参考 <a href="https://github.com/NVIDIA/nvidia-docker">官方文档</a>，安装完成后请自行按照官方文档描述进行测试，这一步一般不会出现问题</p><p>如果测试成功后，<strong>请查看 <code>/var/lib/nvidia-docker/volumes</code></strong> 目录下是否有文件，<strong>如果没有，那就意味着 Nvidia Docker 并未生成相关的驱动文件成功，需要单独执行 <code>docker volume create --driver=nvidia-docker --name=nvidia_driver_$(modinfo -F version nvidia)</code> 以生成该文件；该命令生成的方式是将已经安装到系统的相关文件硬链接至此，所以要求 <code>/var/lib</code> 目录不能在单独的分区</strong>；驱动生成完成后应该会产生类似 <code>/var/lib/nvidia-docker/volumes/nvidia_driver/375.66</code> 的目录结构</p><h3 id="三、Kubernetes-配置"><a href="#三、Kubernetes-配置" class="headerlink" title="三、Kubernetes 配置"></a>三、Kubernetes 配置</h3><p>当所有基础环境就绪后，最后需要开启 Kubernetes 对 GPU 支持；Kubernetes GPU 文档可以参考 <a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus">这里</a>，实际主要就是在 kubelet 启动时增加 <code>--feature-gates=&quot;Accelerators=true&quot;</code> 参数，如下所示</p><p><img src="https://cdn.oss.link/markdown/gifs3.jpg" alt="Accelerators"></p><p>所有节点全部修改完成后重启 kubelet 即可，<strong>如果一台机器上有不同型号的显卡，同时希望 Pod 能区别使用不同的 GPU 则可以按照 <a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#api">官方文档</a> 增加相应设置</strong></p><h3 id="四、Deployment-设置"><a href="#四、Deployment-设置" class="headerlink" title="四、Deployment 设置"></a>四、Deployment 设置</h3><p>Deployment 部署采用一个 Tensorflow 镜像作为示例，部署配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sh">apiVersion: apps/v1beta1<br>kind: Deployment<br>metadata:<br>  name: tensorflow<br>  labels:<br>    name: tensorflow<br>spec:<br>  replicas: 1<br>  template:<br>    metadata:<br>      labels:<br>        name: tensorflow<br>    spec:<br>      containers:<br>        - name: tensorflow<br>          image: tensorflow/tensorflow:1.4.0-rc0-gpu<br>          imagePullPolicy: IfNotPresent<br>          <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;sleep 999999&quot;</span>]<br>          ports:<br>            - name: tensorflow<br>              containerPort: 8888<br>          resources: <br>            limits: <br>              alpha.kubernetes.io/nvidia-gpu: 1<br>          volumeMounts:<br>            - mountPath: /usr/local/nvidia<br>              name: nvidia-driver<br>            - mountPath: /dev/nvidia0<br>              name: nvidia0<br>            - mountPath: /dev/nvidia-uvm<br>              name: nvidia-uvm<br>            - mountPath: /dev/nvidia-uvm-tools<br>              name: nvidia-uvm-tools<br>            - mountPath: /dev/nvidiactl<br>              name: nvidiactl<br>      volumes:<br>        - name: nvidia-driver<br>          hostPath:<br>            path: /var/lib/nvidia-docker/volumes/nvidia_driver/375.66<br>        - name: nvidia0<br>          hostPath:<br>            path: /dev/nvidia0<br>        - name: nvidia-uvm<br>          hostPath:<br>            path: /dev/nvidia-uvm<br>        - name: nvidia-uvm-tools<br>          hostPath:<br>            path: /dev/nvidia-uvm-tools<br>        - name: nvidiactl<br>          hostPath:<br>            path: /dev/nvidiactl<br></code></pre></td></tr></table></figure><p><strong>Deployment 中运行的 Pod 需要挂载对应的宿主机设备文件以及驱动文件才能正确的调用宿主机 GPU，所以一定要确保前几步生成的相关驱动文件等没问题；如果有多个 nvidia 显卡的话可能需要挂载多个 nvidia 设备</strong></p><p>Pod 运行成功后可执行以下代码测试 GPU 调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>hello = tf.constant(<span class="hljs-string">&#x27;Hello, TensorFlow!&#x27;</span>)<br>sess = tf.Session()<br><span class="hljs-built_in">print</span>(sess.run(hello))<br>a = tf.constant(<span class="hljs-number">10</span>)<br>b = tf.constant(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(sess.run(a + b))<br></code></pre></td></tr></table></figure><p>成功后截图如下</p><p><img src="https://cdn.oss.link/markdown/l7ufl.jpg" alt="Tensorflow"></p>]]></content>
    
    
    <summary type="html">本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    <category term="Docker" scheme="https://mritd.com/categories/kubernetes/docker/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.8 kube-proxy 开启 ipvs</title>
    <link href="https://mritd.com/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/"/>
    <id>https://mritd.com/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/</id>
    <published>2017-10-10T09:19:04.000Z</published>
    <updated>2017-10-10T09:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>目前测试为 5 台虚拟机，CentOS 系统，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下</p><table><thead><tr><th>IP</th><th>组件</th></tr></thead><tbody><tr><td>10.10.1.5</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.6</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.7</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.8</td><td>Node</td></tr><tr><td>10.10.1.9</td><td>Node</td></tr></tbody></table><h3 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h3><p>之所以把这个单独写一个标题是因为坑有点多，为了避免下面出现问题，先说一下注意事项:</p><h4 id="2-1、SELinux"><a href="#2-1、SELinux" class="headerlink" title="2.1、SELinux"></a>2.1、SELinux</h4><p>如果对 SELinux 玩的不溜的朋友，我建议先关闭  SELinux，关闭方法如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑 /etc/selinux/config 文件；确保 SELINUX=disabled</span><br>docker1.node ➜  ~ <span class="hljs-built_in">cat</span> /etc/selinux/config<br><br><span class="hljs-comment"># This file controls the state of SELinux on the system.</span><br><span class="hljs-comment"># SELINUX= can take one of these three values:</span><br><span class="hljs-comment">#     enforcing - SELinux security policy is enforced.</span><br><span class="hljs-comment">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-comment">#     disabled - No SELinux policy is loaded.</span><br>SELINUX=disabled<br><span class="hljs-comment"># SELINUXTYPE= can take one of three two values:</span><br><span class="hljs-comment">#     targeted - Targeted processes are protected,</span><br><span class="hljs-comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span><br><span class="hljs-comment">#     mls - Multi Level Security protection.</span><br>SELINUXTYPE=targeted<br></code></pre></td></tr></table></figure><p><strong>然后重启机器并验证</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ sestatus<br>SELinux status:                 disabled<br></code></pre></td></tr></table></figure><h4 id="2-2、Firewall"><a href="#2-2、Firewall" class="headerlink" title="2.2、Firewall"></a>2.2、Firewall</h4><p>搭建时尽量关闭防火墙，如果你玩的很溜，那么请在测试没问题后再开启防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><h4 id="2-3、内核参数调整"><a href="#2-3、内核参数调整" class="headerlink" title="2.3、内核参数调整"></a>2.3、内核参数调整</h4><p>确保内核已经开启如下参数，或者说确保 <code>/etc/sysctl.conf</code> 有如下配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ <span class="hljs-built_in">cat</span> /etc/sysctl.conf<br><span class="hljs-comment"># sysctl settings are defined through files in</span><br><span class="hljs-comment"># /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Vendors settings live in /usr/lib/sysctl.d/.</span><br><span class="hljs-comment"># To override a whole file, create a new file with the same in</span><br><span class="hljs-comment"># /etc/sysctl.d/ and put new settings there. To override</span><br><span class="hljs-comment"># only specific settings, add a file with a lexically later</span><br><span class="hljs-comment"># name in /etc/sysctl.d/ and put new settings there.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span><br>net.ipv4.ip_forward=1<br>net.bridge.bridge-nf-call-iptables=1<br>net.bridge.bridge-nf-call-ip6tables=1<br></code></pre></td></tr></table></figure><p>然后执行 <code>sysctl -p</code> 使之生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ sysctl -p<br>net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br></code></pre></td></tr></table></figure><h4 id="2-4、内核模块加载"><a href="#2-4、内核模块加载" class="headerlink" title="2.4、内核模块加载"></a>2.4、内核模块加载</h4><p>由于 ipvs 已经加入到内核主干，所以需要内核模块支持，请确保内核已经加载了相应模块；如不确定，执行以下脚本，以确保内核加载相应模块，<strong>否则会出现 <code>failed to load kernel modules: [ip_vs_rr ip_vs_sh ip_vs_wrr]</code> 错误</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">#!/bin/bash</span><br><span class="hljs-string">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;</span><br><span class="hljs-string">for kernel_module in \$&#123;ipvs_modules&#125;; do</span><br><span class="hljs-string">    /sbin/modinfo -F filename \$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="hljs-string">    if [ $? -eq 0 ]; then</span><br><span class="hljs-string">        /sbin/modprobe \$&#123;kernel_module&#125;</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">done</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs<br></code></pre></td></tr></table></figure><p>执行后应该如下图所示，<strong>如果 <code>lsmod | grep ip_vs</code> 并未出现 <code>ip_vs_rr</code> 等模块；那么请更换内核(一般不会，2.6 以后 ipvs 好像已经就合并进主干了)</strong></p><p><img src="https://cdn.oss.link/markdown/49wbb.jpg" alt="Load kernel modules"></p><h3 id="三、开启-ipvs-支持"><a href="#三、开启-ipvs-支持" class="headerlink" title="三、开启 ipvs 支持"></a>三、开启 ipvs 支持</h3><h4 id="3-1、修改配置"><a href="#3-1、修改配置" class="headerlink" title="3.1、修改配置"></a>3.1、修改配置</h4><p>修改 <code>/etc/kubernetes/proxy</code> 配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes proxy config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_PROXY_ARGS=<span class="hljs-string">&quot;--bind-address=10.10.1.8 \</span><br><span class="hljs-string">                 --hostname-override=docker4.node \</span><br><span class="hljs-string">                 --masquerade-all \</span><br><span class="hljs-string">                 --feature-gates=SupportIPVSProxyMode=true \</span><br><span class="hljs-string">                 --proxy-mode=ipvs \</span><br><span class="hljs-string">                 --ipvs-min-sync-period=5s \</span><br><span class="hljs-string">                 --ipvs-sync-period=5s \</span><br><span class="hljs-string">                 --ipvs-scheduler=rr \</span><br><span class="hljs-string">                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span><br><span class="hljs-string">                 --cluster-cidr=10.254.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><p><strong>启用 ipvs 后与 1.7 版本的配置差异如下：</strong></p><ul><li>增加 <code>--feature-gates=SupportIPVSProxyMode=true</code> 选项，用于告诉 kube-proxy 开启 ipvs 支持，因为目前 ipvs 并未稳定</li><li>增加 <code>ipvs-min-sync-period</code>、<code>--ipvs-sync-period</code>、<code>--ipvs-scheduler</code> 三个参数用于调整 ipvs，具体参数值请自行查阅 ipvs 文档</li><li><strong>增加 <code>--masquerade-all</code> 选项，以确保反向流量通过</strong></li></ul><p><strong>重点说一下 <code>--masquerade-all</code> 选项: kube-proxy ipvs 是基于 NAT 实现的，当创建一个 service 后，kubernetes 会在每个节点上创建一个网卡，同时帮你将 Service IP(VIP) 绑定上，此时相当于每个 Node 都是一个 ds，而其他任何 Node 上的 Pod，甚至是宿主机服务(比如 kube-apiserver 的 6443)都可能成为 rs；按照正常的 lvs nat 模型，所有 rs 应该将 ds 设置成为默认网关，以便数据包在返回时能被 ds 正确修改；在 kubernetes 将 vip 设置到每个 Node 后，默认路由显然不可行，所以要设置 <code>--masquerade-all</code> 选项，以便反向数据包能通过</strong></p><p>以上描述可能并不精准，具体请看 <a href="https://docs.google.com/document/d/1YEBWR4EWeCEWwxufXzRM0e82l_lYYzIXQiSayGaVQ8M/edit?usp=sharing">Google 文档</a></p><h4 id="3-2、测试-ipvs"><a href="#3-2、测试-ipvs" class="headerlink" title="3.2、测试 ipvs"></a>3.2、测试 ipvs</h4><p>修改完成后，重启 kube-proxy 使其生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart kube-proxy<br></code></pre></td></tr></table></figure><p>重启后日志中应该能看到如下输出，不应该有其他提示 ipvs 的错误信息出现</p><p><img src="https://cdn.oss.link/markdown/o05rq.jpg" alt="kube-proxy ipvs log"></p><p>同时使用 ipvsadm 命令应该能看到相应的 service 的 ipvs 规则(ipvsadm 自己安装一下)</p><p><img src="https://cdn.oss.link/markdown/d1ilk.jpg" alt="ipvs role"></p><p>然后进入 Pod 测试</p><p><img src="https://cdn.oss.link/markdown/42pjm.jpg" alt="test ipvs1"></p><p><strong>最后说一点: ipvs 尚未稳定，请慎用；而且 <code>--masquerade-all</code> 选项与 Calico 安全策略控制不兼容，请酌情考虑使用(Calico 在做网络策略限制的时候要求不能开启此选项)</strong></p>]]></content>
    
    
    <summary type="html">Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 1.8 集群搭建</title>
    <link href="https://mritd.com/2017/10/09/set-up-kubernetes-1.8-ha-cluster/"/>
    <id>https://mritd.com/2017/10/09/set-up-kubernetes-1.8-ha-cluster/</id>
    <published>2017-10-09T14:48:03.000Z</published>
    <updated>2017-10-09T14:48:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>目前测试为 5 台虚拟机，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下</p><table><thead><tr><th>IP</th><th>组件</th></tr></thead><tbody><tr><td>10.10.1.5</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.6</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.7</td><td>Master、Node、etcd</td></tr><tr><td>10.10.1.8</td><td>Node</td></tr><tr><td>10.10.1.9</td><td>Node</td></tr></tbody></table><p><strong>本文尽量以实际操作为主，因为写过一篇 <a href="https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/">Kubernetes 1.7 搭建文档</a>，所以以下细节部分不在详细阐述，不懂得可以参考上一篇文章；本文所有安装工具均已打包上传到了 <a href="https://pan.baidu.com/s/1nvwZCfv">百度云</a> 密码: <code>4zaz</code>，可直接下载重复搭建过程，搭建前请自行 load 好 images 目录下的相关 docker 镜像</strong></p><h3 id="二、搭建-Etcd-集群"><a href="#二、搭建-Etcd-集群" class="headerlink" title="二、搭建 Etcd 集群"></a>二、搭建 Etcd 集群</h3><h4 id="2-1、生成-Etcd-证书"><a href="#2-1、生成-Etcd-证书" class="headerlink" title="2.1、生成 Etcd 证书"></a>2.1、生成 Etcd 证书</h4><p>同样证书工具仍使用的是 <a href="https://pkg.cfssl.org/">cfssl</a>，百度云的压缩包里已经包含了，下面直接上配置(<strong>注意，所有证书生成只需要在任意一台主机上生成一遍即可，我这里在 Master 上操作的</strong>)</p><h5 id="etcd-csr-json"><a href="#etcd-csr-json" class="headerlink" title="etcd-csr.json"></a>etcd-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;10.10.1.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;10.10.1.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;10.10.1.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;10.10.1.8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;10.10.1.9&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="etcd-gencert-json"><a href="#etcd-gencert-json" class="headerlink" title="etcd-gencert.json"></a>etcd-gencert.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="etcd-root-ca-csr-json"><a href="#etcd-root-ca-csr-json" class="headerlink" title="etcd-root-ca-csr.json"></a>etcd-root-ca-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd-root-ca&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>最后生成证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca<br>cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd<br></code></pre></td></tr></table></figure><p>证书生成后截图如下</p><p><img src="https://cdn.oss.link/markdown/6mn6y.jpg" alt="Gen Etcd Cert"></p><h4 id="2-2、搭建集群"><a href="#2-2、搭建集群" class="headerlink" title="2.2、搭建集群"></a>2.2、搭建集群</h4><p>首先分发证书及 rpm 包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分发 rpm</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`; <span class="hljs-keyword">do</span><br>    scp etcd-3.2.7-1.fc28.x86_64.rpm root@10.10.1.<span class="hljs-variable">$IP</span>:~<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> rpm -ivh etcd-3.2.7-1.fc28.x86_64.rpm<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 分发证书</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/etcd/ssl<br>    scp *.pem root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/etcd/ssl<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd/ssl<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> -R 644 /etc/etcd/ssl/*<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> 755 /etc/etcd/ssl<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改 etcd 数据目录权限组</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R etcd:etcd /var/lib/etcd<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>然后修改配置如下(其他两个节点类似，只需要改监听地址和 Etcd Name 即可)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ <span class="hljs-built_in">cat</span> /etc/etcd/etcd.conf<br><br><span class="hljs-comment"># [member]</span><br>ETCD_NAME=etcd1<br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/etcd1.etcd&quot;</span><br>ETCD_WAL_DIR=<span class="hljs-string">&quot;/var/lib/etcd/wal&quot;</span><br>ETCD_SNAPSHOT_COUNT=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_HEARTBEAT_INTERVAL=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_ELECTION_TIMEOUT=<span class="hljs-string">&quot;1000&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://10.10.1.5:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://10.10.1.5:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_MAX_SNAPSHOTS=<span class="hljs-string">&quot;5&quot;</span><br>ETCD_MAX_WALS=<span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment">#ETCD_CORS=&quot;&quot;</span><br><br><span class="hljs-comment"># [cluster]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://10.10.1.5:2380&quot;</span><br><span class="hljs-comment"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://10.10.1.5:2380,etcd2=https://10.10.1.6:2380,etcd3=https://10.10.1.7:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://10.10.1.5:2379&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</span><br><span class="hljs-comment">#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;</span><br><br><span class="hljs-comment"># [proxy]</span><br><span class="hljs-comment">#ETCD_PROXY=&quot;off&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</span><br><br><span class="hljs-comment"># [security]</span><br>ETCD_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_PEER_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_PEER_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_PEER_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># [logging]</span><br><span class="hljs-comment">#ETCD_DEBUG=&quot;false&quot;</span><br><span class="hljs-comment"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</span><br><span class="hljs-comment">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>最后启动集群并测试如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start etcd<br>systemctl <span class="hljs-built_in">enable</span> etcd<br><br><span class="hljs-built_in">export</span> ETCDCTL_API=3<br>etcdctl --cacert=/etc/etcd/ssl/etcd-root-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 endpoint health<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/ecrgr.jpg" alt="check etcd"></p><h3 id="三、搭建-Master-节点"><a href="#三、搭建-Master-节点" class="headerlink" title="三、搭建 Master 节点"></a>三、搭建 Master 节点</h3><h4 id="3-1、生成-Kubernetes-证书"><a href="#3-1、生成-Kubernetes-证书" class="headerlink" title="3.1、生成 Kubernetes 证书"></a>3.1、生成 Kubernetes 证书</h4><p><strong>生成证书配置文件需要借助 kubectl，所以先要安装一下 kubernetes-client 包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -ivh kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm<br></code></pre></td></tr></table></figure><p>生成证书配置如下</p><h5 id="admin-csr-json"><a href="#admin-csr-json" class="headerlink" title="admin-csr.json"></a>admin-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="k8s-gencert-json"><a href="#k8s-gencert-json" class="headerlink" title="k8s-gencert.json"></a>k8s-gencert.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;kubernetes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="k8s-root-ca-csr-json"><a href="#k8s-root-ca-csr-json" class="headerlink" title="k8s-root-ca-csr.json"></a>k8s-root-ca-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="kube-proxy-csr-json"><a href="#kube-proxy-csr-json" class="headerlink" title="kube-proxy-csr.json"></a>kube-proxy-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="kubernetes-csr-json"><a href="#kubernetes-csr-json" class="headerlink" title="kubernetes-csr.json"></a>kubernetes-csr.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.254.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.10.1.5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.10.1.6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.10.1.7&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.10.1.8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.10.1.9&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后生成证书及配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成证书</span><br>cfssl gencert --initca=<span class="hljs-literal">true</span> k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca<br><br><span class="hljs-keyword">for</span> targetName <span class="hljs-keyword">in</span> kubernetes admin kube-proxy; <span class="hljs-keyword">do</span><br>    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes <span class="hljs-variable">$targetName</span>-csr.json | cfssljson --bare <span class="hljs-variable">$targetName</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 生成配置</span><br><span class="hljs-built_in">export</span> KUBE_APISERVER=<span class="hljs-string">&quot;https://127.0.0.1:6443&quot;</span><br><span class="hljs-built_in">export</span> BOOTSTRAP_TOKEN=$(<span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">od</span> -An -t x | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Tokne: <span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>&quot;</span><br><br><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kubelet bootstrapping kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config set-credentials kubelet-bootstrap \<br>  --token=<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kubelet-bootstrap \<br>  --kubeconfig=bootstrap.kubeconfig<br>kubectl config use-context default --kubeconfig=bootstrap.kubeconfig<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Create kube-proxy kubeconfig...&quot;</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-credentials kube-proxy \<br>  --client-certificate=kube-proxy.pem \<br>  --client-key=kube-proxy-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-proxy \<br>  --kubeconfig=kube-proxy.kubeconfig<br>kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig<br><br><span class="hljs-comment"># 生成高级审计配置</span><br><span class="hljs-built_in">cat</span> &gt;&gt; audit-policy.yaml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"># Log all requests at the Metadata level.</span><br><span class="hljs-string">apiVersion: audit.k8s.io/v1beta1</span><br><span class="hljs-string">kind: Policy</span><br><span class="hljs-string">rules:</span><br><span class="hljs-string">- level: Metadata</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="3-2、分发-rpm-及证书"><a href="#3-2、分发-rpm-及证书" class="headerlink" title="3.2、分发 rpm 及证书"></a>3.2、分发 rpm 及证书</h4><p>创建好证书以后就要进行分发，同时由于 Master 也作为 Node 使用，所以以下命令中在 Master 上也安装了 kubelet、kube-proxy 组件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分发并安装 rpm</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`; <span class="hljs-keyword">do</span><br>    scp kubernetes*.rpm root@10.10.1.<span class="hljs-variable">$IP</span>:~; <br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> yum install -y kubernetes*.rpm<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 分发证书</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/kubernetes/ssl<br>    scp *.pem root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/kubernetes/ssl<br>    scp *.kubeconfig token.csv audit-policy.yaml root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 设置 log 目录权限</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 5 7`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> -p /var/log/kube-audit /usr/libexec/kubernetes<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /var/log/kube-audit /usr/libexec/kubernetes<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> -R 755 /var/log/kube-audit /usr/libexec/kubernetes<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="3-3、-搭建-Master-节点"><a href="#3-3、-搭建-Master-节点" class="headerlink" title="3.3、 搭建 Master 节点"></a>3.3、 搭建 Master 节点</h4><p>证书与 rpm 都安装完成后，只需要修改配置(配置位于 <code>/etc/kubernetes</code> 目录)后启动相关组件即可</p><ul><li>config 通用配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure various aspects of all</span><br><span class="hljs-comment"># kubernetes services, including</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kube-apiserver.service</span><br><span class="hljs-comment">#   kube-controller-manager.service</span><br><span class="hljs-comment">#   kube-scheduler.service</span><br><span class="hljs-comment">#   kubelet.service</span><br><span class="hljs-comment">#   kube-proxy.service</span><br><span class="hljs-comment"># logging to stderr means we get it in the systemd journal</span><br>KUBE_LOGTOSTDERR=<span class="hljs-string">&quot;--logtostderr=true&quot;</span><br><br><span class="hljs-comment"># journal message level, 0 is debug</span><br>KUBE_LOG_LEVEL=<span class="hljs-string">&quot;--v=2&quot;</span><br><br><span class="hljs-comment"># Should this cluster be allowed to run privileged docker containers</span><br>KUBE_ALLOW_PRIV=<span class="hljs-string">&quot;--allow-privileged=true&quot;</span><br><br><span class="hljs-comment"># How the controller-manager, scheduler, and proxy find the apiserver</span><br>KUBE_MASTER=<span class="hljs-string">&quot;--master=http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><h5 id="apiserver-配置"><a href="#apiserver-配置" class="headerlink" title="apiserver 配置"></a>apiserver 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure the kube-apiserver</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># The address on the local server to listen to.</span><br>KUBE_API_ADDRESS=<span class="hljs-string">&quot;--advertise-address=10.10.1.5 --insecure-bind-address=127.0.0.1 --bind-address=10.10.1.5&quot;</span><br><br><span class="hljs-comment"># The port on the local server to listen on.</span><br>KUBE_API_PORT=<span class="hljs-string">&quot;--insecure-port=8080 --secure-port=6443&quot;</span><br><br><span class="hljs-comment"># Port minions listen on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><br><span class="hljs-comment"># Comma separated list of nodes in the etcd cluster</span><br>KUBE_ETCD_SERVERS=<span class="hljs-string">&quot;--etcd-servers=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379&quot;</span><br><br><span class="hljs-comment"># Address range to use for services</span><br>KUBE_SERVICE_ADDRESSES=<span class="hljs-string">&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</span><br><br><span class="hljs-comment"># default admission control policies</span><br>KUBE_ADMISSION_CONTROL=<span class="hljs-string">&quot;--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_API_ARGS=<span class="hljs-string">&quot;--authorization-mode=RBAC,Node \</span><br><span class="hljs-string">               --anonymous-auth=false \</span><br><span class="hljs-string">               --kubelet-https=true \</span><br><span class="hljs-string">               --enable-bootstrap-token-auth \</span><br><span class="hljs-string">               --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">               --service-node-port-range=30000-50000 \</span><br><span class="hljs-string">               --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="hljs-string">               --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="hljs-string">               --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">               --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">               --etcd-quorum-read=true \</span><br><span class="hljs-string">               --storage-backend=etcd3 \</span><br><span class="hljs-string">               --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem \</span><br><span class="hljs-string">               --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">               --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">               --enable-swagger-ui=true \</span><br><span class="hljs-string">               --apiserver-count=3 \</span><br><span class="hljs-string">               --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><br><span class="hljs-string">               --audit-log-maxage=30 \</span><br><span class="hljs-string">               --audit-log-maxbackup=3 \</span><br><span class="hljs-string">               --audit-log-maxsize=100 \</span><br><span class="hljs-string">               --audit-log-path=/var/log/kube-audit/audit.log \</span><br><span class="hljs-string">               --event-ttl=1h&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意：API SERVER 对比 1.7 配置出现几项变动:</strong></p><ul><li>移除了 <code>--runtime-config=rbac.authorization.k8s.io/v1beta1</code> 配置，因为 RBAC 已经稳定，被纳入了 v1 api，不再需要指定开启</li><li><code>--authorization-mode</code> 授权模型增加了 <code>Node</code> 参数，因为 1.8 后默认 <code>system:node</code> role 不会自动授予 <code>system:nodes</code> 组，具体请参看 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading">CHANGELOG</a>(before-upgrading 段最后一条说明)</li><li>由于以上原因，<code>--admission-control</code> 同时增加了 <code>NodeRestriction</code> 参数，关于关于节点授权器请参考 <a href="https://kubernetes.io/docs/admin/authorization/node/">Using Node Authorization</a></li><li>增加 <code>--audit-policy-file</code> 参数用于指定高级审计配置，具体可参考 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading">CHANGELOG</a>(before-upgrading 第四条)、<a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#advanced-audit">Advanced audit</a></li><li>移除 <code>--experimental-bootstrap-token-auth</code> 参数，更换为 <code>--enable-bootstrap-token-auth</code>，详情参考 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#auth">CHANGELOG</a>(Auth 第二条)</li></ul><h5 id="controller-manager-配置"><a href="#controller-manager-配置" class="headerlink" title="controller-manager 配置"></a>controller-manager 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># The following values are used to configure the kubernetes controller-manager</span><br><br><span class="hljs-comment"># defaults from config and apiserver should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;--address=0.0.0.0 \</span><br><span class="hljs-string">                              --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                              --cluster-name=kubernetes \</span><br><span class="hljs-string">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --experimental-cluster-signing-duration=87600h0m0s \</span><br><span class="hljs-string">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --leader-elect=true \</span><br><span class="hljs-string">                              --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                              --node-monitor-period=5s \</span><br><span class="hljs-string">                              --pod-eviction-timeout=5m0s&quot;</span><br></code></pre></td></tr></table></figure><h5 id="scheduler-配置"><a href="#scheduler-配置" class="headerlink" title="scheduler 配置"></a>scheduler 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes scheduler config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_SCHEDULER_ARGS=<span class="hljs-string">&quot;--leader-elect=true --address=0.0.0.0&quot;</span><br></code></pre></td></tr></table></figure><p>最后启动 Master 相关组件并验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kube-apiserver<br>systemctl start kube-controller-manager<br>systemctl start kube-scheduler<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br></code></pre></td></tr></table></figure><p><img src="https://cdn.oss.link/markdown/klnwa.jpg" alt="Master Success"></p><h3 id="四、搭建-Node-节点"><a href="#四、搭建-Node-节点" class="headerlink" title="四、搭建 Node 节点"></a>四、搭建 Node 节点</h3><h4 id="4-1、分发-rpm-及证书"><a href="#4-1、分发-rpm-及证书" class="headerlink" title="4.1、分发 rpm 及证书"></a>4.1、分发 rpm 及证书</h4><p>对于 Node 节点，只需要安装 <code>kubernetes-node</code> 即可，同时为了方便使用，这里也安装了 <code>kubernetes-client</code>，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 8 9`;<span class="hljs-keyword">do</span><br>    scp kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm root@10.10.1.<span class="hljs-variable">$IP</span>:~<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> yum install -y kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>同时还要分发相关证书；这里将 Etcd 证书已进行了分发，是因为 <strong>虽然 Node 节点上没有 Etcd，但是如果部署网络组件，如 calico、flannel 等时，网络组件需要联通 Etcd 就会用到 Etcd 的相关证书。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分发 Kubernetes 证书</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 8 9`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/kubernetes/ssl<br>    scp *.pem root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/kubernetes/ssl<br>    scp *.kubeconfig token.csv audit-policy.yaml root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 分发 Etcd 证书</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 8 9`;<span class="hljs-keyword">do</span><br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> -p /etc/etcd/ssl<br>    scp *.pem root@10.10.1.<span class="hljs-variable">$IP</span>:/etc/etcd/ssl<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> -R 644 /etc/etcd/ssl/*<br>    ssh root@10.10.1.<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> 755 /etc/etcd/ssl<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="4-2、修改-Node-配置"><a href="#4-2、修改-Node-配置" class="headerlink" title="4.2、修改 Node 配置"></a>4.2、修改 Node 配置</h4><p>Node 上只需要修改 kubelet 和 kube-proxy 的配置即可</p><h5 id="config-通用配置"><a href="#config-通用配置" class="headerlink" title="config 通用配置"></a>config 通用配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure various aspects of all</span><br><span class="hljs-comment"># kubernetes services, including</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kube-apiserver.service</span><br><span class="hljs-comment">#   kube-controller-manager.service</span><br><span class="hljs-comment">#   kube-scheduler.service</span><br><span class="hljs-comment">#   kubelet.service</span><br><span class="hljs-comment">#   kube-proxy.service</span><br><span class="hljs-comment"># logging to stderr means we get it in the systemd journal</span><br>KUBE_LOGTOSTDERR=<span class="hljs-string">&quot;--logtostderr=true&quot;</span><br><br><span class="hljs-comment"># journal message level, 0 is debug</span><br>KUBE_LOG_LEVEL=<span class="hljs-string">&quot;--v=2&quot;</span><br><br><span class="hljs-comment"># Should this cluster be allowed to run privileged docker containers</span><br>KUBE_ALLOW_PRIV=<span class="hljs-string">&quot;--allow-privileged=true&quot;</span><br><br><span class="hljs-comment"># How the controller-manager, scheduler, and proxy find the apiserver</span><br><span class="hljs-comment"># KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><h5 id="kubelet-配置"><a href="#kubelet-配置" class="headerlink" title="kubelet 配置"></a>kubelet 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--address=10.10.1.8&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=docker4.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --fail-swap-on=false \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode=promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意: kubelet 配置与 1.7 版本有一定改动</strong></p><ul><li>增加 <code>--fail-swap-on=false</code> 选项，否则可能导致在开启 swap 分区的机器上无法启动 kubelet，详细可参考 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading">CHANGELOG</a>(before-upgrading 第一条)</li><li>移除 <code>--require-kubeconfig</code> 选项，已经过时废弃</li></ul><h5 id="proxy-配置"><a href="#proxy-配置" class="headerlink" title="proxy 配置"></a>proxy 配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes proxy config</span><br><span class="hljs-comment"># default config should be adequate</span><br><span class="hljs-comment"># Add your own!</span><br>KUBE_PROXY_ARGS=<span class="hljs-string">&quot;--bind-address=10.10.1.8 \</span><br><span class="hljs-string">                 --hostname-override=docker4.node \</span><br><span class="hljs-string">                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span><br><span class="hljs-string">                 --cluster-cidr=10.254.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><p><strong>kube-proxy 配置与 1.7 并无改变，最新 1.8 的 ipvs 模式将单独写一篇文章，这里不做介绍</strong></p><h4 id="4-3、创建-Nginx-代理"><a href="#4-3、创建-Nginx-代理" class="headerlink" title="4.3、创建 Nginx 代理"></a>4.3、创建 Nginx 代理</h4><p>由于 HA 方案基于 Nginx 反代实现，所以每个 Node 要启动一个 Nginx 负载均衡 Master，具体参考 <a href="https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/#41ha-master-%E7%AE%80%E8%BF%B0">HA Master 简述</a></p><h5 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建配置目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/nginx<br><br><span class="hljs-comment"># 写入代理配置</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="hljs-string">error_log stderr notice;</span><br><span class="hljs-string"></span><br><span class="hljs-string">worker_processes auto;</span><br><span class="hljs-string">events &#123;</span><br><span class="hljs-string">  multi_accept on;</span><br><span class="hljs-string">  use epoll;</span><br><span class="hljs-string">  worker_connections 1024;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">stream &#123;</span><br><span class="hljs-string">    upstream kube_apiserver &#123;</span><br><span class="hljs-string">        least_conn;</span><br><span class="hljs-string">        server 10.10.1.5:6443;</span><br><span class="hljs-string">        server 10.10.1.6:6443;</span><br><span class="hljs-string">        server 10.10.1.7:6443;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    server &#123;</span><br><span class="hljs-string">        listen        0.0.0.0:6443;</span><br><span class="hljs-string">        proxy_pass    kube_apiserver;</span><br><span class="hljs-string">        proxy_timeout 10m;</span><br><span class="hljs-string">        proxy_connect_timeout 1s;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 更新权限</span><br><span class="hljs-built_in">chmod</span> +r /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><h5 id="nginx-proxy-service"><a href="#nginx-proxy-service" class="headerlink" title="nginx-proxy.service"></a>nginx-proxy.service</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/systemd/system/nginx-proxy.service</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=kubernetes apiserver docker wrapper</span><br><span class="hljs-string">Wants=docker.socket</span><br><span class="hljs-string">After=docker.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">PermissionsStartOnly=true</span><br><span class="hljs-string">ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \\</span><br><span class="hljs-string">                              -v /etc/nginx:/etc/nginx \\</span><br><span class="hljs-string">                              --name nginx-proxy \\</span><br><span class="hljs-string">                              --net=host \\</span><br><span class="hljs-string">                              --restart=on-failure:5 \\</span><br><span class="hljs-string">                              --memory=512M \\</span><br><span class="hljs-string">                              nginx:1.13.5-alpine</span><br><span class="hljs-string">ExecStartPre=-/usr/bin/docker rm -f nginx-proxy</span><br><span class="hljs-string">ExecStop=/usr/bin/docker stop nginx-proxy</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=15s</span><br><span class="hljs-string">TimeoutStartSec=30s</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><strong>最后启动 Nginx 代理即可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start nginx-proxy<br>systemctl <span class="hljs-built_in">enable</span> nginx-proxy<br></code></pre></td></tr></table></figure><h4 id="4-4、添加-Node"><a href="#4-4、添加-Node" class="headerlink" title="4.4、添加 Node"></a>4.4、添加 Node</h4><p>一切准备就绪后就可以添加 Node 了，首先由于我们采用了 <a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/">TLS Bootstrapping</a>，所以需要先创建一个 ClusterRoleBinding</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在任意 master 执行即可</span><br>kubectl create clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=system:node-bootstrapper \<br>  --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><p>然后启动 kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kubelet<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br></code></pre></td></tr></table></figure><p>由于采用了 TLS Bootstrapping，所以 kubelet 启动后不会立即加入集群，而是进行证书申请，从日志中可以看到如下输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">10月 06 19:53:23 docker4.node kubelet[3797]: I1006 19:53:23.917261    3797 bootstrap.go:57] Using bootstrap kubeconfig to generate TLS client cert, key and kubeconfig file<br></code></pre></td></tr></table></figure><p>此时只需要在 master 允许其证书申请即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl get csr | grep Pending | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs kubectl certificate approve<br></code></pre></td></tr></table></figure><p>此时可以看到 Node 已经加入了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker1.node ➜  ~ kubectl get node<br>NAME           STATUS    ROLES     AGE       VERSION<br>docker4.node   Ready     &lt;none&gt;    14m       v1.8.0<br>docker5.node   Ready     &lt;none&gt;    3m        v1.8.0<br></code></pre></td></tr></table></figure><p>最后再启动 kube-proxy 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br></code></pre></td></tr></table></figure><p><strong>再次提醒: 如果 kubelet 启动出现了类似 <code>system:node:xxxx</code> 用户没有权限访问 API 的 RBAC 错误，那么一定是 API Server 授权控制器、准入控制配置有问题，请仔细阅读上面的文档进行更改</strong></p><h4 id="4-5、Master-作为-Node"><a href="#4-5、Master-作为-Node" class="headerlink" title="4.5、Master 作为 Node"></a>4.5、Master 作为 Node</h4><p>如果想讲 Master 也作为 Node 的话，请在 Master 上安装 kubernete-node rpm 包，配置与上面基本一致；<strong>区别于 Master 上不需要启动 nginx 做负载均衡，同时 <code>bootstrap.kubeconfig</code>、<code>kube-proxy.kubeconfig</code> 中的 API Server 地址改成当前 Master IP 即可。</strong></p><p>最终成功后如下图所示</p><p><img src="https://cdn.oss.link/markdown/c4dde.jpg" alt="cluster success"></p><h3 id="五、部署-Calico"><a href="#五、部署-Calico" class="headerlink" title="五、部署 Calico"></a>五、部署 Calico</h3><h4 id="5-1、修改-Calico-配置"><a href="#5-1、修改-Calico-配置" class="headerlink" title="5.1、修改 Calico 配置"></a>5.1、修改 Calico 配置</h4><p>Calico 部署仍然采用 “混搭” 方式，即 Systemd 控制 calico node，cni 等由 kubernetes daemonset 安装，具体请参考 <a href="https://mritd.me/2017/07/31/calico-yml-bug/">Calico 部署踩坑记录</a>，以下直接上代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取 calico.yaml</span><br>wget https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/calico.yaml<br><br><span class="hljs-comment"># 替换 Etcd 地址</span><br>sed -i <span class="hljs-string">&#x27;s@.*etcd_endpoints:.*@\ \ etcd_endpoints:\ \&quot;https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379\&quot;@gi&#x27;</span> calico.yaml<br><br><span class="hljs-comment"># 替换 Etcd 证书</span><br><span class="hljs-built_in">export</span> ETCD_CERT=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><span class="hljs-built_in">export</span> ETCD_KEY=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-key.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><span class="hljs-built_in">export</span> ETCD_CA=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-root-ca.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><br>sed -i <span class="hljs-string">&quot;s@.*etcd-cert:.*@\ \ etcd-cert:\ <span class="hljs-variable">$&#123;ETCD_CERT&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-key:.*@\ \ etcd-key:\ <span class="hljs-variable">$&#123;ETCD_KEY&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-ca:.*@\ \ etcd-ca:\ <span class="hljs-variable">$&#123;ETCD_CA&#125;</span>@gi&quot;</span> calico.yaml<br><br>sed -i <span class="hljs-string">&#x27;s@.*etcd_ca:.*@\ \ etcd_ca:\ &quot;/calico-secrets/etcd-ca&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_cert:.*@\ \ etcd_cert:\ &quot;/calico-secrets/etcd-cert&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_key:.*@\ \ etcd_key:\ &quot;/calico-secrets/etcd-key&quot;@gi&#x27;</span> calico.yaml<br><br><span class="hljs-comment"># 注释掉 calico-node 部分(由 Systemd 接管)</span><br>sed -i <span class="hljs-string">&#x27;103,189s@.*@#&amp;@gi&#x27;</span> calico.yaml<br></code></pre></td></tr></table></figure><h4 id="5-2、创建-Systemd-文件"><a href="#5-2、创建-Systemd-文件" class="headerlink" title="5.2、创建 Systemd 文件"></a>5.2、创建 Systemd 文件</h4><p>上一步注释了 <code>calico.yaml</code> 中 Calico Node 相关内容，为了防止自动获取 IP 出现问题，将其移动到 Systemd，Systemd service 配置如下，<strong>每个节点都要安装 calico-node 的 Service</strong>，其他节点请自行修改 ip(被问我为啥是两个反引号 <code>\\</code>，自己试就知道了)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt; /usr/lib/systemd/system/calico-node.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=calico node</span><br><span class="hljs-string">After=docker.service</span><br><span class="hljs-string">Requires=docker.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">PermissionsStartOnly=true</span><br><span class="hljs-string">ExecStart=/usr/bin/docker run   --net=host --privileged --name=calico-node \\</span><br><span class="hljs-string">                                -e ETCD_ENDPOINTS=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 \\</span><br><span class="hljs-string">                                -e ETCD_CA_CERT_FILE=/etc/etcd/ssl/etcd-root-ca.pem \\</span><br><span class="hljs-string">                                -e ETCD_CERT_FILE=/etc/etcd/ssl/etcd.pem \\</span><br><span class="hljs-string">                                -e ETCD_KEY_FILE=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="hljs-string">                                -e NODENAME=docker1.node \\</span><br><span class="hljs-string">                                -e IP=10.10.1.5 \\</span><br><span class="hljs-string">                                -e IP6= \\</span><br><span class="hljs-string">                                -e AS= \\</span><br><span class="hljs-string">                                -e CALICO_IPV4POOL_CIDR=10.20.0.0/16 \\</span><br><span class="hljs-string">                                -e CALICO_IPV4POOL_IPIP=always \\</span><br><span class="hljs-string">                                -e CALICO_LIBNETWORK_ENABLED=true \\</span><br><span class="hljs-string">                                -e CALICO_NETWORKING_BACKEND=bird \\</span><br><span class="hljs-string">                                -e CALICO_DISABLE_FILE_LOGGING=true \\</span><br><span class="hljs-string">                                -e FELIX_IPV6SUPPORT=false \\</span><br><span class="hljs-string">                                -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \\</span><br><span class="hljs-string">                                -e FELIX_LOGSEVERITYSCREEN=info \\</span><br><span class="hljs-string">                                -v /etc/etcd/ssl/etcd-root-ca.pem:/etc/etcd/ssl/etcd-root-ca.pem \\</span><br><span class="hljs-string">                                -v /etc/etcd/ssl/etcd.pem:/etc/etcd/ssl/etcd.pem \\</span><br><span class="hljs-string">                                -v /etc/etcd/ssl/etcd-key.pem:/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="hljs-string">                                -v /var/run/calico:/var/run/calico \\</span><br><span class="hljs-string">                                -v /lib/modules:/lib/modules \\</span><br><span class="hljs-string">                                -v /run/docker/plugins:/run/docker/plugins \\</span><br><span class="hljs-string">                                -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class="hljs-string">                                -v /var/log/calico:/var/log/calico \\</span><br><span class="hljs-string">                                quay.io/calico/node:v2.6.1</span><br><span class="hljs-string">ExecStop=/usr/bin/docker rm -f calico-node</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=10</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="5-3、修改-kubelet-配置"><a href="#5-3、修改-kubelet-配置" class="headerlink" title="5.3、修改 kubelet 配置"></a>5.3、修改 kubelet 配置</h4><p>根据官方文档要求 <code>kubelet</code> 配置必须增加 <code>--network-plugin=cni</code> 选项，所以需要修改 kubelet 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--address=10.10.1.5&quot;</span><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=docker1.node&quot;</span><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --network-plugin=cni \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --fail-swap-on=false \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode=promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><p>然后重启即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><p>此时执行 <code>kubectl get node</code> 会看到 Node 为 <code>NotReady</code> 状态，属于正常情况</p><h4 id="5-4、创建-Calico-Daemonset"><a href="#5-4、创建-Calico-Daemonset" class="headerlink" title="5.4、创建 Calico Daemonset"></a>5.4、创建 Calico Daemonset</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 先创建 RBAC</span><br>kubectl apply -f https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/rbac.yaml<br><br><span class="hljs-comment"># 再创建 Calico Daemonset</span><br>kubectl create -f calico.yaml<br></code></pre></td></tr></table></figure><h4 id="5-5、创建-Calico-Node"><a href="#5-5、创建-Calico-Node" class="headerlink" title="5.5、创建 Calico Node"></a>5.5、创建 Calico Node</h4><p>Calico Node 采用 Systemd 方式启动，在每个节点配置好 Systemd service后，<strong>每个节点修改对应的 <code>calico-node.service</code> 中的 IP 和节点名称，然后启动即可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart calico-node<br><span class="hljs-built_in">sleep</span> 5<br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><p>此时检查 Node 应该都处于 Ready 状态</p><p><img src="https://cdn.oss.link/markdown/agxp3.jpg" alt="Node Ready"></p><p><strong>最后测试一下跨主机通讯</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 deployment</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; demo.deploy.yml</span><br><span class="hljs-string">apiVersion: apps/v1beta2</span><br><span class="hljs-string">kind: Deployment</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: demo-deployment</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  replicas: 5</span><br><span class="hljs-string">  selector:</span><br><span class="hljs-string">    matchLabels:</span><br><span class="hljs-string">      app: demo</span><br><span class="hljs-string">  template:</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      labels:</span><br><span class="hljs-string">        app: demo</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: demo</span><br><span class="hljs-string">        image: mritd/demo</span><br><span class="hljs-string">        imagePullPolicy: IfNotPresent</span><br><span class="hljs-string">        ports:</span><br><span class="hljs-string">        - containerPort: 80</span><br><span class="hljs-string">EOF</span><br>kubectl create -f demo.deploy.yml<br></code></pre></td></tr></table></figure><p><strong>进入其中一个 Pod，ping 另一个 Pod 的 IP 测试即可</strong></p><p><img src="https://cdn.oss.link/markdown/00krx.jpg" alt="Test Calico"></p><h3 id="六、部署-DNS"><a href="#六、部署-DNS" class="headerlink" title="六、部署 DNS"></a>六、部署 DNS</h3><h4 id="6-1、部署集群-DNS"><a href="#6-1、部署集群-DNS" class="headerlink" title="6.1、部署集群 DNS"></a>6.1、部署集群 DNS</h4><p>DNS 组件部署非常简单，直接创建相应的 deployment 等即可；但是有一个事得说一嘴，Kubernets 一直在推那个 <code>Addon Manager</code> 的工具来管理 DNS 啥的，文档说的条条是道，就是不希望我们手动搞这些东西，防止意外修改云云… 但问题是关于那个 <code>Addon Manager</code> 咋用一句没提，虽然说里面就一个小脚本，看看也能懂；但是我还是选择手动 😌… 还有这个 DNS 配置文件好像又挪地方了，以前在 <code>contrib</code> 项目下的…</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取文件</span><br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kube-dns.yaml.sed<br><span class="hljs-built_in">mv</span> kube-dns.yaml.sed kube-dns.yaml<br><br><span class="hljs-comment"># 修改配置</span><br>sed -i <span class="hljs-string">&#x27;s/$DNS_DOMAIN/cluster.local/gi&#x27;</span> kube-dns.yaml<br>sed -i <span class="hljs-string">&#x27;s/$DNS_SERVER_IP/10.254.0.2/gi&#x27;</span> kube-dns.yaml<br><br><span class="hljs-comment"># 创建</span><br>kubectl create -f kube-dns.yaml<br></code></pre></td></tr></table></figure><p>创建好以后如下所示</p><p><img src="https://cdn.oss.link/markdown/vg95n.jpg" alt="DNS"></p><p>然后创建两组 Pod 和 Service，进入 Pod 中 curl 另一个 Service 名称看看是否能解析；同时还要测试一下外网能否解析</p><p><img src="https://cdn.oss.link/markdown/x185c.jpg" alt="Test DNS1"></p><p>测试外网</p><p><img src="https://cdn.oss.link/markdown/3k9gz.jpg" alt="Test DNS2"></p><h4 id="6-2、部署-DNS-自动扩容部署"><a href="#6-2、部署-DNS-自动扩容部署" class="headerlink" title="6.2、部署 DNS 自动扩容部署"></a>6.2、部署 DNS 自动扩容部署</h4><p>这个同样下载 yaml，然后创建一下即可，不需要修改任何配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml<br>kubectl create -f dns-horizontal-autoscaler.yaml<br></code></pre></td></tr></table></figure><p>部署完成后如下</p><p><img src="https://cdn.oss.link/markdown/mid1u.jpg" alt="DNS autoscaler"></p><p>自动扩容这里不做测试了，虚拟机吃不消了，详情自己参考 <a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/">Autoscale the DNS Service in a Cluster</a></p><p><strong>kube-proxy ipvs 下一篇写，坑有点多，虽然搞定了，但是一篇写有点囫囵吞枣，后来想一想还是分开吧</strong></p>]]></content>
    
    
    <summary type="html">目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Alpine 3.6 OpenJDK 8 Bug</title>
    <link href="https://mritd.com/2017/09/27/alpine-3.6-openjdk-8-bug/"/>
    <id>https://mritd.com/2017/09/27/alpine-3.6-openjdk-8-bug/</id>
    <published>2017-09-27T12:43:12.000Z</published>
    <updated>2017-09-27T12:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近切换项目基础镜像踩到一个大坑，由于 alpine 基础镜像和 OpenJDK8 Bug 导致鼓捣了2天才解决，故记录一下这个问题</p></blockquote><h3 id="一、问题环境"><a href="#一、问题环境" class="headerlink" title="一、问题环境"></a>一、问题环境</h3><p>出现问题的基本环境如下</p><ul><li>OpneJDK 8u131</li><li>Alpine 3.6</li><li>Kaptcha (Java 验证码库)</li></ul><h3 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h3><p>出现问题表象为 <strong>Spring Boot 项目启动后，访问注册页(有验证码)时，验证码不显示，后台报错信息大意为缺失字体库，安装字体后会报错说 <code>libfontmanager.so: AWTFontDefaultChar: symbol not found</code></strong></p><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><p>当出现字体找不到这种错误时，原因是 <strong>Alpine 太过精简，导致里面没有字体，只需要安装字体即可</strong>，在 Dockerfile 中添加如下命令即可:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apk add --update font-adobe-100dpi ttf-dejavu fontconfig<br></code></pre></td></tr></table></figure><p>当安装字体后，可能会出现如下错误:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">Caused by: java.lang.UnsatisfiedLinkError: /usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/libfontmanager.so: Error relocating /usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/libfontmanager.so: AWTFontDefaultChar: symbol not found<br>    at java.lang.ClassLoader<span class="hljs-variable">$NativeLibrary</span>.load(Native Method)<br>    at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941)<br>    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1845)<br>    at java.lang.Runtime.loadLibrary0(Runtime.java:870)<br>    at java.lang.System.loadLibrary(System.java:1122)<br>    at sun.font.FontManagerNativeLibrary<span class="hljs-variable">$1</span>.run(FontManagerNativeLibrary.java:61)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at sun.font.FontManagerNativeLibrary.&lt;clinit&gt;(FontManagerNativeLibrary.java:32)<br>    at sun.font.SunFontManager<span class="hljs-variable">$1</span>.run(SunFontManager.java:339)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at sun.font.SunFontManager.&lt;clinit&gt;(SunFontManager.java:335)<br>    at java.lang.Class.forName0(Native Method)<br>    at java.lang.Class.forName(Class.java:348)<br>    at sun.font.FontManagerFactory<span class="hljs-variable">$1</span>.run(FontManagerFactory.java:82)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at sun.font.FontManagerFactory.getInstance(FontManagerFactory.java:74)<br>    at java.awt.Font.getFont2D(Font.java:491)<br>    at java.awt.Font.getFamily(Font.java:1220)<br>    at java.awt.Font.getFamily_NoClientCode(Font.java:1194)<br>    at java.awt.Font.getFamily(Font.java:1186)<br>    at java.awt.Font.toString(Font.java:1683)<br>    at hudson.util.ChartUtil.&lt;clinit&gt;(ChartUtil.java:260)<br>    at hudson.WebAppMain.contextInitialized(WebAppMain.java:194)<br>    ... 23 more<br></code></pre></td></tr></table></figure><p>Google 半天，最后找到了 <a href="https://bugs.alpinelinux.org/issues/7372">Alpine 官方 Bug 列表</a>，在最后面做了回复，其中大意是: <strong>Alpine 3.6 版本的 Docker 镜像中安装的是 OpenJDK 8u131，这个版本有 BUG，并且在 3.6.3 的 OpenJDK 8.141.15 版本做了修复</strong>；从上面可知我们解决方案有两个:</p><ul><li>降级到 Alpine 3.5，其内的 OpneJDK 是 8u121 版本，没有这个 Bug</li><li>升级到 Alpine Edge，其内部 OpenJDK 版本为 8.144.01，已经修复了这个 Bug</li></ul><p>当然我选择浪一波，做了升级，最终基础镜像的 Dockerfile 如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:edge<br><br>LABEL maintainer=<span class="hljs-string">&quot;mritd &lt;mritd1234@gmail.com&gt;&quot;</span><br><br>ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk<br>ENV PATH <span class="hljs-variable">$PATH</span>:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin<br>ENV JAVA_VERSION 8u144<br>ENV JAVA_ALPINE_VERSION 8.144.01-r0<br><br>RUN apk add --update bash curl tar wget ca-certificates unzip \<br>        openjdk8=<span class="hljs-variable">$&#123;JAVA_ALPINE_VERSION&#125;</span> font-adobe-100dpi ttf-dejavu fontconfig \<br>    &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/cache/apk/* \<br><br>CMD [<span class="hljs-string">&quot;bash&quot;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录一下 Alpine 3.6 OpneJDK 8u131 的 BUG</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Java" scheme="https://mritd.com/tags/java/"/>
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Consul 集群搭建</title>
    <link href="https://mritd.com/2017/09/21/set-up-ha-consul-cluster/"/>
    <id>https://mritd.com/2017/09/21/set-up-ha-consul-cluster/</id>
    <published>2017-09-21T14:50:28.000Z</published>
    <updated>2017-09-21T14:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知道 Consul 用的人多还是少，最近有人问怎么搭建 Consul 集群，这里顺手记录一下吧</p></blockquote><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Consul 与 Etcd 一样，都属于分布式一致性数据库，其主要特性就是在分布式系统中出现意外情况如节点宕机的情况下保证数据的一致性；相对于 Etcd 来说，Consul 提供了更加实用的其他功能特性，如 DNS、健康检查、服务发现、多数据中心等，同时还有 web ui 界面，体验相对于更加友好</p><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><p>同 Etcd 一样，Consul 最少也需要 3 台机器，这里测试实用 5 台机器进行部署集群，具体环境如下</p><table><thead><tr><th>节点</th><th>IP</th><th>Version</th></tr></thead><tbody><tr><td>server</td><td>192.168.1.11</td><td>v0.9.3</td></tr><tr><td>server</td><td>192.168.1.12</td><td>v0.9.3</td></tr><tr><td>server</td><td>192.168.1.13</td><td>v0.9.3</td></tr><tr><td>client</td><td>192.168.1.14</td><td>v0.9.3</td></tr><tr><td>client</td><td>192.168.1.15</td><td>v0.9.3</td></tr></tbody></table><p>其中 consul 采用 rpm 包的形式进行安装，这里并没有使用 docker 方式启动是因为个人习惯重要的数据存储服务交给 systemd管理；因为 docker 存在 docker daemon 的原因，如果用 docker 启动这种存储核心数据的组件，一但 daemon 出现问题那么所有容器都将出现问题；所以个人还是比较习惯将 etcd 和 consul 以二进制装在宿主机，由 systemd 直接管理。</p><h3 id="三、部署集群"><a href="#三、部署集群" class="headerlink" title="三、部署集群"></a>三、部署集群</h3><h4 id="3-1、Consul-集群模式"><a href="#3-1、Consul-集群模式" class="headerlink" title="3.1、Consul 集群模式"></a>3.1、Consul 集群模式</h4><p>Consul 集群与 Etcd 略有区别，<strong>Consul 在启动后分为两种模式:</strong></p><ul><li>Server 模式: 一个 Server 是一个有一组扩展功能的代理，这些功能包括参与 Raft 选举，维护集群状态，响应 RPC 查询，与其他数据中心交互 WAN gossip 和转发查询给 leader 或者远程数据中心。</li><li>Client 模式: 一个 Client 是一个转发所有 RPC 到 Server 的代理。这个 Client 是相对无状态的；Client 唯一执行的后台活动是加入 LAN gossip 池，这有一个最低的资源开销并且仅消耗少量的网络带宽。</li></ul><p><strong>其集群后如下所示:</strong></p><p><img src="https://cdn.oss.link/markdown/n4mdw.jpg" alt="Consul Cluster"></p><h4 id="3-2、集群搭建"><a href="#3-2、集群搭建" class="headerlink" title="3.2、集群搭建"></a>3.2、集群搭建</h4><p>Consul 集群搭建时一般提供两种模式:</p><ul><li><strong>手动模式: 启动第一个节点后，此时此节点处于 bootstrap 模式，其节点手动执行加入</strong></li><li><strong>自动模式: 启动第一个节点后，在其他节点配置好尝试加入的目标节点，然后等待其自动加入(不需要人为命令加入)</strong></li></ul><p>这里采用自动加入模式，搭建过程如下:</p><p><strong>首先获取 Consul 的 rpm 包，鉴于官方并未提供 rpm 安装包，所以我自己造了一个轮子，打包脚本见 <a href="https://github.com/mritd/consul-rpm">Github</a>，以下直接从我的 yum 源中安装</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 yum 源</span><br><span class="hljs-built_in">tee</span> /etc/yum.repos.d/mritd.repo &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[mritdrepo]</span><br><span class="hljs-string">name=Mritd Repository</span><br><span class="hljs-string">baseurl=https://yumrepo.b0.upaiyun.com/centos/7/x86_64</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://cdn.oss.link/keys/rpm.public.key</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 安装 Consul，请不要在大规模部署时使用此 yum 源，CDN 流量不多请手下留情，</span><br><span class="hljs-comment"># 如需大规模部署 请使用 yumdonwloader 工具下载 rpm 后手动分发安装</span><br>yum install -y consul<br></code></pre></td></tr></table></figure><p><strong>5 台机器安装好后修改其中三台为 Server 模式并启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/consul/consul.json<br><br><span class="hljs-comment"># 配置如下</span><br><br>&#123;<br>    <span class="hljs-string">&quot;datacenter&quot;</span>: <span class="hljs-string">&quot;dc1&quot;</span>,                // 数据中心名称<br>    <span class="hljs-string">&quot;data_dir&quot;</span>: <span class="hljs-string">&quot;/var/lib/consul&quot;</span>,      // Server 节点数据目录<br>    <span class="hljs-string">&quot;log_level&quot;</span>: <span class="hljs-string">&quot;INFO&quot;</span>,                // 日志级别<br>    <span class="hljs-string">&quot;node_name&quot;</span>: <span class="hljs-string">&quot;docker1.node&quot;</span>,        // 当前节点名称<br>    <span class="hljs-string">&quot;server&quot;</span>: <span class="hljs-literal">true</span>,                     // 是否为 Server 模式，<span class="hljs-literal">false</span> 为 Client 模式<br>    <span class="hljs-string">&quot;ui&quot;</span>: <span class="hljs-literal">true</span>,                         // 是否开启 UI 访问<br>    <span class="hljs-string">&quot;bootstrap_expect&quot;</span>: 1,              // 启动时期望的就绪节点，1 代表启动为 bootstrap 模式，等待其他节点加入<br>    <span class="hljs-string">&quot;bind_addr&quot;</span>: <span class="hljs-string">&quot;192.168.1.11&quot;</span>,        // 绑定的 IP<br>    <span class="hljs-string">&quot;client_addr&quot;</span>: <span class="hljs-string">&quot;192.168.1.11&quot;</span>,      // 同时作为 Client 接受请求的绑定 IP<br>    <span class="hljs-string">&quot;retry_join&quot;</span>: [<span class="hljs-string">&quot;192.168.1.12&quot;</span>,<span class="hljs-string">&quot;192.168.1.13&quot;</span>],  // 尝试加入的其他节点<br>    <span class="hljs-string">&quot;retry_interval&quot;</span>: <span class="hljs-string">&quot;3s&quot;</span>,             // 每次尝试间隔<br>    <span class="hljs-string">&quot;raft_protocol&quot;</span>: 3,                 // Raft 协议版本<br>    <span class="hljs-string">&quot;enable_debug&quot;</span>: <span class="hljs-literal">false</span>,              // 是否开启 Debug 模式<br>    <span class="hljs-string">&quot;rejoin_after_leave&quot;</span>: <span class="hljs-literal">true</span>,         // 允许重新加入集群<br>    <span class="hljs-string">&quot;enable_syslog&quot;</span>: <span class="hljs-literal">false</span>              // 是否开启 syslog<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>另外两个节点与以上配置大致相同，差别在于其他两个 Server 节点 <code>bootstrap_expect</code> 值为 2，即期望启动时已经有两个节点就绪；然后依次启动三个 Server 节点即可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start consul<br>systemctl <span class="hljs-built_in">enable</span> consul<br>systemctl status consul<br></code></pre></td></tr></table></figure><p><strong>此时可访问任意一台 Server 节点的 UI 界面，地址为 <code>http://serverIP:8500</code>，截图如下</strong></p><p><img src="https://cdn.oss.link/markdown/t9cxf.jpg" alt="Server Success"></p><p>接下来修改其他两个节点配置，使其作为 Client 加入到集群即可，<strong>注意的是当处于 Client 模式时，<code>bootstrap_expect</code> 必须为 0，即关闭状态；具体配置如下</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;datacenter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dc1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/consul&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;log_level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;INFO&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker4.node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ui&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bootstrap_expect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bind_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.1.14&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;client_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.1.14&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;retry_join&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;192.168.1.11&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;192.168.1.12&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;192.168.1.13&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;retry_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;raft_protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;enable_debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rejoin_after_leave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;enable_syslog&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>另外一个 Client 配置与以上相同，最终集群成功后如下所示</p><p><img src="https://cdn.oss.link/markdown/j1zrc.jpg" alt="Cluster ok"></p><p><img src="https://cdn.oss.link/markdown/kq4cz.jpg" alt="Command Line"></p><h3 id="四、其他说明"><a href="#四、其他说明" class="headerlink" title="四、其他说明"></a>四、其他说明</h3><p>关于 Consul 的其他各种参数说明，中文版可参考 <a href="http://www.10tiao.com/html/357/201705/2247485185/1.html">Consul集群部署</a>；这个文章对大体上讲的基本很全了，但是随着版本变化，有些参数还是需要参考一下 <a href="https://www.consul.io/docs/agent/options.html">官方配置文档</a></p>]]></content>
    
    
    <summary type="html">不知道 Consul 用的人多还是少，最近有人问怎么搭建 Consul 集群，这里顺手记录一下吧</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    <category term="Docker" scheme="https://mritd.com/categories/kubernetes/docker/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>阿里云部署 Kubernetes</title>
    <link href="https://mritd.com/2017/09/20/set-up-ha-kubernetes-cluster-on-aliyun-ecs/"/>
    <id>https://mritd.com/2017/09/20/set-up-ha-kubernetes-cluster-on-aliyun-ecs/</id>
    <published>2017-09-20T03:02:24.000Z</published>
    <updated>2017-09-20T03:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司有点小需求，在阿里云上开了几台机器，然后部署了一个 Kubernetes 集群，以下记录一下阿里云踩坑问题，主要是网络组件的坑。</p></blockquote><h3 id="一、部署环境"><a href="#一、部署环境" class="headerlink" title="一、部署环境"></a>一、部署环境</h3><p>部署时开启了 4 台 ECS 实例，基本部署环境与裸机部署相似，其中区别是，阿里云网络采用 VPC 网络，不过以下流程适用于经典网络；以下为各个组件版本:</p><ul><li>OS CentOS</li><li>Kernel 4.4.88-1.el7.elrepo.x86_64</li><li>docker 1.13.1</li><li>Kubernetes 1.7.5</li><li>flannel v0.8.0-amd64</li></ul><p>flannel 采用 vxlan 模式，虽然性能不太好，但是兼容度高一点；在阿里云上 flannel 可以采用 vpc 方式，具体可参考 <a href="https://coreos.com/flannel/docs/latest/alicloud-vpc-backend.html">官方文档</a>(这个文档中描述的方法应该更适合 CNM 方式，我用的是 CNI，所以没去折腾他)</p><h3 id="二、基本部署流程"><a href="#二、基本部署流程" class="headerlink" title="二、基本部署流程"></a>二、基本部署流程</h3><p>关于 Master HA 等基本部署流程可以参考 <a href="https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/">手动档搭建 Kubernetes HA 集群</a> 这篇文章，在部署网络组件之前的流程是相同的，这里不再阐述</p><h3 id="三、Flannel-部署"><a href="#三、Flannel-部署" class="headerlink" title="三、Flannel 部署"></a>三、Flannel 部署</h3><p>关于 Flannel 部署，基本上有两种模式，一种是 vxlan，一种是采用 VPC，VPC 相关的部署上面已经提了，可以参考官方文档；以下说一下 Flannel 的 vxlan 部署方式:</p><h4 id="3-1、CNI-配置"><a href="#3-1、CNI-配置" class="headerlink" title="3.1、CNI 配置"></a>3.1、CNI 配置</h4><p>首先保证集群在不开启 CNI 插件的情况下所有 Node Ready 状态，然后修改 <code>/etc/kubernetes/kubelet</code> 配置文件，加入 CNI 支持( <code>--network-plugin</code> )，配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--address=192.168.1.77&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=docker77.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --network-plugin=cni \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --require-kubeconfig \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-2、Cluster-CIDR-配置"><a href="#3-2、Cluster-CIDR-配置" class="headerlink" title="3.2、Cluster CIDR 配置"></a>3.2、Cluster CIDR 配置</h4><p><strong>在开启 CNI 时使用 Flannel，要设置 <code>--allocate-node-cidrs</code> 和 <code>--cluster-cidr</code> 以保证 Flannel 能正确进行 IP 分配，这两个配置需要加入到 <code>/etc/kubernetes/controller-manager</code> 配置中，完整配置如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># The following values are used to configure the kubernetes controller-manager</span><br><br><span class="hljs-comment"># defaults from config and apiserver should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;--address=192.168.1.77 \</span><br><span class="hljs-string">                              --allocate-node-cidrs=true \</span><br><span class="hljs-string">                              --cluster-cidr=10.244.0.0/16 \</span><br><span class="hljs-string">                              --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                              --cluster-name=kubernetes \</span><br><span class="hljs-string">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --leader-elect=true \</span><br><span class="hljs-string">                              --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                              --node-monitor-period=5s \</span><br><span class="hljs-string">                              --pod-eviction-timeout=5m0s&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-3、CNI-插件配置"><a href="#3-3、CNI-插件配置" class="headerlink" title="3.3、CNI 插件配置"></a>3.3、CNI 插件配置</h4><p>开启 CNI 后，kubelet 创建的 POD 则需要 CNI 插件支持，这里让我感觉奇怪的是 Flannel 的 yaml 中对于 <code>install-cni</code> 这个容器只进行了配置复制，没有做插件复制；所以我们需要手动安装 CNI 插件，CNI 插件最新版本请留意 <a href="https://github.com/containernetworking/plugins/releases">Github</a>；安装过程如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 CNI 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/cni/bin<br><span class="hljs-comment"># 下载 CNI 插件</span><br>wget https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz<br>tar -zxvf cni-plugins-amd64-v0.6.0.tgz<br><span class="hljs-comment"># 移动 CNI 插件</span><br><span class="hljs-built_in">mv</span> bridge flannel host-local loopback /opt/cni/bin<br></code></pre></td></tr></table></figure><h4 id="3-4、安装-Flannel"><a href="#3-4、安装-Flannel" class="headerlink" title="3.4、安装 Flannel"></a>3.4、安装 Flannel</h4><p>当上面所有配置和 CNI 插件安装完成后，应当重启 kube-controller-manager 和 kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl restart kube-controller-manager kubelet<br></code></pre></td></tr></table></figure><p>然后安装 Flannel 并配置 RBAC 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml<br></code></pre></td></tr></table></figure><p><strong>其他部署如 dns 等与原流程相同，不在阐述</strong></p>]]></content>
    
    
    <summary type="html">公司有点小需求，在阿里云上开了几台机器，然后部署了一个 Kubernetes 集群，以下记录一下阿里云踩坑问题，主要是网络组件的坑</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD Git Flow</title>
    <link href="https://mritd.com/2017/09/05/git-flow-note/"/>
    <id>https://mritd.com/2017/09/05/git-flow-note/</id>
    <published>2017-09-05T06:00:55.000Z</published>
    <updated>2017-09-05T06:00:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于 git 代码管理比较混乱，所以记录一下 Git Flow + GitLab 的整体工作流程</p></blockquote><h3 id="一、Git-Flow-简介"><a href="#一、Git-Flow-简介" class="headerlink" title="一、Git Flow 简介"></a>一、Git Flow 简介</h3><p>Git Flow 定义了一个围绕项目开发发布的严格 git 分支模型，用于管理多人协作的大型项目中实现高效的协作开发；Git Flow 分支模型最早起源于 <a href="http://nvie.com/about/">Vincent Driessen</a> 的 <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a> 文章；随着时间发展，Git Flow 大致分为三种:</p><ul><li>Git Flow: 最原始的 Git Flow 分支模型</li><li>Github Flow: Git Flow 的简化版，专门配合持续发布</li><li>GitLab Flow: Git Flow 与 Github Flow 的结合版</li></ul><p>关于三种 Git Flow 区别详情可参考 <a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a></p><h3 id="二、-Git-Flow-流程"><a href="#二、-Git-Flow-流程" class="headerlink" title="二、 Git Flow 流程"></a>二、 Git Flow 流程</h3><p>Github Flow 和 GitLab Flow 对于持续发布支持比较好，但是原始版本的 Git Flow 对于传统的按照版本发布更加友好一些，所以以下主要说明以下 Git Flow 的工作流程；Git Flow 主要分支模型如下</p><p><img src="https://cdn.oss.link/markdown/80dio.jpg" alt="git flow"></p><p>在整个分支模型中 <strong>存在两个长期分支: develop 和 master</strong>，其中 develop 分支为开发分支，master 为生产分支；<strong>master 代码始终保持随时可以部署到线上的状态；develop 分支用于合并最新提交的功能性代码</strong>；具体的分支定义如下</p><ul><li>master: 生产代码，始终保持可以直接部署生产的状态</li><li>develop: 开发分支，每次合并最新功能代码到此分支</li><li>feature: 新功能分支，所有新开发的功能将采用 <code>feature/xxxx</code> 形式命名分支</li><li>hotfixes: 紧急修复补丁分支，当新功能部署到了线上出现了严重 bug 需要紧急修复时，则创建 <code>hotfixes/xxxx</code> 形式命名的分支</li><li>release: 稳定版分支，当完成大版本变动后，应该创建 <code>release/xxxx</code> 分支</li></ul><p>在整个分支模型中，develop 分支为最上游分支，会不断有新的 feature 合并入 develop 分支，当功能开发达到完成所有版本需求时，则从 develop 分支创建 release 分支，release 后如没有发现其他问题，最终 release 会被合并到 master 分支以完成线上部署</p><h3 id="三、Git-Flow-工具"><a href="#三、Git-Flow-工具" class="headerlink" title="三、Git Flow 工具"></a>三、Git Flow 工具</h3><p>针对于 Git Flow，其手动操作 git 命令可能过于繁琐，所以后来有了 git-flow 工具；git-flow 是一个 git 扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作；使用 git-flow 工具可以以更加简单的命令完成对 Vincent Driessen 分支模型的实践；<br>git-flow 安装以及使用具体请参考 <a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">git-flow 备忘清单</a>，该文章详细描述了 git-flow 工具的使用方式</p><p>还有另一个工具是 <a href="https://github.com/tj/git-extras">git-extras</a>，该工具没有 git-flow 那么简单化，不过其提供更加强大的命令支持</p><h3 id="四、Git-Commit-Message"><a href="#四、Git-Commit-Message" class="headerlink" title="四、Git Commit Message"></a>四、Git Commit Message</h3><p>在整个 Git Flow 中，commit message 也是必不可少的一部分；一个良好且统一的 commit message 有助于代码审计以及 review 等；目前使用最广泛的写法是 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">Angular 社区规范</a>，该规范大中 commit message 格式大致如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">&lt;<span class="hljs-built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;<br>&lt;BLANK LINE&gt;<br>&lt;body&gt;<br>&lt;BLANK LINE&gt;<br>&lt;footer&gt;<br></code></pre></td></tr></table></figure><p>总体格式大致分为 3 部分，首行主要 3 个组成部分:</p><ul><li>type: 本次提交类型</li><li>scope: 本次提交影响范围，一般标明影响版本号或者具体的范围如 <code>$browser, $compile, $rootScope, ngHref, ngClick, ngView, etc...</code></li><li>subject: 本次提交简短说明</li></ul><p>关于 type 提交类型，有如下几种值:</p><ul><li>feat：新功能(feature)</li><li>fix：修补 bug</li><li>docs：文档(documentation)</li><li>style： 格式(不影响代码运行的变动)</li><li>refactor：重构(即不是新增功能，也不是修改 bug 的代码变动)</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><p>中间的 body 部分是对本次提交的详细描述信息，底部的 footer 部分一般分为两种情况:</p><ul><li>不兼容变动: 如果出现不兼容变动，则以 <code>BREAKING CHANGE:</code> 开头，后面跟上不兼容变动的具体描述和解决办法</li><li>关闭 issue: 如果该 commit 针对某个 issue，并且可以将其关闭，则可以在其中指定关闭的 issue，如 <code>Close #9527,#9528</code></li></ul><p>不过 footer 部分也有特殊情况，如回滚某次提交，则以 <code>revert:</code> 开头，后面紧跟 commit 信息和具体描述；还有时某些 commit 只是解决了 某个 issue 的一部分问题，这是可以使用 <code>refs ISSUE</code> 的方式来引用该 issue </p><h3 id="五、Git-Commit-Message-工具"><a href="#五、Git-Commit-Message-工具" class="headerlink" title="五、Git Commit Message 工具"></a>五、Git Commit Message 工具</h3><p>针对 Git 的 commit message 目前已经有了成熟的生成工具，比较有名的为 <a href="https://github.com/commitizen/cz-cli">commitizen-cli</a> 工具，其采用 node.js 编写，执行 <code>git cz</code> 命令能够自动生成符合 Angular 社区规范的 commit message；不过由于其使用 node.js 编写，所以安装前需要安装 node.js，因此可能不适合其他非 node.js 的项目使用；这里推荐一个基于 shell 编写的 <a href="https://cimhealth.github.io/git-toolkit">Git-toolkit</a>，安装此工具后执行 <code>git ci</code> 命令进行提交将会产生交互式生成 Angular git commit message 格式的提交说明，截图如下:</p><p><img src="https://cdn.oss.link/markdown/xnonb.jpg" alt="git ci"></p><h3 id="六、GitLab-整合"><a href="#六、GitLab-整合" class="headerlink" title="六、GitLab 整合"></a>六、GitLab 整合</h3><p>以上 Git Flow 所有操作介绍的都是在本地操作，而正常我们在工作中都是基于 GitLab 搭建私有 Git 仓库来进行协同开发的，以下简述以下 Git Flow 配合 GitLab 的流程</p><h4 id="6-1、开发-features"><a href="#6-1、开发-features" class="headerlink" title="6.1、开发 features"></a>6.1、开发 features</h4><p>当开发一个新功能时流程如下:</p><ul><li>本地 <code>git flow feature start xxxx</code> 开启一个 feature 新分支</li><li><code>git flow feature publish xxxx</code> 将此分支推送到远端以便他人获取</li><li>完成开发后 GitLab 上向 <code>develop</code> 分支发起合并请求</li><li>CI sonar 等质量检测工具扫描，其他用户 review 代码</li><li>确认无误后 <code>master</code> 权限用户合并其到 <code>develop</code> 分支</li><li>部署到测试环境以便测试组测试</li><li>如果测试不通过，则继续基于此分支开发，直到该功能开发完成</li></ul><h4 id="6-2、创建-release"><a href="#6-2、创建-release" class="headerlink" title="6.2、创建 release"></a>6.2、创建 release</h4><p>当一定量的 feature 开发完成并合并到 develop 后，如所有 feature 都测试通过并满足版本需求，则可以创建 release 版本分支；release 分支流程如下</p><ul><li>本地 <code>git flow release start xxxx</code> 开启 release 分支</li><li><code>git flow release publish xxxx</code> 将其推送到远端以便他人获取</li><li>继续进行完整性测试，出现问题继续修复，直到 release 完全稳定</li><li>从 release 分支向 master、develop 分支分别发起合并请求</li><li>master 合并后创建对应的 release 标签，并部署生产环境</li><li>develop 合并 release 的后期修改</li></ul><h4 id="6-3、紧急修复"><a href="#6-3、紧急修复" class="headerlink" title="6.3、紧急修复"></a>6.3、紧急修复</h4><p>当 master 某个 tag 部署到生产环境后，也可能出现不符合预期的问题出现；此时应该基于 master 创建 hotfix 分支进行修复，流程如下</p><ul><li>本地 <code>git flow hotfix start xxxx</code> 创建紧急修复分支</li><li>修改代码后将其推送到远端，并像 master、develop 分支发起合并</li><li>develop 合并紧急修复补丁，如果必要最好再做一下测试</li><li>master 合并紧急修复补丁，创建紧急修复 tag，并部署生产环境</li></ul>]]></content>
    
    
    <summary type="html">由于 git 代码管理比较混乱，所以记录一下 Git Flow + GitLab 的整体工作流程</summary>
    
    
    
    <category term="CI/CD" scheme="https://mritd.com/categories/ci-cd/"/>
    
    
    <category term="CI/CD" scheme="https://mritd.com/tags/ci-cd/"/>
    
    <category term="Git" scheme="https://mritd.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Calico 部署踩坑记录</title>
    <link href="https://mritd.com/2017/07/31/calico-yml-bug/"/>
    <id>https://mritd.com/2017/07/31/calico-yml-bug/</id>
    <published>2017-07-31T07:39:23.000Z</published>
    <updated>2017-07-31T07:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自从上次在虚拟机中手动了部署了 Kubernetes 1.7.2 以后，自己在测试环境就来了一下，结果网络组件死活起不来，最后找到原因记录一下</p></blockquote><h3 id="一、Calico-部署注意事项"><a href="#一、Calico-部署注意事项" class="headerlink" title="一、Calico 部署注意事项"></a>一、Calico 部署注意事项</h3><p>在使用 Calico 前当然最好撸一下官方文档，地址在这里 <a href="http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/">Calico 官方文档</a>，其中部署前需要注意以下几点</p><ul><li><strong>官方文档中要求 <code>kubelet</code> 配置必须增加 <code>--network-plugin=cni</code> 选项</strong></li><li><strong><code>kube-proxy</code> 组件必须采用 <code>iptables</code> proxy mode 模式(1.2 以后是默认模式)</strong></li><li><strong><code>kubec-proxy</code> 组件不能采用 <code>--masquerade-all</code> 启动，因为会与 Calico policy 冲突</strong></li><li><strong><code>NetworkPolicy API</code> 只要需要 Kubernetes 1.3 以上</strong></li><li><strong>启用 RBAC 后需要设置对应的 RoleBinding，参考 <a href="http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/hosted/">官方文档 RBAC 部分</a></strong></li></ul><h3 id="二、Calico-官方部署方式"><a href="#二、Calico-官方部署方式" class="headerlink" title="二、Calico 官方部署方式"></a>二、Calico 官方部署方式</h3><p>在已经有了一个 Kubernetes 集群的情况下，官方部署方式描述的很简单，只需要改一改 yml 配置，然后 create 一下即可，具体描述见 <a href="http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/hosted/">官方文档</a></p><p>官方文档中大致给出了三种部署方案: </p><ul><li><strong>Standard Hosted Install:</strong> 修改 calico.yml etcd 相关配置，直接创建，证书配置等参考 <a href="https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/#%E5%85%AD%E9%83%A8%E7%BD%B2-calico">手动部署 Kubernetes 文档</a></li><li><strong>Kubeadm Hosted Install:</strong> 根据 <code>1.6 or high</code> 和 <code>1.5</code> 区分两个 yml 配置，直接创建即可</li><li><strong>Kubernetes Datastore:</strong> 不使用 Etcd 存储数据，不推荐，这里也不做说明</li></ul><h3 id="三、Standard-Hosted-Install-的坑"><a href="#三、Standard-Hosted-Install-的坑" class="headerlink" title="三、Standard Hosted Install 的坑"></a>三、Standard Hosted Install 的坑</h3><p>当我从虚拟机中测试完全没问题以后，就在测试环境尝试创建 Calico 网络，结果出现的问题是<strong>某个(几个) Calico 节点无法启动，同时创建 deployment 后，执行 <code>route -n</code> 会发现每个 node 只有自己节点 Pod 的路由，正常每个 node 上会有所有 node 上 Pod 网段的路由，如下(正常情况)</strong></p><p><img src="https://cdn.oss.link/markdown/c44e7.jpg" alt="calico route"></p><p>此时观察每个 node 上 Calico Pod 日志，会有提示 <strong>未知节点 xxxx</strong> 等错误日志，大体意思就是 <strong>未知的一个(几个)节点在进行 BGP 协议时被拒绝</strong>，偶尔某些 node 上还可能出现 <strong>IP 已经被占用</strong> 的神奇错误提示</p><p>后来经过翻查 <a href="http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/integration">Calico 自定义部署文档</a> 和 <a href="https://github.com/kubernetes-incubator/kubespray">Kargo 项目源码</a> 发现了主要问题在于 <strong>官方文档中直接创建的 calico.yml 文件中，使用 DaemonSet 方式启动 calico-node，同时 calico-node 的 IP 设置和 NODENAME 设置均为空，此时 calico-node 会进行自动获取，网络复杂情况下获取会出现问题；比如 IP 拿到了 docker 网桥的 IP，NODENAME 获取不正确等，最终导致出现很奇怪的错误</strong></p><h3 id="四、解决方案"><a href="#四、解决方案" class="headerlink" title="四、解决方案"></a>四、解决方案</h3><p>一开始想到的解决方案很简单，直接照着 Kargo 抄，使用 Systemd 来启动 calico-node，然后在拆分过程中需要各种配置信息直接也根据 Kargo 的做法生成；当然鼓捣了 1&#x2F;3 的时候就炸了，Kargo 是 ansible 批量部署的，有些变量找起来要人命；最后选择了一个折中(偷懒)的方案: <strong>使用官方的 calico.yml 创建相关组件，这样 ConfigMap、Etcd 配置、Calico policy 啥的直接创建好，然后把 DaemonSet 中 calico-node 容器单独搞出来，使用 Systemd 启动，这样就即方便又简单(我真特么机智)；最终操作如下:</strong></p><h4 id="4-1、首先修改-calico-yml"><a href="#4-1、首先修改-calico-yml" class="headerlink" title="4.1、首先修改 calico.yml"></a>4.1、首先修改 calico.yml</h4><p>在进行网络组件部署前，请确保集群已经满足 Calico 部署要求(本文第一部分)；然后获取 calico.yml，注释掉 DaemonSet 中 calico-node 部分，如下所示</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Calico Version v2.3.0</span><br><span class="hljs-comment"># http://docs.projectcalico.org/v2.3/releases#v2.3.0</span><br><span class="hljs-comment"># This manifest includes the following component versions:</span><br><span class="hljs-comment">#   calico/node:v1.3.0</span><br><span class="hljs-comment">#   calico/cni:v1.9.1</span><br><span class="hljs-comment">#   calico/kube-policy-controller:v0.6.0</span><br><br><span class="hljs-comment"># This ConfigMap is used to configure a self-hosted Calico installation.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># Configure this with the location of your etcd cluster.</span><br>  <span class="hljs-attr">etcd_endpoints:</span> <span class="hljs-string">&quot;https://192.168.1.11:2379,https://192.168.1.12:2379,https://192.168.1.13:2379&quot;</span><br><br>  <span class="hljs-comment"># Configure the Calico backend to use.</span><br>  <span class="hljs-attr">calico_backend:</span> <span class="hljs-string">&quot;bird&quot;</span><br><br>  <span class="hljs-comment"># The CNI network configuration to install on each node.</span><br>  <span class="hljs-attr">cni_network_config:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        &quot;name&quot;: &quot;k8s-pod-network&quot;,</span><br><span class="hljs-string">        &quot;cniVersion&quot;: &quot;0.1.0&quot;,</span><br><span class="hljs-string">        &quot;type&quot;: &quot;calico&quot;,</span><br><span class="hljs-string">        &quot;etcd_endpoints&quot;: &quot;__ETCD_ENDPOINTS__&quot;,</span><br><span class="hljs-string">        &quot;etcd_key_file&quot;: &quot;__ETCD_KEY_FILE__&quot;,</span><br><span class="hljs-string">        &quot;etcd_cert_file&quot;: &quot;__ETCD_CERT_FILE__&quot;,</span><br><span class="hljs-string">        &quot;etcd_ca_cert_file&quot;: &quot;__ETCD_CA_CERT_FILE__&quot;,</span><br><span class="hljs-string">        &quot;log_level&quot;: &quot;info&quot;,</span><br><span class="hljs-string">        &quot;ipam&quot;: &#123;</span><br><span class="hljs-string">            &quot;type&quot;: &quot;calico-ipam&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;policy&quot;: &#123;</span><br><span class="hljs-string">            &quot;type&quot;: &quot;k8s&quot;,</span><br><span class="hljs-string">            &quot;k8s_api_root&quot;: &quot;https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__&quot;,</span><br><span class="hljs-string">            &quot;k8s_auth_token&quot;: &quot;__SERVICEACCOUNT_TOKEN__&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;kubernetes&quot;: &#123;</span><br><span class="hljs-string">            &quot;kubeconfig&quot;: &quot;__KUBECONFIG_FILEPATH__&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br>  <span class="hljs-comment"># If you&#x27;re using TLS enabled etcd uncomment the following.</span><br>  <span class="hljs-comment"># You must also populate the Secret below with these files.</span><br>  <span class="hljs-attr">etcd_ca:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-ca&quot;</span><br>  <span class="hljs-attr">etcd_cert:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-cert&quot;</span><br>  <span class="hljs-attr">etcd_key:</span> <span class="hljs-string">&quot;/calico-secrets/etcd-key&quot;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># The following contains k8s Secrets for use with a TLS enabled etcd cluster.</span><br><span class="hljs-comment"># For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-etcd-secrets</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># Populate the following files with etcd TLS configuration if desired, but leave blank if</span><br>  <span class="hljs-comment"># not using TLS for etcd.</span><br>  <span class="hljs-comment"># This self-hosted install expects three files with the following names.  The values</span><br>  <span class="hljs-comment"># should be base64 encoded strings of the entire contents of each file.</span><br>  <span class="hljs-attr">etcd-key:</span> <span class="hljs-string">这块自己对</span> <span class="hljs-string">etcd</span> <span class="hljs-string">相关证书做</span> <span class="hljs-string">base64</span><br>  <span class="hljs-attr">etcd-cert:</span> <span class="hljs-string">这块自己对</span> <span class="hljs-string">etcd</span> <span class="hljs-string">相关证书做</span> <span class="hljs-string">base64</span><br>  <span class="hljs-attr">etcd-ca:</span> <span class="hljs-string">这块自己对</span> <span class="hljs-string">etcd</span> <span class="hljs-string">相关证书做</span> <span class="hljs-string">base64</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># This manifest installs the calico/node container, as well</span><br><span class="hljs-comment"># as the Calico CNI plugins and network config on</span><br><span class="hljs-comment"># each master and worker node in a Kubernetes cluster.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-node</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-attr">scheduler.alpha.kubernetes.io/tolerations:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          [&#123;&quot;key&quot;: &quot;dedicated&quot;, &quot;value&quot;: &quot;master&quot;, &quot;effect&quot;: &quot;NoSchedule&quot; &#125;,</span><br><span class="hljs-string">           &#123;&quot;key&quot;:&quot;CriticalAddonsOnly&quot;, &quot;operator&quot;:&quot;Exists&quot;&#125;]</span><br><span class="hljs-string"></span>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">calico-node</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-comment"># Runs calico/node container on each Kubernetes node.  This</span><br>        <span class="hljs-comment"># container programs network policy and routes on each</span><br>        <span class="hljs-comment"># host.</span><br><span class="hljs-comment"># calico-node 注释掉，移动到 Systemd 中</span><br><span class="hljs-comment">#        - name: calico-node</span><br><span class="hljs-comment">#          image: quay.io/calico/node:v1.3.0</span><br><span class="hljs-comment">#          env:</span><br><span class="hljs-comment">#            # The location of the Calico etcd cluster.</span><br><span class="hljs-comment">#            - name: ETCD_ENDPOINTS</span><br><span class="hljs-comment">#              valueFrom:</span><br><span class="hljs-comment">#                configMapKeyRef:</span><br><span class="hljs-comment">#                  name: calico-config</span><br><span class="hljs-comment">#                  key: etcd_endpoints</span><br><span class="hljs-comment">#            # Choose the backend to use.</span><br><span class="hljs-comment">#            - name: CALICO_NETWORKING_BACKEND</span><br><span class="hljs-comment">#              valueFrom:</span><br><span class="hljs-comment">#                configMapKeyRef:</span><br><span class="hljs-comment">#                  name: calico-config</span><br><span class="hljs-comment">#                  key: calico_backend</span><br><span class="hljs-comment">#            # Disable file logging so `kubectl logs` works.</span><br><span class="hljs-comment">#            - name: CALICO_DISABLE_FILE_LOGGING</span><br><span class="hljs-comment">#              value: &quot;true&quot;</span><br><span class="hljs-comment">#            # Set Felix endpoint to host default action to ACCEPT.</span><br><span class="hljs-comment">#            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION</span><br><span class="hljs-comment">#              value: &quot;ACCEPT&quot;</span><br><span class="hljs-comment">#            # Configure the IP Pool from which Pod IPs will be chosen.</span><br><span class="hljs-comment">#            - name: CALICO_IPV4POOL_CIDR</span><br><span class="hljs-comment">#              value: &quot;10.254.64.0/18&quot;</span><br><span class="hljs-comment">#            - name: CALICO_IPV4POOL_IPIP</span><br><span class="hljs-comment">#              value: &quot;always&quot;</span><br><span class="hljs-comment">#            # Disable IPv6 on Kubernetes.</span><br><span class="hljs-comment">#            - name: FELIX_IPV6SUPPORT</span><br><span class="hljs-comment">#              value: &quot;false&quot;</span><br><span class="hljs-comment">#            # Set Felix logging to &quot;info&quot;</span><br><span class="hljs-comment">#            - name: FELIX_LOGSEVERITYSCREEN</span><br><span class="hljs-comment">#              value: &quot;info&quot;</span><br><span class="hljs-comment">#            # Location of the CA certificate for etcd.</span><br><span class="hljs-comment">#            - name: ETCD_CA_CERT_FILE</span><br><span class="hljs-comment">#              valueFrom:</span><br><span class="hljs-comment">#                configMapKeyRef:</span><br><span class="hljs-comment">#                  name: calico-config</span><br><span class="hljs-comment">#                  key: etcd_ca</span><br><span class="hljs-comment">#            # Location of the client key for etcd.</span><br><span class="hljs-comment">#            - name: ETCD_KEY_FILE</span><br><span class="hljs-comment">#              valueFrom:</span><br><span class="hljs-comment">#                configMapKeyRef:</span><br><span class="hljs-comment">#                  name: calico-config</span><br><span class="hljs-comment">#                  key: etcd_key</span><br><span class="hljs-comment">#            # Location of the client certificate for etcd.</span><br><span class="hljs-comment">#            - name: ETCD_CERT_FILE</span><br><span class="hljs-comment">#              valueFrom:</span><br><span class="hljs-comment">#                configMapKeyRef:</span><br><span class="hljs-comment">#                  name: calico-config</span><br><span class="hljs-comment">#                  key: etcd_cert</span><br><span class="hljs-comment">#            # Auto-detect the BGP IP address.</span><br><span class="hljs-comment">#            - name: IP</span><br><span class="hljs-comment">#              value: &quot;&quot;</span><br><span class="hljs-comment">#          securityContext:</span><br><span class="hljs-comment">#            privileged: true</span><br><span class="hljs-comment">#          resources:</span><br><span class="hljs-comment">#            requests:</span><br><span class="hljs-comment">#              cpu: 250m</span><br><span class="hljs-comment">#          volumeMounts:</span><br><span class="hljs-comment">#            - mountPath: /lib/modules</span><br><span class="hljs-comment">#              name: lib-modules</span><br><span class="hljs-comment">#              readOnly: true</span><br><span class="hljs-comment">#            - mountPath: /var/run/calico</span><br><span class="hljs-comment">#              name: var-run-calico</span><br><span class="hljs-comment">#              readOnly: false</span><br><span class="hljs-comment">#            - mountPath: /calico-secrets</span><br><span class="hljs-comment">#              name: etcd-certs</span><br><span class="hljs-comment">#        # This container installs the Calico CNI binaries</span><br><span class="hljs-comment">#        # and CNI network config file on each node.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install-cni</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/calico/cni:v1.9.1</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/install-cni.sh&quot;</span>]<br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-comment"># The location of the Calico etcd cluster.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_ENDPOINTS</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_endpoints</span><br>            <span class="hljs-comment"># The CNI network config to install on each node.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CNI_NETWORK_CONFIG</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">cni_network_config</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/host/opt/cni/bin</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">cni-bin-dir</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/host/etc/cni/net.d</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">cni-net-dir</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/calico-secrets</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># Used by calico/node.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lib-modules</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/lib/modules</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">var-run-calico</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run/calico</span><br>        <span class="hljs-comment"># Used to install CNI.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-bin-dir</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/cni/bin</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni-net-dir</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/cni/net.d</span><br>        <span class="hljs-comment"># Mount in the etcd TLS secrets.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>          <span class="hljs-attr">secret:</span><br>            <span class="hljs-attr">secretName:</span> <span class="hljs-string">calico-etcd-secrets</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># This manifest deploys the Calico policy controller on Kubernetes.</span><br><span class="hljs-comment"># See https://github.com/projectcalico/k8s-policy</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-policy-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-policy</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">scheduler.alpha.kubernetes.io/tolerations:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      [&#123;&quot;key&quot;: &quot;dedicated&quot;, &quot;value&quot;: &quot;master&quot;, &quot;effect&quot;: &quot;NoSchedule&quot; &#125;,</span><br><span class="hljs-string">       &#123;&quot;key&quot;:&quot;CriticalAddonsOnly&quot;, &quot;operator&quot;:&quot;Exists&quot;&#125;]</span><br><span class="hljs-string"></span><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># The policy controller can only have a single active instance.</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">calico-policy-controller</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">calico-policy</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-comment"># The policy controller must run in the host network namespace so that</span><br>      <span class="hljs-comment"># it isn&#x27;t governed by policy that would prevent it from working.</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">calico-policy-controller</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">calico-policy-controller</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/calico/kube-policy-controller:v0.6.0</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-comment"># The location of the Calico etcd cluster.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_ENDPOINTS</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_endpoints</span><br>            <span class="hljs-comment"># Location of the CA certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CA_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_ca</span><br>            <span class="hljs-comment"># Location of the client key for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_KEY_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_key</span><br>            <span class="hljs-comment"># Location of the client certificate for etcd.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ETCD_CERT_FILE</span><br>              <span class="hljs-attr">valueFrom:</span><br>                <span class="hljs-attr">configMapKeyRef:</span><br>                  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-config</span><br>                  <span class="hljs-attr">key:</span> <span class="hljs-string">etcd_cert</span><br>            <span class="hljs-comment"># The location of the Kubernetes API.  Use the default Kubernetes</span><br>            <span class="hljs-comment"># service for API access.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">K8S_API</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;https://kubernetes.default:443&quot;</span><br>            <span class="hljs-comment"># Since we&#x27;re running in the host namespace and might not have KubeDNS</span><br>            <span class="hljs-comment"># access, configure the container&#x27;s /etc/hosts to resolve</span><br>            <span class="hljs-comment"># kubernetes.default to the correct service clusterIP.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CONFIGURE_ETC_HOSTS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;true&quot;</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-comment"># Mount in the etcd TLS secrets.</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/calico-secrets</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># Mount in the etcd TLS secrets.</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-certs</span><br>          <span class="hljs-attr">secret:</span><br>            <span class="hljs-attr">secretName:</span> <span class="hljs-string">calico-etcd-secrets</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-policy-controller</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">calico-node</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><br></code></pre></td></tr></table></figure><p><strong>修改完成后直接 create 即可</strong></p><h4 id="4-2、增加-calico-node-Systemd-配置"><a href="#4-2、增加-calico-node-Systemd-配置" class="headerlink" title="4.2、增加 calico-node Systemd 配置"></a>4.2、增加 calico-node Systemd 配置</h4><p>最后写一个 service 文件(我放到了 <code>/etc/systemd/system/calico-node.service</code>)，使用 Systemd 启动即可；<strong>注意以下配置中 <code>IP</code>、<code>NODENAME</code> 是自己手动定义的，IP 为宿主机 IP，NODENAME 最好与 hostname 相同</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=calico node<br>After=docker.service<br>Requires=docker.service<br><br>[Service]<br>User=root<br>PermissionsStartOnly=<span class="hljs-literal">true</span><br>ExecStart=/usr/bin/docker run   --net=host --privileged --name=calico-node \<br>                                -e ETCD_ENDPOINTS=https://192.168.1.11:2379,https://192.168.1.12:2379,https://192.168.1.13:2379 \<br>                                -e ETCD_CA_CERT_FILE=/etc/etcd/ssl/etcd-root-ca.pem \<br>                                -e ETCD_CERT_FILE=/etc/etcd/ssl/etcd.pem \<br>                                -e ETCD_KEY_FILE=/etc/etcd/ssl/etcd-key.pem \<br>                                -e NODENAME=docker1.node \<br>                                -e IP=192.168.1.11 \<br>                                -e IP6= \<br>                                -e AS= \<br>                                -e CALICO_IPV4POOL_CIDR=10.20.0.0/16 \<br>                                -e CALICO_IPV4POOL_IPIP=always \<br>                                -e CALICO_LIBNETWORK_ENABLED=<span class="hljs-literal">true</span> \<br>                                -e CALICO_NETWORKING_BACKEND=bird \<br>                                -e CALICO_DISABLE_FILE_LOGGING=<span class="hljs-literal">true</span> \<br>                                -e FELIX_IPV6SUPPORT=<span class="hljs-literal">false</span> \<br>                                -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \<br>                                -e FELIX_LOGSEVERITYSCREEN=info \<br>                                -v /etc/etcd/ssl/etcd-root-ca.pem:/etc/etcd/ssl/etcd-root-ca.pem \<br>                                -v /etc/etcd/ssl/etcd.pem:/etc/etcd/ssl/etcd.pem \<br>                                -v /etc/etcd/ssl/etcd-key.pem:/etc/etcd/ssl/etcd-key.pem \<br>                                -v /var/run/calico:/var/run/calico \<br>                                -v /lib/modules:/lib/modules \<br>                                -v /run/docker/plugins:/run/docker/plugins \<br>                                -v /var/run/docker.sock:/var/run/docker.sock \<br>                                -v /var/log/calico:/var/log/calico \<br>                                quay.io/calico/node:v1.3.0<br>ExecStop=/usr/bin/docker <span class="hljs-built_in">rm</span> -f calico-node<br>Restart=always<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自从上次在虚拟机中手动了部署了 Kubernetes 1.7.2 以后，自己在测试环境就来了一下，结果网络组件死活起不来，最后找到原因记录一下</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
    <category term="Calico" scheme="https://mritd.com/tags/calico/"/>
    
  </entry>
  
  <entry>
    <title>手动档搭建 Kubernetes HA 集群</title>
    <link href="https://mritd.com/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/"/>
    <id>https://mritd.com/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/</id>
    <published>2017-07-21T08:23:50.000Z</published>
    <updated>2017-07-21T08:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以前一直用 Kargo(基于 ansible) 来搭建 Kubernetes 集群，最近发现 ansible 部署的时候有些东西有点 bug，而且 Kargo 对 rkt 等也做了适配，感觉问题已经有点复杂化了；在 2.2 release 没出来这个时候，准备自己纯手动挡部署一下，Master HA 直接抄 Kargo 的就行了，以下记录一下;<strong>本文以下部分所有用到的 rpm 、配置文件等全部已经上传到了 <a href="http://pan.baidu.com/s/1o8PZLKA">百度云</a>  密码: x5v4</strong></p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><blockquote><p>以下文章本着 <strong>多写代码少哔哔</strong> 的原则，会主要以实际操作为主，不会过多介绍每步细节动作，如果纯小白想要更详细的了解，可以参考 <a href="https://github.com/rootsongjc/kubernetes-handbook">这里</a></p></blockquote><p><strong>环境总共 5 台虚拟机，2 个 master，3 个 etcd 节点，master 同时也作为 node 负载 pod，在分发证书等阶段将在另外一台主机上执行，该主机对集群内所有节点配置了 ssh 秘钥登录</strong></p><table><thead><tr><th>IP</th><th>节点</th></tr></thead><tbody><tr><td>192.168.1.11</td><td>master、node、etcd</td></tr><tr><td>192.168.1.12</td><td>master、node、etcd</td></tr><tr><td>192.168.1.13</td><td>master、node、etcd</td></tr><tr><td>192.168.1.14</td><td>node</td></tr><tr><td>192.168.1.15</td><td>node</td></tr></tbody></table><p>网络方案这里采用性能比较好的 Calico，集群开启 RBAC，RBAC 相关可参考 <a href="https://mritd.me/2017/07/17/kubernetes-rbac-chinese-translation/">这里的胡乱翻译版本</a></p><h3 id="二、证书相关处理"><a href="#二、证书相关处理" class="headerlink" title="二、证书相关处理"></a>二、证书相关处理</h3><h4 id="2-1、证书说明"><a href="#2-1、证书说明" class="headerlink" title="2.1、证书说明"></a>2.1、证书说明</h4><p>由于 Etcd 和 Kubernetes 全部采用 TLS 通讯，所以先要生成 TLS 证书，<strong>证书生成工具采用 <a href="https://github.com/cloudflare/cfssl/releases">cfssl</a>，具体使用方法这里不再详细阐述，生成证书时可在任一节点完成，这里在宿主机执行</strong>，证书列表如下</p><table><thead><tr><th>证书名称</th><th>配置文件</th><th>用途</th></tr></thead><tbody><tr><td>etcd-root-ca.pem</td><td>etcd-root-ca-csr.json</td><td>etcd 根 CA 证书</td></tr><tr><td>etcd.pem</td><td>etcd-gencert.json、etcd-csr.json</td><td>etcd 集群证书</td></tr><tr><td>k8s-root-ca.pem</td><td>k8s-root-ca-csr.json</td><td>k8s 根 CA 证书</td></tr><tr><td>kube-proxy.pem</td><td>k8s-gencert.json、kube-proxy-csr.json</td><td>kube-proxy 使用的证书</td></tr><tr><td>admin.pem</td><td>k8s-gencert.json、admin-csr.json</td><td>kubectl 使用的证书</td></tr><tr><td>kubernetes.pem</td><td>k8s-gencert.json、kubernetes-csr.json</td><td>kube-apiserver 使用的证书</td></tr></tbody></table><h4 id="2-2、CFSSL-工具安装"><a href="#2-2、CFSSL-工具安装" class="headerlink" title="2.2、CFSSL 工具安装"></a>2.2、CFSSL 工具安装</h4><p><strong>首先下载 cfssl，并给予可执行权限，然后扔到 PATH 目录下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64<br>wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64<br><span class="hljs-built_in">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64<br><span class="hljs-built_in">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl<br><span class="hljs-built_in">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson<br></code></pre></td></tr></table></figure><h4 id="2-3、生成-Etcd-证书"><a href="#2-3、生成-Etcd-证书" class="headerlink" title="2.3、生成 Etcd 证书"></a>2.3、生成 Etcd 证书</h4><p>Etcd 证书生成所需配置文件如下: </p><ul><li>etcd-root-ca-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd-root-ca&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>etcd-gencert.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>etcd-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd Security&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Beijing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;etcd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.11&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.12&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.13&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.14&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;192.168.1.15&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后生成 Etcd 证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca<br>cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd<br></code></pre></td></tr></table></figure><p>生成的证书列表如下</p><p><img src="https://cdn.oss.link/markdown/2x0ja.jpg" alt="Etcd Certs"></p><h4 id="2-4、生成-Kubernetes-证书"><a href="#2-4、生成-Kubernetes-证书" class="headerlink" title="2.4、生成 Kubernetes 证书"></a>2.4、生成 Kubernetes 证书</h4><p>Kubernetes 证书生成所需配置文件如下:</p><ul><li>k8s-root-ca-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4096</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>k8s-gencert.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;signing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;kubernetes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;usages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;signing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;key encipherment&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;server auth&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kubernetes-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.254.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.11&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.12&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.13&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.14&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;192.168.1.15&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>kube-proxy-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>admin-csr.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>生成 Kubernetes 证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfssl gencert --initca=<span class="hljs-literal">true</span> k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca<br><br><span class="hljs-keyword">for</span> targetName <span class="hljs-keyword">in</span> kubernetes admin kube-proxy; <span class="hljs-keyword">do</span><br>    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes <span class="hljs-variable">$targetName</span>-csr.json | cfssljson --bare <span class="hljs-variable">$targetName</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>生成后证书列表如下</p><p><img src="https://cdn.oss.link/markdown/uj9q0.jpg" alt="Kubernetes Certs"></p><h4 id="2-5、生成-token-及-kubeconfig"><a href="#2-5、生成-token-及-kubeconfig" class="headerlink" title="2.5、生成 token 及 kubeconfig"></a>2.5、生成 token 及 kubeconfig</h4><p>生成 token 如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> BOOTSTRAP_TOKEN=$(<span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">od</span> -An -t x | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>创建 kubelet bootstrapping kubeconfig 配置(需要提前安装 kubectl 命令)，<strong>对于 node 节点，api server 地址为本地 nginx 监听的 127.0.0.1:6443，如果想把 master 也当做 node 使用，那么 master 上 api server 地址应该为 masterIP:6443，因为在 master 上没必要也无法启动 nginx 来监听 127.0.0.1:6443(6443 已经被 master 上的 api server 占用了)</strong></p><p><strong>所以以下配置只适合 node 节点，如果想把 master 也当做 node，那么需要重新生成下面的 kubeconfig 配置，并把 api server 地址修改为当前 master 的 api server 地址</strong></p><p><strong>没看懂上面这段话，照着下面的操作就行，看完下面的 Master HA 示意图就懂了</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Master 上该地址应为 https://MasterIP:6443</span><br><span class="hljs-built_in">export</span> KUBE_APISERVER=<span class="hljs-string">&quot;https://127.0.0.1:6443&quot;</span><br><span class="hljs-comment"># 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置客户端认证参数</span><br>kubectl config set-credentials kubelet-bootstrap \<br>  --token=<span class="hljs-variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kubelet-bootstrap \<br>  --kubeconfig=bootstrap.kubeconfig<br><span class="hljs-comment"># 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=bootstrap.kubeconfig<br></code></pre></td></tr></table></figure><p>创建 kube-proxy kubeconfig 配置，同上面一样，如果想要把 master 当 node 使用，需要修改 api server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 设置集群参数</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=k8s-root-ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置客户端认证参数</span><br>kubectl config set-credentials kube-proxy \<br>  --client-certificate=kube-proxy.pem \<br>  --client-key=kube-proxy-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置上下文参数</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-proxy \<br>  --kubeconfig=kube-proxy.kubeconfig<br><span class="hljs-comment"># 设置默认上下文</span><br>kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig<br></code></pre></td></tr></table></figure><h3 id="三、部署-HA-ETCD"><a href="#三、部署-HA-ETCD" class="headerlink" title="三、部署 HA ETCD"></a>三、部署 HA ETCD</h3><h4 id="3-1、安装-Etcd"><a href="#3-1、安装-Etcd" class="headerlink" title="3.1、安装 Etcd"></a>3.1、安装 Etcd</h4><p>ETCD 直接采用 rpm 安装，RPM 可以从 <a href="https://src.fedoraproject.org/cgit/rpms/etcd.git/">Fedora 官方仓库</a> 获取 spec 文件自己 build，或者直接从 <a href="https://www.rpmfind.net/">rpmFind 网站</a> 搜索</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载 rpm 包</span><br>wget ftp://195.220.108.108/linux/fedora/linux/development/rawhide/Everything/x86_64/os/Packages/e/etcd-3.1.9-1.fc27.x86_64.rpm<br><span class="hljs-comment"># 分发并安装 rpm</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`; <span class="hljs-keyword">do</span><br>    scp etcd-3.1.9-1.fc27.x86_64.rpm root@192.168.1.1<span class="hljs-variable">$IP</span>:~<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> rpm -ivh etcd-3.1.9-1.fc27.x86_64.rpm<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="3-2、分发证书"><a href="#3-2、分发证书" class="headerlink" title="3.2、分发证书"></a>3.2、分发证书</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`;<span class="hljs-keyword">do</span><br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/etcd/ssl<br>    scp *.pem root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/etcd/ssl<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R etcd:etcd /etc/etcd/ssl<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> -R 755 /etc/etcd<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="3-3、修改配置"><a href="#3-3、修改配置" class="headerlink" title="3.3、修改配置"></a>3.3、修改配置</h4><p>rpm 安装好以后直接修改 <code>/etc/etcd/etcd.conf</code> 配置文件即可，其中单个节点配置如下(其他节点只是名字和 IP 不同)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># [member]</span><br>ETCD_NAME=etcd1<br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/etcd1.etcd&quot;</span><br>ETCD_WAL_DIR=<span class="hljs-string">&quot;/var/lib/etcd/wal&quot;</span><br>ETCD_SNAPSHOT_COUNT=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_HEARTBEAT_INTERVAL=<span class="hljs-string">&quot;100&quot;</span><br>ETCD_ELECTION_TIMEOUT=<span class="hljs-string">&quot;1000&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.11:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.11:2379,http://127.0.0.1:2379&quot;</span><br>ETCD_MAX_SNAPSHOTS=<span class="hljs-string">&quot;5&quot;</span><br>ETCD_MAX_WALS=<span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment">#ETCD_CORS=&quot;&quot;</span><br><br><span class="hljs-comment"># [cluster]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.1.11:2380&quot;</span><br><span class="hljs-comment"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.1.11:2380,etcd2=https://192.168.1.12:2380,etcd3=https://192.168.1.13:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.1.11:2379&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_SRV=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</span><br><span class="hljs-comment">#ETCD_DISCOVERY_PROXY=&quot;&quot;</span><br><span class="hljs-comment">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</span><br><span class="hljs-comment">#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;</span><br><br><span class="hljs-comment"># [proxy]</span><br><span class="hljs-comment">#ETCD_PROXY=&quot;off&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</span><br><span class="hljs-comment">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</span><br><br><span class="hljs-comment"># [security]</span><br>ETCD_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_CERT_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd.pem&quot;</span><br>ETCD_PEER_KEY_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-key.pem&quot;</span><br>ETCD_PEER_CLIENT_CERT_AUTH=<span class="hljs-string">&quot;true&quot;</span><br>ETCD_PEER_TRUSTED_CA_FILE=<span class="hljs-string">&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</span><br>ETCD_PEER_AUTO_TLS=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># [logging]</span><br><span class="hljs-comment">#ETCD_DEBUG=&quot;false&quot;</span><br><span class="hljs-comment"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</span><br><span class="hljs-comment">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-4、启动及验证"><a href="#3-4、启动及验证" class="headerlink" title="3.4、启动及验证"></a>3.4、启动及验证</h4><p>配置修改后在每个节点进行启动即可，<strong>注意，Etcd 各个节点间必须保证时钟同步，否则会造成启动失败等错误</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start etcd<br>systemctl <span class="hljs-built_in">enable</span> etcd<br></code></pre></td></tr></table></figure><p>启动成功后验证节点状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> ETCDCTL_API=3<br>etcdctl --cacert=/etc/etcd/ssl/etcd-root-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.1.11:2379,https://192.168.1.12:2379,https://192.168.1.13:2379 endpoint health<br></code></pre></td></tr></table></figure><p>最后截图如下，警告可忽略</p><p><img src="https://cdn.oss.link/markdown/yr6k4.jpg" alt="Etcd Healthy"></p><h3 id="四、部署-HA-Master"><a href="#四、部署-HA-Master" class="headerlink" title="四、部署 HA Master"></a>四、部署 HA Master</h3><h4 id="4-1、HA-Master-简述"><a href="#4-1、HA-Master-简述" class="headerlink" title="4.1、HA Master 简述"></a>4.1、HA Master 简述</h4><p>目前所谓的 Kubernetes HA 其实主要的就是 API Server 的 HA，master 上其他组件比如 controller-manager 等都是可以通过 Etcd 做选举；而 API Server 只是提供一个请求接收服务，所以对于 API Server 一般有两种方式做 HA；一种是对多个 API Server 做 vip，另一种使用 nginx 反向代理，本文采用 nginx 方式，以下为 HA 示意图</p><p><img src="https://cdn.oss.link/markdown/m2sug.jpg" alt="master ha"></p><p><strong>master 之间除 api server 以外其他组件通过 etcd 选举，api server 默认不作处理；在每个 node 上启动一个 nginx，每个 nginx 反向代理所有 api server，node 上 kubelet、kube-proxy 连接本地的 nginx 代理端口，当 nginx 发现无法连接后端时会自动踢掉出问题的 api server，从而实现 api server 的 HA</strong></p><h4 id="4-2、部署前预处理"><a href="#4-2、部署前预处理" class="headerlink" title="4.2、部署前预处理"></a>4.2、部署前预处理</h4><p>一切以偷懒为主，所以我们仍然采用 rpm 的方式来安装 kubernetes 各个组件，关于 rpm 获取方式可以参考 <a href="https://mritd.me/2017/07/12/how-to-build-kubernetes-rpm/">How to build Kubernetes RPM</a>，以下文章默认认为你已经搞定了 rpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分发 rpm</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`; <span class="hljs-keyword">do</span><br>    scp kubernetes*.rpm root@192.168.1.1<span class="hljs-variable">$IP</span>:~; <br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> yum install -y conntrack-tools socat<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> rpm -ivh kubernetes*.rpm<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>rpm 安装好以后还需要进行分发证书配置等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`;<span class="hljs-keyword">do</span><br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/kubernetes/ssl<br>    scp *.pem root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes/ssl<br>    scp *.kubeconfig root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    scp token.csv root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>最后由于 api server 会写入一些日志，所以先创建好相关目录，并做好授权，防止因为权限错误导致 api server 无法启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 3`;<span class="hljs-keyword">do</span><br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /var/log/kube-audit  <br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /var/log/kube-audit<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chmod</span> -R 755 /var/log/kube-audit<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="4-3、修改-master-配置"><a href="#4-3、修改-master-配置" class="headerlink" title="4.3、修改 master 配置"></a>4.3、修改 master 配置</h4><p>rpm 安装好以后，默认会生成 <code>/etc/kubernetes</code> 目录，并且该目录中会有很多配置，其中 config 配置文件为通用配置，具体文件如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  kubernetes tree<br>.<br>├── apiserver<br>├── config<br>├── controller-manager<br>├── kubelet<br>├── proxy<br>└── scheduler<br><br>0 directories, 6 files<br></code></pre></td></tr></table></figure><p><strong>master 需要编辑 <code>config</code>、<code>apiserver</code>、<code>controller-manager</code>、<code>scheduler</code>这四个文件，具体修改如下</strong></p><ul><li>config 通用配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure various aspects of all</span><br><span class="hljs-comment"># kubernetes services, including</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kube-apiserver.service</span><br><span class="hljs-comment">#   kube-controller-manager.service</span><br><span class="hljs-comment">#   kube-scheduler.service</span><br><span class="hljs-comment">#   kubelet.service</span><br><span class="hljs-comment">#   kube-proxy.service</span><br><span class="hljs-comment"># logging to stderr means we get it in the systemd journal</span><br>KUBE_LOGTOSTDERR=<span class="hljs-string">&quot;--logtostderr=true&quot;</span><br><br><span class="hljs-comment"># journal message level, 0 is debug</span><br>KUBE_LOG_LEVEL=<span class="hljs-string">&quot;--v=2&quot;</span><br><br><span class="hljs-comment"># Should this cluster be allowed to run privileged docker containers</span><br>KUBE_ALLOW_PRIV=<span class="hljs-string">&quot;--allow-privileged=true&quot;</span><br><br><span class="hljs-comment"># How the controller-manager, scheduler, and proxy find the apiserver</span><br>KUBE_MASTER=<span class="hljs-string">&quot;--master=http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><ul><li>apiserver 配置(其他节点只有 IP 不同)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure the kube-apiserver</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># The address on the local server to listen to.</span><br>KUBE_API_ADDRESS=<span class="hljs-string">&quot;--advertise-address=192.168.1.11 --insecure-bind-address=127.0.0.1 --bind-address=192.168.1.11&quot;</span><br><br><span class="hljs-comment"># The port on the local server to listen on.</span><br>KUBE_API_PORT=<span class="hljs-string">&quot;--insecure-port=8080 --secure-port=6443&quot;</span><br><br><span class="hljs-comment"># Port minions listen on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><br><span class="hljs-comment"># Comma separated list of nodes in the etcd cluster</span><br>KUBE_ETCD_SERVERS=<span class="hljs-string">&quot;--etcd-servers=https://192.168.1.11:2379,https://192.168.1.12:2379,https://192.168.1.13:2379&quot;</span><br><br><span class="hljs-comment"># Address range to use for services</span><br>KUBE_SERVICE_ADDRESSES=<span class="hljs-string">&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</span><br><br><span class="hljs-comment"># default admission control policies</span><br>KUBE_ADMISSION_CONTROL=<span class="hljs-string">&quot;--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_API_ARGS=<span class="hljs-string">&quot;--authorization-mode=RBAC \</span><br><span class="hljs-string">               --runtime-config=rbac.authorization.k8s.io/v1beta1 \</span><br><span class="hljs-string">               --anonymous-auth=false \</span><br><span class="hljs-string">               --kubelet-https=true \</span><br><span class="hljs-string">               --experimental-bootstrap-token-auth \</span><br><span class="hljs-string">               --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">               --service-node-port-range=30000-50000 \</span><br><span class="hljs-string">               --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="hljs-string">               --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="hljs-string">               --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">               --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">               --etcd-quorum-read=true \</span><br><span class="hljs-string">               --storage-backend=etcd3 \</span><br><span class="hljs-string">               --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem \</span><br><span class="hljs-string">               --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">               --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">               --enable-swagger-ui=true \</span><br><span class="hljs-string">               --apiserver-count=3 \</span><br><span class="hljs-string">               --audit-log-maxage=30 \</span><br><span class="hljs-string">               --audit-log-maxbackup=3 \</span><br><span class="hljs-string">               --audit-log-maxsize=100 \</span><br><span class="hljs-string">               --audit-log-path=/var/log/kube-audit/audit.log \</span><br><span class="hljs-string">               --event-ttl=1h&quot;</span><br></code></pre></td></tr></table></figure><ul><li>controller-manager 配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># The following values are used to configure the kubernetes controller-manager</span><br><br><span class="hljs-comment"># defaults from config and apiserver should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_CONTROLLER_MANAGER_ARGS=<span class="hljs-string">&quot;--address=0.0.0.0 \</span><br><span class="hljs-string">                              --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="hljs-string">                              --cluster-name=kubernetes \</span><br><span class="hljs-string">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</span><br><span class="hljs-string">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</span><br><span class="hljs-string">                              --experimental-cluster-signing-duration=87600h0m0s \</span><br><span class="hljs-string">                              --leader-elect=true \</span><br><span class="hljs-string">                              --node-monitor-grace-period=40s \</span><br><span class="hljs-string">                              --node-monitor-period=5s \</span><br><span class="hljs-string">                              --pod-eviction-timeout=5m0s&quot;</span><br></code></pre></td></tr></table></figure><ul><li>scheduler 配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes scheduler config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_SCHEDULER_ARGS=<span class="hljs-string">&quot;--leader-elect=true --address=0.0.0.0&quot;</span><br></code></pre></td></tr></table></figure><p>其他 master 节点配置相同，只需要修改以下 IP 地址即可，修改完成后启动 api server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kube-apiserver<br>systemctl start kube-controller-manager<br>systemctl start kube-scheduler<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br></code></pre></td></tr></table></figure><p>各个节点启动成功后，验证组件状态(kubectl 在不做任何配置的情况下默认链接本地 8080 端口)如下，<strong>其中 etcd 全部为 Unhealthy 状态，并且提示 <code>remote error: tls: bad certificate</code> 这是个 bug，不影响实际使用，具体可参考 <a href="https://github.com/kubernetes/kubernetes/issues/29330">issue</a></strong></p><p><img src="https://cdn.oss.link/markdown/0j7k2.jpg" alt="api status"></p><h3 id="五、部署-Node"><a href="#五、部署-Node" class="headerlink" title="五、部署 Node"></a>五、部署 Node</h3><h4 id="5-1、部署前预处理"><a href="#5-1、部署前预处理" class="headerlink" title="5.1、部署前预处理"></a>5.1、部署前预处理</h4><p>部署前分发 rpm 以及证书、token 等配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分发 rpm</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 4 5`;<span class="hljs-keyword">do</span><br>    scp kubernetes-node-1.6.7-1.el7.centos.x86_64.rpm kubernetes-client-1.6.7-1.el7.centos.x86_64.rpm root@192.168.1.1<span class="hljs-variable">$IP</span>:~; <br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> yum install -y conntrack-tools socat<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> rpm -ivh kubernetes-node-1.6.7-1.el7.centos.x86_64.rpm kubernetes-client-1.6.7-1.el7.centos.x86_64.rpm<br><span class="hljs-keyword">done</span><br><span class="hljs-comment"># 分发证书等配置文件</span><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 4 5`;<span class="hljs-keyword">do</span><br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">mkdir</span> /etc/kubernetes/ssl<br>    scp *.pem root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes/ssl<br>    scp *.kubeconfig root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    scp token.csv root@192.168.1.1<span class="hljs-variable">$IP</span>:/etc/kubernetes<br>    ssh root@192.168.1.1<span class="hljs-variable">$IP</span> <span class="hljs-built_in">chown</span> -R kube:kube /etc/kubernetes/ssl<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="5-2、修改-node-配置"><a href="#5-2、修改-node-配置" class="headerlink" title="5.2、修改 node 配置"></a>5.2、修改 node 配置</h4><p>node 节点上配置文件同样位于 <code>/etc/kubernetes</code> 目录，node 节点只需要修改 <code>config</code>、<code>kubelet</code>、<code>proxy</code> 这三个配置文件，修改如下</p><ul><li>config 通用配置</li></ul><p><strong>注意: config 配置文件(包括下面的 kubelet、proxy)中全部未 定义 API Server 地址，因为 kubelet 和 kube-proxy 组件启动时使用了 <code>--require-kubeconfig</code> 选项，该选项会使其从 <code>*.kubeconfig</code> 中读取 API Server 地址，而忽略配置文件中设置的；所以配置文件中设置的地址其实是无效的</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes system config</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The following values are used to configure various aspects of all</span><br><span class="hljs-comment"># kubernetes services, including</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kube-apiserver.service</span><br><span class="hljs-comment">#   kube-controller-manager.service</span><br><span class="hljs-comment">#   kube-scheduler.service</span><br><span class="hljs-comment">#   kubelet.service</span><br><span class="hljs-comment">#   kube-proxy.service</span><br><span class="hljs-comment"># logging to stderr means we get it in the systemd journal</span><br>KUBE_LOGTOSTDERR=<span class="hljs-string">&quot;--logtostderr=true&quot;</span><br><br><span class="hljs-comment"># journal message level, 0 is debug</span><br>KUBE_LOG_LEVEL=<span class="hljs-string">&quot;--v=2&quot;</span><br><br><span class="hljs-comment"># Should this cluster be allowed to run privileged docker containers</span><br>KUBE_ALLOW_PRIV=<span class="hljs-string">&quot;--allow-privileged=true&quot;</span><br><br><span class="hljs-comment"># How the controller-manager, scheduler, and proxy find the apiserver</span><br><span class="hljs-comment"># KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;</span><br></code></pre></td></tr></table></figure><ul><li>kubelet 配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes kubelet (minion) config</span><br><br><span class="hljs-comment"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br>KUBELET_ADDRESS=<span class="hljs-string">&quot;--address=192.168.1.14&quot;</span><br><br><span class="hljs-comment"># The port for the info server to serve on</span><br><span class="hljs-comment"># KUBELET_PORT=&quot;--port=10250&quot;</span><br><br><span class="hljs-comment"># You may leave this blank to use the actual hostname</span><br>KUBELET_HOSTNAME=<span class="hljs-string">&quot;--hostname-override=docker4.node&quot;</span><br><br><span class="hljs-comment"># location of the api-server</span><br><span class="hljs-comment"># KUBELET_API_SERVER=&quot;&quot;</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBELET_ARGS=<span class="hljs-string">&quot;--cgroup-driver=cgroupfs \</span><br><span class="hljs-string">              --cluster-dns=10.254.0.2 \</span><br><span class="hljs-string">              --resolv-conf=/etc/resolv.conf \</span><br><span class="hljs-string">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span><br><span class="hljs-string">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="hljs-string">              --require-kubeconfig \</span><br><span class="hljs-string">              --cert-dir=/etc/kubernetes/ssl \</span><br><span class="hljs-string">              --cluster-domain=cluster.local. \</span><br><span class="hljs-string">              --hairpin-mode promiscuous-bridge \</span><br><span class="hljs-string">              --serialize-image-pulls=false \</span><br><span class="hljs-string">              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;</span><br></code></pre></td></tr></table></figure><ul><li>proxy 配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">###</span><br><span class="hljs-comment"># kubernetes proxy config</span><br><br><span class="hljs-comment"># default config should be adequate</span><br><br><span class="hljs-comment"># Add your own!</span><br>KUBE_PROXY_ARGS=<span class="hljs-string">&quot;--bind-address=192.168.1.14 \</span><br><span class="hljs-string">                 --hostname-override=docker4.node \</span><br><span class="hljs-string">                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span><br><span class="hljs-string">                 --cluster-cidr=10.254.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-3、创建-ClusterRoleBinding"><a href="#5-3、创建-ClusterRoleBinding" class="headerlink" title="5.3、创建 ClusterRoleBinding"></a>5.3、创建 ClusterRoleBinding</h4><p>由于 kubelet 采用了 <a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/">TLS Bootstrapping</a>，所有根绝 RBAC 控制策略，kubelet 使用的用户 <code>kubelet-bootstrap</code> 是不具备任何访问 API 权限的，这是需要预先在集群内创建 ClusterRoleBinding 授予其 <code>system:node-bootstrapper</code> Role</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在任意 master 执行即可</span><br>kubectl create clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=system:node-bootstrapper \<br>  --user=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h4 id="5-4、创建-nginx-代理"><a href="#5-4、创建-nginx-代理" class="headerlink" title="5.4、创建 nginx 代理"></a>5.4、创建 nginx 代理</h4><p><strong>根据上面描述的 master HA 架构，此时所有 node 应该连接本地的 nginx 代理，然后 nginx 来负载所有 api server；以下为 nginx 代理相关配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建配置目录</span><br><span class="hljs-built_in">mkdir</span> -p /etc/nginx<br><br><span class="hljs-comment"># 写入代理配置</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="hljs-string">error_log stderr notice;</span><br><span class="hljs-string"></span><br><span class="hljs-string">worker_processes auto;</span><br><span class="hljs-string">events &#123;</span><br><span class="hljs-string">  multi_accept on;</span><br><span class="hljs-string">  use epoll;</span><br><span class="hljs-string">  worker_connections 1024;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">stream &#123;</span><br><span class="hljs-string">    upstream kube_apiserver &#123;</span><br><span class="hljs-string">        least_conn;</span><br><span class="hljs-string">        server 192.168.1.11:6443;</span><br><span class="hljs-string">        server 192.168.1.12:6443;</span><br><span class="hljs-string">        server 192.168.1.13:6443;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    server &#123;</span><br><span class="hljs-string">        listen        0.0.0.0:6443;</span><br><span class="hljs-string">        proxy_pass    kube_apiserver;</span><br><span class="hljs-string">        proxy_timeout 10m;</span><br><span class="hljs-string">        proxy_connect_timeout 1s;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 更新权限</span><br><span class="hljs-built_in">chmod</span> +r /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>为了保证 nginx 的可靠性，综合便捷性考虑，<strong>node 节点上的 nginx 使用 docker 启动，同时 使用 systemd 来守护，</strong> systemd 配置如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/systemd/system/nginx-proxy.service</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=kubernetes apiserver docker wrapper</span><br><span class="hljs-string">Wants=docker.socket</span><br><span class="hljs-string">After=docker.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">PermissionsStartOnly=true</span><br><span class="hljs-string">ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \\</span><br><span class="hljs-string">                              -v /etc/nginx:/etc/nginx \\</span><br><span class="hljs-string">                              --name nginx-proxy \\</span><br><span class="hljs-string">                              --net=host \\</span><br><span class="hljs-string">                              --restart=on-failure:5 \\</span><br><span class="hljs-string">                              --memory=512M \\</span><br><span class="hljs-string">                              nginx:1.13.3-alpine</span><br><span class="hljs-string">ExecStartPre=-/usr/bin/docker rm -f nginx-proxy</span><br><span class="hljs-string">ExecStop=/usr/bin/docker stop nginx-proxy</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=15s</span><br><span class="hljs-string">TimeoutStartSec=30s</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p><strong>最后启动 nginx，同时在每个 node 安装 kubectl，然后使用 kubectl 测试 api server 负载情况</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start nginx-proxy<br>systemctl <span class="hljs-built_in">enable</span> nginx-proxy<br></code></pre></td></tr></table></figure><p>启动成功后如下</p><p><img src="https://cdn.oss.link/markdown/0shgz.jpg" alt="nginx-proxy"></p><p>kubectl 测试联通性如下</p><p><img src="https://cdn.oss.link/markdown/maiz2.jpg" alt="test nginx-proxy"></p><h4 id="5-5、添加-Node"><a href="#5-5、添加-Node" class="headerlink" title="5.5、添加 Node"></a>5.5、添加 Node</h4><p>一起准备就绪以后就可以启动 node 相关组件了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kubelet<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br></code></pre></td></tr></table></figure><p>由于采用了 <a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/">TLS Bootstrapping</a>，所以 kubelet 启动后不会立即加入集群，而是进行证书申请，从日志中可以看到如下输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Jul 19 14:15:31 docker4.node kubelet[18213]: I0719 14:15:31.810914   18213 feature_gate.go:144] feature gates: map[]<br>Jul 19 14:15:31 docker4.node kubelet[18213]: I0719 14:15:31.811025   18213 bootstrap.go:58] Using bootstrap kubeconfig to generate TLS client cert, key and kubeconfig file<br></code></pre></td></tr></table></figure><p><strong>此时只需要在 master 允许其证书申请即可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看 csr</span><br>➜  kubectl get csr<br>NAME        AGE       REQUESTOR           CONDITION<br>csr-l9d25   2m        kubelet-bootstrap   Pending<br><br><span class="hljs-comment"># 签发证书</span><br>➜  kubectl certificate approve csr-l9d25<br>certificatesigningrequest <span class="hljs-string">&quot;csr-l9d25&quot;</span> approved<br><br><span class="hljs-comment"># 查看 node</span><br>➜  kubectl get node<br>NAME           STATUS    AGE       VERSION<br>docker4.node   Ready     26s       v1.6.7<br></code></pre></td></tr></table></figure><p>最后再启动 kube-proxy 组件即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br></code></pre></td></tr></table></figure><h4 id="5-6、Master-开启-Pod-负载"><a href="#5-6、Master-开启-Pod-负载" class="headerlink" title="5.6、Master 开启 Pod 负载"></a>5.6、Master 开启 Pod 负载</h4><p>Master 上部署 Node 与单独 Node 部署大致相同，<strong>只需要修改 <code>bootstrap.kubeconfig</code>、<code>kube-proxy.kubeconfig</code> 中的 API Server 地址即可</strong></p><p><img src="https://cdn.oss.link/markdown/2gkyj.jpg" alt="modify api server"></p><p>然后修改 <code>kubelet</code>、<code>proxy</code> 配置启动即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br>systemctl start kubelet<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br>systemctl start kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br></code></pre></td></tr></table></figure><p>最后在 master 签发一下相关证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl certificate approve csr-z090b<br></code></pre></td></tr></table></figure><p>整体部署完成后如下</p><p><img src="https://cdn.oss.link/markdown/fsddv.jpg" alt="read"></p><h3 id="六、部署-Calico"><a href="#六、部署-Calico" class="headerlink" title="六、部署 Calico"></a>六、部署 Calico</h3><p>网路组件这里采用 Calico，Calico 目前部署也相对比较简单，只需要创建一下 yml 文件即可，具体可参考 <a href="http://docs.projectcalico.org/v2.3/getting-started/kubernetes/">Calico 官方文档</a></p><p><strong>Cliaco 官方文档要求 kubelet 启动时要配置使用 cni 插件 <code>--network-plugin=cni</code>，同时 kube-proxy 不能使用 <code>--masquerade-all</code> 启动(会与 Calico policy 冲突)，所以需要修改所有 kubelet 和 proxy 配置文件，以下默认为这两项已经调整完毕，这里不做演示</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取相关 Cliaco.yml</span><br>wget http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/hosted/calico.yaml<br><br><span class="hljs-comment"># 修改 Etcd 相关配置，以下列出主要修改部分(etcd 证书内容需要被 base64 转码)</span><br><br>sed -i <span class="hljs-string">&#x27;s@.*etcd_endpoints:.*@\ \ etcd_endpoints:\ \&quot;https://192.168.1.11:2379,https://192.168.1.12:2379,https://192.168.1.13:2379\&quot;@gi&#x27;</span> calico.yaml<br><br><span class="hljs-built_in">export</span> ETCD_CERT=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><span class="hljs-built_in">export</span> ETCD_KEY=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-key.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><span class="hljs-built_in">export</span> ETCD_CA=`<span class="hljs-built_in">cat</span> /etc/etcd/ssl/etcd-root-ca.pem | <span class="hljs-built_in">base64</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>`<br><br>sed -i <span class="hljs-string">&quot;s@.*etcd-cert:.*@\ \ etcd-cert:\ <span class="hljs-variable">$&#123;ETCD_CERT&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-key:.*@\ \ etcd-key:\ <span class="hljs-variable">$&#123;ETCD_KEY&#125;</span>@gi&quot;</span> calico.yaml<br>sed -i <span class="hljs-string">&quot;s@.*etcd-ca:.*@\ \ etcd-ca:\ <span class="hljs-variable">$&#123;ETCD_CA&#125;</span>@gi&quot;</span> calico.yaml<br><br>sed -i <span class="hljs-string">&#x27;s@.*etcd_ca:.*@\ \ etcd_ca:\ &quot;/calico-secrets/etcd-ca&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_cert:.*@\ \ etcd_cert:\ &quot;/calico-secrets/etcd-cert&quot;@gi&#x27;</span> calico.yaml<br>sed -i <span class="hljs-string">&#x27;s@.*etcd_key:.*@\ \ etcd_key:\ &quot;/calico-secrets/etcd-key&quot;@gi&#x27;</span> calico.yaml<br><br>sed -i <span class="hljs-string">&#x27;s@192.168.0.0/16@10.254.64.0/18@gi&#x27;</span> calico.yaml<br></code></pre></td></tr></table></figure><p>执行部署操作，<strong>注意，在开启 RBAC 的情况下需要单独创建 ClusterRole 和 ClusterRoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create -f calico.yaml<br>kubectl apply -f http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/rbac.yaml<br></code></pre></td></tr></table></figure><p>部署完成后如下 </p><p><img src="https://cdn.oss.link/markdown/ocqsf.jpg" alt="caliaco"></p><p><strong>最后测试一下跨主机通讯</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 deployment</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; demo.deploy.yml</span><br><span class="hljs-string">apiVersion: apps/v1beta1</span><br><span class="hljs-string">kind: Deployment</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: demo-deployment</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  replicas: 3</span><br><span class="hljs-string">  template:</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      labels:</span><br><span class="hljs-string">        app: demo</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: demo</span><br><span class="hljs-string">        image: mritd/demo</span><br><span class="hljs-string">        ports:</span><br><span class="hljs-string">        - containerPort: 80</span><br><span class="hljs-string">EOF</span><br>kubectl create -f demo.deploy.yml<br></code></pre></td></tr></table></figure><p>exec 到一台主机 pod 内 ping 另一个不同 node 上的 pod 如下</p><p><img src="https://cdn.oss.link/markdown/phkgr.jpg" alt="ping"></p><h3 id="七、部署-DNS"><a href="#七、部署-DNS" class="headerlink" title="七、部署 DNS"></a>七、部署 DNS</h3><h4 id="7-1、DNS-组件部署"><a href="#7-1、DNS-组件部署" class="headerlink" title="7.1、DNS 组件部署"></a>7.1、DNS 组件部署</h4><p>DNS 部署目前有两种方式，一种是纯手动，另一种是使用 <a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/addon-manager/README.md">Addon-manager</a>，目前个人感觉 Addon-manager 有点繁琐，所以以下采取纯手动部署 DNS 组件</p><p>DNS 组件相关文件位于 <a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/README.md">kubernetes addons</a> 目录下，把相关文件下载下来然后稍作修改即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取文件</span><br><span class="hljs-built_in">mkdir</span> dns &amp;&amp; <span class="hljs-built_in">cd</span> dns<br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kubedns-cm.yaml<br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kubedns-sa.yaml<br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kubedns-svc.yaml.sed<br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kubedns-controller.yaml.sed<br><span class="hljs-built_in">mv</span> kubedns-controller.yaml.sed kubedns-controller.yaml<br><span class="hljs-built_in">mv</span> kubedns-svc.yaml.sed kubedns-svc.yaml<br><span class="hljs-comment"># 修改配置</span><br>sed -i <span class="hljs-string">&#x27;s/$DNS_DOMAIN/cluster.local/gi&#x27;</span> kubedns-controller.yaml<br>sed -i <span class="hljs-string">&#x27;s/$DNS_SERVER_IP/10.254.0.2/gi&#x27;</span> kubedns-svc.yaml<br><span class="hljs-comment"># 创建(我把所有 yml 放到的 dns 目录中)</span><br>kubectl create -f ../dns<br></code></pre></td></tr></table></figure><p><strong>接下来测试 DNS，</strong>测试方法创建两个 deployment 和 svc，通过在 pod 内通过 svc 域名方式访问另一个 deployment 下的 pod，相关测试的 deploy、svc 配置在这里不在展示，基本情况如下图所示</p><p><img src="https://cdn.oss.link/markdown/o94qb.jpg" alt="deployment"></p><p><img src="https://cdn.oss.link/markdown/586mm.jpg" alt="test dns"></p><h4 id="7-2、DNS-自动扩容部署"><a href="#7-2、DNS-自动扩容部署" class="headerlink" title="7.2、DNS 自动扩容部署"></a>7.2、DNS 自动扩容部署</h4><p>关于 DNS 自动扩容详细可参考 <a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/">Autoscale the DNS Service in a Cluster</a>，以下直接操作</p><p>首先获取 Dns horizontal autoscaler 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler-rbac.yaml<br>wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml<br></code></pre></td></tr></table></figure><p>然后直接 <code>kubectl create -f </code> 即可，<strong>DNS 自动扩容计算公式为 <code>replicas = max( ceil( cores * 1/coresPerReplica ) , ceil( nodes * 1/nodesPerReplica ) )</code>，如果想调整 DNS 数量(负载因子)，只需要调整 ConfigMap 中对应参数即可，具体计算细节参考上面的官方文档</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑 Config Map</span><br>kubectl edit cm kube-dns-autoscaler --namespace=kube-system<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">以前一直用 Kargo(基于 ansible) 来搭建 Kubernetes 集群，最近发现 ansible 部署的时候有些东西有点 bug，而且 Kargo 对 rkt 等也做了适配，感觉问题已经有点复杂化了；在 2.2 release 没出来这个时候，准备自己纯手动挡部署一下，Master HA 直接抄 Kargo 的就行了，以下记录一下;**本文以下部分所有用到的 rpm 、配置文件等全部已经上传到了 [百度云](http://pan.baidu.com/s/1o8PZLKA)  密码: x5v4**</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes RBAC</title>
    <link href="https://mritd.com/2017/07/17/kubernetes-rbac-chinese-translation/"/>
    <id>https://mritd.com/2017/07/17/kubernetes-rbac-chinese-translation/</id>
    <published>2017-07-17T12:44:45.000Z</published>
    <updated>2017-07-17T12:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于角色的访问控制使用 <code>rbac.authorization.k8s.io</code> API 组来实现权限控制，RBAC 允许管理员通过 Kubernetes API 动态的配置权限策略。<strong>在 1.6 版本中 RBAC 还处于 Beat 阶段</strong>，如果想要开启 RBAC 授权模式需要在 apiserver 组件中指定 <code>--authorization-mode=RBAC</code> 选项。</p></blockquote><h3 id="一、API-Overview"><a href="#一、API-Overview" class="headerlink" title="一、API Overview"></a>一、API Overview</h3><p>本节介绍了 RBAC 的四个顶级类型，用户可以像与其他 Kubernetes API 资源一样通过 kubectl、API 调用方式与其交互；例如使用 <code>kubectl create -f (resource).yml</code> 命令创建资源对象，跟随本文档操作前最好先阅读引导部分。</p><h4 id="1-1、Role-and-ClusterRole"><a href="#1-1、Role-and-ClusterRole" class="headerlink" title="1.1、Role and ClusterRole"></a>1.1、Role and ClusterRole</h4><p>在 RBAC API 中，Role 表示一组规则权限，权限只会增加(累加权限)，不存在一个资源一开始就有很多权限而通过 RBAC 对其进行减少的操作；Role 可以定义在一个 namespace 中，如果想要跨 namespace 则可以创建 ClusterRole。</p><p><strong>Role 只能用于授予对单个命名空间中的资源访问权限，</strong> 以下是一个对默认命名空间中 Pods 具有访问权限的样例:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment"># &quot;&quot; indicates the core API group</span><br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><p>ClusterRole 具有与 Role 相同的权限角色控制能力，不同的是 ClusterRole 是集群级别的，ClusterRole 可以用于:</p><ul><li>集群级别的资源控制(例如 node 访问权限)</li><li>非资源型 endpoints(例如 <code>/healthz</code> 访问)</li><li>所有命名空间资源控制(例如 pods)</li></ul><p>以下是 ClusterRole 授权某个特定命名空间或全部命名空间(取决于<a href="https://kubernetes.io/docs/admin/authorization/rbac/#rolebinding-and-clusterrolebinding">绑定方式</a>)访问 secrets 的样例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-comment"># &quot;namespace&quot; omitted since ClusterRoles are not namespaced</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="1-2、RoleBinding-and-ClusterRoleBinding"><a href="#1-2、RoleBinding-and-ClusterRoleBinding" class="headerlink" title="1.2、RoleBinding and ClusterRoleBinding"></a>1.2、RoleBinding and ClusterRoleBinding</h4><p>RoloBinding 可以将角色中定义的权限授予用户或用户组，RoleBinding 包含一组权限列表(subjects)，权限列表中包含有不同形式的待授予权限资源类型(users, groups, or service accounts)；RoloBinding 同样包含对被 Bind 的 Role 引用；RoleBinding 适用于某个命名空间内授权，而 ClusterRoleBinding 适用于集群范围内的授权。</p><p>RoleBinding 可以在同一命名空间中引用对应的 Role，以下 RoleBinding 样例将 default 命名空间的 <code>pod-reader</code> Role 授予 jane 用户，此后 jane 用户在 default 命名空间中将具有 <code>pod-reader</code> 的权限</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This role binding allows &quot;jane&quot; to read pods in the &quot;default&quot; namespace.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-pods</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jane</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p><strong>RoleBinding 同样可以引用 ClusterRole 来对当前 namespace 内用户、用户组或 ServiceAccount 进行授权，这种操作允许集群管理员在整个集群内定义一些通用的 ClusterRole，然后在不同的 namespace 中使用 RoleBinding 来引用</strong></p><p>例如，以下 RoleBinding 引用了一个 ClusterRole，这个 ClusterRole 具有整个集群内对 secrets 的访问权限；但是其授权用户 <code>dave</code> 只能访问 development 空间中的 secrets(因为 RoleBinding 定义在 development 命名空间)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This role binding allows &quot;dave&quot; to read secrets in the &quot;development&quot; namespace.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-secrets</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">development</span> <span class="hljs-comment"># This only grants permissions within the &quot;development&quot; namespace.</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dave</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>最后，使用 ClusterRoleBinding 可以对整个集群中的所有命名空间资源权限进行授权；以下 ClusterRoleBinding 样例展示了授权 manager 组内所有用户在全部命名空间中对 secrets 进行访问</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This cluster role binding allows anyone in the &quot;manager&quot; group to read secrets in any namespace.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-secrets-global</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">manager</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h4 id="1-3、Referring-to-Resources"><a href="#1-3、Referring-to-Resources" class="headerlink" title="1.3、Referring to Resources"></a>1.3、Referring to Resources</h4><p>Kubernetes 集群内一些资源一般以其名称字符串来表示，这些字符串一般会在 API 的 URL 地址中出现；同时某些资源也会包含子资源，例如 logs 资源就属于 pods 的子资源，API 中 URL 样例如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">GET /api/v1/namespaces/&#123;namespace&#125;/pods/&#123;name&#125;/log<br></code></pre></td></tr></table></figure><p><strong>如果要在 RBAC 授权模型中控制这些子资源的访问权限，可以通过 <code>/</code> 分隔符来实现</strong>，以下是一个定义 pods 资资源 logs 访问权限的 Role 定义样例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-and-pod-logs-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;pods/log&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><p>具体的资源引用可以通过 <code>resourceNames</code> 来定义，当指定 <code>get</code>、<code>delete</code>、<code>update</code>、<code>patch</code> 四个动词时，可以控制对其目标资源的相应动作；以下为限制一个 subject 对名称为 my-configmap 的 configmap 只能具有 <code>get</code> 和 <code>update</code> 权限的样例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">configmap-updater</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmap&quot;</span>]<br>  <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;my-configmap&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>]<br></code></pre></td></tr></table></figure><p><strong>值得注意的是，当设定了 resourceNames 后，verbs 动词不能指定为 <code>list</code>、<code>watch</code>、<code>create</code> 和 <code>deletecollection</code>；因为这个具体的资源名称不在上面四个动词限定的请求 URL 地址中匹配到，最终会因为 URL 地址不匹配导致 Role 无法创建成功</strong></p><h5 id="1-3-1、Role-Examples"><a href="#1-3-1、Role-Examples" class="headerlink" title="1.3.1、Role Examples"></a>1.3.1、Role Examples</h5><p>以下样例只给出了 role 部分</p><p>在核心 API 组中允许读取 <code>pods</code> 资源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>在 <code>extensions</code> 和 <code>apps</code> API 组中允许读取&#x2F;写入 <code>deployments</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取 <code>pods</code> 资源，允许读取&#x2F;写入 <code>jobs</code> 资源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-string">&quot;extensions&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;jobs&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取名称为 <code>my-config</code> 的 ConfigMap(需要与 RoleBinding 绑定来限制某个特定命名空间和指定名字的 ConfigMap)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br>  <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;my-config&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许在核心组中读取 <code>nodes</code> 资源( Node 是集群范围内的资源，需要使用 ClusterRole 并且与 ClusterRoleBinding 绑定才能进行限制)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许对非资源型 endpoint <code>/healthz</code> 和其子路径 <code>/healthz/*</code> 进行 <code>GET</code> 和 <code>POST</code> 请求(同样需要使用 ClusterRole 和 ClusterRoleBinding 才能生效)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">nonResourceURLs:</span> [<span class="hljs-string">&quot;/healthz&quot;</span>, <span class="hljs-string">&quot;/healthz/*&quot;</span>] <span class="hljs-comment"># &#x27;*&#x27; in a nonResourceURL is a suffix glob match</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="1-4、Referring-to-Subjects"><a href="#1-4、Referring-to-Subjects" class="headerlink" title="1.4、Referring to Subjects"></a>1.4、Referring to Subjects</h4><p>RoleBinding 和 ClusterRoleBinding 可以将 Role 绑定到 Subjects；Subjects 可以是 groups、users 或者 service accounts。</p><p>Subjects 中 Users 使用字符串表示，它可以是一个普通的名字字符串，如 “alice”；也可以是 email 格式的邮箱地址，如 <code>bob@example.com</code>；甚至是一组字符串形式的数字 ID。Users 的格式必须满足集群管理员配置的<a href="https://kubernetes.io/docs/admin/authentication/">验证模块</a>，RBAC 授权系统中没有对其做任何格式限定；<strong>但是 Users 的前缀 <code>system:</code> 是系统保留的，集群管理员应该确保普通用户不会使用这个前缀格式</strong></p><p>Kubernetes 的 Group 信息目前由 Authenticator 模块提供，Groups 书写格式与 Users 相同，都为一个字符串，并且没有特定的格式要求；<strong>同样 <code>system:</code> 前缀为系统保留</strong></p><p>具有 <code>system:serviceaccount:</code> 前缀的用户名和 <code>system:serviceaccounts:</code> 前缀的组为 <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Service Accounts</a></p><h5 id="1-4-1、Role-Binding-Examples"><a href="#1-4-1、Role-Binding-Examples" class="headerlink" title="1.4.1、Role Binding Examples"></a>1.4.1、Role Binding Examples</h5><p>以下示例仅展示 RoleBinding 的 subjects 部分</p><p>指定一个名字为 <code>alice@example.com</code> 的用户</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;alice@example.com&quot;</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定一个名字为 <code>frontend-admins</code> 的组</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;frontend-admins&quot;</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定 kube-system namespace 中默认的 Service Account</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>指定在 qa namespace 中全部的 Service Account</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:serviceaccounts:qa</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定全部 namspace 中的全部 Service Account</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:serviceaccounts</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定全部的 authenticated 用户(1.5+)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定全部的 unauthenticated 用户(1.5+)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>指定全部用户</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h3 id="二、Default-Roles-and-Role-Bindings"><a href="#二、Default-Roles-and-Role-Bindings" class="headerlink" title="二、Default Roles and Role Bindings"></a>二、Default Roles and Role Bindings</h3><p>集群创建后 API Server 默认会创建一些 ClusterRole 和 ClusterRoleBinding 对象；这些对象以 <code>system:</code> 为前缀，这表明这些资源对象由集群基础设施拥有；<strong>修改这些集群基础设施拥有的对象可能导致集群不可用。</strong> 一个简单的例子是 <code>system:node</code> ClusterRole，这个 ClusterRole 定义了 kubelet 的相关权限，如果该 ClusterRole 被修改可能导致 ClusterRole 不可用。</p><p><strong>所有的默认 ClusterRole 和 RoleBinding 都具有 <code>kubernetes.io/bootstrapping=rbac-defaults</code> lable</strong></p><h4 id="2-1、Auto-reconciliation"><a href="#2-1、Auto-reconciliation" class="headerlink" title="2.1、Auto-reconciliation"></a>2.1、Auto-reconciliation</h4><p>API Server 在每次启动后都会更新已经丢失的默认 ClusterRole 和 其绑定的相关 Subjects；这将允许集群自动修复因为意外更改导致的 RBAC 授权错误，同时能够使在升级集群后基础设施的 RBAC 授权得以自动更新。</p><p><strong>如果想要关闭 API Server 的自动修复功能，只需要将默认创建的 ClusterRole 和其 RoleBind 的 <code>rbac.authorization.kubernetes.io/autoupdate</code> 注解设置为 false 即可，这样做会有很大风险导致集群因为意外修改 RBAC 而无法工作</strong></p><p><strong>Auto-reconciliation 在 1.6+ 版本被默认启用(当 RBAC 授权被激活时)</strong></p><h4 id="2-2、Discovery-Roles"><a href="#2-2、Discovery-Roles" class="headerlink" title="2.2、Discovery Roles"></a>2.2、Discovery Roles</h4><table><thead><tr><th>Default ClusterRole</th><th>Default ClusterRoleBinding</th><th>Description</th></tr></thead><tbody><tr><td>system:basic-user</td><td>system:authenticated and system:unauthenticated groups</td><td>允许用户以只读的方式读取其基础信息</td></tr><tr><td>system:discovery</td><td>system:authenticated and system:unauthenticated groups</td><td>允许以只读的形式访问 发现和协商 API Level 所需的 API discovery endpoints</td></tr></tbody></table><h4 id="2-3、User-facing-Roles"><a href="#2-3、User-facing-Roles" class="headerlink" title="2.3、User-facing Roles"></a>2.3、User-facing Roles</h4><p>一些默认的 Role 并未以 <code>system:</code> 前缀开头，这表明这些默认的 Role 是面向用户级别的。这其中包括超级用户的一些 Role( <code>cluster-admin</code> )，和为面向集群范围授权的 RoleBinding( <code>cluster-status</code> )，以及在特定命名空间中授权的 RoleBinding( <code>admin</code>，<code>edit</code>，<code>view</code> )</p><table><thead><tr><th>Default ClusterRole</th><th>Default ClusterRoleBinding</th><th>Description</th></tr></thead><tbody><tr><td>cluster-admin</td><td>system:masters group</td><td>允许超级用户对集群内任意资源执行任何动作。当该 Role 绑定到 ClusterRoleBinding 时，将授予目标 subject 在任意 namespace 内对任何 resource 执行任何动作的权限；当绑定到 RoleBinding 时，将授予目标 subject 在当前 namespace 内对任意 resource 执行任何动作的权限，当然也包括 namespace 自己</td></tr><tr><td>admin</td><td>None</td><td>管理员权限，用于在单个 namespace 内授权；在与某个 RoleBinding 绑定后提供在单个 namesapce 中对资源的读写权限，包括在单个 namesapce 内创建 Role 和进行 RoleBinding 的权限。<strong>该 ClusterRole 不允许对资源配额和 namespace 本身进行修改</strong></td></tr><tr><td>edit</td><td>None</td><td>允许读写指定 namespace 中的大多数资源对象；<strong>该 ClusterRole 不允许查看或修改 Role 和 RoleBinding</strong></td></tr><tr><td>view</td><td>None</td><td>允许以只读方式访问特定 namespace 中的大多数资源对象；<strong>该 ClusterRole 不允许查看 Role 或 RoleBinding，同时不允许查看 secrets，因为他们会不断更新</strong></td></tr></tbody></table><h4 id="2-4、Core-Component-Roles"><a href="#2-4、Core-Component-Roles" class="headerlink" title="2.4、Core Component Roles"></a>2.4、Core Component Roles</h4><table><thead><tr><th>Default ClusterRole</th><th>Default ClusterRoleBinding</th><th>Description</th></tr></thead><tbody><tr><td>system:kube-scheduler</td><td>system:kube-scheduler user</td><td>允许访问 kube-scheduler 所需资源</td></tr><tr><td>system:kube-controller-manager</td><td>system:kube-controller-manager user</td><td>允许访问 kube-controller-manager 所需资源；<a href="https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles">该 ClusterRole</a> 包含每个控制循环所需要的权限</td></tr><tr><td>system:node</td><td>system:nodes group (deprecated in 1.7)</td><td>允许访问 kubelet 所需资源；包括对所有的 secrets 读访问权限和对所有 pod 的写权限；在 1.7 中更推荐使用 <a href="/docs/admin/authorization/node/">Node authorizer</a> 和 <a href="/docs/admin/admission-controllers#NodeRestriction">NodeRestriction admission plugin</a> 而非本 ClusterRole；Node authorizer 和 NodeRestriction admission plugin 可以授权当前 node 上运行的具体 pod 对 kubelet API 的访问权限，<strong>在 1.7 版本中，如果开启了 <code>Node authorization mode</code>，那么 <code>system:nodes</code> group将不会被创建和自动绑定</strong></td></tr><tr><td>system:node-proxier</td><td>system:kube-proxy user</td><td>允许访问 kube-proxy 所需资源</td></tr></tbody></table><h4 id="2-5、Other-Component-Roles"><a href="#2-5、Other-Component-Roles" class="headerlink" title="2.5、Other Component Roles"></a>2.5、Other Component Roles</h4><table><thead><tr><th>Default ClusterRole</th><th>Default ClusterRoleBinding</th><th>Description</th></tr></thead><tbody><tr><td>system:auth-delegator</td><td>None</td><td>允许委托认证和授权检查；此情况下通常由附加的 API Server 来进行统一认证和授权</td></tr><tr><td>system:heapster</td><td>None</td><td><a href="https://github.com/kubernetes/heapster">Heapster</a> 组件相关权限</td></tr><tr><td>system:kube-aggregator</td><td>None</td><td><a href="https://github.com/kubernetes/kube-aggregator">kube-aggregator</a> 相关权限</td></tr><tr><td>system:kube-dns</td><td>kube-dns service account in the kube-system namespace</td><td><a href="https://kubernetes.io/docs/admin/dns/">kube-dns</a> 相关权限</td></tr><tr><td>system:node-bootstrapper</td><td>None</td><td>允许访问 <a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/">Kubelet TLS bootstrapping</a> 相关资源权限</td></tr><tr><td>system:node-problem-detector</td><td>None</td><td><a href="https://github.com/kubernetes/node-problem-detector">node-problem-detector</a> 相关权限</td></tr><tr><td>system:persistent-volume-provisioner</td><td>Node</td><td>允许访问 <a href="https://kubernetes.io/docs/user-guide/persistent-volumes/#provisioner">dynamic volume provisioners</a> 相关资源权限</td></tr></tbody></table><h4 id="2-6、Controller-Roles"><a href="#2-6、Controller-Roles" class="headerlink" title="2.6、Controller Roles"></a>2.6、Controller Roles</h4><p><a href="https://kubernetes.io/docs/admin/kube-controller-manager/">Kubernetes controller manager</a> 运行着一些核心的 <code>control loops</code>，<strong>当使用 <code>--use-service-account-credentials</code> 参数启动时，每个 <code>control loop</code> 都会使用独立的 <code>Service Account</code> 启动；相应的 roles 会以 <code>system:controller</code> 前缀存在于每个 control loop 中；如果不指定该选项，那么 Kubernetes controller manager 将会使用自己的凭据来运行所有 <code>control loops</code>，此时必须保证 RBAC 授权模型中授予了其所有相关 Role，如下:</strong></p><ul><li>system:controller:attachdetach-controller</li><li>system:controller:certificate-controller</li><li>system:controller:cronjob-controller</li><li>system:controller:daemon-set-controller</li><li>system:controller:deployment-controller</li><li>system:controller:disruption-controller</li><li>system:controller:endpoint-controller</li><li>system:controller:generic-garbage-collector</li><li>system:controller:horizontal-pod-autoscaler</li><li>system:controller:job-controller</li><li>system:controller:namespace-controller</li><li>system:controller:node-controller</li><li>system:controller:persistent-volume-binder</li><li>system:controller:pod-garbage-collector</li><li>system:controller:replicaset-controller</li><li>system:controller:replication-controller</li><li>system:controller:resourcequota-controller</li><li>system:controller:route-controller</li><li>system:controller:service-account-controller</li><li>system:controller:service-controller</li><li>system:controller:statefulset-controller</li><li>system:controller:ttl-controller</li></ul><h3 id="三、Privilege-Escalation-Prevention-and-Bootstrapping"><a href="#三、Privilege-Escalation-Prevention-and-Bootstrapping" class="headerlink" title="三、Privilege Escalation Prevention and Bootstrapping"></a>三、Privilege Escalation Prevention and Bootstrapping</h3><p>RBAC API 会通过阻止用户编辑 Role 或 RoleBinding 来进行特权升级，RBAC 在 API 级别实现了这一机制，所以即使 RBAC authorizer 不被使用也适用。</p><p><strong>用户即使在对某个 Role 拥有全部权限的情况下也仅能在其作用范围内(ClusterRole -&gt; 集群范围内，Role -&gt; 当前 namespace 或 集群范围)对其进行 create 和 update 操作；</strong> 例如 “user-1” 用户不具有在集群范围内列出 secrets 的权限，那么他也无法在集群范围内创建具有该权限的 ClusterRole，也就是说想传递权限必须先获得该权限；想要允许用户 cretae&#x2F;update Role 有两种方式:</p><ul><li>1、授予一个该用户期望 create&#x2F;update 的 Role 或者 ClusterRole</li><li>2、授予一个包含该用户期望 create&#x2F;update 的 Role 或者 ClusterRole 的 Role 或者 ClusterRole(有点绕…)；如果用户尝试 crate&#x2F;update 一个其不拥有的 Role 或者 ClusterRole，则 API 会禁止</li></ul><p><strong>用户只有拥有了一个 RoleBind 引用的 Role 全部权限，或者被显示授予了对其具有 bind 的权限下，才能在其作用范围(范围同上)内对其进行 create&#x2F;update 操作；</strong> 例如 “user-1” 在不具有列出集群内 secrets 权限的情况下，也不可能为具有该权限的 Role 创建 ClusterRoleBinding；如果想要用户具有 create&#x2F;update ClusterRoleBinding 的权限有以下两种方式:</p><ul><li>1、授予一个该用户期望 create&#x2F;update 的 RoleBinding 或者 ClusterRoleBinding 的 Role 或 ClusterRole 的 Role 或 ClusterRole(汉语专8)</li><li>2、通过其他方式授予一个该用户 期望 create&#x2F;update 的 RoleBinding 或者 ClusterRoleBinding 的权限:<ul><li>2.1、授予一个包含用户期望 create&#x2F;update 的 RoleBinding 或者 ClusterRoleBinding 的 Role 或 ClusterRole 的 Role 或 ClusterRole(我汉语10级)</li><li>2.2、明确的授予用户一个在对特定 Role 或 ClusterRole 进行 bind 的权限</li></ul></li></ul><p>以下样例中，ClusterRole 和 RoleBinding 将允许 “user-1” 用户具有授予其他用户在 “user-1-namespace” namespace 下具有 admin、edit 和 view roles 的权限</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;rolebindings&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;rbac.authorization.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;clusterroles&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;bind&quot;</span>]<br>  <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;edit&quot;</span>,<span class="hljs-string">&quot;view&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">user-1-namespace</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">role-grantor</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">user-1</span><br></code></pre></td></tr></table></figure><p>当使用 bootstrapping 时，初始用户尚没有访问 API 的权限，此时想要授予他们一些尚未拥有的权限是不可能的，此时可以有两种解决方案:</p><ul><li>1、通过使用系统级的 <code>system:masters</code> 组从而通过默认绑定绑定到 <code>cluster-admin</code> 超级用户，这样就可以直接沟通 API Server</li><li>2、如果 API Server 开启了 <code>--insecure-port</code> 端口，那么可以通过此端口调用完成第一次授权动作</li></ul><h3 id="四、Command-line-Utilities"><a href="#四、Command-line-Utilities" class="headerlink" title="四、Command-line Utilities"></a>四、Command-line Utilities</h3><p>通过两个 <code>kubectl</code> 的子命令完成在特定命名空间或集群内的授权管理</p><h4 id="4-1、kubectl-create-rolebinding"><a href="#4-1、kubectl-create-rolebinding" class="headerlink" title="4.1、kubectl create rolebinding"></a>4.1、kubectl create rolebinding</h4><p>在特定 namespae 中创建 Role 或者 ClusterRole 的 RoleBinding 样例</p><p><strong>在 acme namespace 中授权用户 bob 具有 admin ClusterRole 的 RoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme<br></code></pre></td></tr></table></figure><p><strong>在 acme namespace 中授权名称为 acme:myapp 的 service account 具有 view ClusterRole 的 RoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create rolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp --namespace=acme<br></code></pre></td></tr></table></figure><h4 id="4-2、kubectl-create-clusterrolebinding"><a href="#4-2、kubectl-create-clusterrolebinding" class="headerlink" title="4.2、kubectl create clusterrolebinding"></a>4.2、kubectl create clusterrolebinding</h4><p>在全部命名空间中创建 Role 或者 ClusterRole 的 ClusterRoleBinding 样例</p><p><strong>在整个集群内授权 “root” 用户具有 cluster-admin ClusterRole 的 ClusterRoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root<br></code></pre></td></tr></table></figure><p><strong>在整个集群内授权 “kubelet” 用户具有 system:node ClusterRole 的 ClusterRoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding kubelet-node-binding --clusterrole=system:node --user=kubelet<br></code></pre></td></tr></table></figure><p><strong>在 “acme” 命名空间中授权名称为 acme:myapp 的 service account 具有 view ClusterRole 的 ClusterRoleBinding</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp<br></code></pre></td></tr></table></figure><p>更详细使用请参考命令行帮助文档</p><h3 id="五、Service-Account-Permissions"><a href="#五、Service-Account-Permissions" class="headerlink" title="五、Service Account Permissions"></a>五、Service Account Permissions</h3><p>默认的 RBAC 权限策略仅向 control-plane 组件、nodes 和 controllers 进行授权，不包括 <code>kube-system</code> namespace 以外的 Service Account 进行授权(除了向已经被验证过的用户授予的 discovery 权限之外)</p><p>这允许你根据需要向特定的服务账户授予特定的权限；细粒度的权限角色绑定控制会更加安全，但是需要更大的精力来进行权限管理；更加宽松的权限角色绑定控制也许会给一些用户分配其不需要的权限，但是相对来说管理相对更加宽松</p><p>从最安全到最不安全的权限管理如下:</p><h4 id="5-1、为特定应用程序指定的服务账户授予特定的-Role-最佳实践"><a href="#5-1、为特定应用程序指定的服务账户授予特定的-Role-最佳实践" class="headerlink" title="5.1、为特定应用程序指定的服务账户授予特定的 Role(最佳实践)"></a>5.1、为特定应用程序指定的服务账户授予特定的 Role(最佳实践)</h4><p>**这种方式需要应用在 spec 中设置 serviceAccountName，同时这个 SserviceAccount 必须已经被创建(可以通过 API、manifest 文件或者 通过命令 <code>kubectl create serviceaccount</code> 等)**。例如在 “my-namespace” namespace 下授予 “my-sa” ServiceAccount view ClusterRole 如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create rolebinding my-sa-view \<br>  --clusterrole=view \<br>  --serviceaccount=my-namespace:my-sa \<br>  --namespace=my-namespace<br></code></pre></td></tr></table></figure><h4 id="5-2、为特定应用程序默认的服务账户授予特定的-Role"><a href="#5-2、为特定应用程序默认的服务账户授予特定的-Role" class="headerlink" title="5.2、为特定应用程序默认的服务账户授予特定的 Role"></a>5.2、为特定应用程序默认的服务账户授予特定的 Role</h4><p><strong>如果应用程序在 spec 中没有设置 serviceAccountName，那么将会使用 “default” ServiceAccount。</strong></p><p><strong>注意: 如果对 default ServiceAccount 进行 RoleBinding(授权)，那么在当前命名空间内所有没有指定 serviceAccountName 的 pod 都将获得该权限。</strong> 例如在 “my-namespace” namespace 下授予 “default” ServiceAccount view ClusterRole 如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create rolebinding default-view \<br>  --clusterrole=view \<br>  --serviceaccount=my-namespace:default \<br>  --namespace=my-namespace<br></code></pre></td></tr></table></figure><p>目前大多数 <a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/">add-ons</a> 运行在 “kube-system” namespace 的 “default” ServiceAccount 下，如果想要 add-ons 使用超级用户的权限只需要对 “kube-system” namespace 下的 “default” ServiceAccount 授予超级用户权限即可，<strong>需要注意的是超级用户对 API secrets 具有读写权限，这将导致所有 add-ons 组件具有该权限</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding add-on-cluster-admin \<br>  --clusterrole=cluster-admin \<br>  --serviceaccount=kube-system:default<br></code></pre></td></tr></table></figure><h4 id="5-3、为特定命名空间的所有服务账户授权"><a href="#5-3、为特定命名空间的所有服务账户授权" class="headerlink" title="5.3、为特定命名空间的所有服务账户授权"></a>5.3、为特定命名空间的所有服务账户授权</h4><p>如果希望 namespace 中所有应用程序(无论属于哪个 ServiceAccount)都具有某一个 Role，则可以通过将该 Role 授予该 namespace 的 ServiceAccount 组来实现；例如授予 “my-namespace” namespace 下所有 ServiceAccount view ClusterRole 如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create rolebinding serviceaccounts-view \<br>  --clusterrole=view \<br>  --group=system:serviceaccounts:my-namespace \<br>  --namespace=my-namespace<br></code></pre></td></tr></table></figure><h4 id="5-4、为集群范围内所有服务账户授权-不建议"><a href="#5-4、为集群范围内所有服务账户授权-不建议" class="headerlink" title="5.4、为集群范围内所有服务账户授权(不建议)"></a>5.4、为集群范围内所有服务账户授权(不建议)</h4><p>如果你懒得管理每个 namespace 的权限，那么可以将授权扩散到整个集群，将权限授予集群内每个 ServiceAccount；例如授予全部 namespace 中所有 ServiceAccount view ClusterRole:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding serviceaccounts-view \<br>  --clusterrole=view \<br>  --group=system:serviceaccounts<br></code></pre></td></tr></table></figure><h4 id="5-5、为集群范围内所有服务账户授予超级用户权限-no-zuo-no-die"><a href="#5-5、为集群范围内所有服务账户授予超级用户权限-no-zuo-no-die" class="headerlink" title="5.5、为集群范围内所有服务账户授予超级用户权限(no zuo no die)"></a>5.5、为集群范围内所有服务账户授予超级用户权限(no zuo no die)</h4><p>如果你根本不关心权限分配，那么可以向集群内所有 namespace 下所有 ServiceAccount 授予超级用户权限；<strong>注意: 这将允许具有读取权限的用户创建一个容器从而间接读取到超级用户凭据</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding serviceaccounts-cluster-admin \<br>  --clusterrole=cluster-admin \<br>  --group=system:serviceaccounts<br></code></pre></td></tr></table></figure><h3 id="六、Upgrading-from-1-5"><a href="#六、Upgrading-from-1-5" class="headerlink" title="六、Upgrading from 1.5"></a>六、Upgrading from 1.5</h3><p>在 Kubernetes 1.6 版本之前，许多部署使用了非常宽泛的 ABAC 授权策略，包括授予对所有服务帐户的完整API访问权限；默认的 RBAC 权限策略仅向 control-plane 组件、nodes 和 controllers 进行授权，不包括 <code>kube-system</code> namespace 以外的 Service Account 进行授权(除了向已经被验证过的用户授予的 discovery 权限之外)</p><p>这种方式虽然安全性更高，但是 RBAC 授权方式可能影响到已经存在的期望自动获得 API 权限的 workloads，以下有两种解决方案:</p><h4 id="6-1、Parallel-Authorizers"><a href="#6-1、Parallel-Authorizers" class="headerlink" title="6.1、Parallel Authorizers"></a>6.1、Parallel Authorizers</h4><p>并行授权策略允许同时运行 RBAC 和 ABAC，并且包含旧的 ABAC 授权策略</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">--authorization-mode=RBAC,ABAC --authorization-policy-file=mypolicy.jsonl<br></code></pre></td></tr></table></figure><p><strong>此时 RBAC 授权控制器将首先处理授权，如果请求被拒绝则转交给 ABAC 授权控制器处理；这种授权方式将会允许 RBAC 和 ABAC 同时处理授权请求，只要目标 Subjects 在 RBAC 或 ABAC 中任意一个授权器授权成功即可</strong></p><p>当日志级别设置为 2(–v&#x3D;2) 或者更高时，可以在 API Server 日志中看到 RBAC 拒绝的日志(以 <code>RBAC DENY:</code> 开头)，你可以通过日志中该信息来确定哪些 Role 应该授予哪些 Subjects。一旦完成所有的授权处理，并且在日志中没有再出现 RBAC 授权拒绝的日志时，就可以删除掉 ABAC 授权</p><h4 id="6-2、Permissive-RBAC-Permissions"><a href="#6-2、Permissive-RBAC-Permissions" class="headerlink" title="6.2、Permissive RBAC Permissions"></a>6.2、Permissive RBAC Permissions</h4><p>您可以使用 RBAC RoleBinding 来复制一个允许的策略。</p><p><strong>注意: 以下策略允许所有服务帐户充当集群管理员。在容器中运行的任何应用程序都会自动接收服务帐户凭据，并可以针对 API 执行任何操作，包括查看和修改 secrets 权限；所以这种方法并不推荐。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create clusterrolebinding permissive-binding \<br>  --clusterrole=cluster-admin \<br>  --user=admin \<br>  --user=kubelet \<br>  --group=system:serviceaccounts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">基于角色的访问控制使用 `rbac.authorization.k8s.io` API 组来实现权限控制，RBAC 允许管理员通过 Kubernetes API 动态的配置权限策略。**在 1.6 版本中 RBAC 还处于 Beat 阶段**，如果想要开启 RBAC 授权模式需要在 apiserver 组件中指定 `--authorization-mode=RBAC` 选项。</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>How to build Kubernetes RPM</title>
    <link href="https://mritd.com/2017/07/12/how-to-build-kubernetes-rpm/"/>
    <id>https://mritd.com/2017/07/12/how-to-build-kubernetes-rpm/</id>
    <published>2017-07-12T14:52:38.000Z</published>
    <updated>2017-07-12T14:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直使用 Centos 运行 Kubernetes,有些时候基于二进制部署的情况下,手动复制二进制文件和创建 Systemd service 配置略显繁琐;最近找了一下 Kubernetes RPM 的 build 方式,以下记录一下 build 过程</p></blockquote><h3 id="一、RPM-build-方式选择"><a href="#一、RPM-build-方式选择" class="headerlink" title="一、RPM build 方式选择"></a>一、RPM build 方式选择</h3><p>目前我所知道的 build kubernetes RPM 的方式(测试过)总共 3 种,大致分为 2 类</p><ul><li>基于源码 build</li><li>基于已有 rpm 替换</li></ul><p>第一种方案的好处就是配置文件等能始终保持最新的,编译版本等不受限制;但是从源码 build 非常耗时,尤其是网络环境复杂的情况下,没有高配置国外服务器很难完成 build,而且要维护 build 所需 spec 文件等,自己维护这些未必能够尽善尽美;</p><p>第二种方式是创建速度快,build 方式简单可靠,但是由于是替换方式,所以 rpm 中的配置不一定能够即使更新,而且只能基于官方build 好以后的二进制文件进行替换,如果想要尝试 master 最新代码则无法实现</p><h3 id="二、基于源码-Build"><a href="#二、基于源码-Build" class="headerlink" title="二、基于源码 Build"></a>二、基于源码 Build</h3><p>对于 Centos RPM build 原理方式这里不再细说，基于源码 build 的关键就在于 spec 文件，我尝试过自己去写，后来对比一些开源项目的感觉 low 得很，所以以前一直采用一个国外哥们写的脚本 build(参见 <a href="https://github.com/mritd/kubernetes-rpm-builder">这里</a>)；这个脚本不太好的地方是作者已经停止了维护；经过不懈努力，找到了 Fedora 系统的 rpm 仓库，鼓捣了一阵摸清了套路；以下主要以 Fedora 仓库为例进行 build</p><p><strong>以下 Build 在一台 Do 8核心 16G VPS 上进行，由于众所周知的原因，国内 Build 很费劲，一般国外 VPS 都是按小时收费，有个 2 块钱就够了</strong></p><h4 id="2-1、安装-build-所需依赖"><a href="#2-1、安装-build-所需依赖" class="headerlink" title="2.1、安装 build 所需依赖"></a>2.1、安装 build 所需依赖</h4><p><strong>由于 spec 文件中定义了依赖于 golang 这个包，所以如果不装的话会报错；事实上如果使用刚刚安装的这个 golang 去 build 还是会挂掉，因为实际编译要求 golang &gt; 1.7，直接 yum 装的是 1.6，故下面又使用 gvm 装了一个 1.8 的 golang，上面的 golang 安装只是为了通过 spec 检查</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># EPEL</span><br>yum install epel-release -y<br><span class="hljs-comment"># update 系统组件</span><br>yum update -y &amp;&amp; yum upgrade -y<br><span class="hljs-comment"># 安装基本的编译依赖</span><br>yum install golang go-md2man go-bindata gcc bison git rpm-build vim -y<br><span class="hljs-comment"># 安装 gvm(用于 golang 版本管理)</span><br>bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)<br><span class="hljs-built_in">source</span> /root/.gvm/scripts/gvm<br><span class="hljs-comment"># 安装 1.8 之前需要先安装 1.4</span><br>gvm install go1.4 -B<br>gvm use go1.4<br><span class="hljs-comment"># 使用 golang 1.8 版本 build</span><br>gvm install go1.8<br>gvm use go1.8<br></code></pre></td></tr></table></figure><h4 id="2-2、克隆-build-仓库"><a href="#2-2、克隆-build-仓库" class="headerlink" title="2.2、克隆 build 仓库"></a>2.2、克隆 build 仓库</h4><p><strong>Fedora 官方 Kubernetes 仓库地址在 <a href="https://src.fedoraproject.org/cgit/rpms/kubernetes.git/">这里</a>，如果有版本选择请自行区分</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://src.fedoraproject.org/git/rpms/kubernetes.git<br></code></pre></td></tr></table></figure><h4 id="2-3、从-spec-获取所需文件"><a href="#2-3、从-spec-获取所需文件" class="headerlink" title="2.3、从 spec 获取所需文件"></a>2.3、从 spec 获取所需文件</h4><p>克隆好 build 仓库后首先查看 kubernetes.spec 文件，确定 build 所需文件，spec 文件如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 省略...</span><br><br>%global provider                github<br>%global provider_tld            com<br>%global project                 kubernetes<br>%global repo                    kubernetes<br><span class="hljs-comment"># https://github.com/kubernetes/kubernetes</span><br><br>%global provider_prefix         %&#123;provider&#125;.%&#123;provider_tld&#125;/%&#123;project&#125;/%&#123;repo&#125;<br>%global import_path             k8s.io/kubernetes<br>%global commit                  095136c3078ccf887b9034b7ce598a0a1faff769<br>%global shortcommit              %(c=%&#123;commit&#125;; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;c:0:7&#125;</span>)<br><br>%global con_provider            github<br>%global con_provider_tld        com<br>%global con_project             kubernetes<br>%global con_repo                contrib<br><span class="hljs-comment"># https://github.com/kubernetes/contrib</span><br>%global con_provider_prefix     %&#123;con_provider&#125;.%&#123;con_provider_tld&#125;/%&#123;con_project&#125;/%&#123;con_repo&#125;<br>%global con_commit              0f5b210313371ff769da24d8264f5a7869c5a3f3<br>%global con_shortcommit         %(c=%&#123;con_commit&#125;; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;c:0:7&#125;</span>)<br><br>%global kube_version            1.6.7<br>%global kube_git_version        v%&#123;kube_version&#125;<br><br><span class="hljs-comment"># 省略...</span><br></code></pre></td></tr></table></figure><p><strong>从 spec 文件中可以看到 build 主要需要两个仓库的源码，一个是 kubernetes 主仓库，存放着主要的 build 源码；另一个是 contrib 仓库，存放着一些配置文件，如 systemd 配置等</strong></p><p><strong>接下来从 spec 文件的 source 段中可以解读到(source0、source1)最终所需的两个仓库压缩文件名为 <code>kubernetes-SHORTCOMMIT</code>、<code>contrib-SHORTCOMIT</code>，source 段如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">Name:           kubernetes<br>Version:        %&#123;kube_version&#125;<br>Release:        1%&#123;?dist&#125;<br>Summary:        Container cluster management<br>License:        ASL 2.0<br>URL:            https://%&#123;import_path&#125;<br>ExclusiveArch:  x86_64 aarch64 ppc64le s390x<br>Source0:        https://%&#123;provider_prefix&#125;/archive/%&#123;commit&#125;/%&#123;repo&#125;-%&#123;shortcommit&#125;.tar.gz<br>Source1:        https://%&#123;con_provider_prefix&#125;/archive/%&#123;con_commit&#125;/%&#123;con_repo&#125;-%&#123;con_shortcommit&#125;.tar.gz<br>Source3:        kubernetes-accounting.conf<br>Source4:        kubeadm.conf<br>Source33:       genmanpages.sh<br></code></pre></td></tr></table></figure><p><strong>我们准备 build 一个最新的 1.7.0 的 rpm，所以从 github 获取到 commitID 为 <code>d3ada0119e776222f11ec7945e6d860061339aad</code>，contrib 仓库同理，不过 contrib 一般直接取 master 即可 <code>7d344989fe6a3f11a6d84104b024a50960b021db</code>；接下来首要任务是替换 spec 中原有的 版本号和 commitID 如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">%global kube_version            1.7.0<br>%global con_commit              7d344989fe6a3f11a6d84104b024a50960b021db<br>%global commit                  d3ada0119e776222f11ec7945e6d860061339aad<br></code></pre></td></tr></table></figure><h4 id="2-4、准备源码"><a href="#2-4、准备源码" class="headerlink" title="2.4、准备源码"></a>2.4、准备源码</h4><p>修改好文件以后，就可以下载源码文件了，源码下载不必去克隆 github 项目，直接从 spec 中给出的地址下载即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> kubernetes<br>wget https://github.com/kubernetes/kubernetes/archive/d3ada0119e776222f11ec7945e6d860061339aad/kubernetes-d3ada01.tar.gz<br>wget https://github.com/kubernetes/contrib/archive/7d344989fe6a3f11a6d84104b024a50960b021db/contrib-7d34498.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2-5、build-rpm"><a href="#2-5、build-rpm" class="headerlink" title="2.5、build rpm"></a>2.5、build rpm</h4><p>在正式开始 build 之前，还有一点需要注意的是 <strong>默认的 <code>kubernetes.spec</code> 文件中指定了该 rpm 依赖于 docker 这个包，在 CentOS 上可能我们会安装 docker-engine 或者 docker-ce，此时安装 kubernetes rpm 是无法安装的，因为他以来的包不存在，解决的办法就是编译之前删除 spec 文件中的 <code>Requires: docker</code> 即可</strong>，最后创建好 build 目录，并放置好源码文件开始 build 即可，当然 build 可以有不同选择</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 由于我是 root 用户，所以目录位置在这</span><br><span class="hljs-comment"># 实际生产 强烈不推荐使用 root build(操作失误会损毁宿主机)</span><br><span class="hljs-comment"># 我的是一台临时 vps，所以无所谓了</span><br><span class="hljs-built_in">mkdir</span> -p /root/rpmbuild/SOURCES/<br><span class="hljs-built_in">mv</span> ~/kubernetes/* /root/rpmbuild/SOURCES/<br><span class="hljs-built_in">cd</span> /root/rpmbuild/SOURCES/<br><span class="hljs-comment"># 执行 build</span><br>rpmbuild -ba kubernetes.spec<br></code></pre></td></tr></table></figure><p><strong>注意，由于我们选择的版本已经超出了仓库所支持的最大版本，所以有些 Patch 已经不再适用，如 spec 中的 <code>Patch12</code>、<code>Patch19</code> 会出错，所需要注释掉(%prep 段中也有一个)</strong></p><p><strong><code>rpmbuild 可选项有很多，常用的 3 个，可以根据自己实际需要进行 build:</code></strong></p><ul><li><code>-ba</code> : build 源码包+二进制包</li><li><code>-bb</code> : 只 build 二进制包</li><li><code>-bs</code> : 只 build 源码包</li></ul><p>最后 build 完成后如下</p><p><img src="https://cdn.oss.link/markdown/7tn2a.jpg" alt="rpms"></p>]]></content>
    
    
    <summary type="html">一直使用 Centos 运行 Kubernetes,有些时候基于二进制部署的情况下,手动复制二进制文件和创建 Systemd service 配置略显繁琐;最近找了一下 Kubernetes RPM 的 build 方式,以下记录一下 build 过程</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 使用 Ceph 存储</title>
    <link href="https://mritd.com/2017/06/03/use-ceph-storage-on-kubernetes/"/>
    <id>https://mritd.com/2017/06/03/use-ceph-storage-on-kubernetes/</id>
    <published>2017-06-03T04:38:55.000Z</published>
    <updated>2017-06-03T04:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要记录一下 Kubernetes 使用 Ceph 存储的相关配置过程，Kubernetes 集群环境采用的 kargo 部署方式，并且所有组件以容器化运行</p></blockquote><h3 id="一、基础环境准备"><a href="#一、基础环境准备" class="headerlink" title="一、基础环境准备"></a>一、基础环境准备</h3><p>Kubernetes 集群总共有 5 台，部署方式为 kargo 容器化部署，**采用 kargo 部署时确保配置中开启内核模块加载( <code>kubelet_load_modules: true</code> )**；Kubernetes 版本为 1.6.4，Ceph 采用最新的稳定版 Jewel</p><table><thead><tr><th>节点</th><th>IP</th><th>部署</th></tr></thead><tbody><tr><td>docker1</td><td>192.168.1.11</td><td>master、monitor、osd</td></tr><tr><td>docker2</td><td>192.168.1.12</td><td>master、monitor、osd</td></tr><tr><td>docker3</td><td>192.168.1.13</td><td>node、monitor、osd</td></tr><tr><td>docker4</td><td>192.168.1.14</td><td>node、osd</td></tr><tr><td>docker5</td><td>192.168.1.15</td><td>node、osd</td></tr></tbody></table><h3 id="二、部署-Ceph-集群"><a href="#二、部署-Ceph-集群" class="headerlink" title="二、部署 Ceph 集群"></a>二、部署 Ceph 集群</h3><p>具体安装请参考 <a href="https://mritd.me/2017/05/27/ceph-note-1/">Ceph 笔记(一)</a>、<a href="https://mritd.me/2017/05/30/ceph-note-2/">Ceph 笔记(二)</a>，以下直接上命令</p><h4 id="2-1、部署集群"><a href="#2-1、部署集群" class="headerlink" title="2.1、部署集群"></a>2.1、部署集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建集群配置目录</span><br><span class="hljs-built_in">mkdir</span> ceph-cluster &amp;&amp; <span class="hljs-built_in">cd</span> ceph-cluster<br><span class="hljs-comment"># 创建 monitor-node</span><br>ceph-deploy new docker1 docker2 docker3<br><span class="hljs-comment"># 追加 OSD 副本数量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;osd pool default size = 5&quot;</span> &gt;&gt; ceph.conf<br><span class="hljs-comment"># 安装 ceph</span><br>ceph-deploy install docker1 docker2 docker3 docker4 docker5<br><span class="hljs-comment"># init monitor node</span><br>ceph-deploy mon create-initial<br><span class="hljs-comment"># 初始化 ods</span><br>ceph-deploy osd prepare docker1:/dev/sda docker2:/dev/sda docker3:/dev/sda docker4:/dev/sda docker5:/dev/sda<br><span class="hljs-comment"># 激活 osd</span><br>ceph-deploy osd activate docker1:/dev/sda1:/dev/sda2 docker2:/dev/sda1:/dev/sda2 docker3:/dev/sda1:/dev/sda2 docker4:/dev/sda1:/dev/sda2 docker5:/dev/sda1:/dev/sda2<br><span class="hljs-comment"># 部署 ceph cli 工具和秘钥文件</span><br>ceph-deploy admin docker1 docker2 docker3 docker4 docker5<br><span class="hljs-comment"># 确保秘钥有读取权限</span><br><span class="hljs-built_in">chmod</span> +r /etc/ceph/ceph.client.admin.keyring<br><span class="hljs-comment"># 检测集群状态</span><br>ceph health<br></code></pre></td></tr></table></figure><h4 id="2-2、创建块设备"><a href="#2-2、创建块设备" class="headerlink" title="2.2、创建块设备"></a>2.2、创建块设备</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建存储池</span><br>rados mkpool data<br><span class="hljs-comment"># 创建 image</span><br>rbd create data --size 10240 -p data<br><span class="hljs-comment"># 关闭不支持特性</span><br>rbd feature <span class="hljs-built_in">disable</span> data exclusive-lock, object-map, fast-diff, deep-flatten -p data<br><span class="hljs-comment"># 映射(每个节点都要映射)</span><br>rbd map data --name client.admin -p data<br><span class="hljs-comment"># 格式化块设备(单节点即可)</span><br>mkfs.xfs /dev/rbd0<br></code></pre></td></tr></table></figure><h3 id="三、kubernetes-使用-Ceph"><a href="#三、kubernetes-使用-Ceph" class="headerlink" title="三、kubernetes 使用 Ceph"></a>三、kubernetes 使用 Ceph</h3><h4 id="3-1、PV-PVC-方式"><a href="#3-1、PV-PVC-方式" class="headerlink" title="3.1、PV &amp; PVC 方式"></a>3.1、PV &amp; PVC 方式</h4><p>传统的使用分布式存储的方案一般为 <code>PV &amp; PVC</code> 方式，也就是说管理员预先创建好相关 PV 和 PVC，然后对应的 deployment 或者 replication 挂载 PVC 来使用</p><p><strong>创建 Secret</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取管理 key 并进行 base64 编码</span><br>ceph auth get-key client.admin | <span class="hljs-built_in">base64</span><br><br><span class="hljs-comment"># 创建一个 secret 配置(key 为上条命令生成的)</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; ceph-secret.yml</span><br><span class="hljs-string">apiVersion: v1</span><br><span class="hljs-string">kind: Secret</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: ceph-secret</span><br><span class="hljs-string">data:</span><br><span class="hljs-string">  key: QVFDaWtERlpzODcwQWhBQTdxMWRGODBWOFZxMWNGNnZtNmJHVGc9PQo=</span><br><span class="hljs-string">EOF</span><br>kubectl create -f ceph-secret.yml<br></code></pre></td></tr></table></figure><p><strong>创建 PV</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># monitor 需要多个，pool 和 image 填写上面创建的</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.pv.yml</span><br><span class="hljs-string">apiVersion: v1</span><br><span class="hljs-string">kind: PersistentVolume</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: test-pv</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  capacity:</span><br><span class="hljs-string">    storage: 2Gi</span><br><span class="hljs-string">  accessModes:</span><br><span class="hljs-string">    - ReadWriteOnce </span><br><span class="hljs-string">  rbd:</span><br><span class="hljs-string">    monitors:</span><br><span class="hljs-string">      - 192.168.1.11:6789</span><br><span class="hljs-string">      - 192.168.1.12:6789</span><br><span class="hljs-string">      - 192.168.1.13:6789</span><br><span class="hljs-string">    pool: data</span><br><span class="hljs-string">    image: data</span><br><span class="hljs-string">    user: admin</span><br><span class="hljs-string">    secretRef:</span><br><span class="hljs-string">      name: ceph-secret</span><br><span class="hljs-string">    fsType: xfs</span><br><span class="hljs-string">    readOnly: false</span><br><span class="hljs-string">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.pv.yml<br></code></pre></td></tr></table></figure><p><strong>创建 PVC</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.pvc.yml</span><br><span class="hljs-string">kind: PersistentVolumeClaim</span><br><span class="hljs-string">apiVersion: v1</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: test-pvc</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  accessModes:</span><br><span class="hljs-string">    - ReadWriteOnce</span><br><span class="hljs-string">  resources:</span><br><span class="hljs-string">    requests:</span><br><span class="hljs-string">      storage: 2Gi</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.pvc.yml<br></code></pre></td></tr></table></figure><p><strong>创建 Deployment并挂载</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.deploy.yml</span><br><span class="hljs-string">apiVersion: apps/v1beta1</span><br><span class="hljs-string">kind: Deployment</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: demo</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  replicas: 3</span><br><span class="hljs-string">  template:</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      labels:</span><br><span class="hljs-string">        app: demo</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: demo</span><br><span class="hljs-string">        image: mritd/demo</span><br><span class="hljs-string">        ports:</span><br><span class="hljs-string">        - containerPort: 80</span><br><span class="hljs-string">        volumeMounts:</span><br><span class="hljs-string">          - mountPath: &quot;/data&quot;</span><br><span class="hljs-string">            name: data</span><br><span class="hljs-string">      volumes:</span><br><span class="hljs-string">        - name: data</span><br><span class="hljs-string">          persistentVolumeClaim:</span><br><span class="hljs-string">            claimName: test-pvc</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.deploy.yml<br></code></pre></td></tr></table></figure><h4 id="3-2、StoragaClass-方式"><a href="#3-2、StoragaClass-方式" class="headerlink" title="3.2、StoragaClass 方式"></a>3.2、StoragaClass 方式</h4><p>在 1.4 以后，kubernetes 提供了一种更加方便的动态创建 PV 的方式；也就是说使用 StoragaClass 时无需预先创建固定大小的 PV，等待使用者创建 PVC 来使用；而是直接创建 PVC 即可分配使用</p><p><strong>创建系统级 Secret</strong></p><p><strong>注意: 由于 StorageClass 要求 Ceph 的 Secret type 必须为 <code>kubernetes.io/rbd</code>，所以上一步创建的 <code>ceph-secret</code> 需要先被删除，然后使用如下命令重新创建；此时的 key 并没有经过 base64</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这个 secret type 必须为 kubernetes.io/rbd，否则会造成 PVC 无法使用</span><br>kubectl create secret generic ceph-secret --<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;kubernetes.io/rbd&quot;</span> --from-literal=key=<span class="hljs-string">&#x27;AQCikDFZs870AhAA7q1dF80V8Vq1cF6vm6bGTg==&#x27;</span> --namespace=kube-system<br>kubectl create secret generic ceph-secret --<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;kubernetes.io/rbd&quot;</span> --from-literal=key=<span class="hljs-string">&#x27;AQCikDFZs870AhAA7q1dF80V8Vq1cF6vm6bGTg==&#x27;</span> --namespace=default<br></code></pre></td></tr></table></figure><p><strong>创建 StorageClass</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.storageclass.yml</span><br><span class="hljs-string">apiVersion: storage.k8s.io/v1</span><br><span class="hljs-string">kind: StorageClass</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: test-storageclass</span><br><span class="hljs-string">provisioner: kubernetes.io/rbd</span><br><span class="hljs-string">parameters:</span><br><span class="hljs-string">  monitors: 192.168.1.11:6789,192.168.1.12:6789,192.168.1.13:6789</span><br><span class="hljs-string">  # Ceph 客户端用户 ID(非 k8s 的)</span><br><span class="hljs-string">  adminId: admin</span><br><span class="hljs-string">  adminSecretName: ceph-secret</span><br><span class="hljs-string">  adminSecretNamespace: kube-system</span><br><span class="hljs-string">  pool: data</span><br><span class="hljs-string">  userId: admin</span><br><span class="hljs-string">  userSecretName: ceph-secret</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.storageclass.yml<br></code></pre></td></tr></table></figure><p><strong>关于上面的 adminId 等字段具体含义请参考这里 <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#ceph-rbd">Ceph RBD</a></strong></p><p><strong>创建 PVC</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.sc.pvc.yml</span><br><span class="hljs-string">kind: PersistentVolumeClaim</span><br><span class="hljs-string">apiVersion: v1</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: test-sc-pvc</span><br><span class="hljs-string">  annotations: </span><br><span class="hljs-string">    volume.beta.kubernetes.io/storage-class: test-storageclass</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  accessModes:</span><br><span class="hljs-string">    - ReadWriteOnce </span><br><span class="hljs-string">  resources:</span><br><span class="hljs-string">    requests:</span><br><span class="hljs-string">      storage: 2Gi</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.sc.pvc.yml<br></code></pre></td></tr></table></figure><p><strong>创建 Deployment</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; test.sc.deploy.yml</span><br><span class="hljs-string">apiVersion: apps/v1beta1</span><br><span class="hljs-string">kind: Deployment</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: demo-sc</span><br><span class="hljs-string">spec:</span><br><span class="hljs-string">  replicas: 3</span><br><span class="hljs-string">  template:</span><br><span class="hljs-string">    metadata:</span><br><span class="hljs-string">      labels:</span><br><span class="hljs-string">        app: demo-sc</span><br><span class="hljs-string">    spec:</span><br><span class="hljs-string">      containers:</span><br><span class="hljs-string">      - name: demo-sc</span><br><span class="hljs-string">        image: mritd/demo</span><br><span class="hljs-string">        ports:</span><br><span class="hljs-string">        - containerPort: 80</span><br><span class="hljs-string">        volumeMounts:</span><br><span class="hljs-string">          - mountPath: &quot;/data&quot;</span><br><span class="hljs-string">            name: data</span><br><span class="hljs-string">      volumes:</span><br><span class="hljs-string">        - name: data</span><br><span class="hljs-string">          persistentVolumeClaim:</span><br><span class="hljs-string">            claimName: test-sc-pvc</span><br><span class="hljs-string">EOF</span><br><br>kubectl create -f test.sc.deploy.yml<br></code></pre></td></tr></table></figure><p>到此完成，检测是否成功最简单的方式就是看相关 pod 是否正常运行</p>]]></content>
    
    
    <summary type="html">本文主要记录一下 Kubernetes 使用 Ceph 存储的相关配置过程，Kubernetes 集群环境采用的 kargo 部署方式，并且所有组件以容器化运行</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 笔记(二)</title>
    <link href="https://mritd.com/2017/05/30/ceph-note-2/"/>
    <id>https://mritd.com/2017/05/30/ceph-note-2/</id>
    <published>2017-05-30T15:39:29.000Z</published>
    <updated>2017-05-30T15:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要简述了 Ceph 的存储对象名词解释及其含义，以及对 Ceph 集群内 CRUSH bucket 调整、PG&#x2F;PGP 参数调整等设置；同时参考了一些书籍资料简单的概述一下 Ceph 集群硬件要求等</p></blockquote><h3 id="一、Ceph-组件及定义"><a href="#一、Ceph-组件及定义" class="headerlink" title="一、Ceph 组件及定义"></a>一、Ceph 组件及定义</h3><h4 id="1-1、对象"><a href="#1-1、对象" class="headerlink" title="1.1、对象"></a>1.1、对象</h4><p>对象是 Ceph 中最小的存储单元，对象是一个数据和一个元数据绑定的整体；元数据中存放了具体数据的相关属性描述信息等；Ceph 为每个对象生成一个集群内唯一的对象标识符，以保证对象在集群内的唯一性；在传统文件系统的存储中，单个文件的大小是有一定限制的，而 Ceph 中对象随着其元数据区增大可以变得非常巨大</p><h4 id="1-2、CRUSH"><a href="#1-2、CRUSH" class="headerlink" title="1.2、CRUSH"></a>1.2、CRUSH</h4><p>在传统的文件存储系统中，数据的元数据占据着极其重要的位置，每次系统中新增数据时，元数据首先被更新，然后才是实际的数据被写入；在较小的存储系统中(GB&#x2F;TB)，这种将元数据存储在某个固定的存储节点或者磁盘阵列中的做法还可以满足需求；当数据量增大到 PB&#x2F;ZB 级别时，元数据查找性能将会成为一个很大的瓶颈；同时元数据的统一存放还可能造成单点故障，即当元数据丢失后，实际数据将无法被找回；与传统文件存储系统不同的是，<strong>Ceph 使用可扩展散列下的受控复制(Controlled Replication Under Scalable Hashing,CRUSH)算法来精确地计算数据应该被写入哪里&#x2F;从哪里读取；CRUSH按需计算元数据，而不是存储元数据，从而解决了传统文件存储系统的瓶颈</strong></p><h4 id="1-3、CRUSH-查找"><a href="#1-3、CRUSH-查找" class="headerlink" title="1.3、CRUSH 查找"></a>1.3、CRUSH 查找</h4><p>在 Ceph 中，元数据的计算和负载是分布式的，并且只有在需要时才会执行；元数据的计算过程称之为 CRUSH 查找，不同于其他分布式文件系统，Ceph 的 CRUSH 查找是由客户端使用自己的资源来完成的，从而去除了中心查找带来的性能以及单点故障问题；CRUSH 查找时，客户端先通过 monitor 获取集群 map 副本，然后从 map 副本中获取集群配置信息；然后通过对象信息、池ID等生成对象；接着通过对象和 PG 数散列后得到 Ceph 池中最终存放该对象的 PG；最终在通过 CRUSH 算法确定该 PG 所需存储的 OSD 位置，<strong>一旦确定了 OSD 位置，那么客户端将直接与 OSD 通讯完成数据读取与写入，这直接去除了中间环节，保证了性能的极大提升</strong></p><h4 id="1-4、CRUSH-层级结构"><a href="#1-4、CRUSH-层级结构" class="headerlink" title="1.4、CRUSH 层级结构"></a>1.4、CRUSH 层级结构</h4><p>在 Ceph 中，CRUSH 是完全支持各种基础设施和用户自定义的；CRUSH 设备列表中预先定义了一系列的设备，包括磁盘、节点、机架、行、开关、电源电路、房间、数据中心等等；这些组件称之为故障区(CRUSH bucket)，用户可以通过自己的配置把不同的 OSD 分布在不同区域；<strong>此后 Ceph 存储数据时根据 CRUSH bucket 结构，将会保证每份数据都会在所定义的物理组件之间完全隔离；</strong>比如我们定义了多个机架上的不同 OSD，那么 Ceph 存储时就会智能的将数据副本分散到多个机架之上，防止某个机架上机器全部跪了以后数据全部丢失的情况</p><h4 id="1-5、恢复和再平衡"><a href="#1-5、恢复和再平衡" class="headerlink" title="1.5、恢复和再平衡"></a>1.5、恢复和再平衡</h4><p>当故障区内任何组件出现故障时，Ceph 都会将其标记为 down 和 out 状态；然后默认情况下 Ceph 会等待 300秒之后进行数据恢复和再平衡，这个值可以通过在配置文件中的 <code>mon osd down out interval</code> 参数来调整</p><h4 id="1-6、PG"><a href="#1-6、PG" class="headerlink" title="1.6、PG"></a>1.6、PG</h4><p>PG 是一组对象集合体，根据 Ceph 的复制级别，每个PG 中的数据会被复制到多个 OSD 上，以保证其高可用状态</p><h4 id="1-7、Ceph-池"><a href="#1-7、Ceph-池" class="headerlink" title="1.7、Ceph 池"></a>1.7、Ceph 池</h4><p>Ceph 池是一个存储对象的逻辑分区，每一个池中都包含若干个 PG，进而实现将一定对象映射到集群内不同 OSD 中，<strong>池可以以复制方式或者纠错码方式创建，但不可同时使用这两种方式</strong></p><h3 id="二、Ceph-组件调整及操作"><a href="#二、Ceph-组件调整及操作" class="headerlink" title="二、Ceph 组件调整及操作"></a>二、Ceph 组件调整及操作</h3><h4 id="2-1、池操作"><a href="#2-1、池操作" class="headerlink" title="2.1、池操作"></a>2.1、池操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建池</span><br>rados mkpool test-pool<br><span class="hljs-comment"># 列出池</span><br>rados lspools<br><span class="hljs-comment"># 复制池</span><br>rados cppool test-pool cp-pool<br><span class="hljs-comment"># 删除池</span><br>rados rmpool test-pool test-pool --yes-i-really-really-mean-it<br></code></pre></td></tr></table></figure><h4 id="2-2、对象操作"><a href="#2-2、对象操作" class="headerlink" title="2.2、对象操作"></a>2.2、对象操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将对象加入到池内</span><br>rados put testfile anaconda-ks.cfg -p <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 列出池内对象</span><br>rados <span class="hljs-built_in">ls</span> -p <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 检查对象信息</span><br>ceph osd map <span class="hljs-built_in">test</span> testfile<br><span class="hljs-comment"># 删除对象</span><br>rados <span class="hljs-built_in">rm</span> testfile -p <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h4 id="2-3、修改-PG-和-PGP"><a href="#2-3、修改-PG-和-PGP" class="headerlink" title="2.3、修改 PG 和 PGP"></a>2.3、修改 PG 和 PGP</h4><p>计算 PG 数为 Ceph 企业级存储必不可少的的一部分，其中集群内 PG 计算公式如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">PG 总数 = (OSD 数 * 100) / 最大副本数<br></code></pre></td></tr></table></figure><p>对于单个池来讲，我们还应该为池设定 PG 数，其中池的 PG 数计算公式如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">PG 总数 = (OSD 数 * 100) / 最大副本数 / 池数<br></code></pre></td></tr></table></figure><p>PGP 是为了实现定位而设计的 PG，PGP 的值应该与 PG 数量保持一致；<strong>当池的 pg_num 增加的时候，池内所有 PG 都会一分为二，但是他们仍然保持着以前 OSD 的映射关系；当增加 pgp_num 的时候，Ceph 集群才会将 PG 进行 OSD 迁移，然后开始再平衡过程</strong></p><p>获取现有 PG 和 PGP 值可以通过如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd pool get <span class="hljs-built_in">test</span> pg_num<br>ceph osd pool get <span class="hljs-built_in">test</span> pgp_num<br></code></pre></td></tr></table></figure><p>当计算好 PG 和 PGP 以后可以通过以下命令设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd pool <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span> pgp_num 32<br>ceph osd pool <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span> pgp_num 32<br></code></pre></td></tr></table></figure><p>同样在创建 pool 的时候也可以同步指定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd pool create POOLNAME PG PGP<br></code></pre></td></tr></table></figure><h4 id="2-4、pool-副本数调整"><a href="#2-4、pool-副本数调整" class="headerlink" title="2.4、pool 副本数调整"></a>2.4、pool 副本数调整</h4><p>默认情况，当创建一个新的 pool 时，向 pool 内存储的数据只会有 2 个副本，查看 pool 副本数可以通过如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd dump | grep pool<br></code></pre></td></tr></table></figure><p>当我们需要修改默认副本数以使其满足高可靠性需求时，可以通过如下命令完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd pool <span class="hljs-built_in">set</span> POOLNAME size NUM<br></code></pre></td></tr></table></figure><h4 id="2-5、定制机群布局"><a href="#2-5、定制机群布局" class="headerlink" title="2.5、定制机群布局"></a>2.5、定制机群布局</h4><p>上面已经讲述了 CRUSH bucket 的概念，通过以下相关命令，我们可以定制自己的集群布局，以使 Ceph 完成数据的容灾处理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看现有集群布局</span><br>ceph osd tree<br><span class="hljs-comment"># 添加机架</span><br>ceph osd crush add-bucket rack01 rack<br>ceph osd crush add-bucket rack02 rack<br>ceph osd crush add-bucket rack03 rack<br><span class="hljs-comment"># 移动主机到不同的机架(dockerX 为我的主机名)</span><br>ceph osd crush move docker1 rack=rack01<br>ceph osd crush move docker2 rack=rack02<br>ceph osd crush move docker3 rack=rack03<br><span class="hljs-comment"># 移动每个机架到默认的根下</span><br>ceph osd crush move rack01 root=default<br>ceph osd crush move rack02 root=default<br>ceph osd crush move rack03 root=default<br></code></pre></td></tr></table></figure><p>最终集群整体布局如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ ceph osd tree<br>ID WEIGHT  TYPE NAME            UP/DOWN REWEIGHT PRIMARY-AFFINITY<br>-1 0.01469 root default<br>-5 0.00490     rack rack01<br>-2 0.00490         host docker1<br> 0 0.00490             osd.0         up  1.00000          1.00000<br>-6 0.00490     rack rack02<br>-3 0.00490         host docker2<br> 1 0.00490             osd.1         up  1.00000          1.00000<br>-7 0.00490     rack rack03<br>-4 0.00490         host docker3<br> 2 0.00490             osd.2         up  1.00000          1.00000<br></code></pre></td></tr></table></figure><h3 id="三、Ceph-硬件配置"><a href="#三、Ceph-硬件配置" class="headerlink" title="三、Ceph 硬件配置"></a>三、Ceph 硬件配置</h3><p>硬件规划一般是一个企业级存储的必要工作，以下简述了 Ceph 的一般硬件需求</p><h4 id="3-1、监控需求"><a href="#3-1、监控需求" class="headerlink" title="3.1、监控需求"></a>3.1、监控需求</h4><p>Ceph monitor 通过维护整个集群的 map 从而完成集群的健康处理；但是 monitor 并不参与实际的数据存储，所以实际上 monitor 节点 CPU 占用、内存占用都比较少；一般单核 CPU 加几个 G 的内存即可满足需求；虽然 monitor 节点不参与实际存储工作，但是 monitor 的网卡至少应该是冗余的，因为一旦网络出现故障则集群健康会难以保证</p><h4 id="3-2、OSD-需求"><a href="#3-2、OSD-需求" class="headerlink" title="3.2、OSD 需求"></a>3.2、OSD 需求</h4><p>OSD 作为 Ceph 集群的主要存储设施，其会占用一定的 CPU 和内存资源；一般推荐做法是每个节点的每块硬盘作为一个 OSD；同时 OSD 还需要写入日志，所以应当为 OSD 集成日志留有充足的空间；在出现故障时，OSD 需求的资源可能会更多，所以 OSD 节点根据实际情况(每个 OSD 会有一个线程)应该分配更多的 CPU 和内存；固态硬盘也会增加 OSD 存取速度和恢复速度</p><h4 id="3-3、MDS-需求"><a href="#3-3、MDS-需求" class="headerlink" title="3.3、MDS 需求"></a>3.3、MDS 需求</h4><p>MDS 服务专门为 CephFS 存储元数据，所以相对于 monitor 和 OSD 节点，这个 MDS 节点的 CPU 需求会大得多，同时内存占用也是海量的，所以 MDS 一般会使用一个强劲的物理机单独搭建</p>]]></content>
    
    
    <summary type="html">本篇文章主要简述了 Ceph 的存储对象名词解释及其含义，以及对 Ceph 集群内 CRUSH bucket 调整、PG/PGP 参数调整等设置；同时参考了一些书籍资料简单的概述一下 Ceph 集群硬件要求等</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Ceph" scheme="https://mritd.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 笔记(一)</title>
    <link href="https://mritd.com/2017/05/27/ceph-note-1/"/>
    <id>https://mritd.com/2017/05/27/ceph-note-1/</id>
    <published>2017-05-26T17:17:19.000Z</published>
    <updated>2017-05-26T17:17:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ceph 是一个符合POSIX、开源的分布式存储系统；其具备了极好的可靠性、统一性、鲁棒性；经过近几年的发展，Ceph 开辟了一个全新的数据存储途径。Ceph 具备了企业级存储的分布式、可大规模扩展、没有单点故障等特点，越来越受到人们青睐；以下记录了 Ceph 的相关学习笔记。</p></blockquote><h3 id="一、-Ceph-Quick-Start"><a href="#一、-Ceph-Quick-Start" class="headerlink" title="一、 Ceph Quick Start"></a>一、 Ceph Quick Start</h3><h4 id="1-1、安装前准备"><a href="#1-1、安装前准备" class="headerlink" title="1.1、安装前准备"></a>1.1、安装前准备</h4><blockquote><p>本文以 Centos 7 3.10 内核为基础环境，节点为 4 台 Vagrant 虚拟机；Ceph 版本为 Jewel.</p></blockquote><p>首先需要一台部署节点，这里使用的是宿主机；在部署节点上需要安装一些部署工具，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 EPEL 源</span><br>yum install -y epel-release<br><br><span class="hljs-comment"># 添加 ceph 官方源</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF &gt;&gt; /etc/yum.repos.d/ceph.repo</span><br><span class="hljs-string">[ceph-noarch]</span><br><span class="hljs-string">name=Ceph noarch packages</span><br><span class="hljs-string">baseurl=https://download.ceph.com/rpm-jewel/el7/noarch</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">type=rpm-md</span><br><span class="hljs-string">gpgkey=https://download.ceph.com/keys/release.asc</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 安装部署工具</span><br>yum update -y &amp;&amp; yum install ceph-deploy -y<br></code></pre></td></tr></table></figure><p><strong>同时，ceph-deploy 工具需要使用 ssh 来自动化部署 Ceph 各个组件，因此需要保证部署节点能够免密码登录待部署节点；最后，待部署节点最好加入到部署节点的 hosts 中，方便使用域名(某些地方强制)连接管理</strong></p><h4 id="1-2、校对时钟"><a href="#1-2、校对时钟" class="headerlink" title="1.2、校对时钟"></a>1.2、校对时钟</h4><p>由于 Ceph 采用 Paxos 算法保证数据一致性，所以安装前需要先保证各个节点时钟同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 ntp 工具</span><br>yum install ntp ntpdate ntp-doc -y<br><span class="hljs-comment"># 校对系统时钟</span><br>ntpdate 0.cn.pool.ntp.org<br></code></pre></td></tr></table></figure><h4 id="1-3、创建集群配置"><a href="#1-3、创建集群配置" class="headerlink" title="1.3、创建集群配置"></a>1.3、创建集群配置</h4><p>ceph-deploy 工具部署集群前需要创建一些集群配置信息，其保存在 <code>ceph.conf</code> 文件中，这个文件未来将会被复制到每个节点的 <code>/etc/ceph/ceph.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建集群配置目录</span><br><span class="hljs-built_in">mkdir</span> ceph-cluster &amp;&amp; <span class="hljs-built_in">cd</span> ceph-cluster<br><span class="hljs-comment"># 创建 monitor-node</span><br>ceph-deploy new docker1<br><span class="hljs-comment"># 追加 OSD 副本数量(测试虚拟机总共有3台)</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;osd pool default size = 3&quot;</span> &gt;&gt; ceph.conf<br></code></pre></td></tr></table></figure><h4 id="1-4、创建集群"><a href="#1-4、创建集群" class="headerlink" title="1.4、创建集群"></a>1.4、创建集群</h4><p>创建集群使用 ceph-deploy 工具即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 ceph</span><br>ceph-deploy install docker1 docker2 docker3<br><span class="hljs-comment"># 初始化 monitor node 和 秘钥文件</span><br>ceph-deploy mon create-initial<br><span class="hljs-comment"># 在两个 osd 节点创建一个目录作为 osd 存储</span><br><span class="hljs-built_in">mkdir</span> /data<br><span class="hljs-built_in">chown</span> -R ceph:ceph /data<br><span class="hljs-comment"># 初始化 osd</span><br>ceph-deploy osd prepare docker1:/data docker2:/data docker3:/data<br><span class="hljs-comment"># 激活 osd</span><br>ceph-deploy osd activate docker1:/data docker2:/data docker3:/data<br><span class="hljs-comment"># 部署 ceph cli 工具和秘钥文件</span><br>ceph-deploy admin docker1 docker2 docker3<br><span class="hljs-comment"># 确保秘钥有读取权限</span><br><span class="hljs-built_in">chmod</span> +r /etc/ceph/ceph.client.admin.keyring<br><span class="hljs-comment"># 检测集群状态</span><br>ceph health<br></code></pre></td></tr></table></figure><p>执行 <code>ceph health</code> 命令后应当返回 <code>HEALTH_OK</code>；如出现 <code>HEALTH_WARN clock skew detected on mon.docker2; Monitor clock skew detected</code>，说明时钟不同步，手动同步时钟稍等片刻后即可；其他错误可以通过如下命令重置集群重新部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph-deploy purge &#123;ceph-node&#125; [&#123;ceph-node&#125;]<br>ceph-deploy purgedata &#123;ceph-node&#125; [&#123;ceph-node&#125;]<br>ceph-deploy forgetkeys<br></code></pre></td></tr></table></figure><p><strong>更多细节，如防火墙、SELinux配置等请参考 <a href="http://docs.ceph.com/docs/master/start/quick-start-preflight/#rhel-centos">官方文档</a></strong></p><h4 id="1-5、其他组件创建"><a href="#1-5、其他组件创建" class="headerlink" title="1.5、其他组件创建"></a>1.5、其他组件创建</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 MDS</span><br>ceph-deploy mds create docker1<br><span class="hljs-comment"># 创建 RGW</span><br>ceph-deploy rgw create docker1<br><span class="hljs-comment"># 增加 monitor</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;public network = 192.168.1.0/24&quot;</span> &gt;&gt; ceph.conf<br>ceph-deploy --overwrite-conf mon create docker2 docker3<br><span class="hljs-comment"># 查看仲裁信息</span><br>ceph quorum_status --format json-pretty<br></code></pre></td></tr></table></figure><h3 id="二、Ceph-组件及测试"><a href="#二、Ceph-组件及测试" class="headerlink" title="二、Ceph 组件及测试"></a>二、Ceph 组件及测试</h3><h4 id="2-1、Ceph-架构图"><a href="#2-1、Ceph-架构图" class="headerlink" title="2.1、Ceph 架构图"></a>2.1、Ceph 架构图</h4><p>以下图片(摘自网络)展示了基本的 Ceph 架构</p><p><img src="https://cdn.oss.link/markdown/o8gct.jpg" alt="ceph 架构"></p><ul><li>OSD: Ceph 实际存储数据单元被称为 OSD，OSD 可以使用某个物理机的目录、磁盘设备，甚至是 RAID 阵列；</li><li>MON: 在 OSD 之上则分布着多个 MON(monitor)，Ceph 集群内组件的状态信息等被维护成一个个 map，而 MON 则负责维护集群所有组件 map 信息，各个集群内组件心跳请求 MON 以确保其 map 保持最新状态；当集群发生故障时，Ceph 将采用 Paxos 算法保证数据一致性，这其中仲裁等主要由 MON 完成，所以 MON 节点建议最少为 3 个，并且为奇数以防止脑裂情况的发生；</li><li>MDS: Ceph 本身使用对象形式存储数据，而对于外部文件系统访问支持则提供了上层的 CephFS 接口；CephFS 作为文件系统接口则需要一些元数据，这些原数据就存放在 MDS 中；目前 Ceph 只支持单个 MDS 工作，<strong>但是可以通过设置 MDS 副本，以保证 MDS 的可靠性</strong></li><li>RADOS: RADOS 全称 Reliable Autonomic Distributed Object Store，即可靠分布式对象存储；其作为在整个 Ceph 集群核心基础设施，向外部提供基本的数据操作</li><li>librados: 为了支持私有云等程序调用，Ceph 提供了 C 实现的 API 库 librados，librados 可以支持主流编程语言直接调用，沟通 RADOS 完成数据存取等操作</li><li>RBD: RDB 个人理解是一个命令行工具，一般位于宿主机上，通过该工具可以直接跟 librados 交互，实现创建存储对象，格式化 Ceph 块设备等操作</li><li>RADOS GW: 从名字可以看出来，这个组件是一个代理网关，通过 RADOS GW 可以将 RADOS 响应转化为 HTTP 响应，同样可以将外部 HTTP 请求转化为 RADOS 调用；RADOS GW 主要提供了三大功能: <strong>兼容 S3 接口、兼容 Swift 接口、提供管理 RestFul API</strong></li></ul><p>下图(摘自网络)从应用角度描述了 Ceph 架构</p><p><img src="https://cdn.oss.link/markdown/fh5z8.jpg" alt="APP Ceph 架构"></p><h4 id="2-2、对象存储测试"><a href="#2-2、对象存储测试" class="headerlink" title="2.2、对象存储测试"></a>2.2、对象存储测试</h4><p>此处直接上代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建测试文件</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=<span class="hljs-built_in">test</span> bs=1G count=1<br><span class="hljs-comment"># 创建对象存储池</span><br>rados mkpool data<br><span class="hljs-comment"># 放入对象</span><br>rados put test-file <span class="hljs-built_in">test</span> --pool=data<br><span class="hljs-comment"># 检查存储池</span><br>rados -p data <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 检查对象信息</span><br>ceph osd map data test-file<br><span class="hljs-comment"># 删除对象</span><br>rados -p data <span class="hljs-built_in">rm</span> test-file<br><span class="hljs-comment"># 删除存储池(存储池写两遍并且加上确认)</span><br>rados rmpool data data --yes-i-really-really-mean-it<br></code></pre></td></tr></table></figure><h4 id="2-3、块设备测试"><a href="#2-3、块设备测试" class="headerlink" title="2.3、块设备测试"></a>2.3、块设备测试</h4><p><strong>官方文档中提示，使用 rdb 的客户端不建议与 OSD 等节点在同一台机器上</strong></p><blockquote><p>You may use a virtual machine for your ceph-client node, but do not execute the following procedures on the same physical node as your Ceph Storage Cluster nodes (unless you use a VM). See FAQ for details.</p></blockquote><p>这里从第四台虚拟机上执行操作，首先安装所需客户端工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 部署节点上 ceph-cluster 目录下执行</span><br>ceph-deploy install docker4<br>ceph-deploy admin docker4<br></code></pre></td></tr></table></figure><p>然后创建块设备</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 块设备单位为 MB</span><br>rbd create data --size 10240<br><span class="hljs-comment"># 映射块设备</span><br>map foo --name client.admin<br></code></pre></td></tr></table></figure><p><strong>在上面的 map 映射操作时，可能出现如下错误</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">RBD image feature <span class="hljs-built_in">set</span> mismatch. You can <span class="hljs-built_in">disable</span> features unsupported by the kernel with <span class="hljs-string">&quot;rbd feature disable&quot;</span><br></code></pre></td></tr></table></figure><p>查看系统日志可以看到如下输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ dmesg | <span class="hljs-built_in">tail</span><br>[-1127592253.530346] rbd: image data: image uses unsupported features: 0x38<br>[-1127590337.563180] libceph: mon0 192.168.1.11:6789 session established<br>[-1127590337.563741] libceph: client4200 fsid dd9fdfee-438a-47aa-be21-114372bc1f44<br></code></pre></td></tr></table></figure><p><strong>问题原因: 在 Ceph 高版本进行 map image 时，默认 Ceph 在创建 image(上文 data)时会增加许多 features，这些 features 需要内核支持，在 Centos7 的内核上支持有限，所以需要手动关掉一些 features</strong></p><p>首先使用 <code>rbd info data</code> 命令列出创建的 image 的 features</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">rbd image <span class="hljs-string">&#x27;data&#x27;</span>:<br>        size 10240 MB <span class="hljs-keyword">in</span> 2560 objects<br>        order 22 (4096 kB objects)<br>        block_name_prefix: rbd_data.37c6238e1f29<br>        format: 2<br>        features: layering, exclusive-lock, object-map, fast-diff, deep-flatten<br>        flags:<br></code></pre></td></tr></table></figure><p>在 features 中我们可以看到默认开启了很多:</p><ul><li>layering: 支持分层</li><li>striping: 支持条带化 v2</li><li>exclusive-lock: 支持独占锁</li><li>object-map: 支持对象映射(依赖 exclusive-lock)</li><li>fast-diff: 快速计算差异(依赖 object-map)</li><li>deep-flatten: 支持快照扁平化操作</li><li>journaling: 支持记录 IO 操作(依赖独占锁）</li></ul><p><strong>而实际上 Centos 7 的 3.10 内核只支持 layering… 所以我们要手动关闭一些 features，然后重新 map；如果想要一劳永逸，可以在 ceph.conf 中加入 <code>rbd_default_features = 1</code> 来设置默认 features(数值仅是 layering 对应的 bit 码所对应的整数值)。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 关闭不支持特性</span><br>rbd feature <span class="hljs-built_in">disable</span> data exclusive-lock, object-map, fast-diff, deep-flatten<br><span class="hljs-comment"># 重新映射</span><br>rbd map data --name client.admin<br><span class="hljs-comment"># 成功后返回设备位置</span><br>/dev/rbd0<br></code></pre></td></tr></table></figure><p><strong>最后我们便可以格式化正常挂载这个设备了</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ mkfs.xfs /dev/rbd0<br>meta-data=/dev/rbd0              isize=512    agcount=17, agsize=162816 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=0, sparse=0<br>data     =                       bsize=4096   blocks=2621440, imaxpct=25<br>         =                       sunit=1024   swidth=1024 blks<br>naming   =version 2              bsize=4096   ascii-ci=0 ftype=1<br><span class="hljs-built_in">log</span>      =internal <span class="hljs-built_in">log</span>           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=8 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br>➜  ~ <span class="hljs-built_in">mkdir</span> test1<br>➜  ~ mount /dev/rbd0 test1<br><span class="hljs-comment"># 写入测试</span><br>➜  ~ <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=test1/test-file bs=1G count=1<br>记录了1+0 的读入<br>记录了1+0 的写出<br>1073741824字节(1.1 GB)已复制，16.3689 秒，65.6 MB/秒<br>➜  ~ <span class="hljs-built_in">ls</span> test1<br>test-file<br></code></pre></td></tr></table></figure><h4 id="2-4、CephFS-测试"><a href="#2-4、CephFS-测试" class="headerlink" title="2.4、CephFS 测试"></a>2.4、CephFS 测试</h4><p>在测试 CephFS 之前需要先创建两个存储池和一个 fs，创建存储池要指定 PG 数量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ceph osd pool create cephfs_data 32<br>ceph osd pool create cephfs_metadata 32<br>ceph fs new testfs cephfs_metadata cephfs_data<br></code></pre></td></tr></table></figure><p><strong>PG 概念:</strong></p><blockquote><p>当 Ceph 集群接收到存储请求时，Ceph 会将其分散到各个 PG 中，PG 是一组对象的逻辑集合；根据 Ceph 存储池的复制级别，每个 PG的数据会被复制并分发到集群的多个 OSD 上；一般来说增加 PG 数量能降低 OSD 负载，一般每个 OSD 大约分配 50 ~ 100 PG，<strong>关于 PG 数量一般遵循以下公式</strong></p></blockquote><ul><li>集群 PG 总数 &#x3D; (OSD 总数 * 100) &#x2F; 数据最大副本数</li><li>单个存储池 PG 数 &#x3D; (OSD 总数 * 100) &#x2F; 数据最大副本数 &#x2F;存储池数</li></ul><p><strong>注意，PG 最终结果应当为最接近以上计算公式的 2 的 N 次幂(向上取值)；如我的虚拟机环境每个存储池 PG 数 &#x3D; <code>3(OSD) * 100 / 3(副本) / 5(大约 5 个存储池) = 20</code>，向上取 2 的 N 次幂 为 32</strong></p><p>挂载 CephFS 一般有两种方式，一种是使用内核驱动挂载，一种是使用 <code>ceph-fuse</code> 用户空间挂载；内核方式挂载需要提取 Ceph 管理 key，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># key 在 ceph.conf 中</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;AQB37CZZblBkDRAAUrIrRGsHj/NqdKmVlMQ7ww==&quot;</span> &gt; ceph-key<br><span class="hljs-comment"># 创建目录挂载</span><br><span class="hljs-built_in">mkdir</span> test2<br>mount -t ceph 192.168.1.11:6789:/ /root/test2 -o name=admin,secretfile=ceph-key<br><span class="hljs-comment"># 写入测试</span><br>➜  ~ <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=test2/testFs bs=1G count=1<br>记录了1+0 的读入<br>记录了1+0 的写出<br>1073741824字节(1.1 GB)已复制，6.83251 秒，157 MB/秒<br></code></pre></td></tr></table></figure><p>使用 ceph-fuse 用户空间挂载方式比较简单，但需要先安装 <code>ceph-fuse</code> 软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 ceph-fuse</span><br>yum install -y ceph-fuse<br><span class="hljs-comment"># 挂载</span><br><span class="hljs-built_in">mkdir</span> test3<br>ceph-fuse -m 192.168.1.11:6789 test3<br><span class="hljs-comment"># 写入测试</span><br>➜  ~ <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=test3/testFs bs=1G count=1<br>记录了1+0 的读入<br>记录了1+0 的写出<br>1073741824字节(1.1 GB)已复制，8.18417 秒，131 MB/秒<br></code></pre></td></tr></table></figure><h4 id="2-5、对象网关测试"><a href="#2-5、对象网关测试" class="headerlink" title="2.5、对象网关测试"></a>2.5、对象网关测试</h4><p>对象网关在 <strong>1.5、其他组件创建</strong> 部分已经做了创建(RGW)，此时直接访问 <code>http://ceph-node-ip:7480</code> 返回如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ListAllMyBucketsResult</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Owner</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>anonymous<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">DisplayName</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Owner</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Buckets</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ListAllMyBucketsResult</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这就说明网关已经 ok，由于手里没有能读写测试工具，这里暂不做过多说明</p><p><strong>本文主要参考 <a href="http://docs.ceph.com/docs/master/start/">Ceph 官方文档 Quick Start</a> 部分，如有其它未说明到的细节可从官方文档获取</strong></p>]]></content>
    
    
    <summary type="html">Ceph 是一个符合POSIX、开源的分布式存储系统；其具备了极好的可靠性、统一性、鲁棒性；经过近几年的发展，Ceph 开辟了一个全新的数据存储途径。Ceph 具备了企业级存储的分布式、可大规模扩展、没有单点故障等特点，越来越受到人们青睐；以下记录了 Ceph 的相关学习笔记。</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Ceph" scheme="https://mritd.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>Docker 分配宿主机网段 IP</title>
    <link href="https://mritd.com/2017/05/12/docker-uses-the-host-network-segment-ip/"/>
    <id>https://mritd.com/2017/05/12/docker-uses-the-host-network-segment-ip/</id>
    <published>2017-05-12T14:42:00.000Z</published>
    <updated>2017-05-12T14:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作需要临时启动一个 gitlab,无奈 gitlab 需要 ssh 的 22 端口;而使用传统网桥方式映射端口则 clone 等都需要输入端口号,很麻烦;22 端口宿主机又有 sshd 监听;研究了下 docker 网络,记录一下如何分配宿主机网段 IP</p></blockquote><h3 id="创建-macvlan-网络"><a href="#创建-macvlan-网络" class="headerlink" title="创建 macvlan 网络"></a>创建 macvlan 网络</h3><p>关于 Docker 网络模式这里不再细说;由于默认的网桥方式无法满足需要,所以需要创建一个 macvlan 网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create -d macvlan  --subnet=172.16.0.0/19 --gateway=172.16.0.1 -o parent=eth0 gitlab-net<br></code></pre></td></tr></table></figure><ul><li><code>--subnet</code>: 指定网段(宿主机)</li><li><code>--gateway</code>: 指定网关(宿主机)</li><li><code>parent</code>: 注定父网卡(宿主机)</li></ul><p>创建以后可以使用 <code>docker network ls</code> 查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~  docker network <span class="hljs-built_in">ls</span><br>NETWORK ID          NAME                    DRIVER              SCOPE<br>a4a2980c9165        agent_default           bridge              <span class="hljs-built_in">local</span>               <br>a0f29102b413        bridge                  bridge              <span class="hljs-built_in">local</span>               <br>2f46dc70b763        gitlab-net              macvlan             <span class="hljs-built_in">local</span>               <br>51bd6222530f        host                    host                <span class="hljs-built_in">local</span>               <br>7a14a09c3cfc        none                    null                <span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><h3 id="创建使用容器"><a href="#创建使用容器" class="headerlink" title="创建使用容器"></a>创建使用容器</h3><p>接下来创建容器指定网络即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --net=gitlab-net --ip=172.16.0.170  -dt --name <span class="hljs-built_in">test</span> centos:7<br></code></pre></td></tr></table></figure><p><strong><code>--net</code> 指定使用的网络,<code>--ip</code> 用于指定网段内 IP</strong>;启动后只需要在容器内启动程序测试即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动一个 nginx</span><br>yum install nginx<br>nginx<br></code></pre></td></tr></table></figure><p>启动后在局域网内能直接通过 IP:80 访问,而且宿主机 80 不受影响</p><h3 id="docker-compose-测试"><a href="#docker-compose-测试" class="headerlink" title="docker-compose 测试"></a>docker-compose 测试</h3><p>docker-compose 示例如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">&#x27;2&#x27;</span><br>services:<br>  centos:<br>    image: centos:7<br>    restart: always<br>    <span class="hljs-built_in">command</span>: /bin/bash -c <span class="hljs-string">&quot;sleep 999999&quot;</span><br>    networks:<br>      app_net:<br>        ipv4_address: 10.10.1.34<br>networks:<br>  app_net:<br>    driver: macvlan<br>    driver_opts:<br>      parent: enp3s0<br>    ipam:<br>      config:<br>      - subnet: 10.10.1.0/24<br>        gateway: 10.10.1.2<br><span class="hljs-comment">#        ip_range: 10.25.87.32/28</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">工作需要临时启动一个 gitlab,无奈 gitlab 需要 ssh 的 22 端口;而使用传统网桥方式映射端口则 clone 等都需要输入端口号,很麻烦;22 端口宿主机又有 sshd 监听;研究了下 docker 网络,记录一下如何分配宿主机网段 IP</summary>
    
    
    
    <category term="Docker" scheme="https://mritd.com/categories/docker/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Java 配合 mitmproxy HTTPS 抓包调试</title>
    <link href="https://mritd.com/2017/03/25/java-capturing-https-packets-use-mitmproxy/"/>
    <id>https://mritd.com/2017/03/25/java-capturing-https-packets-use-mitmproxy/</id>
    <published>2017-03-25T04:42:21.000Z</published>
    <updated>2017-03-25T04:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天对接接口，对方给的 Demo 和已有项目用的 HTTP 工具不是一个；后来出现人家的好使，我的死活不通的情况；无奈之下开始研究 Java 抓包，所以怕忘了记录一下……</p></blockquote><h3 id="一、mitmproxy-简介"><a href="#一、mitmproxy-简介" class="headerlink" title="一、mitmproxy 简介"></a>一、mitmproxy 简介</h3><p>mitmproxy 是一个命令行下的强大抓包工具，可以在命令行下抓取 HTTP(S) 数据包并加以分析；对于 HTTPS 抓包，首先要在本地添加 mitmproxy 的根证书，然后 mitmproxy 通过以下方式进行抓包：</p><p><img src="https://cdn.oss.link/markdown/x7lir.jpg" alt="mitmproxy1"></p><ul><li>1、客户端发起一个到 mitmproxy 的连接，并且发出HTTP CONNECT 请求</li><li>2、mitmproxy作出响应(200)，模拟已经建立了CONNECT通信管道</li><li>3、客户端确信它正在和远端服务器会话，然后启动SSL连接。在SSL连接中指明了它正在连接的主机名(SNI)</li><li>4、mitmproxy连接服务器，然后使用客户端发出的SNI指示的主机名建立SSL连接</li><li>5、服务器以匹配的SSL证书作出响应，这个SSL证书里包含生成的拦截证书所必须的通用名(CN)和服务器备用名(SAN)</li><li>6、mitmproxy生成拦截证书，然后继续进行与第３步暂停的客户端SSL握手</li><li>7、客户端通过已经建立的SSL连接发送请求，</li><li>8、mitmproxy通过第４步建立的SSL连接传递这个请求给服务器</li></ul><h3 id="二、抓包配置"><a href="#二、抓包配置" class="headerlink" title="二、抓包配置"></a>二、抓包配置</h3><h4 id="2-1、安装-mitmproxy"><a href="#2-1、安装-mitmproxy" class="headerlink" title="2.1、安装 mitmproxy"></a>2.1、安装 mitmproxy</h4><p>mitmproxy 是由  python 编写的，所以直接通过 pip 即可安装，mac 下也可使用 brew 工具安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mac</span><br>brew install mitmproxy<br><span class="hljs-comment"># Linux</span><br>pip install mitmproxy<br><span class="hljs-comment"># CentOS 安装时可能会出现 &quot;致命错误：libxml/xmlversion.h：没有那个文件或目录&quot;</span><br><span class="hljs-comment"># 需要安装如下软件包即可解决</span><br>yum install libxml2 libxml2-devel libxslt libxslt-devel -y<br></code></pre></td></tr></table></figure><h4 id="2-2、HTTPS-证书配置"><a href="#2-2、HTTPS-证书配置" class="headerlink" title="2.2、HTTPS 证书配置"></a>2.2、HTTPS 证书配置</h4><p>首先由于 HTTPS 的安全性，直接抓包是什么也看不到的；所以需要先在本地配置 mitmproxy 的根证书，使其能够解密 HTTPS 流量完成一个中间人的角色；证书下载方式需要先在本地启动 mitmproxy，然后通过设置本地连接代理到 mitmproxy 端口，访问 <code>mitm.it</code> 即可，具体可查看 <a href="https://mitmproxy.org/doc/certinstall.html">官方文档</a></p><p><strong>首先启动 mitmproxy</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mitmproxy -p 4000 --no-mouse<br></code></pre></td></tr></table></figure><p><strong>浏览器通过设置代理访问 mitm.it</strong></p><p><img src="https://cdn.oss.link/markdown/unrnc.jpg" alt="access"></p><p>选择对应平台并将其证书加入到系统信任根证书列表即可；对于 Java 程序来说可能有时候并不会生效，所以必须 <strong>修改 keystore</strong>，修改如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Linux 一般在 JAVA_HOME/jre/lib/security/cacerts 下</span><br><span class="hljs-comment"># Mac 在 /Library/Java/JavaVirtualMachines/JAVA_HOME/Contents/Home/jre/lib/security/cacerts</span><br>sudo keytool -importcert -<span class="hljs-built_in">alias</span> mitmproxy -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -trustcacerts -file ~/.mitmproxy/mitmproxy-ca-cert.pem<br></code></pre></td></tr></table></figure><h4 id="2-4、Java-抓包调试"><a href="#2-4、Java-抓包调试" class="headerlink" title="2.4、Java 抓包调试"></a>2.4、Java 抓包调试</h4><p>JVM 本身在启动时就可以设置代理参数，也可以通过代码层设置；以下为代码层设置代理方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">public void <span class="hljs-function"><span class="hljs-title">beforeTest</span></span>()&#123;<br>    logger.info(<span class="hljs-string">&quot;设置抓包代理......&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;https.proxyHost&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    System.setProperty(<span class="hljs-string">&quot;https.proxyPort&quot;</span>, <span class="hljs-string">&quot;4000&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>然后保证在发送 HTTPS 请求之前此代码执行即可，以下为抓包示例</strong></p><p><img src="https://cdn.oss.link/markdown/kuzhd.jpg" alt="zhuabao"></p><p>通过方向键+回车即可选择某个请求查看报文信息</p><p><img src="https://cdn.oss.link/markdown/vfifu.jpg" alt="detail"></p><h3 id="三、Java-其他代理设置"><a href="#三、Java-其他代理设置" class="headerlink" title="三、Java 其他代理设置"></a>三、Java 其他代理设置</h3><p>Java 代理一般可以通过 2 种方式设置，一种是通过代码层，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">// HTTP 代理，只能代理 HTTP 请求<br>System.setProperty(<span class="hljs-string">&quot;http.proxyHost&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>System.setProperty(<span class="hljs-string">&quot;http.proxyPort&quot;</span>, <span class="hljs-string">&quot;9876&quot;</span>);<br> <br>// HTTPS 代理，只能代理 HTTPS 请求<br>System.setProperty(<span class="hljs-string">&quot;https.proxyHost&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>System.setProperty(<span class="hljs-string">&quot;https.proxyPort&quot;</span>, <span class="hljs-string">&quot;9876&quot;</span>);<br><br>// 同时支持代理 HTTP/HTTPS 请求<br>System.setProperty(<span class="hljs-string">&quot;proxyHost&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>System.setProperty(<span class="hljs-string">&quot;proxyPort&quot;</span>, <span class="hljs-string">&quot;9876&quot;</span>);<br> <br>// SOCKS 代理，支持 HTTP 和 HTTPS 请求<br>// 注意：如果设置了 SOCKS 代理就不要设 HTTP/HTTPS 代理<br>System.setProperty(<span class="hljs-string">&quot;socksProxyHost&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>System.setProperty(<span class="hljs-string">&quot;socksProxyPort&quot;</span>, <span class="hljs-string">&quot;1080&quot;</span>);<br></code></pre></td></tr></table></figure><p>另一种还可以通过 JVM 启动参数设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-DproxyHost=127.0.0.1 -DproxyPort=9876<br></code></pre></td></tr></table></figure><p>本文参考：</p><ul><li><a href="http://www.aneasystone.com/archives/2015/12/java-and-http-using-proxy.html">Java 和 HTTP 的那些事</a></li><li><a href="http://blog.csdn.net/qq_30513483/article/details/53258637">一步一步教你https抓包</a></li></ul>]]></content>
    
    
    <summary type="html">今天对接接口，对方给的 Demo 和已有项目用的 HTTP 工具不是一个；后来出现人家的好使，我的死活不通的情况；无奈之下开始研究 Java 抓包，所以怕忘了记录一下......</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    <category term="Java" scheme="https://mritd.com/categories/linux/java/"/>
    
    
    <category term="Java" scheme="https://mritd.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>vim E492 Not an editor command Plugin xxxx</title>
    <link href="https://mritd.com/2017/03/21/vim-e492-not-an-editor-command-plugin-xxxx/"/>
    <id>https://mritd.com/2017/03/21/vim-e492-not-an-editor-command-plugin-xxxx/</id>
    <published>2017-03-21T12:26:37.000Z</published>
    <updated>2017-03-21T12:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近自用的 vim 装了不少插件，但是发现 <code>kubectl edit</code> 或者 <code>git merge</code> 时，调用 vim 总是会弹出各种错误，记录一下解决方法</p></blockquote><p><strong>出现这个错误一开始以为是 vim 没走 <code>.vimrc</code> 配置；后来翻了一堆资料，发现 <code>kubectl edit</code> 或者 <code>git merge</code> 后并非直接调用 vim，而是调用的 <code>/usr/bin/view</code>，那么看一下这个文件</strong></p><p><img src="https://cdn.oss.link/markdown/9c646.png" alt="view"></p><p><strong>这东西就是链接到了 vi，只要把它链接到 vim 就完了</strong></p><p><img src="https://cdn.oss.link/markdown/f0c4e.png" alt="relink view"></p>]]></content>
    
    
    <summary type="html">vim E492 Not an editor command Plugin xxxx</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Btrfs 笔记</title>
    <link href="https://mritd.com/2017/03/20/btrfs-note/"/>
    <id>https://mritd.com/2017/03/20/btrfs-note/</id>
    <published>2017-03-20T13:27:19.000Z</published>
    <updated>2017-03-20T13:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>btrfs 是 Oracle 07 年基于 GPL 协议开源的 Linux 文件系统，其目的是替换传统的 Ext3、Ext4 系列文件系统；Ext 系列文件系统存在着诸多问题，比如反删除能力有限等；而 btrfs 在解决问题同时提供了更加强大的高级特性</p></blockquote><h3 id="一、Btrfs-特性"><a href="#一、Btrfs-特性" class="headerlink" title="一、Btrfs 特性"></a>一、Btrfs 特性</h3><p>btrfs 在文件系统级别支持写时复制(cow)机制，并且支持快照(增量快照)、支持对单个文件快照；同时支持单个超大文件、文件检查、内建 RAID；支持 B 树子卷(组合多个物理卷，多卷支持)等，具体如下</p><p><strong>btrfs 核心特性：</strong></p><ul><li>多物理卷支持：btrfs 可有多个物理卷组成(类似 LVM)；支持 RAID 以及联机 添加、删除、修改</li><li>写时复制更新机制(cow)：复制、更新、替换指针，而非传统意义上的覆盖</li><li>支持数据及元数据校验码：checksum 机制</li><li>支持创建子卷：sub_volume 机制，同时可多层创建</li><li>支持快照：基于 cow 实现快照，并且相对于 LVM 可以实快照的快照(增量快照)</li><li>支持透明压缩：后台自动压缩文件(消耗一定 CPU)，对前端程序透明</li></ul><h3 id="二、btrfs-常用命令"><a href="#二、btrfs-常用命令" class="headerlink" title="二、btrfs 常用命令"></a>二、btrfs 常用命令</h3><h4 id="2-1、创建文件系统"><a href="#2-1、创建文件系统" class="headerlink" title="2.1、创建文件系统"></a>2.1、创建文件系统</h4><p>同传统的 ext 系列文件系统一样，btrfs 文件系统格式化同样采用 <code>mkfs</code> 系列命令 <code>mkfs.btrfs</code>，其常用选项如下：</p><ul><li><code>-L</code> 指定卷标</li><li><code>-m</code> 指明元数据存放机制(RAID)</li><li><code>-d</code> 指明数据存放机制(RAID)</li><li><code>-O</code> 格式化时指定文件系统开启那些特性(不一定所有内核支持)，如果需要查看支持那些特性可使用 <code>mkfs.btrfs -O list-all</code></li></ul><h4 id="2-2、挂载-btrfs"><a href="#2-2、挂载-btrfs" class="headerlink" title="2.2、挂载 btrfs"></a>2.2、挂载 btrfs</h4><p>同 ext 系列一样，仍然使用 <code>mount</code> 命令，基本挂载如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount -t brtfs DEVICE MOUNT_POINT<br></code></pre></td></tr></table></figure><p>在挂载时也可以直接开启文件系统一些特性，如<strong>透明压缩</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount -t btrfs -o compress=&#123;lzo|zlib&#125; DEVICE MOUNT_POINT<br></code></pre></td></tr></table></figure><p>同时 btrfs 支持子卷，也可以单独挂载子卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount -t btrfs -o subvol=SUBVOL_NAME DEVICE<br></code></pre></td></tr></table></figure><h4 id="2-3、btrfs-相关命令"><a href="#2-3、btrfs-相关命令" class="headerlink" title="2.3、btrfs 相关命令"></a>2.3、btrfs 相关命令</h4><p>管理 btrfs 使用 <code>btrfs</code> 命令，该命令包含诸多子命令已完成不同的功能管理，常用命令如下</p><ul><li><strong>btrfs 文件系统属性查看：</strong> <code>btrfs filesystem show</code></li><li><strong>调整文件系统大小：</strong> <code>btrfs filesystem resize +10g MOUNT_POINT</code></li><li><strong>添加硬件设备：</strong> <code>btrfs filesystem add DEVICE MOUNT_POINT</code></li><li><strong>均衡文件负载：</strong> <code>btrfs blance status|start|pause|resume|cancel MOUNT_POINT</code></li><li><strong>移除物理卷(联机、自动移动)：</strong> <code>btrfs device delete DEVICE MOUNT_POINT</code></li><li><strong>动态调整数据存放机制：</strong> <code>btrfs balance start -dconvert=RAID MOUNT_POINT</code></li><li><strong>动态调整元数据存放机制：</strong> <code>btrfs balance start -mconvert=RAID MOUNT_POINT</code></li><li><strong>动态调整文件系统数据数据存放机制：</strong> <code>btrfs balance start -sconvert=RAID MOUNT_POINT</code></li><li><strong>创建子卷：</strong> <code>btrfs subvolume create MOUNT_POINT/DIR</code></li><li><strong>列出所有子卷：</strong> <code>btrfs subvolume list MOUNT_POINT</code></li><li><strong>显示子卷详细信息：</strong> <code>btrfs subvolume show MOUNT_POINT</code></li><li><strong>删除子卷：</strong> <code>btrfs subvolume delete MOUNT_POIN/DIR</code></li><li><strong>创建子卷快照(子卷快照必须存放与当前子卷的同一父卷中)：</strong> <code>btrfs subvolume snapshot SUBVOL PARVOL</code></li><li><strong>删除快照同删除子卷一样：</strong> <code>btrfs subvolume delete MOUNT_POIN/DIR</code></li></ul>]]></content>
    
    
    <summary type="html">Btrfs 笔记</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 配置 VNC Server</title>
    <link href="https://mritd.com/2017/03/18/set-up-vnc-server-on-centos-7/"/>
    <id>https://mritd.com/2017/03/18/set-up-vnc-server-on-centos-7/</id>
    <published>2017-03-18T13:53:07.000Z</published>
    <updated>2017-03-18T13:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近决定把小主机扔到客厅跟路由器放在一起(远程开机 666），因为本来就跑的是 Linux，平时图形化需求也不多；但是为了保险起见准备搞一个 VNC，以便必要时图形化上去，比如强制删除一些 Virtual Box 虚拟机等，记录一下安装过程</p></blockquote><h4 id="安装-VNC-Server"><a href="#安装-VNC-Server" class="headerlink" title="安装 VNC Server"></a>安装 VNC Server</h4><p>VNC Server 软件有很多，这里使用 <code>tigervnc-server</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install epel-release -y<br>yum makecache<br>yum install tigervnc-server -y<br></code></pre></td></tr></table></figure><h4 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h4><p>这地方踩了很多坑，网上不少帖子都是写的先测试 VNC Server，执行 <code>vncserver</code> 命令，然后云云；查设置开机自启动也是五花八门，大部分人的路子就是自己写一个 init 脚本，让系统开机时候执行它…… 从职业踩坑经验来看，这东西绝对有更有逼格的 Systemd 的打开方式；果不其然翻了一下 rpm 包 发现了一个 Systemd 模板 Service</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mritd ~]<span class="hljs-comment"># rpm -ql  tigervnc-server</span><br>/etc/sysconfig/vncservers<br>/usr/bin/vncserver<br>/usr/bin/x0vncserver<br>/usr/lib/systemd/system/vncserver@.service<br>/usr/share/man/man1/vncserver.1.gz<br>/usr/share/man/man1/x0vncserver.1.gz<br></code></pre></td></tr></table></figure><p>由于好奇心作祟，先 <code>systemctl enable vncserver@:1.service</code> 了一下，后来发现起不来，所以 vim 看了一下原模板 Service，里面想写描述了如何设置开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Quick HowTo:</span><br><span class="hljs-comment"># 1. Copy this file to /etc/systemd/system/vncserver@.service</span><br><span class="hljs-comment"># 2. Edit /etc/systemd/system/vncserver@.service, replacing &lt;USER&gt;</span><br><span class="hljs-comment">#    with the actual user name. Leave the remaining lines of the file unmodified</span><br><span class="hljs-comment">#    (ExecStart=/usr/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class="hljs-comment">#     PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid)</span><br><span class="hljs-comment"># 3. Run `systemctl daemon-reload`</span><br><span class="hljs-comment"># 4. Run `systemctl enable vncserver@:&lt;display&gt;.service`</span><br></code></pre></td></tr></table></figure><p>也就是说把这个模板文件 cp 到 <code>/etc/systemd/system/vncserver@.service</code> 然后替换用户名，执行两条命令，最后执行 <code>vncserver</code> 用于初始化密码和配置文件就行了</p><p>重装了一天系统，有点烦躁，听首歌安静一下…</p><div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://www.youtube.com/embed/AsC0CN2eGkY?rel=0?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>]]></content>
    
    
    <summary type="html">最近决定把小主机扔到客厅跟路由器放在一起(远程开机 666），因为本来就跑的是 Linux，平时图形化需求也不多；但是为了保险起见准备搞一个 VNC，以便必要时图形化上去，比如强制删除一些 Virtual Box 虚拟机等，记录一下安装过程</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>kargo 集群扩展及细粒度配置</title>
    <link href="https://mritd.com/2017/03/10/kargo-cluster-expansion-and-fine-grained-configuration/"/>
    <id>https://mritd.com/2017/03/10/kargo-cluster-expansion-and-fine-grained-configuration/</id>
    <published>2017-03-10T15:57:12.000Z</published>
    <updated>2017-03-10T15:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇写了一下一下使用 kargo 快速部署 Kubernetes 高可用集群，但是一些细节部分不算完善，这里准备补一下，详细说明一下一些问题；比如后期如何扩展、一些配置如何自定义等</p></blockquote><h3 id="一、集群扩展"><a href="#一、集群扩展" class="headerlink" title="一、集群扩展"></a>一、集群扩展</h3><p>如果已经有了一个 kargo 搭建的集群，那么扩展其极其容易；只需要修改集群 <code>inventory</code> 配置，加入新节点重新运行命令价格参数即可，如下新增一个 node6 节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim inventory/inventory.cfg<br><br><span class="hljs-comment"># 在 Kubernetes node 组中加入新的 node6 节点</span><br>[all]<br>node1    ansible_host=192.168.1.11 ip=192.168.1.11<br>node2    ansible_host=192.168.1.12 ip=192.168.1.12<br>node3    ansible_host=192.168.1.13 ip=192.168.1.13<br>node4    ansible_host=192.168.1.14 ip=192.168.1.14<br>node5    ansible_host=192.168.1.15 ip=192.168.1.15<br>node6    ansible_host=192.168.1.16 ip=192.168.1.16<br><br>[kube-master]<br>node1<br>node2<br>node3<br>node5<br><br>[kube-node]<br>node1<br>node2<br>node3<br>node4<br>node5<br>node6<br><br>[etcd]<br>node1<br>node2<br>node3<br><br>[k8s-cluster:children]<br>kube-node<br>kube-master<br><br>[calico-rr]<br></code></pre></td></tr></table></figure><p><strong>然后重新运行集群命令，注意增加 <code>--limit</code> 参数</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ansible-playbook -i inventory/inventory.cfg cluster.yml -b -v --private-key=~/.ssh/id_rsa --<span class="hljs-built_in">limit</span> node6<br></code></pre></td></tr></table></figure><p><strong>稍等片刻 node6 节点便加入现有集群，如果有多个节点加入，只需要以逗号分隔即可，如 <code>--limit node5,node6</code>；在此过程中只会操作新增的 node 节点，不会影响现有集群，可以实现动态集群扩容(master 也可以扩展)</strong></p><h3 id="二、kargo-细粒度控制"><a href="#二、kargo-细粒度控制" class="headerlink" title="二、kargo 细粒度控制"></a>二、kargo 细粒度控制</h3><p>对于 kargo 高度自动化的工具，可能有些东西我们已经预先处理好了，<strong>比如事先已经安装了 docker，而且 docker 配置了一些参数(日志驱动、存储驱动等)；这时候我们可能并不希望 kargo 再去处理，因为 kargo 会进行覆盖，可能导致一些问题</strong></p><p><strong>kargo 是基于 ansible 的，实际上也就是 ansible，只不过它帮我们写好了配置文件而已；按照 ansible 的规则，Play Book 首先执行 roles 目录下的 roles，在这些 roles 中定义了如何配置集群、如何初始化网络、怎么配置 docker 等等，所以只要我们去更改这些 roles 规则就可以实现一些功能的定制，roles 目录位置如下</strong></p><p><img src="https://cdn.oss.link/markdown/jmy7o.jpg" alt="roles"></p><p>如果需要更改某些默认配置，那么只需要更改对应目录下的 role 即可，<strong>每个 role 子目录都是一个组件的配置过程(动作)，动作实际上就是不同的 task，所有的 task 定义在 <code>tasks/main.yml</code> 中，如果我们注释(删掉)了相关 task，那么也就关闭了 kargo 对应的处理；如下禁用了 kargo 安装 docker，但是允许 kargo 覆盖 docker service 文件</strong></p><p><img src="https://cdn.oss.link/markdown/vv2px.jpg" alt="docker task"></p><p><strong>禁用掉 docker 仓库以及 docker 的安装动作</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim roles/docker/tasks/main.yml<br><br>---<br>- name: gather os specific variables<br>  include_vars: <span class="hljs-string">&quot;&#123; &#123; item &#125; &#125;&quot;</span><br>  with_first_found:<br>    - files:<br>      - <span class="hljs-string">&quot;&#123; &#123; ansible_distribution|lower &#125; &#125;-&#123; &#123; ansible_distribution_version|lower|replace(&#x27;/&#x27;, &#x27;_&#x27;) &#125; &#125;.yml&quot;</span><br>      - <span class="hljs-string">&quot;&#123; &#123; ansible_distribution|lower &#125; &#125;-&#123; &#123; ansible_distribution_release &#125; &#125;.yml&quot;</span><br>      - <span class="hljs-string">&quot;&#123; &#123; ansible_distribution|lower &#125; &#125;-&#123; &#123; ansible_distribution_major_version|lower|replace(&#x27;/&#x27;, &#x27;_&#x27;) &#125; &#125;.yml&quot;</span><br>      - <span class="hljs-string">&quot;&#123; &#123; ansible_distribution|lower &#125; &#125;.yml&quot;</span><br>      - <span class="hljs-string">&quot;&#123; &#123; ansible_os_family|lower &#125; &#125;.yml&quot;</span><br>      - defaults.yml<br>      paths:<br>      - ../vars<br>      skip: <span class="hljs-literal">true</span><br>  tags: facts<br><br>- include: set_facts_dns.yml<br>  when: dns_mode != <span class="hljs-string">&#x27;none&#x27;</span> and resolvconf_mode == <span class="hljs-string">&#x27;docker_dns&#x27;</span><br>  tags: facts<br><br>- name: check <span class="hljs-keyword">for</span> minimum kernel version<br>  fail:<br>    msg: &gt;<br>          docker requires a minimum kernel version of<br>          &#123; &#123; docker_kernel_min_version &#125; &#125; on<br>          &#123; &#123; ansible_distribution &#125; &#125;-&#123; &#123; ansible_distribution_version &#125; &#125;<br>  when: (not ansible_os_family <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;CoreOS&quot;</span>, <span class="hljs-string">&quot;Container Linux by CoreOS&quot;</span>]) and (ansible_kernel|version_compare(docker_kernel_min_version, <span class="hljs-string">&quot;&lt;&quot;</span>))<br>  tags: facts<br><br><span class="hljs-comment"># 禁用 docker 仓库处理，因为默认 kargo 会写入国外 docker 源，我已经自己设置了清华大学的镜像源</span><br><br><span class="hljs-comment">#- name: ensure docker repository public key is installed</span><br><span class="hljs-comment">#  action: &quot;&#123; &#123; docker_repo_key_info.pkg_key &#125; &#125;&quot;</span><br><span class="hljs-comment">#  args:</span><br><span class="hljs-comment">#    id: &quot;&#123; &#123;item&#125; &#125;&quot;</span><br><span class="hljs-comment">#    keyserver: &quot;&#123; &#123;docker_repo_key_info.keyserver&#125; &#125;&quot;</span><br><span class="hljs-comment">#    state: present</span><br><span class="hljs-comment">#  register: keyserver_task_result</span><br><span class="hljs-comment">#  until: keyserver_task_result|success</span><br><span class="hljs-comment">#  retries: 4</span><br><span class="hljs-comment">#  delay: &quot;&#123; &#123; retry_stagger | random + 3 &#125; &#125;&quot;</span><br><span class="hljs-comment">#  with_items: &quot;&#123; &#123; docker_repo_key_info.repo_keys &#125; &#125;&quot;</span><br><span class="hljs-comment">#  when: not ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#- name: ensure docker repository is enabled</span><br><span class="hljs-comment">#  action: &quot;&#123; &#123; docker_repo_info.pkg_repo &#125; &#125;&quot;</span><br><span class="hljs-comment">#  args:</span><br><span class="hljs-comment">#    repo: &quot;&#123; &#123;item&#125; &#125;&quot;</span><br><span class="hljs-comment">#    state: present</span><br><span class="hljs-comment">#  with_items: &quot;&#123; &#123; docker_repo_info.repos &#125; &#125;&quot;</span><br><span class="hljs-comment">#  when: (not ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;]) and (docker_repo_info.repos|length &gt; 0)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#- name: Configure docker repository on RedHat/CentOS</span><br><span class="hljs-comment">#  template:</span><br><span class="hljs-comment">#    src: &quot;rh_docker.repo.j2&quot;</span><br><span class="hljs-comment">#    dest: &quot;/etc/yum.repos.d/docker.repo&quot;</span><br><span class="hljs-comment">#  when: ansible_distribution in [&quot;CentOS&quot;,&quot;RedHat&quot;]</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># 这步 kargo 会重新安装 docker，已经装好了，所以不需要再覆盖安装</span><br><br><span class="hljs-comment">#- name: ensure docker packages are installed</span><br><span class="hljs-comment">#  action: &quot;&#123; &#123; docker_package_info.pkg_mgr &#125; &#125;&quot;</span><br><span class="hljs-comment">#  args:</span><br><span class="hljs-comment">#    pkg: &quot;&#123; &#123;item.name&#125; &#125;&quot;</span><br><span class="hljs-comment">#    force: &quot;&#123; &#123;item.force|default(omit)&#125; &#125;&quot;</span><br><span class="hljs-comment">#    state: present</span><br><span class="hljs-comment">#  register: docker_task_result</span><br><span class="hljs-comment">#  until: docker_task_result|success</span><br><span class="hljs-comment">#  retries: 4</span><br><span class="hljs-comment">#  delay: &quot;&#123; &#123; retry_stagger | random + 3 &#125; &#125;&quot;</span><br><span class="hljs-comment">#  with_items: &quot;&#123; &#123; docker_package_info.pkgs &#125; &#125;&quot;</span><br><span class="hljs-comment">#  notify: restart docker</span><br><span class="hljs-comment">#  when: (not ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;]) and (docker_package_info.pkgs|length &gt; 0)</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># 对于 docker 版本的检查个人感觉还是有点必要的</span><br><br>- name: check minimum docker version <span class="hljs-keyword">for</span> docker_dns mode. You need at least docker version &gt;= 1.12 <span class="hljs-keyword">for</span> resolvconf_mode=docker_dns<br>  <span class="hljs-built_in">command</span>: <span class="hljs-string">&quot;docker version -f &#x27;&#123; &#123; &#x27;&#123; &#123;&#x27; &#125; &#125;.Client.Version&#123; &#123; &#x27;&#125; &#125;&#x27; &#125; &#125;&#x27;&quot;</span><br>  register: docker_version<br>  failed_when: docker_version.stdout|version_compare(<span class="hljs-string">&#x27;1.12&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>)<br>  changed_when: <span class="hljs-literal">false</span><br>  when: dns_mode != <span class="hljs-string">&#x27;none&#x27;</span> and resolvconf_mode == <span class="hljs-string">&#x27;docker_dns&#x27;</span><br><br><span class="hljs-comment"># kargo 对 docker service 的配置会在此写入，我感觉还不错，所以留着了；但是注意的是它会把原来的覆盖掉</span><br><br>- name: Set docker systemd config<br>  include: systemd.yml<br><br>- name: ensure docker service is started and enabled<br>  service:<br>    name: <span class="hljs-string">&quot;&#123; &#123; item &#125; &#125;&quot;</span><br>    enabled: <span class="hljs-built_in">yes</span><br>    state: started<br>  with_items:<br>    - docker<br></code></pre></td></tr></table></figure><p><strong>kargo 在进行各种任务(task)时可能会释放一些配置文件，比如 docker service 配置文件、kubernetes 配置文件等；这些文件一般位于 <code>roles/组件/templates</code> 目录，比如 docker 的 service 配置位于如下位置；我们可以更改，甚至直接换一个，把里面写死变成我们自己的</strong></p><p><img src="https://cdn.oss.link/markdown/f1f9g.jpg" alt="docker service template"></p><h3 id="三、其他相关"><a href="#三、其他相关" class="headerlink" title="三、其他相关"></a>三、其他相关</h3><p><strong>以上只是介绍了自定义配置的大体思路，更深度的处理需要去玩转  ansible，如果玩明白了 ansible 那么基本上这个 kargo 就可以随便搞了；要写的差不多也就这么多了，感觉这东西比 kubeadm 要好的多，所有操作都是可视化的，没有莫名其妙的问题；其他的可以参考 <a href="http://ansible-tran.readthedocs.io/en/latest/">ansible 中文文档</a>、<a href="https://github.com/kubernetes-incubator/kargo/blob/master/README.md">kargo 官方文档</a></strong></p>]]></content>
    
    
    <summary type="html">上一篇写了一下一下使用 kargo 快速部署 Kubernetes 高可用集群，但是一些细节部分不算完善，这里准备补一下，详细说明一下一些问题；比如后期如何扩展、一些配置如何自定义等</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Nginx Ingress 教程</title>
    <link href="https://mritd.com/2017/03/04/how-to-use-nginx-ingress/"/>
    <id>https://mritd.com/2017/03/04/how-to-use-nginx-ingress/</id>
    <published>2017-03-04T15:16:36.000Z</published>
    <updated>2017-03-04T15:16:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近发现好多人问 Ingress，同时一直也没去用 Nginx 的 Ingress，索性鼓捣了一把，发现跟原来确实有了点变化，在这里写篇文章记录一下</p></blockquote><h3 id="一、Ingress-介绍"><a href="#一、Ingress-介绍" class="headerlink" title="一、Ingress 介绍"></a>一、Ingress 介绍</h3><p>Kubernetes 暴露服务的方式目前只有三种：LoadBlancer Service、NodePort Service、Ingress；前两种估计都应该很熟悉，具体的可以参考下 <a href="https://mritd.me/2016/12/06/try-traefik-on-kubernetes/">这篇文章</a>；下面详细的唠一下这个 Ingress</p><h4 id="1-1、Ingress-是个什么玩意"><a href="#1-1、Ingress-是个什么玩意" class="headerlink" title="1.1、Ingress 是个什么玩意"></a>1.1、Ingress 是个什么玩意</h4><p>可能从大致印象上 Ingress 就是能利用 Nginx、Haproxy 啥的负载均衡器暴露集群内服务的工具；那么问题来了，集群内服务想要暴露出去面临着几个问题：</p><h4 id="1-2、Pod-漂移问题"><a href="#1-2、Pod-漂移问题" class="headerlink" title="1.2、Pod 漂移问题"></a>1.2、Pod 漂移问题</h4><p>众所周知 Kubernetes 具有强大的副本控制能力，能保证在任意副本(Pod)挂掉时自动从其他机器启动一个新的，还可以动态扩容等，总之一句话，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；<strong>那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了</strong>；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部 Pod IP 上，如下图所示</p><p><img src="https://cdn.oss.link/markdown/5a1i4.jpg" alt="NodePort"></p><h4 id="1-3、端口管理问题"><a href="#1-3、端口管理问题" class="headerlink" title="1.3、端口管理问题"></a>1.3、端口管理问题</h4><p>采用 NodePort 方式暴露服务面临一个坑爹的问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护；这时候引出的思考问题是 <strong>“能不能使用 Nginx 啥的只监听一个端口，比如 80，然后按照域名向后转发？”</strong> 这思路很好，简单的实现就是使用 DaemonSet 在每个 node 上监听 80，然后写好规则，<strong>因为 Nginx 外面绑定了宿主机 80 端口(就像 NodePort)，本身又在集群内，那么向后直接转发到相应 Service IP 就行了</strong>，如下图所示</p><p><img src="https://cdn.oss.link/markdown/rrcuu.jpg" alt="use nginx proxy"></p><h4 id="1-4、域名分配及动态更新问题"><a href="#1-4、域名分配及动态更新问题" class="headerlink" title="1.4、域名分配及动态更新问题"></a>1.4、域名分配及动态更新问题</h4><p>从上面的思路，采用 Nginx 似乎已经解决了问题，但是其实这里面有一个很大缺陷：<strong>每次有新服务加入怎么改 Nginx 配置？总不能手动改或者来个 Rolling Update 前端 Nginx Pod 吧？</strong>这时候 “伟大而又正直勇敢的” Ingress 登场，<strong>如果不算上面的 Nginx，Ingress 只有两大组件：Ingress Controller 和 Ingress</strong></p><p>Ingress 这个玩意，简单的理解就是 <strong>你原来要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yml 创建，每次不要去改 Nginx 了，直接改 yml 然后创建&#x2F;更新就行了</strong>；那么问题来了：”Nginx 咋整？”</p><p>Ingress Controller 这东西就是解决 “Nginx 咋整” 的；<strong>Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下</strong>，工作流程如下图</p><p><img src="https://cdn.oss.link/markdown/e5fcy.jpg" alt="Ingress"></p><p><strong>当然在实际应用中，最新版本 Kubernetes 已经将 Nginx 与 Ingress Controller 合并为一个组件，所以 Nginx 无需单独部署，只需要部署 Ingress Controller 即可</strong></p><h3 id="二、怼一个-Nginx-Ingress"><a href="#二、怼一个-Nginx-Ingress" class="headerlink" title="二、怼一个 Nginx Ingress"></a>二、怼一个 Nginx Ingress</h3><p>上面啰嗦了那么多，只是为了讲明白 Ingress 的各种理论概念，下面实际部署很简单</p><h4 id="2-1、部署默认后端"><a href="#2-1、部署默认后端" class="headerlink" title="2.1、部署默认后端"></a>2.1、部署默认后端</h4><p>我们知道 <strong>前端的 Nginx 最终要负载到后端 service 上，那么如果访问不存在的域名咋整？</strong>官方给出的建议是部署一个 <strong>默认后端</strong>，对于未知请求全部负载到这个默认后端上；这个后端啥也不干，就是返回 404，部署如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ kubectl create -f default-backend.yaml<br>deployment <span class="hljs-string">&quot;default-http-backend&quot;</span> created<br>service <span class="hljs-string">&quot;default-http-backend&quot;</span> created<br></code></pre></td></tr></table></figure><p>这个 <code>default-backend.yaml</code> 文件可以在 <a href="https://github.com/kubernetes/ingress/blob/master/examples/deployment/nginx/default-backend.yaml">官方 Ingress 仓库</a> 找到，由于篇幅限制这里不贴了，仓库位置如下</p><p><img src="https://cdn.oss.link/markdown/1ct6w.jpg" alt="default-backend"></p><h4 id="2-2、部署-Ingress-Controller"><a href="#2-2、部署-Ingress-Controller" class="headerlink" title="2.2、部署 Ingress Controller"></a>2.2、部署 Ingress Controller</h4><p>部署完了后端就得把最重要的组件 Nginx+Ingres Controller(官方统一称为 Ingress Controller) 部署上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ kubectl create -f nginx-ingress-controller.yaml<br>daemonset <span class="hljs-string">&quot;nginx-ingress-lb&quot;</span> created<br></code></pre></td></tr></table></figure><p>**注意：官方的 Ingress Controller 有个坑，至少我看了 DaemonSet 方式部署的有这个问题：没有绑定到宿主机 80 端口，也就是说前端 Nginx 没有监听宿主机 80 端口(这还玩个卵啊)；所以需要把配置搞下来自己加一下 <code>hostNetwork</code>**，截图如下</p><p><img src="https://cdn.oss.link/markdown/n1fsc.jpg" alt="add hostNetwork"></p><p>同样配置文件自己找一下，地址 <a href="https://github.com/kubernetes/ingress/blob/master/examples/daemonset/nginx/nginx-ingress-daemonset.yaml">点这里</a>，仓库截图如下</p><p><img src="https://cdn.oss.link/markdown/jirhn.jpg" alt="Ingress Controller"></p><p><strong>当然它支持以 deamonset 的方式部署，这里用的就是(个人喜欢而已)，所以你发现我上面截图是 deployment，但是链接给的却是 daemonset，因为我截图截错了…..</strong></p><h4 id="2-3、部署-Ingress"><a href="#2-3、部署-Ingress" class="headerlink" title="2.3、部署 Ingress"></a>2.3、部署 Ingress</h4><p><strong>这个可就厉害了，这个部署完就能装逼了</strong></p><p><img src="https://cdn.oss.link/markdown/v450z.jpg" alt="daitouzhaungbi"><br><img src="https://cdn.oss.link/markdown/b1kz2.jpg" alt="zhanxianjishu"></p><p><strong>咳咳，回到正题，从上面可以知道 Ingress 就是个规则，指定哪个域名转发到哪个 Service，所以说首先我们得有个 Service，当然 Service 去哪找这里就不管了；这里默认为已经有了两个可用的 Service，以下以 Dashboard 和 kibana 为例</strong></p><p><strong>先写一个 Ingress 文件，语法格式啥的请参考 <a href="https://kubernetes.io/docs/user-guide/ingress">官方文档</a>，由于我的 Dashboard 和 Kibana 都在 kube-system 这个命名空间，所以要指定 namespace</strong>，写之前 Service 分布如下</p><p><img src="https://cdn.oss.link/markdown/vtg8f.jpg" alt="All Service"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim dashboard-kibana-ingress.yml<br><br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: dashboard-kibana-ingress<br>  namespace: kube-system<br>spec:<br>  rules:<br>  - host: dashboard.mritd.me<br>    http:<br>      paths:<br>      - backend:<br>          serviceName: kubernetes-dashboard<br>          servicePort: 80<br>  - host: kibana.mritd.me<br>    http:<br>      paths:<br>      - backend:<br>          serviceName: kibana-logging<br>          servicePort: 5601<br></code></pre></td></tr></table></figure><p><strong>装逼成功截图如下</strong></p><p><img src="https://cdn.oss.link/markdown/pyhdy.jpg" alt="Dashboard"></p><p><img src="https://cdn.oss.link/markdown/p3qli.jpg" alt="Kibana"></p><h3 id="三、部署-Ingress-TLS"><a href="#三、部署-Ingress-TLS" class="headerlink" title="三、部署 Ingress TLS"></a>三、部署 Ingress TLS</h3><p>上面已经搞定了 Ingress，下面就顺便把 TLS 怼上；官方给出的样例很简单，大致步骤就两步：<strong>创建一个含有证书的 secret、在 Ingress 开启证书</strong>；但是我不得不喷一下，文档就提那么一嘴，大坑一堆，比如多域名配置，还有下面这文档特么的是逗我玩呢？</p><p><img src="https://cdn.oss.link/markdown/t3n1j.jpg" alt="douniwan"></p><h4 id="3-1、创建证书"><a href="#3-1、创建证书" class="headerlink" title="3.1、创建证书"></a>3.1、创建证书</h4><p>首先第一步当然要有个证书，由于我这个 Ingress 有两个服务域名，所以证书要支持两个域名；生成证书命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成 CA 自签证书</span><br><span class="hljs-built_in">mkdir</span> cert &amp;&amp; <span class="hljs-built_in">cd</span> cert<br>openssl genrsa -out ca-key.pem 2048<br>openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj <span class="hljs-string">&quot;/CN=kube-ca&quot;</span><br><br><span class="hljs-comment"># 编辑 openssl 配置</span><br><span class="hljs-built_in">cp</span> /etc/pki/tls/openssl.cnf .<br>vim openssl.cnf<br><br><span class="hljs-comment"># 主要修改如下</span><br>[req]<br>req_extensions = v3_req <span class="hljs-comment"># 这行默认注释关着的 把注释删掉</span><br><span class="hljs-comment"># 下面配置是新增的</span><br>[ v3_req ]<br>basicConstraints = CA:FALSE<br>keyUsage = nonRepudiation, digitalSignature, keyEncipherment<br>subjectAltName = @alt_names<br>[alt_names]<br>DNS.1 = dashboard.mritd.me<br>DNS.2 = kibana.mritd.me<br><br><span class="hljs-comment"># 生成证书</span><br>openssl genrsa -out ingress-key.pem 2048<br>openssl req -new -key ingress-key.pem -out ingress.csr -subj <span class="hljs-string">&quot;/CN=kube-ingress&quot;</span> -config openssl.cnf<br>openssl x509 -req -<span class="hljs-keyword">in</span> ingress.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out ingress.pem -days 365 -extensions v3_req -extfile openssl.cnf<br></code></pre></td></tr></table></figure><h4 id="3-2、创建-secret"><a href="#3-2、创建-secret" class="headerlink" title="3.2、创建 secret"></a>3.2、创建 secret</h4><p>创建好证书以后，需要将证书内容放到 secret 中，secret 中全部内容需要 base64 编码，然后注意去掉换行符(变成一行)；以下是我的 secret 样例(上一步中 ingress.pem 是证书，ingress-key.pem 是证书的 key)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ingress-secret.yml<br><br>apiVersion: v1<br>data:<br>  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5akNDQWQ2Z0F3SUJBZ0lKQU5TR2dNNnYvSVd5TUEwR0NTcUdTSWIzRFFFQkJRVUFNQkl4RURBT0JnTlYKQkFNTUIydDFZbVV0WTJFd0hoY05NVGN3TXpBME1USTBPRFF5V2hjTk1UZ3dNekEwTVRJME9EUXlXakFYTVJVdwpFd1lEVlFRRERBeHJkV0psTFdsdVozSmxjM013Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM2dkNZRFhGSFpQOHI5Zk5jZXlkV015VVlELzAwQ2xnS0M2WjNpYWZ0QlRDK005TmcrQzloUjhJUE4KWW00cjZOMkw1MmNkcmZvQnBHZXovQVRIT0NJYUhJdlp1K1ZaTzNMZjcxZEVLR09nV21LMTliSVAzaGpSeDZhWQpIeGhEVWNab3ZzYWY1UWJHRnUydEF4L2doMTFMdXpTZWJkT0Y1dUMrWHBhTGVzWWdQUjhFS0cxS0VoRXBLMDFGCmc4MjhUU1g2TXVnVVZmWHZ1OUJRUXExVWw0Q2VMOXhQdVB5T3lMSktzbzNGOEFNUHFlaS9USWpsQVFSdmRLeFYKVUMzMnBtTHRlUFVBb2thNDRPdElmR3BIOTZybmFsMW0rMXp6YkdTemRFSEFaL2k1ZEZDNXJOaUthRmJnL2NBRwppalhlQ01xeGpzT3JLMEM4MDg4a0tjenJZK0JmQWdNQkFBR2pTakJJTUM0R0ExVWRFUVFuTUNXQ0VtUmhjMmhpCmIyRnlaQzV0Y21sMFpDNXRaWUlQYTJsaVlXNWhMbTF5YVhSa0xtMWxNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFAKQkFRREFnWGdNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUNFN1ByRzh6MytyaGJESC8yNGJOeW5OUUNyYVM4NwphODJUUDNxMmsxUUJ1T0doS1pwR1N3SVRhWjNUY0pKMkQ2ZlRxbWJDUzlVeDF2ckYxMWhGTWg4MU9GMkF2MU4vCm5hSU12YlY5cVhYNG16eGNROHNjakVHZ285bnlDSVpuTFM5K2NXejhrOWQ1UHVaejE1TXg4T3g3OWJWVFpkZ0sKaEhCMGJ5UGgvdG9hMkNidnBmWUR4djRBdHlrSVRhSlFzekhnWHZnNXdwSjlySzlxZHd1RHA5T3JTNk03dmNOaQpseWxDTk52T3dNQ0h3emlyc01nQ1FRcVRVamtuNllLWmVsZVY0Mk1yazREVTlVWFFjZ2dEb1FKZEM0aWNwN0sxCkRPTDJURjFVUGN0ODFpNWt4NGYwcUw1aE1sNGhtK1BZRyt2MGIrMjZjOVlud3ROd24xdmMyZVZHCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K<br>  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdXJ3bUExeFIyVC9LL1h6WEhzblZqTWxHQS85TkFwWUNndW1kNG1uN1FVd3ZqUFRZClBndllVZkNEeldKdUsramRpK2RuSGEzNkFhUm5zL3dFeHpnaUdoeUwyYnZsV1R0eTMrOVhSQ2hqb0ZwaXRmV3kKRDk0WTBjZW1tQjhZUTFIR2FMN0duK1VHeGhidHJRTWY0SWRkUzdzMG5tM1RoZWJndmw2V2kzckdJRDBmQkNodApTaElSS1N0TlJZUE52RTBsK2pMb0ZGWDE3N3ZRVUVLdFZKZUFuaS9jVDdqOGpzaXlTcktOeGZBREQ2bm92MHlJCjVRRUViM1NzVlZBdDlxWmk3WGoxQUtKR3VPRHJTSHhxUi9lcTUycGRadnRjODJ4a3MzUkJ3R2Y0dVhSUXVhelkKaW1oVzRQM0FCb28xM2dqS3NZN0RxeXRBdk5QUEpDbk02MlBnWHdJREFRQUJBb0lCQUJtRmIzaVVISWVocFYraAp1VkQyNnQzVUFHSzVlTS82cXBzenpLVk9NTTNLMk5EZUFkUHhFSDZhYlprYmM4MUNoVTBDc21BbkQvMDdlQVRzClU4YmFrQ2FiY2kydTlYaU5uSFNvcEhlblFYNS8rKys4aGJxUGN6cndtMzg4K0xieXJUaFJvcG5sMWxncWVBOW0KVnV2NzlDOU9oYkdGZHh4YzRxaUNDdmRETDJMbVc2bWhpcFRKQnF3bUZsNUhqeVphdGcyMVJ4WUtKZ003S1p6TAplYWU0bTJDR3R0bmNyUktodklaQWxKVmpyRWoxbmVNa3RHODFTT3QyN0FjeDRlSnozbmcwbjlYSmdMMHcwU05ZCmlwd3I5Uk5PaDkxSGFsQ3JlWVB3bDRwajIva0JIdnozMk9Qb2FOSDRQa2JaeTEzcks1bnFrMHBXdUthOEcyY00KLzY4cnQrRUNnWUVBN1NEeHRzRFFBK2JESGdUbi9iOGJZQ3VhQ2N4TDlObHIxd2tuTG56VVRzRnNkTDByUm1uZAp5bWQ4aU95ME04aUVBL0xKb3dPUGRRY240WFdWdS9XbWV5MzFVR2NIeHYvWlVSUlJuNzgvNmdjZUJSNzZJL2FzClIrNVQ1TEMyRmducVd2MzMvdG0rS0gwc0J4dEM3U2tSK3Y2UndVQk1jYnM3c0dUQlR4NVV2TkVDZ1lFQXlaaUcKbDBKY0dzWHhqd1JPQ0FLZytEMlJWQ3RBVmRHbjVMTmVwZUQ4bFNZZ3krZGxQaCt4VnRiY2JCV0E3WWJ4a1BwSAorZHg2Z0p3UWp1aGN3U25uOU9TcXRrZW04ZmhEZUZ2MkNDbXl4ZlMrc1VtMkxqVzM1NE1EK0FjcWtwc0xMTC9GCkIvK1JmcmhqZW5lRi9BaERLalowczJTNW9BR0xRVFk4aXBtM1ZpOENnWUJrZGVHUnNFd3dhdkpjNUcwNHBsODkKdGhzemJYYjhpNlJSWE5KWnNvN3JzcXgxSkxPUnlFWXJldjVhc0JXRUhyNDNRZ1BFNlR3OHMwUmxFMERWZWJRSApXYWdsWVJEOWNPVXJvWFVYUFpvaFZ0U1VETlNpcWQzQk42b1pKL2hzaTlUYXFlQUgrMDNCcjQ0WWtLY2cvSlplCmhMMVJaeUU3eWJ2MjlpaWprVkVMRVFLQmdRQ2ZQRUVqZlNFdmJLYnZKcUZVSm05clpZWkRpNTVYcXpFSXJyM1cKSEs2bVNPV2k2ZlhJYWxRem1hZW1JQjRrZ0hDUzZYNnMyQUJUVWZLcVR0UGxKK3EyUDJDd2RreGgySTNDcGpEaQpKYjIyS3luczg2SlpRY2t2cndjVmhPT1Z4YTIvL1FIdTNXblpSR0FmUGdXeEcvMmhmRDRWN1R2S0xTNEhwb1dQCm5QZDV0UUtCZ0QvNHZENmsyOGxaNDNmUWpPalhkV0ZTNzdyVFZwcXBXMlFoTDdHY0FuSXk5SDEvUWRaOXYxdVEKNFBSanJseEowdzhUYndCeEp3QUtnSzZmRDBXWmZzTlRLSG01V29kZUNPWi85WW13cmpPSkxEaUU3eFFNWFBzNQorMnpVeUFWVjlCaDI4cThSdnMweHplclQ1clRNQ1NGK0Q5NHVJUmkvL3ZUMGt4d05XdFZxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==<br>kind: Secret<br>metadata:<br>  name: ingress-secret<br>  namespace: kube-system<br><span class="hljs-built_in">type</span>: Opaque<br></code></pre></td></tr></table></figure><p><strong>创建完成后 create 一下就可</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ kubectl create -f ingress-secret.yml<br>secret <span class="hljs-string">&quot;ingress-secret&quot;</span> created<br></code></pre></td></tr></table></figure><p><strong>其实这个配置比如证书转码啥的没必要手动去做，可以直接使用下面的命令创建，这里写这么多只是为了把步骤写清晰</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl create secret tls ingress-secret --key cert/ingress-key.pem --cert cert/ingress.pem<br></code></pre></td></tr></table></figure><h4 id="3-3、重新部署-Ingress"><a href="#3-3、重新部署-Ingress" class="headerlink" title="3.3、重新部署 Ingress"></a>3.3、重新部署 Ingress</h4><p>生成完成后需要在 Ingress 中开启 TLS，Ingress 修改后如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: dashboard-kibana-ingress<br>  namespace: kube-system<br>spec:<br>  tls:<br>  - hosts:<br>    - dashboard.mritd.me<br>    - kibana.mritd.me<br>    secretName: ingress-secret<br>  rules:<br>  - host: dashboard.mritd.me<br>    http:<br>      paths:<br>      - backend:<br>          serviceName: kubernetes-dashboard<br>          servicePort: 80<br>  - host: kibana.mritd.me<br>    http:<br>      paths:<br>      - backend:<br>          serviceName: kibana-logging<br>          servicePort: 5601<br></code></pre></td></tr></table></figure><p><strong>注意：一个 Ingress 只能使用一个 secret(secretName 段只能有一个)，也就是说只能用一个证书，更直白的说就是如果你在一个 Ingress 中配置了多个域名，那么使用 TLS 的话必须保证证书支持该 Ingress 下所有域名；并且这个 <code>secretName</code> 一定要放在上面域名列表最后位置，否则会报错 <code>did not find expected key</code> 无法创建；同时上面的 <code>hosts</code> 段下域名必须跟下面的 <code>rules</code> 中完全匹配</strong></p><p><strong>更需要注意一点：之所以这里单独开一段就是因为有大坑；Kubernetes Ingress 默认情况下，当你不配置证书时，会默认给你一个 TLS 证书的，也就是说你 Ingress 中配置错了，比如写了2个 <code>secretName</code>、或者 <code>hosts</code> 段中缺了某个域名，那么对于写了多个 <code>secretName</code> 的情况，所有域名全会走默认证书；对于 <code>hosts</code> 缺了某个域名的情况，缺失的域名将会走默认证书，部署时一定要验证一下证书，不能 “有了就行”；更新 Ingress 证书可能需要等一段时间才会生效</strong></p><p>最后重新部署一下即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  ~ kubectl delete -f dashboard-kibana-ingress.yml<br>ingress <span class="hljs-string">&quot;dashboard-kibana-ingress&quot;</span> deleted<br>➜  ~ kubectl create -f dashboard-kibana-ingress.yml<br>ingress <span class="hljs-string">&quot;dashboard-kibana-ingress&quot;</span> created<br></code></pre></td></tr></table></figure><p><strong>注意：部署 TLS 后 80 端口会自动重定向到 443</strong>，最终访问截图如下</p><p><img src="https://cdn.oss.link/markdown/6o0pj.jpg" alt="Ingress TLS"></p><p><img src="https://cdn.oss.link/markdown/2ch1k.jpg" alt="Ingress TLS Certificate"></p><p><strong>历时 5 个小时鼓捣，到此结束</strong></p>]]></content>
    
    
    <summary type="html">最近发现好多人问 Ingress，同时一直也没去用 Nginx 的 Ingress，索性鼓捣了一把，发现跟原来确实有了点变化，在这里写篇文章记录一下</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>快速部署 kubernetes 高可用集群</title>
    <link href="https://mritd.com/2017/03/03/set-up-kubernetes-ha-cluster-by-kargo/"/>
    <id>https://mritd.com/2017/03/03/set-up-kubernetes-ha-cluster-by-kargo/</id>
    <published>2017-03-03T15:16:04.000Z</published>
    <updated>2017-03-03T15:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鼓捣 kubernetes 好长一段时间了，kubernetes 1.5 后新增了 kubeadm 工具用于快速部署 kubernetes 集群，不过该工具尚未稳定，无法自动部署高可用集群，而且还存在一些 BUG，所以生产环境还无法使用；本文基于 kargo 工具实现一键部署 kubernetes 容器化(可选) 高可用集群</p></blockquote><h3 id="一、基本环境准备"><a href="#一、基本环境准备" class="headerlink" title="一、基本环境准备"></a>一、基本环境准备</h3><p>本文基本环境如下:</p><p><strong>五台虚拟机，基于 vagrant 启动(穷)，vagrant 配置文件参考 <a href="https://github.com/mritd/config/tree/master/vagrant">这里</a></strong></p><table><thead><tr><th>主机地址</th><th>节点角色</th></tr></thead><tbody><tr><td>192.168.1.11</td><td>master</td></tr><tr><td>192.168.1.12</td><td>master</td></tr><tr><td>192.168.1.13</td><td>node</td></tr><tr><td>192.168.1.14</td><td>node</td></tr><tr><td>192.168.1.15</td><td>node</td></tr></tbody></table><p>同时保证部署机器对集群内节点拥有 root 免密登录权限，<strong>由于墙的原因，部署所需镜像已经全部打包到百度云，点击 <a href="https://pan.baidu.com/s/1jHMvMn0">这里</a> 下载，然后进行 load 即可；注意: 直接使用我的 <code>vagrant</code> 文件时，请删除我在 <code>init.sh</code> 脚本里对 docker 设置的本地代理，直接使用可能导致 docker 无法 pull 任何镜像；vagrant 可能需要执行 <code>vagrant plugin install vagrant-hosts</code> 安装插件以支持自动设置 host；如果自己采用其他虚拟机请保证单台虚拟机最低 1.5G 内存，否则会导致安装失败，别问我怎么知道的</strong></p><p><strong>最新更新：经过测试，请使用 pip 安装 ansible，保证 <code>ansible &gt;= 2.2.1</code> &amp;&amp; <code>jinja2 &gt;= 2.8,&lt; 2.9</code>；否则可能出现安装时校验失败问题</strong></p><h3 id="二、搭建集群"><a href="#二、搭建集群" class="headerlink" title="二、搭建集群"></a>二、搭建集群</h3><h4 id="2-1、获取源码"><a href="#2-1、获取源码" class="headerlink" title="2.1、获取源码"></a>2.1、获取源码</h4><p><strong>kargo 是基于 ansible 的 Playbooks 的，其官方推荐的 kargo-cli 目前只适用于各种云平台部署安装，所以我们需要手动使用 Playbooks 部署，当然第一步先把源码搞下来</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/kubernetes-incubator/kargo.git<br></code></pre></td></tr></table></figure><h4 id="2-2、安装-ansible"><a href="#2-2、安装-ansible" class="headerlink" title="2.2、安装 ansible"></a>2.2、安装 ansible</h4><p>既然 kargo 是基于 ansible 的(实际上就是 Playbooks)，那么自然要先安装 ansible，同时下面配置生成会用到 python3，所以也一并安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 python 及 epel</span><br>yum install -y epel-release python-pip python34 python34-pip<br><span class="hljs-comment"># 安装 ansible(必须先安装 epel 源再安装 ansible)</span><br>yum install -y ansible<br></code></pre></td></tr></table></figure><h4 id="2-3、编辑配置文件"><a href="#2-3、编辑配置文件" class="headerlink" title="2.3、编辑配置文件"></a>2.3、编辑配置文件</h4><p><strong>注意：以下配置段中，所有双大括号 <code>&#123; &#123;</code> 、<code>&#125; &#125;</code>，中间全部加了空格，因为双大括号会跟主题模板引擎产生冲突，默认应该是没有的，请自行 vim 替换</strong></p><p>首先根据自己需要更改 kargo 的配置，配置文件位于 <code>inventory/group_vars/k8s-cluster.yml</code>，<strong>最新稳定版本版本(2.1.0) 配置文件还未更名，全部在 <code>inventory/group_vars/all.yml</code> 中，这里采用最新版本的原因是…借着写博客我也看看更新了啥(偷笑…)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim inventory/group_vars/k8s-cluster.yml<br><br><span class="hljs-comment"># 配置文件如下</span><br><span class="hljs-comment"># 启动集群的基础系统</span><br>bootstrap_os: centos<br><br><span class="hljs-comment"># etcd 数据存放位置</span><br>etcd_data_dir: /var/lib/etcd<br><br><span class="hljs-comment"># 二进制文件将要安装的位置</span><br>bin_dir: /usr/local/bin<br><br><span class="hljs-comment"># Kubernetes 配置文件存放目录以及命名空间</span><br>kube_config_dir: /etc/kubernetes<br>kube_script_dir: <span class="hljs-string">&quot;&#123; &#123; bin_dir &#125; &#125;/kubernetes-scripts&quot;</span><br>kube_manifest_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/manifests&quot;</span><br>system_namespace: kube-system<br><br><span class="hljs-comment"># 日志存放位置</span><br>kube_log_dir: <span class="hljs-string">&quot;/var/log/kubernetes&quot;</span><br><br><span class="hljs-comment"># kubernetes 证书存放位置</span><br>kube_cert_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/ssl&quot;</span><br><br><span class="hljs-comment"># token存放位置</span><br>kube_token_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/tokens&quot;</span><br><br><span class="hljs-comment"># basic auth 认证文件存放位置</span><br>kube_users_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/users&quot;</span><br><br><span class="hljs-comment"># 关闭匿名授权</span><br>kube_api_anonymous_auth: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## 使用的 kubernetes 版本</span><br>kube_version: v1.5.3<br><br><span class="hljs-comment"># 安装过程中缓存文件下载位置(最少 1G)</span><br>local_release_dir: <span class="hljs-string">&quot;/tmp/releases&quot;</span><br><span class="hljs-comment"># 重试次数，比如下载失败等情况</span><br>retry_stagger: 5<br><br><span class="hljs-comment"># 证书组</span><br>kube_cert_group: kube-cert<br><br><span class="hljs-comment"># 集群日志等级</span><br>kube_log_level: 2<br><br><span class="hljs-comment"># HTTP 下 api server 密码及用户</span><br>kube_api_pwd: <span class="hljs-string">&quot;changeme&quot;</span><br>kube_users:<br>  kube:<br>    pass: <span class="hljs-string">&quot;&#123; &#123;kube_api_pwd&#125; &#125;&quot;</span><br>    role: admin<br>  root:<br>    pass: <span class="hljs-string">&quot;&#123; &#123;kube_api_pwd&#125; &#125;&quot;</span><br>    role: admin<br><br><span class="hljs-comment"># 网络 CNI 组件 (calico, weave or flannel)</span><br>kube_network_plugin: calico<br><br><span class="hljs-comment"># 服务地址分配</span><br>kube_service_addresses: 10.233.0.0/18<br><br><span class="hljs-comment"># pod 地址分配</span><br>kube_pods_subnet: 10.233.64.0/18<br><br><span class="hljs-comment"># 网络节点大小分配</span><br>kube_network_node_prefix: 24<br><br><span class="hljs-comment"># api server 监听地址及端口</span><br>kube_apiserver_ip: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(1)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>kube_apiserver_port: 6443 <span class="hljs-comment"># (https)</span><br>kube_apiserver_insecure_port: 8080 <span class="hljs-comment"># (http)</span><br><br><span class="hljs-comment"># 默认 dns 后缀</span><br>cluster_name: cluster.local<br><span class="hljs-comment"># Subdomains of DNS domain to be resolved via /etc/resolv.conf for hostnet pods</span><br>ndots: 2<br><span class="hljs-comment"># DNS 组件 dnsmasq_kubedns/kubedns</span><br>dns_mode: dnsmasq_kubedns<br><span class="hljs-comment"># Can be docker_dns, host_resolvconf or none</span><br>resolvconf_mode: docker_dns<br><span class="hljs-comment"># 部署 netchecker 来检测 DNS 和 HTTP 状态</span><br>deploy_netchecker: <span class="hljs-literal">false</span><br><span class="hljs-comment"># skydns service IP 配置</span><br>skydns_server: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(3)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>dns_server: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(2)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>dns_domain: <span class="hljs-string">&quot;&#123; &#123; cluster_name &#125; &#125;&quot;</span><br><br><span class="hljs-comment"># docker 存储目录</span><br>docker_daemon_graph: <span class="hljs-string">&quot;/var/lib/docker&quot;</span><br><br><span class="hljs-comment"># docker 的额外配置参数，默认会在 /etc/systemd/system/docker.service.d/ 创建相关配置，如果节点已经安装了 docker，并且做了自己的配置，比如启用了 devicemapper ，那么要更改这里，并把自己的 devicemapper 参数加到这里，因为 kargo 会复写 systemd service 文件，会导致自己在 service 中配置的参数被清空，最后 docker 将无法启动</span><br><span class="hljs-comment">## A string of extra options to pass to the docker daemon.</span><br><span class="hljs-comment">## This string should be exactly as you wish it to appear.</span><br><span class="hljs-comment">## An obvious use case is allowing insecure-registry access</span><br><span class="hljs-comment">## to self hosted registries like so:</span><br>docker_options: <span class="hljs-string">&quot;--insecure-registry=&#123; &#123; kube_service_addresses &#125; &#125; --graph=&#123; &#123; docker_daemon_graph &#125; &#125; --iptables=false&quot;</span><br>docker_bin_dir: <span class="hljs-string">&quot;/usr/bin&quot;</span><br><br><span class="hljs-comment"># 组件部署方式</span><br><span class="hljs-comment"># Settings for containerized control plane (etcd/kubelet/secrets)</span><br>etcd_deployment_type: docker<br>kubelet_deployment_type: docker<br>cert_management: script<br>vault_deployment_type: docker<br><br><span class="hljs-comment"># K8s image pull policy (imagePullPolicy)</span><br>k8s_image_pull_policy: IfNotPresent<br><br><span class="hljs-comment"># Monitoring apps for k8s</span><br>efk_enabled: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="2-4、生成集群配置"><a href="#2-4、生成集群配置" class="headerlink" title="2.4、生成集群配置"></a>2.4、生成集群配置</h4><p>配置完基本集群参数后，还需要生成一个集群配置文件，用于指定需要在哪几台服务器安装，和指定 master、node 节点分布，以及 etcd 集群等安装在那几台机器上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 定义集群 IP</span><br>IPS=(192.168.1.11 192.168.1.12 192.168.1.13 192.168.1.14 192.168.1.15)<br><span class="hljs-comment"># 生成配置</span><br><span class="hljs-built_in">cd</span> kargo<br>CONFIG_FILE=inventory/inventory.cfg python3 contrib/inventory_builder/inventory.py <span class="hljs-variable">$&#123;IPS[@]&#125;</span><br></code></pre></td></tr></table></figure><p>生成的配置如下，已经很简单了，怎么改动相信猜也能猜到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim inventory/inventory.cfg<br><br>[all]<br>node1    ansible_host=192.168.1.11 ip=192.168.1.11<br>node2    ansible_host=192.168.1.12 ip=192.168.1.12<br>node3    ansible_host=192.168.1.13 ip=192.168.1.13<br>node4    ansible_host=192.168.1.14 ip=192.168.1.14<br>node5    ansible_host=192.168.1.15 ip=192.168.1.15<br><br>[kube-master]<br>node1<br>node2<br><br>[kube-node]<br>node1<br>node2<br>node3<br>node4<br>node5<br><br>[etcd]<br>node1<br>node2<br>node3<br><br>[k8s-cluster:children]<br>kube-node<br>kube-master<br><br>[calico-rr]<br></code></pre></td></tr></table></figure><h4 id="2-5、一键部署"><a href="#2-5、一键部署" class="headerlink" title="2.5、一键部署"></a>2.5、一键部署</h4><p>首先启动 vagrant 虚拟机，<strong>不过注意的是本文提供的 vagrant 文件默认安装了 docker，并配置了 devicemapper 和docker 代理，所以使用时上面的 docker 参数需要替换成自己的，因为默认 kargo 会覆盖 docker 的 service 文件；会导致我已经配置完的 docker devicemapper 参数失效，所以要把自己配置的参数加到配置文件中，如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker_options: <span class="hljs-string">&quot;--insecure-registry=&#123; &#123; kube_service_addresses &#125; &#125; --graph=&#123; &#123; docker_daemon_graph &#125; &#125; --iptables=false --storage-driver=devicemapper --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool --storage-opt dm.use_deferred_removal=true --storage-opt=dm.use_deferred_deletion=true&quot;</span><br></code></pre></td></tr></table></figure><p><strong>这个 vagrant 配置文件自动设置了主机名、host、ssh 密钥，实际生产环境仍需自己处理</strong></p><p><strong>每个虚拟机需要自己登陆并生成 ssh-key(ssh-keygen)，因为 ansible 会用到</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动虚拟机</span><br><span class="hljs-built_in">cd</span> vagrant &amp;&amp; vagrant up<br><span class="hljs-comment"># 走你(没梯子先 load 好镜像)</span><br><span class="hljs-built_in">cd</span> kargo <br><span class="hljs-comment"># 私钥指定的是每个虚拟机 ssh 目录下的私钥</span><br>ansible-playbook -i inventory/inventory.cfg cluster.yml -b -v --private-key=~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>部署成功后截图如下</p><p><img src="https://cdn.oss.link/markdown/ksgtg.jpg" alt="deploy success"></p><p>相关 pod 启动情况如下 </p><p><img src="https://cdn.oss.link/markdown/c7zaz.jpg" alt="deploy pods"></p><p><strong>最后附上我部署是的 kargo 配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动集群的基础系统</span><br>bootstrap_os: centos<br><br><span class="hljs-comment"># etcd 数据存放位置</span><br>etcd_data_dir: /var/lib/etcd<br><br><span class="hljs-comment"># 二进制文件将要安装的位置</span><br>bin_dir: /usr/local/bin<br><br><span class="hljs-comment"># Kubernetes 配置文件存放目录以及命名空间</span><br>kube_config_dir: /etc/kubernetes<br>kube_script_dir: <span class="hljs-string">&quot;&#123; &#123; bin_dir &#125; &#125;/kubernetes-scripts&quot;</span><br>kube_manifest_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/manifests&quot;</span><br>system_namespace: kube-system<br><br><span class="hljs-comment"># 日志存放位置</span><br>kube_log_dir: <span class="hljs-string">&quot;/var/log/kubernetes&quot;</span><br><br><span class="hljs-comment"># kubernetes 证书存放位置</span><br>kube_cert_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/ssl&quot;</span><br><br><span class="hljs-comment"># token存放位置</span><br>kube_token_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/tokens&quot;</span><br><br><span class="hljs-comment"># basic auth 认证文件存放位置</span><br>kube_users_dir: <span class="hljs-string">&quot;&#123; &#123; kube_config_dir &#125; &#125;/users&quot;</span><br><br><span class="hljs-comment"># 关闭匿名授权</span><br>kube_api_anonymous_auth: <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## 使用的 kubernetes 版本</span><br>kube_version: v1.5.3<br><br><span class="hljs-comment"># 安装过程中缓存文件下载位置(最少 1G)</span><br>local_release_dir: <span class="hljs-string">&quot;/tmp/releases&quot;</span><br><span class="hljs-comment"># 重试次数，比如下载失败等情况</span><br>retry_stagger: 5<br><br><span class="hljs-comment"># 证书组</span><br>kube_cert_group: kube-cert<br><br><span class="hljs-comment"># 集群日志等级</span><br>kube_log_level: 2<br><br><span class="hljs-comment"># HTTP 下 api server 密码及用户</span><br>kube_api_pwd: <span class="hljs-string">&quot;test123&quot;</span><br>kube_users:<br>  kube:<br>    pass: <span class="hljs-string">&quot;&#123; &#123;kube_api_pwd&#125; &#125;&quot;</span><br>    role: admin<br>  root:<br>    pass: <span class="hljs-string">&quot;&#123; &#123;kube_api_pwd&#125; &#125;&quot;</span><br>    role: admin<br><br><span class="hljs-comment"># 网络 CNI 组件 (calico, weave or flannel)</span><br>kube_network_plugin: calico<br><br><span class="hljs-comment"># 服务地址分配</span><br>kube_service_addresses: 10.233.0.0/18<br><br><span class="hljs-comment"># pod 地址分配</span><br>kube_pods_subnet: 10.233.64.0/18<br><br><span class="hljs-comment"># 网络节点大小分配</span><br>kube_network_node_prefix: 24<br><br><span class="hljs-comment"># api server 监听地址及端口</span><br>kube_apiserver_ip: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(1)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>kube_apiserver_port: 6443 <span class="hljs-comment"># (https)</span><br>kube_apiserver_insecure_port: 8080 <span class="hljs-comment"># (http)</span><br><br><span class="hljs-comment"># 默认 dns 后缀</span><br>cluster_name: cluster.local<br><span class="hljs-comment"># Subdomains of DNS domain to be resolved via /etc/resolv.conf for hostnet pods</span><br>ndots: 2<br><span class="hljs-comment"># DNS 组件 dnsmasq_kubedns/kubedns</span><br>dns_mode: dnsmasq_kubedns<br><span class="hljs-comment"># Can be docker_dns, host_resolvconf or none</span><br>resolvconf_mode: docker_dns<br><span class="hljs-comment"># 部署 netchecker 来检测 DNS 和 HTTP 状态</span><br>deploy_netchecker: <span class="hljs-literal">true</span> <br><span class="hljs-comment"># skydns service IP 配置</span><br>skydns_server: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(3)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>dns_server: <span class="hljs-string">&quot;&#123; &#123; kube_service_addresses|ipaddr(&#x27;net&#x27;)|ipaddr(2)|ipaddr(&#x27;address&#x27;) &#125; &#125;&quot;</span><br>dns_domain: <span class="hljs-string">&quot;&#123; &#123; cluster_name &#125; &#125;&quot;</span><br><br><span class="hljs-comment"># docker 存储目录</span><br>docker_daemon_graph: <span class="hljs-string">&quot;/var/lib/docker&quot;</span><br><br><span class="hljs-comment"># docker 的额外配置参数，默认会在 /etc/systemd/system/docker.service.d/ 创建相关配置，如果节点已经安装了 docker，并且做了自己的配置，比如启用的 device mapper ，那么要删除/更改这里，防止冲突导致 docker 无法启动</span><br><span class="hljs-comment">## A string of extra options to pass to the docker daemon.</span><br><span class="hljs-comment">## This string should be exactly as you wish it to appear.</span><br><span class="hljs-comment">## An obvious use case is allowing insecure-registry access</span><br><span class="hljs-comment">## to self hosted registries like so:</span><br>docker_options: <span class="hljs-string">&quot;--insecure-registry=&#123; &#123; kube_service_addresses &#125; &#125; --graph=&#123; &#123; docker_daemon_graph &#125; &#125; --iptables=false --storage-driver=devicemapper --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool --storage-opt dm.use_deferred_removal=true --storage-opt=dm.use_deferred_deletion=true&quot;</span><br>docker_bin_dir: <span class="hljs-string">&quot;/usr/bin&quot;</span><br><br><span class="hljs-comment"># 组件部署方式</span><br><span class="hljs-comment"># Settings for containerized control plane (etcd/kubelet/secrets)</span><br>etcd_deployment_type: docker<br>kubelet_deployment_type: docker<br>cert_management: script<br>vault_deployment_type: docker<br><br><span class="hljs-comment"># K8s image pull policy (imagePullPolicy)</span><br>k8s_image_pull_policy: IfNotPresent<br><br><span class="hljs-comment"># Monitoring apps for k8s</span><br>efk_enabled: <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">鼓捣 kubernetes 好长一段时间了，kubernetes 1.5 后新增了 kubeadm 工具用于快速部署 kubernetes 集群，不过该工具尚未稳定，无法自动部署高可用集群，而且还存在一些 BUG，所以生产环境还无法使用；本文基于 kargo 工具实现一键部署 kubernetes 容器化(可选) 高可用集群</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant 使用</title>
    <link href="https://mritd.com/2017/03/01/how-to-use-vagrant/"/>
    <id>https://mritd.com/2017/03/01/how-to-use-vagrant/</id>
    <published>2017-03-01T14:07:59.000Z</published>
    <updated>2017-03-01T14:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vagrant 是一个开源的 基于 ruby 的开源虚拟机管理工具；最近在鼓捣 kubernetes ，常常需要做集群部署测试，由于比较穷 😂😂😂；所以日常测试全部是自己开虚拟机；每次使用 VirtualBox开5个虚拟机很烦，而且为了保证环境干净不受其他因素影响，所以每次测试都是新开…..每次都会有种 WTF 的感觉，所以研究了一下 Vagrant 这个工具，发现很好用，一下记录一下简单的使用</p></blockquote><h3 id="一、Vagrant-介绍"><a href="#一、Vagrant-介绍" class="headerlink" title="一、Vagrant 介绍"></a>一、Vagrant 介绍</h3><p>上面已经简单的说了一下 Vagrant，Vagrant 定位为一个虚拟机管理工具；它能够以脚本化的方式启动、停止、和和删除虚拟机，当然这些手动也没费劲；更重要的是它能够自己定义网络分配、初始化执行的脚本、添加硬盘等各种复杂的动作；最重要的是 Vagrant 提供了类似于 docker image 的 box；Vagrant Box 就是一个完整的虚拟机分发包，可以自己制作也可以从网络下载；并且 Vagrant 开源特性使得各路大神开发了很多 Vagrant 插件方便我们使用，基于以上这些特点，我们可以实现:</p><ul><li>一个脚本定义好虚拟机的数量</li><li>一个脚本定义好虚拟机初始化工作，比如装 docker</li><li>一个脚本完成多台虚拟机网络配置</li><li>一条命令启动、停止、删除多个虚拟机</li><li>更多玩法自行摸索…..</li></ul><h3 id="二、Vagrant-使用"><a href="#二、Vagrant-使用" class="headerlink" title="二、Vagrant 使用"></a>二、Vagrant 使用</h3><h4 id="2-1、Vagrant-安装"><a href="#2-1、Vagrant-安装" class="headerlink" title="2.1、Vagrant 安装"></a>2.1、Vagrant 安装</h4><p>Vagrant 安装极其简单，目前官方已经打包好了各个平台的安装包文件，地址访问 <a href="https://www.vagrantup.com/downloads.html">Vagrant 官方下载地址</a>；截图如下</p><p><img src="https://cdn.oss.link/markdown/m46fa.jpg" alt="vagrant download"></p><p>以下为 CentOS 上的安装命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://releases.hashicorp.com/vagrant/1.9.2/vagrant_1.9.2_x86_64.rpm<br>rpm -ivh vagrant_1.9.2_x86_64.rpm<br></code></pre></td></tr></table></figure><h4 id="2-2、Vagrant-Box-下载"><a href="#2-2、Vagrant-Box-下载" class="headerlink" title="2.2、Vagrant Box 下载"></a>2.2、Vagrant Box 下载</h4><p>装虚拟机大家都不陌生，首先应该搞个系统镜像；同样 Vagrant 也需要先搞一个 Vagrant Box，Vagrant Box 是一个已经预装好操作系统的虚拟机打包文件；根据不同系统可以选择不同的 Vagrant Box，官方维护了一个 Vagrant Box 仓库，地址 <a href="https://atlas.hashicorp.com/boxes/search">点这里</a>，截图如下</p><p><img src="https://cdn.oss.link/markdown/2duz7.jpg" alt="vagrant boxes"></p><p>点击对应的系统后可以看到如下界面</p><p><img src="https://cdn.oss.link/markdown/kiohr.jpg" alt="box detail"></p><p>该页面罗列出了使用不同虚拟机时应当使用扥添加明令；当然执行这些命令后 vagrant 将会从网络下载这个 box 文件并添加到本地 box 仓库；<strong>不过众所周知的原因，这个下载速度会让你怀疑人生，所有简单的办法是执行以下这条命令，然后会显示 box 的实际下载地址；拿到地址以后用梯子先把文件下载下来，然后使用 vagrant 导入也可以(centos7 本地已经有了一下以 ubuntu 为例)</strong></p><p><img src="https://cdn.oss.link/markdown/p36th.jpg" alt="box download url"><br>下载后使用 <code>vagrant box add xxxx.box</code> 即可将 box 导入到本地仓库</p><h4 id="2-3、启动一个虚拟机"><a href="#2-3、启动一个虚拟机" class="headerlink" title="2.3、启动一个虚拟机"></a>2.3、启动一个虚拟机</h4><p>万事俱备只差东风，在上一步执行 <code>vagrant init ubuntu/trusty64; vagrant up --provider virtualbox</code> 命令获取 box 下载地址时，已经在当前目录下生成了一个 Vagrantfile 文件，这个文件其实就是虚拟机配置文件，具体下面再说；box 导入以后先启动一下再说，执行 <code>vagrnat up</code> 即可</p><p>其他几个常用命令如下</p><ul><li><code>vagrant box [list|add|remove]</code> 查看添加删除 box 等</li><li><code>vagrant up</code> 启动虚拟机</li><li><code>vagrant halt</code> 关闭虚拟机</li><li><code>vagrant init</code> 初始化一个指定系统的 Vagrantfile 文件</li><li><code>vagrant destroy</code> 删除虚拟机</li><li><code>vagrant ssh</code> ssh 到虚拟机里</li></ul><p><strong>特别说明一下 ssh 这个命令，一般默认的规范是 <code>vagrant ssh VM_NAME</code> 后，会以 vagrant 用户身份登录到目标虚拟机，如果当前目录的 Vagrantfile 中只有一个虚拟机那么无需指定虚拟机名称(init 后默认就是)；虚拟机内(box 封装时)vagrant这个用户拥有全局免密码 sudo 权限；root 用户一般密码为 vagrant</strong></p><h3 id="三、Vagrantfile"><a href="#三、Vagrantfile" class="headerlink" title="三、Vagrantfile"></a>三、Vagrantfile</h3><blockquote><p>我发现基本国内所有的 Vagrant 教程都是简单的提了一嘴那几个常用命令；包括我上面也写了点，估计可能到这已经被喷了(“妈的那几个命令老子 help 一下就出来了，一看一猜就知道啥意思 用得着你讲？”)；个人觉得 Vagrant 最复杂的是这个配置文件，以下直接上一个目前仓库里的做示例，仓库地址 <a href="https://github.com/mritd/config/tree/master/vagrant">戳这里</a></p></blockquote><p><strong>直接贴 Vagrantfile，以下配置在进行 <code>vagrant up</code> 之前可能需要使用 <code>vagrant plugin install vagrant-host</code> 插件，以支持自动在各节点之间添加 host</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs sh">Vagrant.configure(<span class="hljs-string">&quot;2&quot;</span>) <span class="hljs-keyword">do</span> |config|<br>    <span class="hljs-comment"># 定义虚拟机数量</span><br>    vms = Array(1..5)<br>    <span class="hljs-comment"># 数据盘存放目录</span><br>    <span class="hljs-variable">$data_base_dir</span> = <span class="hljs-string">&quot;/data/vm/disk&quot;</span><br>    vms.each <span class="hljs-keyword">do</span> |i|<br>        config.vm.define <span class="hljs-string">&quot;docker#&#123;i&#125;&quot;</span> <span class="hljs-keyword">do</span> |docker|<br>            <span class="hljs-comment"># 设置虚拟机的Box</span><br>            docker.vm.box = <span class="hljs-string">&quot;centos/7&quot;</span><br>            <span class="hljs-comment"># 不检查 box 更新</span><br>            docker.vm.box_check_update = <span class="hljs-literal">false</span> <br>            <span class="hljs-comment"># 设置虚拟机的主机名</span><br>            docker.vm.hostname=<span class="hljs-string">&quot;docker#&#123;i&#125;.node&quot;</span><br>            <span class="hljs-comment"># 设置虚拟机的IP (wlp2s0 为桥接本机的网卡)</span><br>            docker.vm.network <span class="hljs-string">&quot;public_network&quot;</span>, ip: <span class="hljs-string">&quot;192.168.1.1#&#123;i&#125;&quot;</span>, bridge: <span class="hljs-string">&quot;wlp2s0&quot;</span><br>            <span class="hljs-comment"># 设置主机与虚拟机的共享目录</span><br>            <span class="hljs-comment">#docker.vm.synced_folder &quot;~/Desktop/share&quot;, &quot;/home/vagrant/share&quot;</span><br>            <span class="hljs-comment"># VirtaulBox相关配置</span><br>            docker.vm.provider <span class="hljs-string">&quot;virtualbox&quot;</span> <span class="hljs-keyword">do</span> |v|<br>                <span class="hljs-comment"># 设置虚拟机的名称</span><br>                v.name = <span class="hljs-string">&quot;docker#&#123;i&#125;&quot;</span><br>                <span class="hljs-comment"># 设置虚拟机的内存大小  </span><br>                v.memory = 1536 <br>                <span class="hljs-comment"># 设置虚拟机的CPU个数</span><br>                v.cpus = 1<br>                <span class="hljs-comment"># 增加磁盘</span><br>                docker_disk = <span class="hljs-string">&quot;#<span class="hljs-variable">$data_base_dir</span>/docker-disk#&#123;i&#125;.vdi&quot;</span><br>                data_disk = <span class="hljs-string">&quot;#<span class="hljs-variable">$data_base_dir</span>/data-disk#&#123;i&#125;.vdi&quot;</span><br>                <span class="hljs-comment"># 判断虚拟机启动后</span><br>                <span class="hljs-keyword">if</span> ARGV[0] == <span class="hljs-string">&quot;up&quot;</span><br>                    <span class="hljs-comment"># 如果两个文件都不存在 则创建 SATA 控制器(这里调用的是 Virtual Box 的命令)</span><br>                    <span class="hljs-keyword">if</span> ! File.exist?(docker_disk) &amp;&amp; ! File.exist?(data_disk)<br>                        v.customize [<br>                            <span class="hljs-string">&#x27;storagectl&#x27;</span>, :<span class="hljs-built_in">id</span>,<br>                            <span class="hljs-string">&#x27;--name&#x27;</span>, <span class="hljs-string">&#x27;SATA Controller&#x27;</span>,<br>                            <span class="hljs-string">&#x27;--add&#x27;</span>, <span class="hljs-string">&#x27;sata&#x27;</span>,<br>                            <span class="hljs-string">&#x27;--portcount&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>,<br>                            <span class="hljs-string">&#x27;--controller&#x27;</span>, <span class="hljs-string">&#x27;IntelAhci&#x27;</span>,<br>                            <span class="hljs-string">&#x27;--bootable&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span><br>                        ]<br>                    end<br>                    <span class="hljs-comment"># 创建磁盘文件</span><br>                    <span class="hljs-keyword">if</span> ! File.exist?(docker_disk)<br>                        v.customize [<br>                            <span class="hljs-string">&#x27;createhd&#x27;</span>, <br>                            <span class="hljs-string">&#x27;--filename&#x27;</span>, docker_disk, <br>                            <span class="hljs-string">&#x27;--format&#x27;</span>, <span class="hljs-string">&#x27;VDI&#x27;</span>, <br>                            <span class="hljs-string">&#x27;--size&#x27;</span>, 10 * 1024 <span class="hljs-comment"># 10 GB</span><br>                        ] <br>                    end<br>                    <span class="hljs-keyword">if</span> ! File.exist?(data_disk)<br>                        v.customize [<br>                            <span class="hljs-string">&#x27;createhd&#x27;</span>, <br>                            <span class="hljs-string">&#x27;--filename&#x27;</span>, data_disk, <br>                            <span class="hljs-string">&#x27;--format&#x27;</span>, <span class="hljs-string">&#x27;VDI&#x27;</span>, <br>                            <span class="hljs-string">&#x27;--size&#x27;</span>, 10 * 1024 <span class="hljs-comment"># 10 GB</span><br>                        ] <br>                    end<br>                    <span class="hljs-comment"># 连接到 SATA 控制器</span><br>                    v.customize [<br>                        <span class="hljs-string">&#x27;storageattach&#x27;</span>, :<span class="hljs-built_in">id</span>, <br>                        <span class="hljs-string">&#x27;--storagectl&#x27;</span>, <span class="hljs-string">&#x27;SATA Controller&#x27;</span>, <br>                        <span class="hljs-string">&#x27;--port&#x27;</span>, 1, <span class="hljs-string">&#x27;--device&#x27;</span>, 0, <br>                        <span class="hljs-string">&#x27;--type&#x27;</span>, <span class="hljs-string">&#x27;hdd&#x27;</span>, <span class="hljs-string">&#x27;--medium&#x27;</span>, <br>                        docker_disk<br>                    ]<br>                    v.customize [<br>                        <span class="hljs-string">&#x27;storageattach&#x27;</span>, :<span class="hljs-built_in">id</span>, <br>                        <span class="hljs-string">&#x27;--storagectl&#x27;</span>, <span class="hljs-string">&#x27;SATA Controller&#x27;</span>, <br>                        <span class="hljs-string">&#x27;--port&#x27;</span>, 2, <span class="hljs-string">&#x27;--device&#x27;</span>, 0, <br>                        <span class="hljs-string">&#x27;--type&#x27;</span>, <span class="hljs-string">&#x27;hdd&#x27;</span>, <span class="hljs-string">&#x27;--medium&#x27;</span>, <br>                        data_disk<br>                    ]<br>                end<br>            end<br>            <span class="hljs-comment"># 增加各节点 host 配置</span><br>            config.vm.provision :hosts <span class="hljs-keyword">do</span> |provisioner|<br>                vms.each <span class="hljs-keyword">do</span> |x|<br>                    provisioner.add_host <span class="hljs-string">&quot;192.168.1.1#&#123;x&#125;&quot;</span>, [<span class="hljs-string">&quot;docker#&#123;x&#125;.node&quot;</span>]<br>                end<br>            end<br>            <span class="hljs-comment"># 自定义执行脚本</span><br>            docker.vm.provision <span class="hljs-string">&quot;shell&quot;</span>, path: <span class="hljs-string">&quot;init.sh&quot;</span><br>            <span class="hljs-comment"># 每次开机后重启 network 和 ssh，解决公网网卡不启动问题 </span><br>            docker.vm.provision <span class="hljs-string">&quot;shell&quot;</span>, run: <span class="hljs-string">&quot;always&quot;</span>, inline: &lt;&lt;-<span class="hljs-string">SHELL</span><br><span class="hljs-string">                systemctl restart network</span><br><span class="hljs-string">                systemctl restart sshd</span><br><span class="hljs-string">                echo -e &quot;\033[32mvirtual machine docker#&#123;i&#125; init success!\033[0m&quot;</span><br><span class="hljs-string">            SHELL</span><br>        end<br>    end<br>end<br></code></pre></td></tr></table></figure><p>以上基本都加了注释，所以大致应该很清晰，至于第一行那个 <code>Vagrant.configure(&quot;2&quot;)</code> 代表调用第二版 API，不能改动，其他的可参考注释同时综合仓库中的其他配置文件即可</p><p><strong>Vagrantfile 实质上就是一个 ruby 文件，可以自己在里面定义变量等，可以在里面按照 ruby 的语法进行各种复杂的操作；具体 ruby 语法可以参考相关文档学习一下</strong></p>]]></content>
    
    
    <summary type="html">Vagrant 是一个开源的 基于 ruby 的开源虚拟机管理工具；最近在鼓捣 kubernetes ，常常需要做集群部署测试，由于比较穷 😂😂😂；所以日常测试全部是自己开虚拟机；每次使用 VirtualBox开5个虚拟机很烦，而且为了保证环境干净不受其他因素影响，所以每次测试都是新开.....每次都会有种 WTF 的感觉，所以研究了一下 Vagrant 这个工具，发现很好用，一下记录一下简单的使用</summary>
    
    
    
    <category term="Linux" scheme="https://mritd.com/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何下载 Kubernetes 镜像和 rpm</title>
    <link href="https://mritd.com/2017/02/27/how-to-download-kubernetes-images-and-rpm/"/>
    <id>https://mritd.com/2017/02/27/how-to-download-kubernetes-images-and-rpm/</id>
    <published>2017-02-27T14:02:48.000Z</published>
    <updated>2017-02-27T14:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随着 kubernetes 容器化部署逐渐推进，gcr.io 镜像、kubernetes rpm 下载由于 “伟大的” 墙的原因成为阻碍玩 kubernetes 第一道屏障，以下记录了个人维护的 yum 仓库和 gcr.io 反代仓库使用</p></blockquote><h3 id="一、yum-源"><a href="#一、yum-源" class="headerlink" title="一、yum 源"></a>一、yum 源</h3><p>目前个人维护了一个 kubernetes 的 yum 源，目前 yum 源包含 rpm 如下</p><table><thead><tr><th>rpm 包</th><th>版本</th></tr></thead><tbody><tr><td>etcd</td><td>3.1.0-1.x86_64</td></tr><tr><td>flannel</td><td>0.7.0-1.x86_64</td></tr><tr><td>kubernetes</td><td>1.5.3-1.x86_64</td></tr><tr><td>kubeadm</td><td>1.6.0-0.alpha.0.2074.a092d8e0f95f52.x86_64</td></tr><tr><td>kubectl</td><td>1.5.3-0.x86_64</td></tr><tr><td>kubelet</td><td>1.5.3-0.x86_64</td></tr><tr><td>kubernetes-cni</td><td>0.3.0.1-0.07a8a2.x86_64</td></tr></tbody></table><p>使用方法如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加 yum 源</span><br><span class="hljs-built_in">tee</span> /etc/yum.repos.d/mritd.repo &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[mritd]</span><br><span class="hljs-string">name=Mritd Repository</span><br><span class="hljs-string">baseurl=https://yum.mritd.me/centos/7/x86_64</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://cdn.oss.link/keys/rpm.public.key</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 刷新cache</span><br>yum makecache<br><span class="hljs-comment"># 安装 yum-utils</span><br>yum install -y yum-utils socat <br><span class="hljs-comment"># 下载 rpm 到本地</span><br>yumdownloader kubelet kubectl kubernetes-cni kubeadm<br><span class="hljs-comment"># 安装 rpm</span><br>rpm -ivh kube*.rpm<br></code></pre></td></tr></table></figure><p><strong>所有关于 yum 源地址变更等都将在 <a href="https://yum.mritd.me/">https://yum.mritd.me</a> 页面公告，如出现不能使用请访问此页面查看相关原因</strong>；<strong>如果实在下载过慢可以将 <code>yum.mritd.me</code> 替换成 <code>yumrepo.b0.upaiyun.com</code>，此域名 yum 源在 CDN 上，由于流量有限，请使用 yumdownloader 工具下载到本地分发安装，谢谢</strong></p><h3 id="二、kubernetes-镜像"><a href="#二、kubernetes-镜像" class="headerlink" title="二、kubernetes 镜像"></a>二、kubernetes 镜像</h3><p>关于 kubernetes 镜像下载，一般有三种方式：</p><ul><li>直接从国外服务器 pull 然后 save 出来传到本地</li><li>通过第三方仓库做中转，如 Docker hub</li><li>在本地&#x2F;国外能访问的服务器通过官方 registry 加代理反代 gcr.io</li></ul><p><strong>个人在国外服务器上维护了一个 gcr.io 的反代仓库，使用方式如下</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull gcr.mritd.me/google_containers/kube-apiserver-amd64:v1.5.3<br></code></pre></td></tr></table></figure><p>如果对于 gcr.mritd.me 访问过慢可参考 <a href="https://mritd.me/2017/02/09/gcr.io-registy-proxy/">gcr.io 仓库代理</a> 使用带有梯子的本地私服，如果使用 Docker Hub 等中转可参考 <a href="https://mritd.me/2016/10/29/set-up-kubernetes-cluster-by-kubeadm/#22%E9%95%9C%E5%83%8F%E4%BB%8E%E5%93%AA%E6%9D%A5">kubeadm 搭建 kubernetes 集群</a></p>]]></content>
    
    
    <summary type="html">随着 kubernetes 容器化部署逐渐推进，gcr.io 镜像、kubernetes rpm 下载由于 &quot;伟大的&quot; 墙的原因成为阻碍玩 kubernetes 第一道屏障，以下记录了个人维护的 yum 仓库和 gcr.io 反代仓库使用</summary>
    
    
    
    <category term="Kubernetes" scheme="https://mritd.com/categories/kubernetes/"/>
    
    
    <category term="Linux" scheme="https://mritd.com/tags/linux/"/>
    
    <category term="Docker" scheme="https://mritd.com/tags/docker/"/>
    
    <category term="Kubernetes" scheme="https://mritd.com/tags/kubernetes/"/>
    
  </entry>
  
</feed>
